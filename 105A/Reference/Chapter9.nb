(* Content-type: application/mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 7.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       145,          7]
NotebookDataLength[   2842814,      64465]
NotebookOptionsPosition[   2637807,      58601]
NotebookOutlinePosition[   2764318,      62050]
CellTagsIndexPosition[   2749144,      61543]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell[TextData[{
 "9. Introduction to ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " "
}], "Title",
 FontColor->RGBColor[1, 0, 0],
 CellTags->{"chapter 1", "c:1"}],

Cell[TextData[{
 "\tThis chapter will introduce you to some of the capabilities of ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ". "
}], "Text",
 CellChangeTimes->{3.446334429101976*^9, 3.446594879048793*^9}],

Cell[TextData[{
 "\t The complete software package is very complex, and takes years to master \
in all its glory. But take heart-- you don't need to know everything about \
this software to use it effectively! The basics of ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " are quite straightforward. By the end of ",
 ButtonBox["Sec. 9.2",
  BaseStyle->"Hyperlink",
  ButtonData:>"Sec. 9.2"],
 ", you will know how to use ",
 StyleBox["Mathematica ",
  FontSlant->"Italic"],
 "as a calculator.  In ",
 ButtonBox["Sec. 9.4",
  BaseStyle->"Hyperlink",
  ButtonData:>"Sec. 9.4"],
 ", you will learn how to define variables, and in ",
 ButtonBox["Sec. 9.5",
  BaseStyle->"Hyperlink",
  ButtonData:>"Sec. 9.5"],
 ",  to create and manipulate vectors and matrices (termed lists in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "). You will then learn basic plotting skills, and how to define your own \
functions. Following a quick course in the basics of computer algebra in ",
 ButtonBox["Sec. 9.8",
  BaseStyle->"Hyperlink",
  ButtonData:>"Sec. 9.8"],
 ", you will learn in ",
 ButtonBox["Sec. 9.9",
  BaseStyle->"Hyperlink",
  ButtonData:>"Sec. 9.9"],
 " how to use ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " to take derivatives, make power series expansions, and evaluate integrals. \
Finally, in Secs. ",
 ButtonBox["9.10",
  BaseStyle->"Hyperlink",
  ButtonData:>"Sec. 9.10"],
 " and ",
 ButtonBox["9.11",
  BaseStyle->"Hyperlink",
  ButtonData:>"Sec. 9.11"],
 " you will investigate analytical and numerical methods for the solution of \
algebraic equations, and interpolation and fitting of numerical data."
}], "Text",
 CellChangeTimes->{{3.446594881955727*^9, 3.446594883772212*^9}}],

Cell[TextData[{
 "\t Of course, this only scratches the surface, but it will be enough for us \
to begin work in Chapter ",
 ButtonBox["1",
  BaseStyle->"Hyperlink",
  ButtonData:>{"Chapter1.nb", None}],
 ",  using ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " as an aid in the solution of ordinary differential equations.  Other ",
 StyleBox["Mathematica ",
  FontSlant->"Italic"],
 "techniques are presented in subsequent chapters as they are needed."
}], "Text"],

Cell[TextData[{
 "\t  After you have mastered the relatively straightforward material \
presented in this chapter, you will probably find it useful to refer to the \
",
 StyleBox["Mathematica ",
  FontSlant->"Italic"],
 "documentation for more advanced and comprehensive discussions of the \
software's capabilities, as necessary. Comprehensive documentation is \
provided free with every copy of the ",
 StyleBox["Mathematica ",
  FontSlant->"Italic"],
 "software package (see ",
 ButtonBox["Sec. 9.7",
  BaseStyle->"Hyperlink",
  ButtonData:>"Sec. 9.7"],
 ")."
}], "Text",
 CellChangeTimes->{{3.4463344741547623`*^9, 3.4463345430316668`*^9}}],

Cell[TextData[{
 "\tBefore you begin, a word of advice. When attempting problems from the \
exercises that have a computational component, I suggest that you ",
 StyleBox["keep a pad  and a pencil handy. Many of these problems require \
some setting up,  such as formulating the correct equations to solve, or \
sketching out a programming approach. This sort of work is best done using \
paper and pencil",
  Background->RGBColor[1, 1, 0]],
 ". Only after you know what you want to do should you turn to ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ". "
}], "Text"],

Cell["\<\
A few quiet thoughtful moments spent away from the computer can often \
eliminate hours of wasted effort at the keyboard.\
\>", "Text",
 CellFrame->True,
 TextAlignment->Center,
 TextJustification->0,
 Background->GrayLevel[0.849989]],

Cell[TextData[{
 "\t ",
 StyleBox["Sections of this book can be opened and closed by double-clicking \
on the blue brackets to the right (the ones with the half arrows on the \
bottom.)",
  FontWeight->"Bold"]
}], "Text",
 CellChangeTimes->{3.460504726077821*^9}],

Cell[CellGroupData[{

Cell[TextData[{
 "9.1 Starting ",
 StyleBox["Mathematica",
  FontSlant->"Italic"]
}], "Subtitle",
 CellTags->{"Sec. 9.1", "c:2"}],

Cell[TextData[{
 "The way that you start the  ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " program depends on the type of computer that you use.  For systems running \
Windows, for Macintoshes, or for any other computer with a \"graphical user \
interface\", you start the program by double-clicking the ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " icon.  Under Windows, you will also find the program listed under the \
Start command on the Windows task bar at the lower ",
 "left-hand",
 " side of the screen. For systems with text-based interfaces such as Unix, \
you usually start the program by typing ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " at the prompt. If this doesn't work, read the manual that came with the \
copy of ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " for your computer, or contact your system manager or your teacher."
}], "Text"],

Cell[TextData[{
 "  ",
 StyleBox["In  this book, I will assume that you are working on a computer \
with a graphical user interface, so that the results of calculations appear \
in a Mathematica notebook described below.",
  FontSlant->"Italic"]
}], "Text"],

Cell[TextData[{
 "\tA \"",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " notebook\" appears when you start the program.  This notebook  is where \
you will enter mathematical expressions (or text or figures or anything else \
you wish), where the results of your calculations will be presented, and \
where you will save your results.  Notebooks can contain all sorts of data, \
including mathematical calculations, text, and figures. This chapter is \
itself a ",
 StyleBox["Mathematica ",
  FontSlant->"Italic"],
 "notebook."
}], "Text",
 CellChangeTimes->{{3.458872369860962*^9, 3.4588723925411263`*^9}, {
  3.458906886109014*^9, 3.45890696793686*^9}, {3.458928839994957*^9, 
  3.458928870214181*^9}},
 CellTags->"i:3"],

Cell[TextData[{
 "\tIn order to get ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " to evaluate a mathematical expression, first enter the expression into the \
notebook from the keyboard. For example, let's evaluate 1+1. Click somewhere \
on the notebook to make it active. Then type ",
 StyleBox["1+1",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " into the notebook.  In order to get ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " to evaluate this expression, select the expression, or merely place the \
cursor somewhere within the expression,  and press the Enter key (or \
SHIFT-Return).  (Note that Return, rather than SHIFT-Return, just takes you \
to the next line, where you can continue typing. This can be useful for long \
expressions.) After a moment, ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " will display the result :"
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"1", "+", "1"}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.1"],

Cell[BoxData["2"], "Output",
 CellChangeTimes->{3.4463346302247343`*^9},
 CellTags->"Cell 9.1"]
}, Open  ]],

Cell[TextData[{
 "If you actually evaluate the above expression by selecting it and hitting \
the enter key , you will see that  the  input statement ",
 StyleBox["1+1",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " has now been modified to include ",
 StyleBox["In[1]:=",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 StyleBox[" ",
  FontWeight->"Bold"],
 ", which is ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "'s way of saying that this is the first input statement of this session. \
The result of the evaluation, ",
 StyleBox["2",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ",  is displayed below the input statement, and is labeled by ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " as ",
 StyleBox["Out[1]=",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " , the first output statement of the session.  We will see in Sec. ",
 ButtonBox["9.4.1",
  BaseStyle->"Hyperlink",
  ButtonData:>"c:13"],
 "   ",
 StyleBox["that this labeling allows us to recall previous calculations.",
  Background->RGBColor[1, 1, 0]],
 " "
}], "Text"],

Cell[TextData[{
 "\t",
 StyleBox["The ",
  Background->RGBColor[1, 1, 0]],
 StyleBox["In",
  FontFamily->"Courier",
  FontWeight->"Bold",
  Background->RGBColor[1, 1, 0]],
 StyleBox[" and ",
  Background->RGBColor[1, 1, 0]],
 StyleBox["Out",
  FontFamily->"Courier",
  FontWeight->"Bold",
  Background->RGBColor[1, 1, 0]],
 StyleBox[" labels are usually stripped off when the file is saved to the \
hard disk. This is because the order in which the calculations are performed \
is up to the user.  Whenever a notebook is opened in a new ",
  Background->RGBColor[1, 1, 0]],
 StyleBox["Mathematica",
  FontSlant->"Italic",
  Background->RGBColor[1, 1, 0]],
 StyleBox[" session, new ",
  Background->RGBColor[1, 1, 0]],
 StyleBox["In",
  FontFamily->"Courier",
  FontWeight->"Bold",
  Background->RGBColor[1, 1, 0]],
 StyleBox[" and ",
  Background->RGBColor[1, 1, 0]],
 StyleBox["Out",
  FontFamily->"Courier",
  FontWeight->"Bold",
  Background->RGBColor[1, 1, 0]],
 StyleBox[" labels will be generated each time calculations are evaluated, \
providing the new  order of the evaluations.",
  Background->RGBColor[1, 1, 0]]
}], "Text"],

Cell[TextData[{
 StyleBox["\tOn the right-hand side of the notebook there are brackets that \
group the input and output statements together into ",
  FontVariations->{"Underline"->True}],
 StyleBox["cells",
  FontSlant->"Italic",
  FontVariations->{"Underline"->True}],
 StyleBox[". ",
  FontVariations->{"Underline"->True}],
 " As you can see, there can be cells within cells. For instance, in the \
previous evaluation of ",
 Cell[BoxData[
  FormBox[
   RowBox[{"1", "+", "1"}], TraditionalForm]]],
 " an outer cell groups together the input and output cells. The cell around \
that delineates ",
 ButtonBox["Sec. 9.1",
  BaseStyle->"Hyperlink",
  ButtonData:>"Sec. 9.1"],
 " of this chapter, and the outermost cell is for everything in Chapter ",
 ButtonBox["9",
  BaseStyle->"Hyperlink",
  ButtonData:>{"Chapter9.nb", None}],
 ".  ",
 StyleBox["Cells can be opened and closed by double clicking on the brackets, \
allowing you to display or hide results.",
  Background->RGBColor[1, 1, 0]],
 " There are little marks on some of these brackets, referring to properties \
of the cells,  but they need not concern us at this point. \n\t  ",
 StyleBox["In this book, input cells are also numbered consecutively in the \
upper left-hand corner and hyperlinked,  for ease of reference",
  FontVariations->{"Underline"->True}],
 ". For instance, the above cell is called ",
 ButtonBox["Cell 9.1",
  BaseStyle->"Hyperlink",
  ButtonData:>"Cell 9.1"],
 ".  Cells are labeled in the hardcopy version of the book as well. By \
default, user-created cells do not have these labels. "
}], "Text",
 CellChangeTimes->{{3.4588725135334578`*^9, 3.458872523787629*^9}, {
  3.4588726052925177`*^9, 3.4588726272403297`*^9}, {3.45887267366496*^9, 
  3.458872731225634*^9}, {3.458872770069955*^9, 3.458872779921563*^9}, {
  3.458872843046741*^9, 3.458872845840562*^9}},
 CellTags->"i:4"],

Cell[TextData[{
 "\t Equations or text may sometimes be  typeset in a font that is too small \
to be read easily at the current magnification. You can increase (or \
decrease) the magnification of the notebook under the ",
 StyleBox["Window",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " entry of the main menu (choose ",
 StyleBox["Magnification",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 "), or by choosing a magnification setting from the small window at the \
bottom left side of the notebook. "
}], "Text",
 CellChangeTimes->{{3.45890712186236*^9, 3.458907123234036*^9}},
 CellTags->"i:2"],

Cell[TextData[{
 "\tYou can save your calculation or quit the program by choosing ",
 StyleBox["Save",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " or ",
 StyleBox["Quit",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " in the ",
 StyleBox["File",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " menu. (In the Macintosh OS X system ",
 StyleBox["Quit",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " is found under the ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " menu.)"
}], "Text"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 "9.2 ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " Calculations"
}], "Subtitle",
 CellTags->{"Sec. 9.2", "c:3"}],

Cell["", "Text"],

Cell[CellGroupData[{

Cell["9.2.1 Arithmetic", "Subsubtitle",
 CellTags->"c:4"],

Cell[TextData[{
 "You now know enough to use ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " as a calculator, to evaluate numerical expressions. For example, you can \
do addition, subtraction, and division:"
}], "Text",
 CellChangeTimes->{{3.458872889536948*^9, 3.458872896402473*^9}, {
  3.45890717359905*^9, 3.4589071794493933`*^9}}],

Cell["Addition/subtraction:\t ", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"2.3", "+", "5.4", "-", "8.7"}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.2"],

Cell[BoxData[
 RowBox[{"-", "0.9999999999999991`"}]], "Output"]
}, Open  ]],

Cell["Division:\t ", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"12.5", "/", "2.1"}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.3"],

Cell[BoxData["5.952380952380952`"], "Output"]
}, Open  ]],

Cell[TextData[StyleBox["Multiplication can be performed either using the * \
symbol or just by leaving a space between two numbers:",
 Background->RGBColor[1, 1, 0]]], "Text"],

Cell["Multiplication:\t ", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"3.8", "*", "6.2"}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.4"],

Cell[BoxData["23.56`"], "Output"]
}, Open  ]],

Cell[TextData[{
 "\n",
 StyleBox["\t",
  FontSize->8],
 "                       or\n "
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"3.8", "  ", "6.2"}]], "Input",
 ShowCellTags->True,
 CellChangeTimes->{{3.4589072119889803`*^9, 3.458907218650815*^9}},
 CellTags->"Cell 9.5"],

Cell[BoxData["23.56`"], "Output"]
}, Open  ]],

Cell[TextData[StyleBox["Powers are taken using the ^ symbol:",
 Background->RGBColor[1, 1, 0]]], "Text"],

Cell["Powers:\t ", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"4", "^", "3"}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.6"],

Cell[BoxData["64"], "Output"]
}, Open  ]],

Cell[TextData[StyleBox["In order to determine the order of calculation, use \
parentheses ( ):",
 Background->RGBColor[1, 1, 0]]], "Text",
 CellChangeTimes->{{3.4588729101825743`*^9, 3.458872912011887*^9}}],

Cell["Parentheses:\t", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"2", 
  RowBox[{"(", 
   RowBox[{"3", "+", "4"}], ")"}]}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.7"],

Cell[BoxData["14"], "Output"]
}, Open  ]],

Cell[TextData[{
 "Note that ONLY round brackets may be used as parentheses to determine the \
order of a calculation. ",
 StyleBox["Square ",
  Background->RGBColor[1, 1, 0]],
 StyleBox["[]",
  FontFamily->"Courier",
  FontWeight->"Bold",
  Background->RGBColor[1, 1, 0]],
 StyleBox[" and curly ",
  Background->RGBColor[1, 1, 0]],
 StyleBox["{}",
  FontFamily->"Courier",
  FontWeight->"Bold",
  Background->RGBColor[1, 1, 0]],
 StyleBox[" brackets are reserved for other uses",
  Background->RGBColor[1, 1, 0]],
 ". These facts are summarized in Table ",
 ButtonBox["9.1",
  BaseStyle->"Hyperlink",
  ButtonData:>"Table 9.1"],
 "."
}], "Text",
 CellTags->"i:115"],

Cell[TextData[Cell[BoxData[GridBox[{
   {
    RowBox[{
     StyleBox[
      RowBox[{
      "Table", " ", "9.1", " ", "Arithmetic", " ", "Operations", " ", "in", 
       " ", 
       StyleBox["Mathematica",
        FontSlant->"Italic"]}],
      FontSize->9], "\[IndentingNewLine]"}]},
   {
    StyleBox[GridBox[{
       {
        StyleBox[
         RowBox[{"x", "+", "y", "+", "z"}],
         FontFamily->"Courier",
         FontWeight->"Bold"], "Add"},
       {
        StyleBox[
         RowBox[{"-", "x"}],
         FontFamily->"Courier",
         FontWeight->"Bold"], "Subtract"},
       {
        StyleBox[
         RowBox[{"x", "/", "y"}],
         FontFamily->"Courier",
         FontWeight->"Bold"], "Divide"},
       {
        StyleBox[
         RowBox[{"x", "^", "y"}],
         FontFamily->"Courier",
         FontWeight->"Bold"], 
        RowBox[{"Raise", " ", "to", " ", "a", " ", "power"}]},
       {
        RowBox[{
         StyleBox["x",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         StyleBox[" ",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         StyleBox["y",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         StyleBox[" ",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         StyleBox["z",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         StyleBox[" ",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         StyleBox["or",
          FontFamily->"Times",
          FontWeight->"Plain"], 
         StyleBox[" ",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         StyleBox["x",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         StyleBox["*",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         StyleBox["y",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         StyleBox["*",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         StyleBox["z",
          FontFamily->"Courier",
          FontWeight->"Bold"]}], "Multiply"},
       {
        StyleBox[
         RowBox[{
          RowBox[{"(", 
           RowBox[{"x", "+", "y"}], ")"}], "z"}],
         FontFamily->"Courier",
         FontWeight->"Bold"], 
        RowBox[{
        "Order", " ", "operations", " ", "with", " ", "parentheses"}]}
      },
      GridBoxAlignment->{
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[2.6599999999999997`]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}],
     FontFamily->"Times"]}
  }]]]], "Text",
 CellFrame->True,
 Background->GrayLevel[0.849989],
 CellTags->"Table 9.1"]
}, Closed]],

Cell[CellGroupData[{

Cell["9.2.2 Exact vs. Approximate Results", "Subsubtitle",
 CellTags->"c:5"],

Cell[TextData[{
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " can give exact results for numerical calculations, without roundoff error. \
For example,",
 StyleBox[" it will compute the sum of two fractions exactly",
  Background->RGBColor[1, 1, 0]],
 ":"
}], "Text",
 CellTags->"i:16"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"1", "/", "3"}], " ", "+", " ", 
  RowBox[{"2", "/", "7"}]}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.8"],

Cell[BoxData[
 FractionBox["13", "21"]], "Output"]
}, Open  ]],

Cell[TextData[{
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " can compute very large or very small numbers exactly:  "
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"12", "^", "22"}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.9"],

Cell[BoxData["552061438912436417593344"], "Output",
 CellChangeTimes->{3.446334721992281*^9},
 CellTags->"Cell 9.9"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"53", "^", "4"}], "/", 
  RowBox[{"89", "^", "12"}]}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.10"],

Cell[BoxData[
 FractionBox["7890481", "246990403565262140303521"]], "Output",
 CellChangeTimes->{3.4463347267666893`*^9},
 CellTags->"Cell 9.10"]
}, Open  ]],

Cell[TextData[{
 "Numbers this large or small tend to be incomprehensible.",
 StyleBox[" You can tell ",
  Background->RGBColor[1, 1, 0]],
 StyleBox["Mathematica",
  FontSlant->"Italic",
  Background->RGBColor[1, 1, 0]],
 StyleBox[" to give you an approximate numerical result in scientific \
notation by adding ",
  Background->RGBColor[1, 1, 0]],
 StyleBox["//N",
  FontFamily->"Courier",
  FontWeight->"Bold",
  Background->RGBColor[1, 1, 0]],
 " at the end of the line:"
}], "Text",
 CellTags->"i:17"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"12", "^", "22"}], " ", "//", "N"}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.11"],

Cell[BoxData["5.520614389124364`*^23"], "Output",
 CellChangeTimes->{3.446334741198894*^9},
 CellTags->"Cell 9.11"]
}, Open  ]],

Cell[TextData[{
 "(We will discuss the meaning of the symbol  ",
 StyleBox["//N",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " in Sec. ",
 ButtonBox["9.8.4",
  BaseStyle->"Hyperlink",
  ButtonData:>"c:44"],
 "  )."
}], "Text"],

Cell[TextData[{
 "\tWhen you input an integer into ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ", for example, ",
 StyleBox["731",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ", ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " assumes that it is an exact number and will try to do all calculations \
involving it exactly.",
 StyleBox[" However, if you type a number like ",
  FontVariations->{"Underline"->True}],
 StyleBox["731.0",
  FontFamily->"Courier",
  FontWeight->"Bold",
  FontVariations->{"Underline"->True}],
 StyleBox[", ",
  FontVariations->{"Underline"->True}],
 StyleBox["Mathematica",
  FontSlant->"Italic",
  FontVariations->{"Underline"->True}],
 StyleBox[" assumes that this number is accurate only up to a fixed number of \
significant figures, called the machine precision",
  FontVariations->{"Underline"->True}],
 ". The machine precision is usually around 16, depending on the computer \
being used. ",
 StyleBox["You can check the precision of your system by typing ",
  Background->RGBColor[1, 1, 0]],
 StyleBox["$MachinePrecision",
  FontFamily->"Courier",
  FontWeight->"Bold",
  Background->RGBColor[1, 1, 0]],
 StyleBox[", and hitting Enter or Shift-return. ",
  Background->RGBColor[1, 1, 0]],
 " (A word on the meaning of the term significant figures: For a number such \
as 0.0731, the number of significant figures is the number of digits \
appearing to the right of the zeros , in this case 3. For a number like \
731.0, the number of significant figures is 4.  For computers with a machine \
precision of 16, when either 0.0731 or 731.0 is entered, ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " assumes the number is accurate to 16 significant figures. This means that \
in all calculations involving these numbers, ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " will add the appropriate number of zeros on the right-hand side until each \
number has 16 significant figures, and then will perform all calculations by \
rounding off the result to 16 figures. )"
}], "Text",
 CellTags->"i:5"],

Cell[TextData[{
 "\t",
 StyleBox[" If you mix an exact number like ",
  Background->RGBColor[1, 1, 0]],
 StyleBox["2/7",
  FontFamily->"Courier",
  FontWeight->"Bold",
  Background->RGBColor[1, 1, 0]],
 StyleBox[" with an inexact number like ",
  Background->RGBColor[1, 1, 0]],
 StyleBox["0.1",
  FontFamily->"Courier",
  FontWeight->"Bold",
  Background->RGBColor[1, 1, 0]],
 StyleBox[" in a calculation,  ",
  Background->RGBColor[1, 1, 0]],
 StyleBox["Mathematica",
  FontSlant->"Italic",
  Background->RGBColor[1, 1, 0]],
 StyleBox[" will round off the calculation to the machine precision",
  Background->RGBColor[1, 1, 0]],
 ", and furthermore will ",
 StyleBox["only display 6 significant figures of the result:",
  FontVariations->{"Underline"->True}]
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"2", "/", "7"}], " ", "+", " ", "0.1"}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.12"],

Cell[BoxData["0.3857142857142857`"], "Output"]
}, Open  ]],

Cell[TextData[{
 "(To view more than six significant figures in this result, see Sec. ",
 ButtonBox["9.2.6",
  BaseStyle->"Hyperlink",
  ButtonData:>"c:9"],
 ".) Although only six significant figures are being displayed, rest assured \
that the calculation is accurate up to the full machine precision. "
}], "Text"]
}, Closed]],

Cell[CellGroupData[{

Cell["9.2.3 Some Intrinsic Functions", "Subsubtitle",
 CellTags->"c:6"],

Cell[TextData[{
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " has a huge library of ",
 StyleBox["pre-defined functions (termed ",
  Background->RGBColor[1, 1, 0]],
 StyleBox["intrinsic",
  FontSlant->"Italic",
  Background->RGBColor[1, 1, 0]],
 StyleBox[" functions).",
  Background->RGBColor[1, 1, 0]],
 "  A few of the more commonly used  intrinsic functions are shown in Table \
",
 ButtonBox["9.2",
  BaseStyle->"Hyperlink",
  ButtonData:>"Table 9.2"],
 ". "
}], "Text",
 CellTags->"i:18"],

Cell[TextData[{
 Cell[BoxData[GridBox[{
    {
     RowBox[{
      StyleBox[
       RowBox[{
       "Table", "9.2", " ", "Some", " ", "Intrinsic", " ", "Functions"}],
       FontSize->9], "\[IndentingNewLine]"}]},
    {GridBox[{
       {
        StyleBox[
         RowBox[{
          StyleBox["Sqrt",
           FontFamily->"Courier"], 
          StyleBox["[",
           FontFamily->"Courier"], 
          StyleBox["x",
           FontFamily->"Times"], 
          StyleBox["]",
           FontFamily->"Times"]}],
         FontWeight->"Bold"], 
        StyleBox[
         SqrtBox[
          StyleBox["x",
           FontFamily->"Times",
           FontSlant->"Italic"]],
         FontFamily->"Times"]},
       {
        StyleBox[
         RowBox[{"Exp", "[", "x", "]"}],
         FontFamily->"Courier",
         FontWeight->"Bold"], 
        StyleBox[
         SuperscriptBox["\[ExponentialE]", 
          StyleBox["x",
           FontSlant->"Italic"]],
         FontFamily->"Times"]},
       {
        StyleBox[
         RowBox[{"Log", "[", "x", "]"}],
         FontFamily->"Courier",
         FontWeight->"Bold"], 
        RowBox[{
         StyleBox["ln",
          FontFamily->"Times"], 
         StyleBox[" ",
          FontFamily->"Times"], 
         StyleBox["x",
          FontFamily->"Times",
          FontSlant->"Italic"], 
         StyleBox["  ",
          FontFamily->"Courier"], 
         StyleBox["or",
          FontFamily->"Times"], 
         StyleBox[
          FormBox[
           StyleBox[
            RowBox[{
             SubscriptBox["log", "e"], 
             StyleBox["x",
              FontSlant->"Italic"]}],
            FontFamily->"Times"],
           TraditionalForm],
          FontFamily->"Times"]}]},
       {
        StyleBox[
         RowBox[{"Log", "[", 
          RowBox[{"b", ",", "x"}], "]"}],
         FontFamily->"Courier",
         FontWeight->"Bold"], 
        StyleBox[
         FormBox[
          StyleBox[
           RowBox[{
            SubscriptBox["log", "b"], "x"}],
           FontFamily->"Times"],
          TraditionalForm],
         FontFamily->"Times"]},
       {
        StyleBox[
         RowBox[{
          StyleBox[
           RowBox[{"Sin", "[", "x", "]"}],
           FontWeight->"Bold"], ",", 
          StyleBox[
           RowBox[{"Cos", "[", "x", "]"}],
           FontWeight->"Bold"], ",", 
          StyleBox[
           RowBox[{"Tan", "[", "x", "]"}],
           FontWeight->"Bold"]}],
         FontFamily->"Courier"], 
        StyleBox[
         RowBox[{"Trigonometric", " ", "functions", " ", 
          RowBox[{"(", 
           RowBox[{"arguments", " ", "in", " ", "radians"}], ")"}]}],
         FontFamily->"Times"]},
       {
        StyleBox[
         RowBox[{
          StyleBox[
           RowBox[{"ArcSin", "[", "x", "]"}],
           FontWeight->"Bold"], ",", " ", 
          StyleBox[
           RowBox[{"ArcCos", "[", "x", "]"}],
           FontWeight->"Bold"], ",", " ", 
          StyleBox[
           RowBox[{"ArcTan", "[", "x", "]"}],
           FontWeight->"Bold"]}],
         FontFamily->"Courier"], 
        StyleBox[
         RowBox[{"Inverse", " ", "trigonometric", " ", "functions"}],
         FontFamily->"Times"]},
       {
        StyleBox[
         RowBox[{"n", "!"}],
         FontFamily->"Courier",
         FontWeight->"Bold"], 
        StyleBox[
         RowBox[{"Factorial", " ", "function"}],
         FontFamily->"Times"]},
       {
        StyleBox[
         RowBox[{"Abs", "[", "x", "]"}],
         FontFamily->"Courier",
         FontWeight->"Bold"], 
        RowBox[{
         StyleBox["|",
          FontFamily->"Times"], Cell[TextData[StyleBox["x",
          FontFamily->"Times",
          FontSlant->"Italic"]]], 
         StyleBox["|",
          FontFamily->"Times"]}]},
       {
        StyleBox[
         RowBox[{"Round", "[", "x", "]"}],
         FontFamily->"Courier",
         FontWeight->"Bold"], 
        StyleBox[
         RowBox[{"Closest", " ", "integer", " ", "to", " ", 
          StyleBox["x",
           FontSlant->"Italic"]}],
         FontFamily->"Times"]},
       {
        StyleBox[
         RowBox[{"Random", "[", "]"}],
         FontFamily->"Courier",
         FontWeight->"Bold"], 
        StyleBox[
         RowBox[{"Pseudo", "-", 
          RowBox[{
          "random", " ", "real", " ", "number", " ", "in", " ", "the", " ", 
           RowBox[{"range", " ", "[", 
            RowBox[{"0", ",", "1"}], "]"}]}]}],
         FontFamily->"Times"]}
      },
      GridBoxAlignment->{
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[2.6599999999999997`]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}]}
   }]]],
 StyleBox["   ",
  FontFamily->"Courier"]
}], "Text",
 CellFrame->True,
 Background->GrayLevel[0.849989],
 CellTags->{"i:96", "Table 9.2"}],

Cell[TextData[{
 StyleBox["\n",
  FontSize->9],
 "Note that the names of ",
 StyleBox["all intrinsic functions",
  FontSlant->"Italic"],
 " start with a ",
 StyleBox["capital letter",
  Background->RGBColor[1, 1, 0]],
 ". ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " is ",
 StyleBox["case-sensitive",
  FontSlant->"Italic"],
 ", so ",
 StyleBox["cos[x]",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " is not the same as ",
 StyleBox["Cos[x]",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ". ",
 StyleBox[" Also, note that ",
  Background->RGBColor[1, 1, 0]],
 StyleBox["only ",
  FontSlant->"Italic",
  Background->RGBColor[1, 1, 0]],
 StyleBox["square brackets are used to enclose the arguments of the \
functions,",
  Background->RGBColor[1, 1, 0]],
 " so ",
 StyleBox["Cos(3)",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " does not mean the Cosine of 3. "
}], "Text"],

Cell[TextData[StyleBox["These two points are very important, and are the \
reason for a good fraction of the mistakes made by novice Mathematica users. ",
 FontWeight->"Bold",
 FontSlant->"Italic"]], "Text"],

Cell[TextData[Cell[BoxData[GridBox[{
   {
    RowBox[{
     StyleBox[
      RowBox[{
      "Two", " ", "Important", " ", "Points", " ", "Concerning", " ", 
       StyleBox["Mathematica",
        FontSlant->"Italic"], " ", "Functions"}],
      FontSize->9], "\[IndentingNewLine]"}]},
   {GridBox[{
      {
       RowBox[{
        StyleBox["\[Bullet]",
         FontFamily->"Symbol"], 
        StyleBox[" ",
         FontFamily->"Arial"], 
        StyleBox["The",
         FontFamily->"Times"], 
        StyleBox[" ",
         FontFamily->"Times"], 
        StyleBox["arguments",
         FontFamily->"Times"], 
        StyleBox[" ",
         FontFamily->"Times"], 
        StyleBox["of",
         FontFamily->"Times"], 
        StyleBox[" ",
         FontFamily->"Times"], 
        StyleBox["all",
         FontFamily->"Times"], 
        StyleBox[" ",
         FontFamily->"Times"], 
        StyleBox["Mathematica",
         FontFamily->"Times",
         FontSlant->"Italic"], 
        StyleBox[" ",
         FontFamily->"Times",
         FontSlant->"Italic"], 
        StyleBox["functions",
         FontFamily->"Times"], 
        StyleBox[" ",
         FontFamily->"Times"], 
        StyleBox["are",
         FontFamily->"Times"], 
        StyleBox[" ",
         FontFamily->"Times"], 
        StyleBox["enclosed",
         FontFamily->"Times"], 
        StyleBox[" ",
         FontFamily->"Times"], 
        StyleBox["in",
         FontFamily->"Times"], 
        StyleBox[" ",
         FontFamily->"Times"], 
        StyleBox["square",
         FontFamily->"Times",
         FontSlant->"Italic"], 
        StyleBox[" ",
         FontFamily->"Times",
         FontSlant->"Italic"], 
        StyleBox[
         RowBox[{
          StyleBox["brackets",
           FontSlant->"Italic"], "."}],
         FontFamily->"Times"]}]},
      {
       RowBox[{
        StyleBox["\[Bullet]",
         FontFamily->"Symbol"], 
        StyleBox[" ",
         FontFamily->"Arial"], 
        StyleBox["The",
         FontFamily->"Times"], 
        StyleBox[" ",
         FontFamily->"Times"], 
        StyleBox["names",
         FontFamily->"Times"], 
        StyleBox[" ",
         FontFamily->"Times"], 
        StyleBox["of",
         FontFamily->"Times"], 
        StyleBox[" ",
         FontFamily->"Times"], 
        StyleBox["intrinsic",
         FontFamily->"Times"], 
        StyleBox[" ",
         FontFamily->"Times"], 
        StyleBox["Mathematica",
         FontFamily->"Times",
         FontSlant->"Italic"], 
        StyleBox[" ",
         FontFamily->"Times",
         FontSlant->"Italic"], 
        StyleBox["functions",
         FontFamily->"Times"], 
        StyleBox[" ",
         FontFamily->"Times"], 
        StyleBox["begin",
         FontFamily->"Times"], 
        StyleBox[" ",
         FontFamily->"Times"], 
        StyleBox["with",
         FontFamily->"Times"], 
        StyleBox[" ",
         FontFamily->"Times"], 
        StyleBox["capital",
         FontFamily->"Times",
         FontSlant->"Italic"], 
        StyleBox[" ",
         FontFamily->"Times",
         FontSlant->"Italic"], 
        StyleBox[
         RowBox[{
          StyleBox["letters",
           FontSlant->"Italic"], "."}],
         FontFamily->"Times"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]}
  }]]]], "Text",
 CellFrame->True,
 Background->GrayLevel[0.849989]]
}, Closed]],

Cell[CellGroupData[{

Cell["9.2.4 Special Numbers", "Subsubtitle",
 CellTags->"c:7"],

Cell[TextData[{
 "In addition to the library of intrinsic functions, ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " also defines certain special numbers. Some of these are given in Table ",
 ButtonBox["9.3",
  BaseStyle->"Hyperlink",
  ButtonData:>"Table 9.3"],
 "."
}], "Text"],

Cell[TextData[Cell[BoxData[GridBox[{
   {
    RowBox[{
     StyleBox[
      RowBox[{"Table", "9.3", " ", "Some", " ", "Special", " ", "Numbers"}],
      FontSize->9], "\[IndentingNewLine]"}]},
   {GridBox[{
      {
       StyleBox["Pi",
        FontWeight->"Bold"], 
       StyleBox[Cell[TextData[{
         StyleBox["\[Pi]",
          FontFamily->"Times"],
         " (",
         StyleBox["3.14159...",
          FontFamily->"Times"],
         ")"
        }]],
        FontFamily->"Times"]},
      {
       StyleBox["E",
        FontWeight->"Bold"], 
       StyleBox[
        RowBox[{"\[ExponentialE]", " ", 
         RowBox[{"(", 
          RowBox[{"2.71828", "..."}], ")"}]}],
        FontFamily->"Times"]},
      {
       StyleBox["I",
        FontWeight->"Bold"], 
       StyleBox[
        RowBox[{"\[ImaginaryI]", "   ", Cell[TextData[{
          "(",
          Cell[BoxData[
           FormBox[
            SqrtBox[
             StyleBox[
              RowBox[{"-", "1"}],
              FontFamily->"Times"]], TraditionalForm]]],
          ")"
         }]]}],
        FontFamily->"Times"]},
      {
       StyleBox["Infinity",
        FontWeight->"Bold"], 
       StyleBox["\[Infinity]",
        FontFamily->"Times"]},
      {
       StyleBox["Undefined",
        FontWeight->"Bold"], 
       StyleBox[
        RowBox[{"an", " ", "undefined", " ", "quantity"}],
        FontFamily->"Times"]},
      {
       StyleBox["Degree",
        FontWeight->"Bold"], 
       StyleBox[
        RowBox[{Cell[TextData[{
          StyleBox["\[Pi]",
           FontFamily->"Times"],
          "/",
          StyleBox["180",
           FontFamily->"Times"]
         }]], "  ", 
         RowBox[{"(", 
          RowBox[{
          "degree", " ", "to", " ", "radian", " ", "conversion", " ", 
           "factor"}], ")"}]}],
        FontFamily->"Times"]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[2.6599999999999997`]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}]}
  }]]]], "Text",
 CellFrame->True,
 CellChangeTimes->{{3.503084313757902*^9, 3.503084325223989*^9}, {
  3.503084368291936*^9, 3.5030843806788054`*^9}},
 Background->GrayLevel[0.849989],
 CellTags->"Table 9.3"],

Cell["\<\
Like the intrinsic functions, these special numbers  are always capitalized. \
\
\>", "Text"],

Cell[TextData[{
 "The following examples show how ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "'s intrinsic functions and special numbers can be used in numerical \
calculations.\n(1) Find the sine of a 45-degree angle:"
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Sin", "[", 
  RowBox[{"45", " ", "Degree"}], "]"}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.13"],

Cell[BoxData[
 FractionBox["1", 
  SqrtBox["2"]]], "Output",
 CellChangeTimes->{3.4463348674945374`*^9},
 CellTags->"Cell 9.13"]
}, Open  ]],

Cell[TextData[{
 "The result is an exact expression. To get a numerical result, you can \
either type ",
 StyleBox["Sin[45.0 Degree]",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ", or use the",
 Cell[BoxData[
  FormBox[
   StyleBox[
    RowBox[{" ", 
     StyleBox[
      RowBox[{"//", 
       StyleBox["N",
        FontSlant->"Plain"], " "}],
      FontFamily->"Courier"]}],
    FontWeight->"Bold"], TraditionalForm]]],
 " notation: "
}], "Text",
 CellChangeTimes->{{3.4486337833771553`*^9, 3.44863378372819*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Sin", "[", 
   RowBox[{"45", " ", "Degree"}], "]"}], " ", "//", "N"}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.14"],

Cell[BoxData["0.7071067811865475`"], "Output",
 CellChangeTimes->{3.4463348713515587`*^9},
 CellTags->"Cell 9.14"]
}, Open  ]],

Cell["(2) Find the  inverse hyperbolic tangent of 1.2", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ArcTanh", "[", "1.2", "]"}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.15"],

Cell[BoxData[
 RowBox[{"1.1989476363991853`", "\[InvisibleSpace]", "-", 
  RowBox[{"1.5707963267948966`", " ", "\[ImaginaryI]"}]}]], "Output",
 CellChangeTimes->{3.44633488176782*^9},
 CellTags->"Cell 9.15"]
}, Open  ]],

Cell[TextData[{
 "The result is a complex rather than a real number, with both a real and an \
imaginary part.  ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "'s ability to handle complex numbers is outlined in the next section."
}], "Text"]
}, Open  ]],

Cell[CellGroupData[{

Cell["9.2.5 Complex Arithmetic", "Subsubtitle",
 CellTags->"c:8"],

Cell[TextData[{
 "Many intrinsic functions in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " work equally well with real or with complex numbers ",
 Cell[BoxData[
  FormBox[
   RowBox[{"z", " ", "=", " ", 
    RowBox[{"x", " ", "+", " ", 
     RowBox[{"\[ImaginaryI]", " ", "y"}]}]}], TraditionalForm]]],
 ".  For example, the power, trigonometric, exponential and logarithmic \
functions discussed previously work with complex as well as real arguments. \
Of course, addition, subtraction, multiplication and division all work with \
complex numbers."
}], "Text",
 CellTags->"i:14"],

Cell[TextData[{
 "\tIn addition to these intrinsic functions, several intrinsic functions are \
designed specifically for complex numbers (see Table ",
 ButtonBox["9.4",
  BaseStyle->"Hyperlink",
  ButtonData:>"Table 9.4"],
 ")."
}], "Text"],

Cell[TextData[Cell[BoxData[GridBox[{
   {
    RowBox[{
     StyleBox["Table",
      FontSize->9], 
     StyleBox[" ",
      FontSize->9], 
     StyleBox["9.4",
      FontSize->9], 
     StyleBox[" ",
      FontSize->9], 
     StyleBox["Some",
      FontSize->9], 
     StyleBox[" ",
      FontSize->9], 
     StyleBox["Intrinsic",
      FontSize->9], 
     StyleBox[" ",
      FontSize->9], 
     StyleBox["Functions",
      FontSize->9], 
     StyleBox[" ",
      FontSize->9], 
     StyleBox["for",
      FontSize->9], 
     StyleBox[" ",
      FontSize->9], 
     StyleBox["Complex",
      FontSize->9], 
     StyleBox[" ",
      FontSize->9], 
     StyleBox["Numbers",
      FontSize->9], 
     StyleBox[" ",
      FontSize->9], Cell[TextData[Cell[BoxData[
      RowBox[{" ", Cell[TextData[Cell[BoxData[
        FormBox[
         RowBox[{"z", "=", 
          RowBox[{"x", " ", "+", " ", 
           RowBox[{"\[ImaginaryI]", " ", "y"}]}]}], TraditionalForm]],
        FontFamily->"Times",
        FontSize->10]]]}]]]]], 
     StyleBox[" ",
      FontSize->9], Cell[""]}]},
   {
    RowBox[{
     StyleBox["\n",
      FontSlant->"Italic"], 
     StyleBox[GridBox[{
        {
         StyleBox[
          RowBox[{"Re", "[", "z", "]"}],
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         RowBox[{"Real", " ", "part", " ", "of", "  ", 
          RowBox[{
           StyleBox["z",
            FontSlant->"Italic"], ":", " ", 
           RowBox[{
            StyleBox["x",
             FontSlant->"Italic"], Cell[""]}]}]}]},
        {
         StyleBox[
          RowBox[{"Im", "[", "z", "]"}],
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         RowBox[{"Imaginary", " ", "part", " ", "of", " ", 
          RowBox[{
           StyleBox["z",
            FontSlant->"Italic"], ":", " ", 
           RowBox[{
            StyleBox["y",
             FontSlant->"Italic"], Cell[""]}]}]}]},
        {
         StyleBox[
          RowBox[{"Abs", "[", "z", "]"}],
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         RowBox[{"Absolute", " ", "value", " ", "of", " ", 
          RowBox[{
           StyleBox["z",
            FontSlant->"Italic"], ":", " ", 
           RowBox[{"|", 
            StyleBox["z",
             FontSlant->"Italic"], "|"}]}]}]},
        {
         StyleBox[
          RowBox[{"Arg", "[", "z", "]"}],
          FontFamily->"Courier",
          FontWeight->"Bold",
          FontSlant->"Plain"], 
         RowBox[{
          StyleBox["Argument",
           Background->RGBColor[1, 1, 0]], 
          StyleBox[" ",
           Background->RGBColor[1, 1, 0]], 
          StyleBox["of",
           Background->RGBColor[1, 1, 0]], 
          StyleBox[" ",
           Background->RGBColor[1, 1, 0]], 
          StyleBox[
           RowBox[{
            StyleBox["z",
             FontSlant->"Italic"], ":"}],
           Background->RGBColor[1, 1, 0]], " ", Cell[TextData[Cell[BoxData[
           FormBox[
            RowBox[{
             SuperscriptBox["tan", 
              RowBox[{"-", "1"}]], 
             RowBox[{"y", "/", "x"}]}], TraditionalForm]],
           FontFamily->"Times"]]]}]},
        {
         StyleBox[
          RowBox[{"Conjugate", "[", "z", "]"}],
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         RowBox[{
          RowBox[{
           StyleBox["Complex",
            Background->RGBColor[1, 1, 0]], 
           StyleBox[" ",
            Background->RGBColor[1, 1, 0]], 
           StyleBox["conjugate",
            Background->RGBColor[1, 1, 0]], 
           StyleBox[" ",
            Background->RGBColor[1, 1, 0]], 
           StyleBox["of",
            Background->RGBColor[1, 1, 0]], 
           StyleBox[" ",
            Background->RGBColor[1, 1, 0]], 
           RowBox[{
            StyleBox["z",
             FontSlant->"Italic",
             Background->RGBColor[1, 1, 0]], ":", "  ", 
            StyleBox[
             SuperscriptBox["z", "*"],
             FontSlant->"Italic"]}]}], " ", "=", " ", Cell[TextData[Cell[
          BoxData[
           FormBox[
            RowBox[{"x", " ", "-", " ", 
             RowBox[{"\[ImaginaryI]", " ", "y"}]}], TraditionalForm]],
           FontFamily->"Times"]]]}]}
       },
       GridBoxAlignment->{
        "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}},
          "RowsIndexed" -> {}},
       GridBoxSpacings->{"Columns" -> {
           Offset[0.27999999999999997`], {
            Offset[1.9599999999999997`]}, 
           Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
           Offset[0.2], {
            Offset[0.4]}, 
           Offset[0.2]}, "RowsIndexed" -> {}}],
      FontFamily->"Times"]}]}
  }]]]], "Text",
 CellFrame->True,
 Background->GrayLevel[0.849989],
 CellTags->"i:15"],

Cell[TextData[{
 "Example: Take the real part of ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"(", 
     RowBox[{"1", "+", 
      RowBox[{"2", " ", "\[ImaginaryI]"}]}], ")"}], "/", 
    RowBox[{"(", 
     RowBox[{"3", " ", "+", " ", 
      RowBox[{"5", " ", "\[ImaginaryI]"}]}], ")"}]}], TraditionalForm]]],
 ":"
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Re", "[", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{"1", "+", 
     RowBox[{"2", "I"}]}], ")"}], "/", 
   RowBox[{"(", 
    RowBox[{"3", "+", 
     RowBox[{"5", "I"}]}], ")"}]}], "]"}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.16"],

Cell[BoxData[
 FractionBox["13", "34"]], "Output",
 CellChangeTimes->{3.446334905993576*^9},
 CellTags->"Cell 9.16"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["9.2.6 The ",
  FontFamily->"Helvetica"],
 StyleBox["Function ",
  FontFamily->"Helvetica",
  Background->RGBColor[1, 1, 0]],
 StyleBox["N",
  FontFamily->"Courier",
  FontSize->18,
  Background->RGBColor[1, 1, 0]],
 StyleBox[" ",
  FontFamily->"Helvetica",
  Background->RGBColor[1, 1, 0]],
 StyleBox["and Arbitrary-Precision Numbers",
  FontFamily->"Helvetica"]
}], "Subsubtitle",
 CellTags->"c:9"],

Cell[TextData[{
 "When ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "  numerically evaluates an expression such as ",
 StyleBox["Pi //N",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ", it works only to machine precision, as discussed in Sec. ",
 ButtonBox["9.2.2",
  BaseStyle->"Hyperlink",
  ButtonData:>"c:5"],
 ".  The notation ",
 StyleBox["Pi//N",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " calls for acting on the exact number ",
 StyleBox["Pi",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " with an intrinsic function ",
 StyleBox["N",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ", ",
 StyleBox["N[Pi]",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ". This function takes an exact number and approximates it to machine \
precision:  "
}], "Text",
 CellTags->"i:20"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"N", "[", "Pi", "]"}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.17"],

Cell[BoxData["3.141592653589793`"], "Output"]
}, Open  ]],

Cell[TextData[{
 "\tHowever, you can also perform the evaluation to arbitrary numerical \
precision. For example, to obtain a precision of 25 significant figures, add \
a second argument to the function ",
 StyleBox["N",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " that specifies the precision of the evaluation: "
}], "Text",
 CellChangeTimes->{{3.4465950590006857`*^9, 3.4465950650640383`*^9}},
 CellTags->"i:6"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"N", "[", 
  RowBox[{"Pi", ",", "25"}], "]"}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.18"],

Cell[BoxData["3.14159265358979323846264338327950288052`25."], "Output",
 CellChangeTimes->{3.446334914565482*^9},
 CellTags->"Cell 9.18"]
}, Open  ]],

Cell[TextData[{
 "\tThe function ",
 StyleBox["N",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " displays whatever precision you ask for, even if the precision is less \
than the Machine precision. For instance: "
}], "Text",
 CellChangeTimes->{{3.446335383251856*^9, 3.446335409291349*^9}, {
  3.448633805800551*^9, 3.448633808956747*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"N", "[", 
  RowBox[{"Pi", ",", "9"}], "]"}]], "Input",
 ShowCellTags->True,
 CellChangeTimes->{{3.4463350311827507`*^9, 3.446335067288747*^9}, 
   3.446335132081704*^9, {3.446335195178672*^9, 3.446335202295813*^9}, {
   3.446335297538005*^9, 3.446335305313925*^9}, 3.446336051557111*^9},
 CellTags->"Cell 9.19"],

Cell[BoxData["3.1415926535897932385`9."], "Output",
 CellChangeTimes->{
  3.446334917889544*^9, {3.446335032544183*^9, 3.446335068050683*^9}, 
   3.4463351325162582`*^9, {3.446335196211317*^9, 3.446335203387434*^9}, {
   3.4463352983780003`*^9, 3.44633530613179*^9}, 3.4463360522627983`*^9},
 CellTags->"Cell 9.19"]
}, Open  ]],

Cell[TextData[{
 "To see the full number that is stored in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " rather than the nine significant figures displayed above, it is necessary \
to ask for the internal form of the number, with the function ",
 StyleBox["InputForm",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ":"
}], "Text",
 CellChangeTimes->{{3.4463360977266893`*^9, 3.446336097864257*^9}, {
   3.44633624684618*^9, 3.446336251388011*^9}, {3.446336281663773*^9, 
   3.4463362820822144`*^9}, 3.4463364638833647`*^9, {3.44659508071985*^9, 
   3.4465950891266193`*^9}},
 CellTags->"i:7"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"InputForm", "[", 
  RowBox[{"N", "[", 
   RowBox[{
    RowBox[{"Sqrt", "[", "2", "]"}], ",", "9"}], "]"}], "]"}]], "Input",
 ShowCellTags->True,
 CellChangeTimes->{{3.446335508084951*^9, 3.446335550382036*^9}, {
  3.446336192201207*^9, 3.446336211373061*^9}, {3.44633629413155*^9, 
  3.4463362955193853`*^9}, {3.446336367277603*^9, 3.4463363730581217`*^9}, {
  3.4463364252313023`*^9, 3.4463364266787252`*^9}},
 CellTags->"Cell 9.20"],

Cell["1.4142135623730950488`9.", "Output",
 CellChangeTimes->{
  3.446335440835083*^9, {3.446335508687833*^9, 3.446335522651081*^9}, 
   3.446335552719612*^9, {3.446336194048379*^9, 3.446336214360076*^9}, 
   3.446336298826633*^9, 3.446336373813363*^9, 3.446336429338234*^9},
 CellTags->"Cell 9.20"]
}, Open  ]],

Cell[TextData[{
 StyleBox["InputForm",
  FontFamily->"Courier",
  FontWeight->"Bold",
  Background->RGBColor[1, 1, 0]],
 StyleBox[" displays the actual number stored in memory by ",
  Background->RGBColor[1, 1, 0]],
 StyleBox["Mathematica",
  FontSlant->"Italic",
  Background->RGBColor[1, 1, 0]],
 ". ",
 StyleBox["Mathematica",
  FontSlant->"Italic",
  FontVariations->{"Underline"->True}],
 StyleBox[" keeps track of the precision of the number via the notation `9 at \
the end of the number.",
  FontVariations->{"Underline"->True}],
 " However, in this case the number was actually computed to higher than 9 \
significant figures. ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " works to ",
 StyleBox["at least",
  FontSlant->"Italic"],
 " the stated precision; actual accuracy can be higher.  In case you don't \
know what ",
 Cell[BoxData[
  FormBox[
   SqrtBox["2"], TraditionalForm]]],
 " is to 16 significant figures, you can verify that the above expression is \
correct to machine preciion and not just 9 significant figures by comparing \
it with a number of higher precision:"
}], "Text",
 CellChangeTimes->{
  3.446335537102591*^9, {3.44633610384454*^9, 3.4463361643854923`*^9}, {
   3.446336308560063*^9, 3.446336319623006*^9}, {3.4463364423834543`*^9, 
   3.446336529042507*^9}, {3.446595097636752*^9, 3.4465951183205013`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"N", "[", 
  RowBox[{
   RowBox[{"Sqrt", "[", "2", "]"}], ",", "20"}], "]"}]], "Input",
 ShowCellTags->True,
 CellChangeTimes->{{3.446336221091065*^9, 3.446336222295657*^9}, {
  3.4463365445221767`*^9, 3.4463365462215977`*^9}},
 CellTags->"Cell 9.21"],

Cell[BoxData["1.41421356237309504880168872420969807857`20."], "Output",
 CellChangeTimes->{3.446336224762435*^9, 3.4463365471313667`*^9},
 CellTags->"Cell 9.21"]
}, Open  ]],

Cell[TextData[{
 "\tNumbers can be evaluated to an arbitrary level of precision using ",
 StyleBox["N",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ". However, the larger the precision asked for, the longer it takes to \
perform the calculation. For example, on my (old, slow) Macintosh, the \
calculation of ",
 StyleBox["N[Sqrt[2],50000]",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " takes roughly 25 seconds. On the other hand, on my (new, fast) Macintosh \
it only takes about a second. I won't bother displaying the result, since it \
would use up several pages; try it yourself."
}], "Text"],

Cell[TextData[{
 "\t",
 StyleBox["If you add together two numbers with different precisions, ",
  Background->RGBColor[1, 1, 0]],
 StyleBox["Mathematica",
  FontSlant->"Italic",
  Background->RGBColor[1, 1, 0]],
 StyleBox[" does the right thing and evaluates the result to the lower of the \
two precisions",
  Background->RGBColor[1, 1, 0]],
 ". The precision of a number can be checked directly using the intrinsic \
function ",
 StyleBox["Precision",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ". For example,"
}], "Text",
 CellChangeTimes->{{3.446595136148506*^9, 3.446595138290818*^9}},
 CellTags->"i:21"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Precision", "[", 
  RowBox[{
   RowBox[{"N", "[", 
    RowBox[{
     RowBox[{"Sqrt", "[", "6", "]"}], ",", "200"}], "]"}], " ", "+", " ", 
   RowBox[{"N", "[", 
    RowBox[{"Pi", ",", "27"}], "]"}]}], "]"}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.22"],

Cell[BoxData["27.250346019855435`"], "Output",
 CellChangeTimes->{3.446335671530335*^9},
 CellTags->"Cell 9.22"]
}, Open  ]],

Cell[TextData[{
 "The functions mentioned above are summarized in Table ",
 ButtonBox["9.5",
  BaseStyle->"Hyperlink",
  ButtonData:>"Table 9.5"],
 "."
}], "Text"],

Cell[TextData[Cell[BoxData[GridBox[{
   {
    RowBox[{
     StyleBox[
      RowBox[{
      "Table", "9.5", " ", "Functions", " ", "Useful", " ", "for", " ", 
       "Numerical", " ", "Evaluations"}],
      FontSize->9,
      Background->None], "\[IndentingNewLine]"}]},
   {
    StyleBox[GridBox[{
       {
        StyleBox[
         RowBox[{
          StyleBox["expr",
           FontFamily->"Courier",
           FontWeight->"Bold"], 
          StyleBox[" ",
           FontFamily->"Courier",
           FontWeight->"Bold",
           FontSlant->"Italic"], 
          StyleBox["//",
           FontFamily->"Courier",
           FontWeight->"Bold"], 
          RowBox[{
           StyleBox["N",
            FontFamily->"Courier",
            FontWeight->"Bold"], " ", "or", " ", 
           StyleBox[
            RowBox[{"N", 
             StyleBox["[",
              FontSlant->"Italic"], "expr", 
             StyleBox["]",
              FontSlant->"Italic"]}],
            FontFamily->"Courier",
            FontWeight->"Bold"]}]}],
         Background->RGBColor[1, 1, 0]], 
        RowBox[{"Approximate", " ", "numerical", " ", "value", " ", "of", " ", 
         StyleBox["expr",
          FontFamily->"Courier",
          FontWeight->"Bold"]}]},
       {
        StyleBox[
         RowBox[{"N", "[", 
          RowBox[{
           StyleBox["expr",
            FontSlant->"Plain"], 
           StyleBox[",",
            FontSlant->"Italic"], "n"}], "]"}],
         FontFamily->"Courier",
         FontWeight->"Bold"], 
        RowBox[{
         RowBox[{"Numerical", " ", "value", " ", "of", " ", 
          StyleBox["expr",
           FontFamily->"Courier",
           FontWeight->"Bold"], 
          StyleBox[" ",
           FontSlant->"Italic"], "evaluated", " ", "with", " ", 
          StyleBox["n",
           FontSlant->"Italic"]}], "-", 
         RowBox[{"digit", " ", "precision"}]}]},
       {
        StyleBox[
         RowBox[{"InputForm", "[", "x", "]"}],
         FontFamily->"Courier",
         FontWeight->"Bold"], 
        RowBox[{
         RowBox[{"The", " ", "full"}], "-", 
         RowBox[{"precision", " ", "form", " ", "of", " ", 
          StyleBox["x",
           FontFamily->"Courier",
           FontWeight->"Bold"], 
          StyleBox[" ",
           FontSlant->"Italic"], "stored", " ", "internally"}]}]},
       {
        RowBox[{
         StyleBox[
          RowBox[{"Precision", "[", "x", "]"}],
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         StyleBox["\[IndentingNewLine]",
          FontFamily->"Courier",
          FontWeight->"Bold"], Cell[TextData[{
          StyleBox["123.456`32",
           FontFamily->"Courier",
           FontWeight->"Bold"],
          " "
         }]], "\[IndentingNewLine]", 
         StyleBox["214.34",
          FontFamily->"Courier",
          FontWeight->"Bold"]}], 
        RowBox[{
         RowBox[{"Precision", " ", "of", " ", "the", " ", "number", " ", 
          StyleBox["x",
           FontFamily->"Courier",
           FontWeight->"Bold"]}], 
         StyleBox["\[IndentingNewLine]",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         RowBox[{
         "A", " ", "number", " ", "with", " ", "32", " ", "digits", " ", "of",
           " ", "precision"}], "\[IndentingNewLine]", 
         RowBox[{
         "A", " ", "number", " ", "with", " ", "machine", " ", "precision"}]}]}
      },
      GridBoxAlignment->{
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[2.6599999999999997`]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}],
     FontFamily->"Times"]}
  }]]]], "Text",
 CellFrame->True,
 CellChangeTimes->{{3.446335787150612*^9, 3.4463358691303997`*^9}, {
  3.446335947110127*^9, 3.446335975176292*^9}, {3.446415676211051*^9, 
  3.446415715150251*^9}, {3.446415942203278*^9, 3.44641594387827*^9}},
 Background->GrayLevel[0.849989],
 CellTags->"Table 9.5"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Exercises for Sec. 9.2", "Subsubtitle",
 CellTags->"c:10"],

Cell[TextData[{
 StyleBox["(1)",
  FontWeight->"Bold"],
 " Find a numerical value for ",
 Cell[BoxData[
  FormBox[
   RowBox[{"sin", "(", 
    RowBox[{"53", "\[Degree]"}], ")"}], TraditionalForm]]],
 " to six significant figures.    ",
 StyleBox["N[Sin[53 Degree],6]",
  FontColor->RGBColor[1, 0, 0]]
}], "Text",
 CellChangeTimes->{{3.621296564954259*^9, 3.621296582552266*^9}}],

Cell[TextData[{
 StyleBox["(2)",
  FontWeight->"Bold"],
 " Find the 2001st significant figure of ",
 Cell[BoxData[
  FormBox["\[Pi]", TraditionalForm]]],
 ".      ",
 StyleBox["InputForm[N[Pi,2001]]",
  FontColor->RGBColor[1, 0, 0]]
}], "Text",
 CellChangeTimes->{{3.621296522073807*^9, 3.621296523935913*^9}, 
   3.621296652572271*^9, {3.621297324529704*^9, 3.621297343960816*^9}}],

Cell[TextData[{
 StyleBox["(3)",
  FontWeight->"Bold"],
 " Is ",
 Cell[BoxData[
  FormBox[
   RowBox[{"120", "!"}], TraditionalForm]]],
 " greater or smaller than ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["10", "200"], TraditionalForm]]],
 " ?       ",
 StyleBox["120! > 10^200     False",
  FontColor->RGBColor[1, 0, 0]]
}], "Text",
 CellChangeTimes->{{3.6212966363783445`*^9, 3.621296649395089*^9}}],

Cell[TextData[{
 StyleBox["(4)",
  FontWeight->"Bold"],
 " Find ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"tanh", "(", "50", ")"}], "-", "1"}], TraditionalForm]]],
 " to 10 significant figures.      ",
 StyleBox["N[Tanh[50]-1,10]",
  FontColor->RGBColor[1, 0, 0]]
}], "Text",
 CellChangeTimes->{{3.6212967372431135`*^9, 3.621296750696883*^9}}],

Cell[TextData[{
 StyleBox["(5)",
  FontWeight->"Bold"],
 " Find the real and imaginary parts of the complex number ",
 Cell[BoxData[
  FormBox[
   RowBox[{"z", "=", 
    SuperscriptBox["\[ExponentialE]", 
     RowBox[{"2", "+", 
      RowBox[{"9", " ", "\[ImaginaryI]"}]}]]}], TraditionalForm]]],
 ".     ",
 StyleBox["z = E^(2 + 9 I)\[LineSeparator]                                    \
                                                                          Re[\
z]     Im[z]",
  FontColor->RGBColor[1, 0, 0]]
}], "Text",
 CellChangeTimes->{{3.6212974558162136`*^9, 3.6212974919032774`*^9}}]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 "9.3 The ",
 StyleBox["Mathematica ",
  FontSlant->"Italic"],
 "Front End",
 StyleBox[" ",
  FontSlant->"Italic"],
 "and ",
 "Kernel"
}], "Subtitle",
 CellTags->{"Sec. 9.3", "c:11"}],

Cell[TextData[{
 "\tBefore  we go on to evaluate more complex expressions,  it is useful to \
take a moment to discuss the structure of ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ". ",
 StyleBox["The program comes in two separate parts, the ",
  Background->RGBColor[1, 1, 0]],
 StyleBox["front end",
  FontSlant->"Italic",
  Background->RGBColor[1, 1, 0]],
 StyleBox[", and the ",
  Background->RGBColor[1, 1, 0]],
 StyleBox["kernel",
  FontSlant->"Italic",
  Background->RGBColor[1, 1, 0]],
 ". When you start a ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " session by double clicking on the ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " icon, you are actually only starting the program's front end. ",
 StyleBox["The front end is the part of the program responsible for \
displaying the notebook, accepting input, and displaying the results of \
calculations.",
  Background->RGBColor[1, 1, 0]],
 "  ",
 StyleBox["The kernel is the part that is responsible for performing the \
calculations. It does not start up until you perform an evaluation by hitting \
Enter (or Shift-Return). ",
  Background->RGBColor[1, 0.5, 0]]
}], "Text",
 CellChangeTimes->{3.446595191207345*^9},
 CellTags->"i:8"],

Cell["\<\
\tThere are several reasons for this arrangement. One reason is that you can \
display the contents of a notebook without having to start the kernel. The \
kernel takes up quite a bit of computer memory,  and you don't need to start \
it up unless it is really needed to perform a new calculation. Another reason \
is that the kernel doesn't even have to be running on the same computer as \
the front end. Thus, it is theoretically possible to run the Kernel on a  \
fast mainframe at a completely different physical location, while you display \
the results in the front end on your laptop.\
\>", "Text"],

Cell[TextData[{
 "\t A third, more important reason is that when ",
 StyleBox["Mathematica ",
  FontSlant->"Italic"],
 "calculations go awry, as they sometimes do,  you can stop the calculation \
without closing your notebook and ending the program. ",
 StyleBox["One way to stop the calculation is to choose ",
  Background->RGBColor[1, 1, 0]],
 StyleBox["Interrupt Evaluation",
  FontFamily->"Courier",
  FontWeight->"Bold",
  Background->RGBColor[1, 1, 0]],
 StyleBox[" or ",
  Background->RGBColor[1, 1, 0]],
 StyleBox["Abort",
  FontFamily->"Courier",
  FontWeight->"Bold",
  Background->RGBColor[1, 1, 0]],
 StyleBox[" ",
  Background->RGBColor[1, 1, 0]],
 StyleBox["Evaluation",
  FontFamily->"Courier",
  FontWeight->"Bold",
  Background->RGBColor[1, 1, 0]],
 StyleBox[" from the ",
  Background->RGBColor[1, 1, 0]],
 StyleBox["Evaluation",
  FontFamily->"Courier",
  FontWeight->"Bold",
  Background->RGBColor[1, 1, 0]],
 StyleBox[" menu",
  Background->RGBColor[1, 1, 0]],
 ". However, if the kernel is busy with an evaluation, it may not respond. In \
this case, you can stop the calculation by quitting the kernel. This leaves \
the front end running, displaying your previous results.  To quit the kernel, \
choose ",
 StyleBox["Quit Kernel",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 "  from the ",
 StyleBox["Evaluation",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " menu."
}], "Text",
 CellChangeTimes->{
  3.458846535558509*^9, {3.458907680299868*^9, 3.458907682581718*^9}, {
   3.458907720783746*^9, 3.458907726499435*^9}},
 CellTags->"i:13"],

Cell[TextData[{
 "\tOnce you have quit the kernel, you can simply restart the session by \
typing in a new calculation and hitting Enter or SHIFT-Return, or by \
reevaluating one of your previous calculations.  ",
 StyleBox["Note that the numbering of the cells starts again from ",
  Background->RGBColor[1, 1, 0]],
 StyleBox["In[1]",
  FontFamily->"Courier",
  FontWeight->"Bold",
  Background->RGBColor[1, 1, 0]],
 StyleBox[". The kernel is responsible for storing the results of your \
previous calculations, and when you quit the kernel all these previous \
results are lost from the kernel,  although they continue to be displayed in \
the notebook.  They can be reevaluated merely by choosing one or more of the \
cells that you wish to evaluate and hitting Enter or SHIFT-Return.",
  Background->RGBColor[1, 1, 0]]
}], "Text",
 CellChangeTimes->{{3.4588465488368587`*^9, 3.458846551882896*^9}, {
  3.458873213829666*^9, 3.4588732152898684`*^9}}],

Cell[TextData[{
 "\tIt is possible to interact directly with the kernel via keyboard commands \
without using the front end. While this is not generally recommended because \
the full graphical capabilities of ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " will not be available, it can sometimes be useful. To do so you first need \
to find the kernel program on your computer. On typical installations the \
program is called MathKernel.  Once you have found its location, you can run \
it using the Windows run command, or by opening a terminal window and typing \
the full address of the program. On my Macintosh the address is ",
 StyleBox["/Applications/Mathematica.app/Contents/MacOS/MathKernel",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ". The kernel will then start and display a primitive keyboard-only \
interface that allows one to type in commands. \n"
}], "Text",
 CellChangeTimes->{{3.4588374910128527`*^9, 3.458837537695959*^9}, {
  3.45883759280648*^9, 3.45883764170536*^9}, {3.4588376736663237`*^9, 
  3.458837731716092*^9}, {3.45883794203432*^9, 3.458838167314748*^9}, {
  3.4588381980567837`*^9, 3.458838288944744*^9}, {3.458843554592725*^9, 
  3.4588435821305304`*^9}, {3.458846571342152*^9, 3.458846592374309*^9}, {
  3.458873582911915*^9, 3.458873662253335*^9}, {3.458873695827055*^9, 
  3.458873765694325*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["9.4 Using Previous Results", "Subtitle",
 CellTags->{"Sec. 9.4", "c:12"}],

Cell["", "Text"],

Cell[CellGroupData[{

Cell["9.4.1 The % Symbol", "Subsubtitle",
 CellTags->"c:13"],

Cell[TextData[{
 "When building up a complex calculation it is often necessary to refer to \
results from previously evaluated cells. The percent symbol ",
 StyleBox["%",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " can be used to refer to the last evaluation.  For example, let's perform \
the following calculation in two steps: ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["77", "2"], "+", "1"}], TraditionalForm]]],
 ". First,  square ",
 Cell[BoxData[
  FormBox["77", TraditionalForm]]],
 ":"
}], "Text",
 CellChangeTimes->{3.4589078731313334`*^9},
 CellTags->"i:22"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"77", "^", "2"}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.23"],

Cell[BoxData["5929"], "Output"]
}, Open  ]],

Cell["In order to add 1 to this result,  type", "Text",
 CellChangeTimes->{{3.458907881164405*^9, 3.458907882625369*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"%", "+", "1"}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.24"],

Cell[BoxData["5930"], "Output"]
}, Open  ]],

Cell[TextData[{
 "Two percent symbols, ",
 StyleBox["%%",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ",  denote the next to last result. Thus,  the difference between the last \
two results is"
}], "Text",
 CellChangeTimes->{{3.458907888108019*^9, 3.458907894624321*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"%", " ", "-", " ", "%%"}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.25"],

Cell[BoxData["1"], "Output"]
}, Open  ]],

Cell[TextData[{
 "You could put ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]]],
 " ",
 StyleBox["%",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " symbols together to denote the ",
 Cell[BoxData[
  FormBox[
   RowBox[{"n", "-", "1"}], TraditionalForm]]],
 "st-to-last result, but this gets a bit confusing. Instead, you can refer to \
a previous result directly by referring to its cell number. For example, ",
 Cell[BoxData[
  FormBox[
   StyleBox["%1",
    FontFamily->"Courier",
    FontWeight->"Bold"], TraditionalForm]]],
 " refers to the output of the first cell in the current session:"
}], "Text",
 CellChangeTimes->{{3.44659529580136*^9, 3.446595296845573*^9}}],

Cell[CellGroupData[{

Cell[BoxData["%1"], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.26"],

Cell[BoxData["5929"], "Output"]
}, Open  ]],

Cell[TextData[{
 "However, this notation can cause trouble if you quit and restart a session, \
because then cell number 1 may change - see Sec. ",
 ButtonBox["9.3",
  BaseStyle->"Hyperlink",
  ButtonData:>"Sec. 9.3"],
 ". A better way to refer to previous results is discussed in the next \
subsection."
}], "Text"]
}, Closed]],

Cell[CellGroupData[{

Cell["9.4.2 Variables", "Subsubtitle",
 CellTags->"c:14"],

Cell[TextData[{
 "\tUsing cell numbers to refer to previous results has a drawback: as we saw \
in ",
 ButtonBox["Sec. 9.3",
  BaseStyle->"Hyperlink",
  ButtonData:>"Sec. 9.3"],
 ", the cell numbers disappear when you quit  the kernel. A more permanent \
way to refer to previous results is to give the results names. These names \
are called ",
 StyleBox["variables",
  FontSlant->"Italic"],
 ". Variables can have any name you want, provided that they start with \
letters and that they aren't reserved names like ",
 StyleBox["Pi",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " or ",
 StyleBox["Infinity",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ". \n\tFor example,",
 StyleBox[" ",
  FontSlant->"Italic"],
 StyleBox["x",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " is a good name for a variable.",
 StyleBox[" ",
  FontSlant->"Italic"],
 " For one thing, it is lowercase, so it is guaranteed not to conflict with \
any of ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "'s reserved function or variable names. To assign the result of a \
calculation to this variable, simply type ",
 StyleBox["x = expr",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ", where ",
 StyleBox["expr",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " stands for an expression. For example, when you type ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    StyleBox["x",
     FontSlant->"Plain"], " ", "=", " ", 
    RowBox[{"Tan", "[", 
     RowBox[{"60", " ", "Degree"}], "]"}]}], TraditionalForm]],
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ", the ",
 "right-hand",
 " side of the equation is immediately evaluated and the result is stored as \
the variable ",
 StyleBox["x",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ":"
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"x", "=", " ", 
  RowBox[{"Tan", "[", 
   RowBox[{"60", " ", "Degree"}], "]"}]}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.27"],

Cell[BoxData[
 SqrtBox["3"]], "Output"]
}, Open  ]],

Cell[TextData[{
 " You can now use ",
 StyleBox["x",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " in any new calculation, for example,"
}], "Text",
 CellChangeTimes->{{3.4465953564151173`*^9, 3.446595357471665*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"x", "^", "4"}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.28"],

Cell[BoxData["9"], "Output"]
}, Open  ]],

Cell[TextData[{
 "You can assign a new value to the variable ",
 StyleBox["x",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " at any time:"
}], "Text",
 CellChangeTimes->{{3.44659536225177*^9, 3.4465953625029697`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"x", "=", 
  RowBox[{"Sqrt", "[", "14", "]"}]}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.29"],

Cell[BoxData[
 SqrtBox["14"]], "Output"]
}, Open  ]],

Cell[TextData[{
 "You can also clear from memory any value assigned to the variable by using \
the ",
 StyleBox["Remove",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " function:"
}], "Text",
 CellChangeTimes->{{3.446595371429326*^9, 3.446595371708901*^9}},
 CellTags->"i:23"],

Cell[BoxData[
 RowBox[{"Remove", "[", "x", "]"}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.30"],

Cell[TextData[{
 "If you ask for the value of ",
 StyleBox["x",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " after ",
 StyleBox["x",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " is cleared, ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " returns ",
 StyleBox["x",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " itself, since no value is assigned to it:"
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData["x"], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.31"],

Cell[BoxData["x"], "Output"]
}, Open  ]],

Cell["\<\
If you wish to remove from memory  all the  variables that you have defined \
in the current session, the following command works:\
\>", "Text",
 CellTags->"i:24"],

Cell[BoxData[
 RowBox[{"Remove", "[", "\"\<Global`*\>\"", "]"}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.32"],

Cell[TextData[{
 "The  ",
 StyleBox["*",
  FontWeight->"Bold"],
 " in this expression is a wildcard, standing in for all variables. The \
expression ",
 StyleBox["Global`",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " refers to the ",
 StyleBox["context",
  FontSlant->"Italic"],
 " of the variables. Contexts provide a way of organizing symbols into \
groups. Think of the context as the \"tribe\"  or \"surname\" of a symbol. \
When you create a variable, such as ",
 StyleBox["a",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ", it is given the context ",
 StyleBox["Global",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " by default, and so has the full name ",
 StyleBox["Global`a",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ". All symbols have contexts,  including intrinsic variables and functions. \
For instance, the full name for ",
 Cell[BoxData[
  FormBox["Pi", TraditionalForm]],
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " is ",
 Cell[BoxData[
  FormBox["System`Pi", TraditionalForm]],
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ". Since the ",
 StyleBox["Global",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " context is reserved for variables that we create,  removing all symbols in \
the ",
 StyleBox["Global",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " context removes all the symbols that have been created in the current ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " session."
}], "Text",
 CellChangeTimes->{{3.446595391514493*^9, 3.446595391786181*^9}},
 CellTags->"i:10"],

Cell[TextData[{
 "\t   We do not need to know  more  about contexts in this part of the book, \
so for now, enough said. Those readers who wish to learn more about contexts \
can refer to the ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " documentation. "
}], "Text",
 CellChangeTimes->{{3.446595417574699*^9, 3.4465954279209137`*^9}}],

Cell[TextData[{
 "\tIt is often a good idea to clear variables from memory after a \
calculation is completed, because it is easy to forget  which variables have \
already been defined, and this can lead to errors.  \n\tThe commands in this \
and the preceding subsection are summarized in Table ",
 ButtonBox["9.6",
  BaseStyle->"Hyperlink",
  ButtonData:>"Table 9.6"],
 "."
}], "Text",
 CellChangeTimes->{{3.4465954411457167`*^9, 3.446595442115057*^9}}],

Cell[TextData[Cell[BoxData[GridBox[{
   {
    RowBox[{
     StyleBox[
      RowBox[{
      "Table", "9.6", " ", "Ways", " ", "to", " ", "Refer", " ", "to", " ", 
       "Previous", " ", "Results"}],
      FontSize->9], "\[IndentingNewLine]"}]},
   {
    StyleBox[GridBox[{
       {
        StyleBox["%",
         FontFamily->"Courier"], 
        RowBox[{"The", " ", "last", " ", "result", " ", "generated"}]},
       {
        StyleBox["%%",
         FontFamily->"Courier"], 
        RowBox[{"The", " ", "next", " ", "to", " ", "last", " ", "result"}]},
       {
        RowBox[{
         StyleBox[
          RowBox[{"%%", "..."}],
          FontFamily->"Courier"], 
         StyleBox["%",
          FontFamily->"Courier"], 
         StyleBox[
          RowBox[{
           StyleBox[" ",
            FontFamily->"Courier"], " "}]], 
         RowBox[{"(", 
          RowBox[{
           StyleBox["n",
            FontSlant->"Italic"], " ", "times"}], ")"}]}], 
        RowBox[{"The", " ", 
         StyleBox[
          RowBox[{
           StyleBox["n",
            FontSlant->"Italic"], "th"}]], " ", "previous", " ", "result"}]},
       {
        StyleBox[
         RowBox[{"%", 
          StyleBox["n",
           FontWeight->"Bold"]}],
         FontFamily->"Courier"], 
        RowBox[{"The", " ", "result", " ", "in", " ", "cell", " ", 
         StyleBox[
          RowBox[{"Out", "[", "n", "]"}],
          FontFamily->"Courier",
          FontWeight->"Bold"]}]},
       {
        StyleBox[
         RowBox[{"x", "=", "expression"}],
         FontFamily->"Courier",
         FontWeight->"Bold"], 
        RowBox[{"Evaluates", " ", 
         StyleBox["expression",
          FontFamily->"Courier",
          FontWeight->"Bold"], " ", "and", " ", "assigns", " ", "the", " ", 
         "result", " ", "to", " ", "the", " ", "variable", " ", 
         StyleBox["x",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         StyleBox[" ",
          FontSlant->"Italic"]}]},
       {
        StyleBox[
         RowBox[{"x", "=", 
          RowBox[{"y", "=", "expression"}]}],
         FontFamily->"Courier",
         FontWeight->"Bold"], 
        RowBox[{"Evaluates", " ", 
         StyleBox["expression",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         StyleBox[" ",
          FontSlant->"Italic"], "and", " ", "assigns", 
         StyleBox[" ",
          FontSlant->"Italic"], "the", " ", "result", " ", "to", " ", "both", 
         " ", 
         StyleBox["x",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         StyleBox[" ",
          FontSlant->"Italic"], "and", " ", 
         StyleBox["y",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         StyleBox[" ",
          FontSlant->"Italic"]}]},
       {
        StyleBox[
         RowBox[{"Remove", "[", "x", "]"}],
         FontFamily->"Courier",
         FontWeight->"Bold"], 
        RowBox[{"Remove", " ", "the", " ", "variable", " ", 
         StyleBox["x",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         StyleBox["   ",
          FontSlant->"Italic"], "from", " ", "memory"}]},
       {
        StyleBox[
         RowBox[{"Clear", "[", "x", "]"}],
         FontFamily->"Courier",
         FontWeight->"Bold"], 
        RowBox[{
         RowBox[{"Also", " ", "clears", " ", "the", " ", "value", " ", "of", "  ", 
          StyleBox["x",
           FontFamily->"Courier",
           FontWeight->"Bold"], 
          StyleBox[
           RowBox[{
            StyleBox[" ",
             FontSlant->"Italic"], " "}]], "from", " ", "memory"}], 
         "\[IndentingNewLine]", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"using", " ", 
            StyleBox["Remove",
             FontFamily->"Courier",
             FontWeight->"Bold"], " ", "is", " ", "recommended"}], ";", 
           RowBox[{
           "it", " ", "does", " ", "a", " ", "more", " ", "complete", " ", 
            RowBox[{"job", "."}]}]}], " ", ")"}], "\[IndentingNewLine]", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"See", " ", "also", " ", 
            StyleBox["Unset",
             FontFamily->"Courier",
             FontWeight->"Bold"]}], ",", 
           RowBox[{
           "used", " ", "for", " ", "clearing", " ", "specific", " ", 
            "values", " ", "of", " ", "a", " ", 
            RowBox[{"function", "."}]}]}], ")"}]}]}
      },
      GridBoxAlignment->{
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[2.6599999999999997`]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}],
     FontFamily->"Times"]}
  }]]]], "Text",
 CellFrame->True,
 Background->GrayLevel[0.849989],
 CellTags->{"i:25", "Table 9.6"}],

Cell[TextData[StyleBox["",
 FontSize->9]], "Text"],

Cell[TextData[Cell[BoxData[GridBox[{
   {
    RowBox[{
     StyleBox[
      RowBox[{
      "Some", " ", "Things", " ", "to", " ", "Remember", " ", "when", " ", 
       "Using", " ", "Variables"}],
      FontSize->9], "\[IndentingNewLine]"}]},
   {
    StyleBox[GridBox[{
       {
        RowBox[{
         StyleBox["x",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         StyleBox[" ",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         StyleBox["y",
          FontFamily->"Courier",
          FontWeight->"Bold"], Cell[TextData[StyleBox["",
          FontFamily->"Times",
          FontSlant->"Italic"]]]}], 
        RowBox[{"means", " ", 
         StyleBox["x",
          FontSlant->"Italic"], " ", "times", " ", 
         StyleBox["y",
          FontSlant->"Italic"], Cell[""]}]},
       {
        StyleBox["xy",
         FontFamily->"Courier",
         FontWeight->"Bold"], 
        RowBox[{
        "with", " ", "no", " ", "space", " ", "means", " ", "a", " ", 
         "variable", " ", "named", " ", 
         StyleBox["xy",
          FontSlant->"Italic"]}]},
       {
        StyleBox[
         RowBox[{"3", "x"}],
         FontFamily->"Courier",
         FontWeight->"Bold"], 
        RowBox[{"means", " ", "3", " ", "times", " ", 
         StyleBox["x",
          FontSlant->"Italic"], 
         RowBox[{"(", 
          RowBox[{"with", " ", "or", " ", "without", " ", "a", " ", "space"}],
           ")"}]}]},
       {Cell[TextData[StyleBox["x^2y",
         FontWeight->"Bold"]]], 
        RowBox[{"means", " ", Cell[TextData[Cell[BoxData[
          FormBox[
           StyleBox[
            RowBox[{
             SuperscriptBox["x", "2"], "y"}],
            FontFamily->"Times"], TraditionalForm]]]]], "not", " ", Cell[
         TextData[Cell[BoxData[
          FormBox[
           StyleBox[
            SuperscriptBox["x", 
             RowBox[{"2", "y"}]],
            FontFamily->"Times"], TraditionalForm]]]]]}]}
      },
      GridBoxAlignment->{
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}}],
     FontFamily->"Times"]}
  }]]]], "Text",
 CellFrame->True,
 Background->GrayLevel[0.849989]]
}, Closed]],

Cell[CellGroupData[{

Cell["9.4.3 Palettes and Keyboard Equivalents", "Subsubtitle",
 CellTags->"c:15"],

Cell[TextData[{
 "\tVariables can also be Greek letters or other special characters, such as ",
 StyleBox["\[Alpha]",
  FontFamily->"Symbol",
  FontSlant->"Italic"],
 StyleBox[" ",
  FontFamily->"Symbol"],
 " or \[WeierstrassP]. ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " supports a large collection of special characters that can be accessed \
using ",
 StyleBox["palettes",
  FontSlant->"Italic"],
 ". These palettes can also be used to implement various intrinsic functions. \
 Palettes are available under the ",
 StyleBox["Palettes",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " menu. There are several palettes, each with different uses. One palette \
that I find useful is the Basic Math Input palette. An image of this palette \
is shown in Fig. ",
 ButtonBox["9.1",
  BaseStyle->"Hyperlink",
  ButtonData:>"Fig. 9.1"],
 ".  To use a palette, simply click on the character or function desired. "
}], "Text",
 CellChangeTimes->{{3.4463337412955303`*^9, 3.4463337454611998`*^9}, {
  3.4465954802056913`*^9, 3.446595489172822*^9}},
 CellTags->"i:12"],

Cell[BoxData[Cell[GraphicsData["CompressedBitmap", "\<\
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
DNjDdL1xEhph8EAW7OPybQnZ6CAa0YKml2Xq6dXV2972NlcMsB7zPQcE7ROs
Q4MjVxuTZrfESFbgWeB5nPA0O3SCJ5wJzIfKMRDeqGBqpqq3N8zNQTQbnVXe
yZ7x6WQg0/e5hAF4EJF5pAxpDamSVRdpb2o8yCYsls0gVnDUirpca8W0xbTF
tNeBabWFzXOOQDaJvxBVEQ+47lQ75COlPcv0mhPQ+uKgTolx3ROZAS77M3DQ
uzcNEvta8JEbneX60702sbkDS00zapqDkgNK1w7Xug7lq3VNX9OzGnevV2VN
vd5p0apllZHZ4nQfnniyh8DyJinPCkYLRk8SRrWZHLuLPC0HGRKDybxHqtsE
01lnxB/KqTA2mNnpjOwztWKRLiu5EkdF3GkPrIceemhxVVC6eN5RE4Rlm8Hg
Qh2k6jphAdEIWq1ZY2BbznesEmIZCZfgqssKCkwKTEasqNWmAK9EKrvnnnsO
F6jAdfHiRV9znH3CX5B7C5ODQeYf/ehHfhEsaK2pfvzjHwtFQ42JRi1aBeWg
n/AKzwN2lEsCIU4HGfDMZKe+i9LlEjTBfr03UDSJLV6gqsnMvaHMwGmqBrh1
1W//9m/jr4rOXWc547IXLxM/kPD73Oc+1wxWVMugsfTdpZWq5arbRSrUMQop
2qSMaG8jjyYIUdNBeTtbDhw/VfEdpvXR3I383hT+et9IxaPM9Kxsf1OvAod6
/FSCLUYDhwvPS+vUauU595KM1UaXSmpW2s6vTfJDkxwA2x07Rl7E3S5CLsgo
yCjIuLGRcTi4kBpmLchLZjFcTm+mZ9qCrXwaKE7CVP1DXg/hQLCjsLTt0E8Y
N2Gy5s1qTO4wTOo46fC125R0vfxQdXcGwXdFuVr0N0p/ecukh2OpoYKVw3zP
pfplECie7fRLRHqCgrt/viX9553hn5j4n4QGcGgt/cFaCwuvu2otR2/5zDPP
YNXgwjPQ/xyOqefTf8/Brya9V/XPoXUflleEy0RPEs9b5xq53zd7t1rextwa
Ou8dtcdZmuXfZAuW56IKlkqw5++98sorYqzKWZl1bCwx9pQyppQY89MWM76+
1tJ6g5ylU1qpLky/nwttSbxX9RcjuKH81H5KgJLZu983q22jy+gNISOzwJus
B7NhIdLS9vw9WC7Mq6TMDMyD0PeUnGeycd0w5WKx1kmz1nyAxex/+0hetj1y
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
AW9Jj1i/JRuztXU+ZroHY9A4JwfjcBqfct1m6rscpKvG8k+3SQbIPmnLJO9N
U8yOYKneUyCZUNanfffBWFrq7PN0lQIs8H/33XcfRiD19AZqV6aspvwAoTwH
zEuZIJ7AYWcTik2q0S0TvxV4FngeEzyHmb4IFZJC/eLFix6e49jTqQIwmwrL
CeDi5QUA+kgXPo9k6jBVHKeeNTJ1NPr+8mTqMpdL4ah7rYTc3p1Pty6tOixB
aZHCXKFVl7cHaNVp6vu1114TEi9Hq57WFv5F3TkTmD/zzDN+SkYrK89jA8zq
lOkrr7yCsV64NOqHP/qjP6ppst4AS5PaZI2tJvNBEkHV+x3HgS0/e94RAVF6
td2Q8p0USmx5e1OU2HnjviQl9rja9iixt8YxWeBxg8NjTMe6Ph06ZBmbS/L/
YDpMbW/hFAoQGC5Ph55ghdNtig69U8nKmZM72j7WO+utCGdDTOjQsMNzuDTB
mqjKbTCh5/l2aQ03pNk20eyy1OdbpjLdHnG1HyaoMF2FDlofIRx42uYMksNS
5UVukMx6lkq1E6bqLbHGFnjc2PDIA8o+0vrEdUvEPV9mAfyoCGdR4gaUuBwB
7re//e3gL7n71wXDeVLkTglgqS8A2gu+555vlkF829yiJ7MK84FFiBqtpl85
zJ8nV0uSg7rfZ8J3Ocw2qlPBiTfgRko6mvGTaiTdMfNIzmpKcpNV4CTkMkTi
Kglbz4U3JlZpS7F316EKW1pnWkx8XZgYx+kmqdC+xsge2c1bnwAeMFf5k08+
OQn9RTWSlN2bhEjV4W7stoysTKL2meiEtG4QezGkCY6d34Xx9OwTtVyzvrHj
xM1bQqr9hH8+f3dKPWUurkbLPlOratxrgv22QYiEftQJYMOW98YyP8+Ulml1
+uvTI0sdTXWtqGtFiuuZlS7mtzWiy4KNGx4bB+P5Il1OWFqr7lQjMbKNeCOo
hOPSWI2Cd22eYHx3eYrgEeQ8mIFGrDyWIngaRFuCDjhmtGvC0AKAAoACgOsU
AKNoYecnnQd7B9S4160OluCznW+DC9yJtwEu8M0Po67qO3nnS9Nn46fO90bR
Z5MOdkDZevIrY36hajeF8r1l8WeqbYPWeWXdLybDhqU473jHO/CqsW2gj44z
OEsZJO+a1Eu0ZoNGBByeeumll04vbgOYXhcmV2GNEFy8AgT0FLtEWp4JnzET
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
Pcb15L/9f5nUUqY=\
\>"], "Graphics",
  Evaluatable->False,
  ImageSize->{89, 378.688},
  ImageMargins->0,
  ImageRegion->{{0, 1}, {0, 1}}]], "Picture"],

Cell["Fig. 9.1 The Basic Math Input palette", "Caption",
 CellChangeTimes->{{3.446333764316298*^9, 3.446333766181476*^9}},
 CellTags->"Fig. 9.1"],

Cell[TextData[{
 "\nFor example, the degree symbol ",
 Cell[BoxData[
  FormBox["\[Degree]", TraditionalForm]]],
 " can be used to replace the symbol ",
 StyleBox["Degree",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " in an expression, as in ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    RowBox[{"Cos", "[", 
     RowBox[{"45", " ", 
      FormBox["\[Degree]",
       TraditionalForm]}], "]"}],
    FontFamily->"Courier",
    FontWeight->"Bold"], TraditionalForm]]],
 ".  "
}], "Text"],

Cell[TextData[{
 "\tVariables can also be given overbars, tildes, or hats using the palettes. \
 For instance, the variable ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    OverscriptBox[
     StyleBox["x",
      FontSlant->"Plain"], "^"],
    FontFamily->"Courier",
    FontWeight->"Bold"], TraditionalForm]]],
 " was created by typing ",
 Cell[BoxData[
  FormBox[
   StyleBox["x",
    FontFamily->"Courier",
    FontWeight->"Bold",
    FontSlant->"Plain"], TraditionalForm]]],
 "  and then applying the button at the bottom ",
 "right-hand",
 " side of the basic input palette.  If you need to clear the value of this \
variable, you must type ",
 StyleBox["Remove[x]",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " rather than ",
 StyleBox["Remove[",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 Cell[BoxData[
  FormBox[
   OverscriptBox[
    StyleBox["x",
     FontSlant->"Plain"], "^"], TraditionalForm]],
  FontFamily->"Courier",
  FontWeight->"Bold"],
 StyleBox["].",
  FontFamily->"Courier",
  FontWeight->"Bold"]
}], "Text"],

Cell[TextData[{
 "\tSymbols with subscripts such as ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    SubscriptBox[
     StyleBox["x",
      FontSlant->Plain], 
     StyleBox["a",
      FontSlant->Plain]],
    FontFamily->"Courier",
    FontWeight->"Bold",
    FontSlant->"Plain"], TraditionalForm]]],
 " can also be defined. Superscripts as in ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    SuperscriptBox[
     StyleBox["x",
      FontSlant->Plain], 
     StyleBox["a",
      FontSlant->Plain]],
    FontFamily->"Courier",
    FontWeight->"Bold",
    FontSlant->"Plain"], TraditionalForm]]],
 " (almost) always mean ",
 Cell[BoxData[
  FormBox[
   StyleBox["x",
    FontFamily->"Courier",
    FontWeight->"Bold",
    FontSlant->"Plain"], TraditionalForm]]],
 " to the power ",
 Cell[BoxData[
  FormBox[
   StyleBox["a",
    FontFamily->"Courier",
    FontWeight->"Bold",
    FontSlant->"Plain"], TraditionalForm]]],
 ", so they should not be used to name variables. Two exceptions are ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    SuperscriptBox[
     StyleBox["x",
      FontSlant->"Plain"], "*"],
    FontFamily->"Courier",
    FontWeight->"Bold",
    FontSlant->"Plain"], TraditionalForm]]],
 ", and ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox[
    StyleBox["x",
     FontFamily->"Courier",
     FontWeight->"Bold",
     FontSlant->"Plain"], "\[Dagger]"], TraditionalForm]]],
 ". In this book we use the symbol ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["x", "*"], TraditionalForm]]],
 " in the text to mean the complex conjugate of ",
 Cell[BoxData[
  FormBox["x", TraditionalForm]]],
 "."
}], "Text",
 CellChangeTimes->{{3.446416568467716*^9, 3.446416568467832*^9}, 
   3.446416757231368*^9}],

Cell[TextData[{
 "\tHowever, these types of symbols should be used with care. For instance, \
if you define",
 Cell[BoxData[
  FormBox[
   RowBox[{" ", 
    RowBox[{
     StyleBox["x",
      FontFamily->"Courier",
      FontWeight->"Bold",
      FontSlant->"Plain"], " ", 
     StyleBox["=",
      FontFamily->"Courier",
      FontWeight->"Bold"], 
     StyleBox[" ",
      FontFamily->"Courier",
      FontWeight->"Bold"], 
     StyleBox["1",
      FontFamily->"Courier",
      FontWeight->"Bold"]}]}], TraditionalForm]]],
 ":"
}], "Text",
 CellChangeTimes->{{3.446416447948262*^9, 3.446416477083289*^9}, {
  3.446595525284045*^9, 3.44659552560074*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"x", "=", "1"}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.33"],

Cell[BoxData["1"], "Output",
 CellChangeTimes->{3.4463338086642*^9},
 CellTags->"Cell 9.33"]
}, Open  ]],

Cell[TextData[{
 "and then attempt to use a different variable ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    OverscriptBox[
     StyleBox["x",
      FontSlant->"Plain"], "^"],
    FontFamily->"Courier",
    FontWeight->"Bold"], TraditionalForm]]],
 " in a calculation, you will receive a rude shock:"
}], "Text",
 CellChangeTimes->{{3.446595532624445*^9, 3.4465955341879787`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"y", " ", "=", " ", 
  OverscriptBox["x", "^"]}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.34"],

Cell[BoxData[
 OverscriptBox["1", "^"]], "Output",
 CellChangeTimes->{3.446333811222773*^9},
 CellTags->"Cell 9.34"]
}, Open  ]],

Cell[TextData[{
 "The ",
 Cell[BoxData[
  FormBox[
   StyleBox["x",
    FontFamily->"Courier",
    FontWeight->"Bold",
    FontSlant->"Plain"], TraditionalForm]]],
 " in ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    OverscriptBox[
     StyleBox["x",
      FontSlant->"Plain"], "^"],
    FontFamily->"Courier",
    FontWeight->"Bold"], TraditionalForm]]],
 " has been replaced by ",
 Cell[BoxData[
  FormBox["1", TraditionalForm]]],
 " because you previously defined ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    RowBox[{
     StyleBox["x",
      FontSlant->"Plain"], "=", "1"}],
    FontFamily->"Courier",
    FontWeight->"Bold",
    FontSlant->"Plain"], TraditionalForm]]],
 ". Because of naming conflicts like this, complicated symbols with hats or \
subscripts should probably be avoided by beginning users. "
}], "Text",
 CellChangeTimes->{{3.446333971310277*^9, 3.446333981723961*^9}, {
  3.446595539590823*^9, 3.446595539866558*^9}}],

Cell[TextData[{
 "\tMany of the symbols on the palette can also be created using keystrokes. \
For example, Greek letters can be created using the escape key (Esc): Esc ",
 StyleBox["a",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " Esc creates ",
 StyleBox["\[Alpha]",
  FontFamily->"Symbol"],
 ", Esc ",
 StyleBox["b",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " Esc creates ",
 StyleBox["\[Beta]",
  FontFamily->"Symbol"],
 ", etc. Keyboard equivalents can be found by placing your cursor over the \
symbol in question in some of the palettes, such as the  Basic Typesetting \
palette (but not BasicInput). The keyboard equivalent appears at the bottom \
of the palette."
}], "Text",
 CellChangeTimes->{{3.446333880984799*^9, 3.4463339000723457`*^9}},
 CellTags->"i:11"],

Cell["\<\
\tIntrinsic functions can also be accessed from the palettes.  For example, \
the square root of an expression can be taken by highlighting the expression \
with the mouse, then clicking the square root symbol on the BasicInput \
palette. 
\tTo take a power of an expression, highlight the expression with the mouse,  \
click the power button (top left corner of the BasicInput palette) and  then \
key the power. \
\>", "Text"],

Cell["\<\
\tThe other intrinsic functions available on this and other palettes, such as \
sums, integrals, and derivatives, will be discussed in later sections of this \
chapter.\
\>", "Text"]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell["9.5 Lists, Vectors and Matrices", "Subtitle",
 CellTags->{"Sec. 9.5", "c:16"}],

Cell["", "Text"],

Cell[CellGroupData[{

Cell["9.5.1 Defining Lists, Vectors, and Matrices", "Subsubtitle",
 CellTags->"c:17"],

Cell[TextData[{
 "It is often useful to manipulate more than one number at the same time. To \
group numbers or variables or expressions together, use a ",
 StyleBox["list",
  FontSlant->"Italic"],
 ". For example, the following defines a list of four integers and names the \
list ",
 StyleBox["a",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ":"
}], "Text",
 CellTags->"i:26"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"a", " ", "=", " ", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"-", "1"}], ",", "4", ",", "2", ",", "6"}], "}"}]}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.35"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"-", "1"}], ",", "4", ",", "2", ",", "6"}], "}"}]], "Output"]
}, Open  ]],

Cell["\<\
Note that when typing the list, you must use curly brackets {}. \
\>", "Text",
 CellChangeTimes->{{3.446595582359833*^9, 3.4465955826209497`*^9}}],

Cell[TextData[{
 "This list is what one would call an \"array\" in a standard computer \
language like Fortran or C. In physics, this list might represent a \
four-dimensional vector. We use boldface to refer to vectors in the text, \
such as the vector ",
 StyleBox["a",
  FontWeight->"Bold"],
 StyleBox[" ",
  FontWeight->"Bold"],
 "that ",
 "corresponds to the",
 StyleBox[" Mathematica ",
  FontSlant->"Italic"],
 "list ",
 StyleBox["a",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 "."
}], "Text"],

Cell[TextData[{
 "\tThe dimension of a list is the number of elements in the list (the ",
 StyleBox["length",
  FontSlant->"Italic"],
 " of the list). In ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ", there is an intrinsic function called ",
 StyleBox["Length",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " that one can use to determine the dimension:"
}], "Text",
 CellTags->"i:27"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Length", "[", "a", "]"}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.36"],

Cell[BoxData["4"], "Output"]
}, Open  ]],

Cell["Here's another  list:  ", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"b", " ", "=", " ", 
  RowBox[{"{", 
   RowBox[{"x", ",", 
    RowBox[{"x", "+", 
     RowBox[{"2", "y"}]}], ",", 
    RowBox[{"Sqrt", "[", "2", "]"}], ",", "15.4"}], "}"}]}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.37"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"x", ",", 
   RowBox[{"x", "+", 
    RowBox[{"2", " ", "y"}]}], ",", 
   SqrtBox["2"], ",", "15.4`"}], "}"}]], "Output"]
}, Open  ]],

Cell["\<\
As you can see, the elements of a list don't have to be the same type of \
object: they can be mixtures of numbers, variables, expressions, or anything \
else you want.  For example, an element of a list can be another list:\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"c", " ", "=", " ", 
  RowBox[{"{", 
   RowBox[{"2", ",", "a"}], "}"}]}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.38"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"2", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "1"}], ",", "4", ",", "2", ",", "6"}], "}"}]}], 
  "}"}]], "Output"]
}, Open  ]],

Cell[TextData[{
 "If every element of a list is another list of the same dimension, then we \
have made a matrix. For example, since ",
 StyleBox["a",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " and ",
 StyleBox["b",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " are both of dimension 4, the object"
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"d", "=", 
  RowBox[{"{", 
   RowBox[{"a", ",", "b"}], "}"}]}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.39"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "1"}], ",", "4", ",", "2", ",", "6"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"x", "+", 
      RowBox[{"2", " ", "y"}]}], ",", 
     SqrtBox["2"], ",", "15.4`"}], "}"}]}], "}"}]], "Output"]
}, Open  ]],

Cell[TextData[{
 "is a matrix with two rows and four columns. To display this matrix in the \
standard way, use the intrinsic function ",
 StyleBox["MatrixForm",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ":"
}], "Text",
 CellTags->"i:28"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MatrixForm", "[", "d", "]"}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.40"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {
      RowBox[{"-", "1"}], "4", "2", "6"},
     {"x", 
      RowBox[{"x", "+", 
       RowBox[{"2", " ", "y"}]}], 
      SqrtBox["2"], "15.4`"}
    }], "\[NoBreak]", ")"}],
  MatrixForm[#]& ]], "Output"]
}, Open  ]],

Cell[TextData[{
 "\tIt is sometimes necessary to refer to particular elements of a list. For \
this ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " ",
 "uses ",
 "double square brackets, ",
 StyleBox["[[ ]]",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ". For example, the second element of ",
 StyleBox["a",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " can be referred to as  ",
 StyleBox["a",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 StyleBox["[[2]]",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ". Elements of a list can also be changed this way. For example,"
}], "Text",
 CellTags->"i:29"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"b", "[", 
   RowBox[{"[", "1", "]"}], "]"}], " ", "=", " ", 
  RowBox[{"-", "10"}]}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.41"],

Cell[BoxData[
 RowBox[{"-", "10"}]], "Output"]
}, Open  ]],

Cell[TextData[{
 "changed the first element of ",
 StyleBox["b",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " to -10, as you can see by asking for ",
 StyleBox["b",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 StyleBox[":",
  FontWeight->"Bold"]
}], "Text",
 CellChangeTimes->{{3.446595650392264*^9, 3.44659565065685*^9}}],

Cell[CellGroupData[{

Cell[BoxData["b"], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.42"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"-", "10"}], ",", 
   RowBox[{"x", "+", 
    RowBox[{"2", " ", "y"}]}], ",", 
   SqrtBox["2"], ",", "15.4`"}], "}"}]], "Output"]
}, Open  ]],

Cell[TextData[{
 "In the text, elements of a vector are often also referred to using \
subscript notation. For instance, the ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    RowBox[{
     StyleBox["i",
      FontSlant->"Italic"], "th"}]], TraditionalForm]]],
 " element of a vector ",
 Cell[BoxData[
  FormBox[
   StyleBox["a",
    FontWeight->"Bold",
    FontSlant->"Plain"], TraditionalForm]]],
 " may be written as ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["a", "i"], TraditionalForm]]],
 ", or as ",
 StyleBox["a",
  FontWeight->"Bold"],
 "[[",
 StyleBox["i",
  FontSlant->"Italic"],
 "]]."
}], "Text"],

Cell[TextData[{
 "\t In order to refer to elements of a matrix, use row/column notation in \
the square brackets. For example ",
 StyleBox["d[[1,3]]",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " is the element of ",
 StyleBox["d",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " in the first row, third column :"
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"d", "[", 
  RowBox[{"[", 
   RowBox[{"1", ",", "3"}], "]"}], "]"}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.43"],

Cell[BoxData["2"], "Output"]
}, Open  ]],

Cell[TextData[{
 "You can also think of this reference in terms of nested lists.  If the ",
 StyleBox["i",
  FontSlant->"Italic"],
 "th element of list ",
 StyleBox["c",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " is also a list, then the ",
 StyleBox["j",
  FontSlant->"Italic"],
 "th element of ",
 StyleBox["that",
  FontSlant->"Italic"],
 " list can be picked out using the notation ",
 StyleBox["c[[i,j]]",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ", or the equivalent notation ",
 StyleBox["c[[i]][[j]]",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " .  If ",
 StyleBox["this",
  FontSlant->"Italic"],
 " element is also a list, you can pick out the ",
 StyleBox["k",
  FontSlant->"Italic"],
 "th element of ",
 StyleBox["that",
  FontSlant->"Italic"],
 " list using ",
 StyleBox["c[[i,j,k]]",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " or ",
 StyleBox["c[[i]][[j]][[k]]",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ", and so on. "
}], "Text",
 CellChangeTimes->{{3.44659566612752*^9, 3.446595675710266*^9}}],

Cell[TextData[{
 "\tFor example, the second element of  ",
 StyleBox["c",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 StyleBox[" ",
  FontFamily->"Courier"],
 StyleBox["= {2,{-1,4,2,6}}",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " is the list ",
 StyleBox["{-1,4,2,6}",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ", and you can choose the fourth element  from that list by asking for ",
 StyleBox["c[[2,4]]",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " or equivalently "
}], "Text",
 CellChangeTimes->{{3.446595684013804*^9, 3.44659568431676*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"c", "[", 
   RowBox[{"[", "2", "]"}], "]"}], "[", 
  RowBox[{"[", "4", "]"}], "]"}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.44"],

Cell[BoxData["6"], "Output"]
}, Open  ]],

Cell[TextData[Cell[BoxData[GridBox[{
   {
    RowBox[{
     StyleBox[
      RowBox[{
       RowBox[{
       "Table", " ", "9.7", " ", "Some", " ", "Definitions", " ", "Involving",
         " ", "Lists"}], ",", " ", 
       RowBox[{"Vectors", " ", "and", " ", "Matrices"}]}],
      FontSize->9], "\[IndentingNewLine]"}]},
   {
    StyleBox[GridBox[{
       {Cell[TextData[StyleBox["{a,b,c}",
         FontWeight->"Bold"]]], 
        RowBox[{
         RowBox[{"A", " ", "list"}], ",", 
         RowBox[{"or", " ", "the", " ", "vector", " ", 
          RowBox[{"(", 
           StyleBox[
            RowBox[{"a", ",", "b", ",", "c"}],
            FontSlant->"Italic"], ")"}]}]}]},
       {Cell[TextData[StyleBox["{{a,b,c},{d,e,f}}",
         FontWeight->"Bold"]]], 
        RowBox[{
         RowBox[{"A", " ", "2"}], "-", "by", "-", " ", 
         RowBox[{"3", " ", "matrix", " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"2", " ", "rows"}], ",", 
            RowBox[{"3", " ", "columns"}]}], ")"}]}]}]},
       {
        RowBox[{
         StyleBox[
          RowBox[{"list", "[", 
           RowBox[{"[", "i", "]"}], "]"}],
          FontFamily->"Courier",
          FontWeight->"Bold"], "\[IndentingNewLine]"}], 
        RowBox[{"The", " ", 
         StyleBox[
          RowBox[{
           StyleBox["i",
            FontSlant->"Italic"], "th"}]], " ", "element", " ", "of", " ", 
         StyleBox["list",
          FontFamily->"Courier",
          FontWeight->"Bold"]}]},
       {
        RowBox[{
         StyleBox[
          RowBox[{"matrix", "[", 
           RowBox[{"[", 
            RowBox[{"i", ",", "j"}], "]"}], "]"}],
          FontFamily->"Courier",
          FontWeight->"Bold"], "\[IndentingNewLine]", "or", 
         "\[IndentingNewLine]", 
         StyleBox[
          RowBox[{
           RowBox[{"matrix", "[", 
            RowBox[{"[", "i", "]"}], "]"}], "[", 
           RowBox[{"[", "j", "]"}], "]"}],
          FontFamily->"Courier",
          FontWeight->"Bold"], "\[IndentingNewLine]"}], 
        RowBox[{"\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"The", " ", "element", " ", "in", " ", "the", " ", 
           StyleBox[
            RowBox[{
             StyleBox["i",
              FontSlant->"Italic"], "th"}]], " ", "row"}], ",", 
          RowBox[{
           StyleBox[
            RowBox[{
             StyleBox["j",
              FontSlant->"Italic"], "th"}]], " ", "column", " ", "of", " ", 
           StyleBox["matrix",
            FontFamily->"Courier",
            FontWeight->"Bold"]}]}]}]},
       {
        StyleBox[
         RowBox[{"MatrixForm", "[", "matrix", "]"}],
         FontFamily->"Courier",
         FontWeight->"Bold"], 
        RowBox[{"Display", " ", "the", " ", 
         StyleBox["matrix",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         StyleBox[" ",
          FontSlant->"Italic"], "in", " ", "standard", " ", 
         RowBox[{"row", "/", "column"}], " ", "format"}]}
      },
      GridBoxAlignment->{
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[2.6599999999999997`]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}],
     FontFamily->"Times"]}
  }]]]], "Text",
 CellFrame->True,
 Background->GrayLevel[0.849989]]
}, Closed]],

Cell[CellGroupData[{

Cell["9.5.2 Vector and Matrix Operations", "Subsubtitle",
 CellTags->{"i:98", "c:18"}],

Cell[CellGroupData[{

Cell["Vector Addition", "Section",
 CellTags->"c:19"],

Cell[TextData[{
 "One way that vectors are used in the physical sciences is to denote \
displacements. For example, a displacement of 3 meters in the x direction and \
2 meters in the y direction can be written as the vector (3,2) . Say a \
displacement ",
 StyleBox["z",
  FontWeight->"Bold"],
 " consists of the sum of three separate displacements ",
 StyleBox["u ",
  FontWeight->"Bold"],
 "= (3,2), ",
 StyleBox["v ",
  FontWeight->"Bold"],
 "= (-3,3), and ",
 StyleBox["w ",
  FontWeight->"Bold"],
 "= (2,-1), we would write this mathematically as ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    StyleBox["z",
     FontWeight->"Bold",
     FontSlant->"Plain"], " ", "=", " ", 
    RowBox[{
     StyleBox["u",
      FontWeight->"Bold",
      FontSlant->"Plain"], " ", "+", 
     StyleBox["v",
      FontWeight->"Bold",
      FontSlant->"Plain"], " ", "+", " ", 
     StyleBox["w",
      FontWeight->"Bold",
      FontSlant->"Plain"]}]}], TraditionalForm]]],
 ". Pictorially, this sum looks like Fig. ",
 ButtonBox["9.2",
  BaseStyle->"Hyperlink",
  ButtonData:>"Fig. 9.2"],
 "."
}], "Text"],

Cell[BoxData[Cell[GraphicsData["CompressedBitmap", "\<\
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
4guaghehWrXh6v318mBGSEpFpGujiRa15lxxHxdlVzG4OKiV0vL5SvwDFJsP
hVVDjVUH24lDfTRwCbEsr+holQEa1aoWqtFZ28osFJNUnQXA/lYxAePCokrS
Vr5uFSdMbfujnXbHonmbpZ7oks/IFMf7WPIzO80py4GyzUR1iJMVW8flZHe3
M4q+mDorLW72VPg0xzyaIj4TSS4MNGhIeV2oFZ0jOLhd7AODDVoc7UXiI/JU
luAuPdgICmGtSoVKe1sYhf09tFzZGZ+yYI3tVJYDSgzKHdxP21YWjTIbxv61
oRwz+vv/h5iZh6HNCuP96AOqS21GoylOlqAx9iA+Qlu0oTMEI3ruUbKoqXjW
i+Gv2RsaGpTHZCQmw94ByJ62P0GjBjWfUcUNkR4GtC/EPOzaRhgypxhX4p1/
coUNdiDRKVzF/S5KVGsdqpWKSszW5KUVMoXWHh3HdUaaicIcaVHz8Fts+INQ
ZTN4+Q1c0v5N4jaaz/vPcnV8mM9uwwaC+wZq8wUhY8MYoZreoCaPzgQBZcv3
h2CFNRUqdo8ORl30N+jZvBuMLqDVPf5xucvfmpWOqlkaEoBKAshUtMBJqUuX
G8BC4ZMyOSBAmXMbc7CatrtKFbmf0t15y5jG6MiR8JRNxCRMe7sIZlmB3Et9
kPZh2xQ0spe2nrKh7xfjUqDT+cflrhDSOV+GDtNDvYsiagtL2tlvLr2n0oZ8
raBSCv2drTJidNnozjXeZUsbTkWK8ZZmWhXNrKwKPcHncmoParxCFaMVCu2o
W5+9IwVqrErxDzZwTswxA7+4sBM9TetJt2HeOK3jn2xUqciA6yiRyyiCpWCx
kx8Xqlt+PRYpdCpRUtyvUpRphuMZOttK7rrywNsIRs2oQxmsrc7G2HrOywq0
aytahgnRV6WNFYoK83XZaZyNlSkbYRyiyKc1PA1OalBjZ0JGED40Omo6nAjI
WpfGZuAo7tRBRaXY61TqshrS6j2+6S/Px9Fp5JxqER4i3aOaOb1qEIEJhIYq
pRM5C6vQ0FohrjUR/Ma147L+fZJKRQ4Fdigk+yySZM5KEUzsdDlMMWotTt02
ptsTqjxZkF2tFbnD0EAhFAKcQfj4Jot+sRdptaLxIXckhWXkRlVycurTYq/N
aj1b7JVruIV+T2mmMF/DqR6O2pnBCOlbBE7N+u9RFfD+roPIQUqNE5suhsVO
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
jh/+7/5QG/HfB/gUrw==\
\>"], "Picture",
  Evaluatable->False,
  ImageSize->{204.375, 287.938},
  ImageMargins->0,
  ImageRegion->{{0, 1}, {0, 1}}]], "Picture"],

Cell[TextData[{
 "Fig. 9.2 Addition of three vectors ",
 StyleBox["u",
  FontWeight->"Bold"],
 ", ",
 StyleBox["v",
  FontWeight->"Bold"],
 ", and ",
 StyleBox["w",
  FontWeight->"Bold"],
 "."
}], "Caption",
 CellTags->"Fig. 9.2"],

Cell[TextData[{
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " allows us to add and subtract vectors just as we would scalars. In ",
 StyleBox["Mathematica, ",
  FontSlant->"Italic"],
 "we can determine the total displacement thusly :"
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"u", "=", 
   RowBox[{"{", 
    RowBox[{"3", ",", "2"}], "}"}]}], ";", " ", 
  RowBox[{"v", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "3"}], ",", "3"}], "}"}]}], ";", 
  RowBox[{"w", "=", 
   RowBox[{"{", 
    RowBox[{"2", ",", 
     RowBox[{"-", "1"}]}], "}"}]}], ";"}], "\n", 
 RowBox[{"z", "=", 
  RowBox[{"u", "+", "v", "+", "w"}]}]}], "Input",
 ShowCellTags->True,
 CellChangeTimes->{{3.446417046263101*^9, 3.44641705161261*^9}},
 CellTags->"Cell 9.45"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"2", ",", "4"}], "}"}]], "Output",
 CellChangeTimes->{{3.446417047569263*^9, 3.446417052945784*^9}},
 CellTags->"Cell 9.45"]
}, Open  ]],

Cell[TextData[{
 "Here I have also shown you a useful trick that can save time. You can put \
more than one command on the same line in a cell by separating each command \
with a semicolon  ",
 StyleBox[";",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " . Inserting the semicolons also turns off the output from the given \
commands, so that only the last command ",
 StyleBox["z = u + v + w",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 "  is returned in the above cell  (since it is without a semicolon)."
}], "Text"],

Cell["\<\
Question: what do you think would happen if you put a semicolon at the end of \
the last command as well? Try it!\
\>", "Text"]
}, Closed]],

Cell[CellGroupData[{

Cell["Dot Product", "Section",
 CellTags->{"i:31", "c:20"}],

Cell[TextData[{
 "If two vectors, ",
 StyleBox["a",
  FontWeight->"Bold"],
 " and ",
 StyleBox["b",
  FontWeight->"Bold"],
 ",  have the same dimension ",
 Cell[BoxData[
  FormBox["N", TraditionalForm]]],
 ", we can take their dot product. The dot product is ",
 "defined as",
 " "
}], "Text"],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     StyleBox["a",
      FontWeight->"Bold",
      FontSlant->"Plain"], "\[CenterDot]", 
     StyleBox["b",
      FontWeight->"Bold",
      FontSlant->"Plain"]}], "=", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{
         StyleBox["a",
          FontWeight->"Bold",
          FontSlant->"Plain"], "[", 
         RowBox[{"[", "1", "]"}], "]"}], 
        RowBox[{
         StyleBox["b",
          FontWeight->"Bold",
          FontSlant->"Plain"], "[", 
         RowBox[{"[", "1", "]"}], "]"}]}], "+", 
       RowBox[{
        StyleBox["a",
         FontWeight->"Bold",
         FontSlant->"Plain"], "[", 
        RowBox[{"[", "2", "]"}], "]"}], "+", 
       RowBox[{
        StyleBox["b",
         FontWeight->"Bold",
         FontSlant->"Plain"], "[", 
        RowBox[{"[", "2", "]"}], "]"}], "+"}], "..."}], "+", 
     RowBox[{
      RowBox[{
       StyleBox["a",
        FontWeight->"Bold",
        FontSlant->"Plain"], "[", 
       RowBox[{"[", "N", "]"}], "]"}], 
      RowBox[{
       StyleBox["b",
        FontWeight->"Bold",
        FontSlant->"Plain"], "[", 
       RowBox[{"[", "N", "]"}], "]"}]}]}]}], TraditionalForm]]],
 "."
}], "NumberedEquation",
 CellTags->"(9.5.1)"],

Cell[TextData[{
 "You have probably seen a second way to write this sum, using the sum \
symbol, an oversize Greek letter ",
 StyleBox["\[CapitalSigma]",
  FontFamily->"Symbol"],
 ", and subscript notation for the elements of the vectors,  as in"
}], "Text"],

Cell[TextData[Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{
    StyleBox["a",
     FontWeight->"Bold",
     FontSlant->"Plain"], "\[CenterDot]", 
    StyleBox["b",
     FontWeight->"Bold",
     FontSlant->"Plain"]}], "=", 
   RowBox[{
    UnderoverscriptBox["\[Sum]", 
     RowBox[{"i", "=", "1"}], "N"], 
    RowBox[{
     SubscriptBox["a", 
      StyleBox["i",
       FontWeight->"Plain",
       FontSlant->"Italic"]], 
     StyleBox[" ",
      FontSlant->"Italic"], 
     StyleBox[
      SubscriptBox["b", 
       StyleBox["i",
        FontWeight->"Plain",
        FontSlant->"Italic"]],
      FontSlant->"Italic"]}]}]}], TraditionalForm]]]], "NumberedEquation",
 CellTags->"(9.5.2)"],

Cell[TextData[{
 "In ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ", the dot product operation can be performed using the notation ",
 StyleBox["a",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 StyleBox[".",
  FontFamily->"Courier"],
 StyleBox["b",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 "."
}], "Text"],

Cell[TextData[{
 "For example, using our previously defined four-dimensional vectors ",
 StyleBox["a",
  FontWeight->"Bold"],
 " and ",
 StyleBox["b",
  FontWeight->"Bold"],
 " (see Cells ",
 ButtonBox["9.35",
  BaseStyle->"Hyperlink",
  ButtonData->"Cell 9.35"],
 " and ",
 ButtonBox["9.37",
  BaseStyle->"Hyperlink",
  ButtonData->"Cell 9.37"],
 "), we can find their dot product by typing a period . between the two \
vectors:"
}], "Text",
 CellChangeTimes->{{3.458910710378086*^9, 3.458910726552567*^9}, {
  3.4589107638105164`*^9, 3.458910784207988*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"a", ".", "b"}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.46"],

Cell[BoxData[
 RowBox[{"105.22842712474619`", "\[InvisibleSpace]", "+", 
  RowBox[{"4", " ", 
   RowBox[{"(", 
    RowBox[{"x", "+", 
     RowBox[{"2", " ", "y"}]}], ")"}]}]}]], "Output"]
}, Open  ]],

Cell[TextData[{
 "The dot product of a vector ",
 StyleBox["a ",
  FontWeight->"Bold"],
 "with itself is the square of the length of that vector, ",
 Cell[BoxData[
  FormBox[
   RowBox[{"|", 
    StyleBox["a",
     FontWeight->"Bold",
     FontSlant->"Plain"], 
    SuperscriptBox["|", "2"]}], TraditionalForm]]],
 " : "
}], "Text",
 CellTags->"i:42"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"a", ".", "a"}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.47"],

Cell[BoxData["57"], "Output"]
}, Open  ]],

Cell[TextData[{
 "(Don't confuse the ",
 StyleBox["Length",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " function with the length of the vector as defined above. The ",
 StyleBox["Length",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " function gives the number of elements of the vector (its dimension). For \
example, ",
 StyleBox["Length[a]",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " returns 4, not  ",
 Cell[BoxData[
  FormBox[
   SqrtBox["57"], TraditionalForm]]],
 ". )"
}], "Text"],

Cell[TextData[{
 "Two vectors are said to be ",
 StyleBox["orthogonal",
  FontSlant->"Italic"],
 " when their dot product is zero. Pictorially, this indicates that there is \
a right angle between the vectors.  For example, in ",
 ButtonBox["Fig. 9.2",
  BaseStyle->"Hyperlink",
  ButtonData:>"Fig. 9.2"],
 ", it appears that ",
 StyleBox["w",
  FontWeight->"Bold"],
 " and ",
 StyleBox["z",
  FontWeight->"Bold"],
 " are orthogonal.  This can easily be verified by hand:\n"
}], "Text"],

Cell[TextData[Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{
    StyleBox["w",
     FontWeight->"Bold",
     FontSlant->"Plain"], "\[CenterDot]", 
    StyleBox["z",
     FontWeight->"Bold",
     FontSlant->"Plain"]}], "=", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"2", ",", 
       RowBox[{"-", "1"}]}], ")"}], "\[CenterDot]", 
     RowBox[{"(", 
      RowBox[{"2", ",", "4"}], ")"}]}], "=", 
    RowBox[{
     RowBox[{"4", "-", "4"}], "=", "0."}]}]}], 
  TraditionalForm]]]], "NumberedEquation",
 CellTags->"(9.5.3)"],

Cell["\<\

More generally, the dot product of two vectors is related to their length and \
the angle between them: \
\>", "Text"],

Cell[TextData[Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{
    StyleBox["u",
     FontWeight->"Bold",
     FontSlant->"Plain"], "\[CenterDot]", 
    StyleBox["z",
     FontWeight->"Bold",
     FontSlant->"Plain"]}], "=", 
   RowBox[{"|", 
    RowBox[{
     StyleBox["u",
      FontWeight->"Bold",
      FontSlant->"Plain"], "||", 
     StyleBox["z",
      FontWeight->"Bold",
      FontSlant->"Plain"]}], "|", "cos\[Theta]"}]}], 
  TraditionalForm]]]], "NumberedEquation",
 CellTags->"(9.5.4)"],

Cell[TextData[{
 "where ",
 StyleBox[" ",
  FontFamily->"Symbol",
  FontSlant->"Italic"],
 Cell[BoxData[
  FormBox["\[Theta]", TraditionalForm]]],
 StyleBox[" ",
  FontFamily->"Symbol"],
 StyleBox[" ",
  FontSlant->"Italic"],
 "is the angle between the vectors, as shown in ",
 ButtonBox["Fig. 9.2",
  BaseStyle->"Hyperlink",
  ButtonData:>"Fig. 9.2"]
}], "Text"]
}, Closed]],

Cell[CellGroupData[{

Cell["Matrix Multiplication", "Section",
 CellTags->{"i:32", "c:21"}],

Cell[TextData[{
 "Matrix multiplication can also be carried out using the dot product \
notation. For example, if a vector ",
 StyleBox["a",
  FontWeight->"Bold"],
 " has dimension ",
 StyleBox["N",
  FontSlant->"Italic"],
 " and a matrix ",
 StyleBox["d",
  FontWeight->"Bold"],
 " has ",
 StyleBox["N",
  FontSlant->"Italic"],
 " columns and ",
 StyleBox["M",
  FontSlant->"Italic"],
 " rows, then the dot product of ",
 StyleBox["d ",
  FontWeight->"Bold"],
 "with ",
 StyleBox["a ",
  FontWeight->"Bold"],
 "is a vector ",
 StyleBox["e",
  FontWeight->"Bold"],
 " with ",
 StyleBox["M",
  FontSlant->"Italic"],
 " elements.  The ",
 StyleBox["i",
  FontSlant->"Italic"],
 "th element of ",
 StyleBox["e ",
  FontWeight->"Bold"],
 "is the dot product of row  ",
 StyleBox["d",
  FontWeight->"Bold"],
 "[[",
 StyleBox["i",
  FontSlant->"Italic"],
 "]] with ",
 StyleBox["a:",
  FontWeight->"Bold"]
}], "Text"],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     StyleBox["e",
      FontWeight->"Bold",
      FontSlant->"Plain"], 
     StyleBox["[",
      FontWeight->"Plain",
      FontSlant->"Italic"], 
     StyleBox[
      RowBox[{"[", "i", "]"}],
      FontWeight->"Plain",
      FontSlant->"Italic"], 
     StyleBox["]",
      FontWeight->"Plain",
      FontSlant->"Italic"]}], 
    StyleBox["=",
     FontWeight->"Plain",
     FontSlant->"Italic"], 
    RowBox[{
     RowBox[{
      StyleBox["d",
       FontWeight->"Bold",
       FontSlant->"Plain"], 
      StyleBox["[",
       FontWeight->"Plain",
       FontSlant->"Italic"], 
      StyleBox[
       RowBox[{"[", "i", "]"}],
       FontWeight->"Plain",
       FontSlant->"Italic"], 
      StyleBox["]",
       FontWeight->"Plain",
       FontSlant->"Italic"]}], "\[CenterDot]", 
     StyleBox["a",
      FontWeight->"Bold",
      FontSlant->"Plain"]}]}], TraditionalForm]]],
 Cell[BoxData[
  FormBox[
   RowBox[{"=", 
    FormBox[
     RowBox[{
      UnderoverscriptBox["\[Sum]", 
       RowBox[{"i", "=", "1"}], "N"], 
      RowBox[{
       RowBox[{
        StyleBox["d",
         FontWeight->"Bold",
         FontSlant->"Plain"], 
        StyleBox["[",
         FontSlant->"Plain"], 
        RowBox[{
         StyleBox["[",
          FontSlant->"Plain"], 
         StyleBox[
          RowBox[{"i", ",", "j"}],
          FontSlant->"Italic"], 
         StyleBox["]",
          FontSlant->"Plain"]}], 
        StyleBox["]",
         FontSlant->"Plain"]}], 
       StyleBox[" ",
        FontWeight->"Bold",
        FontSlant->"Italic"], 
       RowBox[{
        StyleBox["a",
         FontWeight->"Bold",
         FontSlant->"Plain"], 
        StyleBox["[",
         FontWeight->"Plain",
         FontSlant->"Plain"], 
        StyleBox[
         RowBox[{
          StyleBox["[",
           FontSlant->"Plain"], 
          StyleBox["j",
           FontSlant->"Italic"], 
          StyleBox["]",
           FontSlant->"Plain"]}],
         FontWeight->"Plain"], 
        StyleBox["]",
         FontWeight->"Plain",
         FontSlant->"Plain"]}]}]}],
     TraditionalForm]}], TraditionalForm]]]
}], "NumberedEquation",
 CellTags->"(9.5.5)"],

Cell[TextData[{
 "This equation can also be written without referring to the vector elements: \
",
 StyleBox[" ",
  FontWeight->"Bold"],
 Cell[BoxData[
  FormBox[
   RowBox[{
    StyleBox["e",
     FontWeight->"Bold",
     FontSlant->"Plain"], "=", 
    RowBox[{
     StyleBox["d",
      FontWeight->"Bold",
      FontSlant->"Plain"], "\[CenterDot]", 
     StyleBox["a",
      FontWeight->"Bold",
      FontSlant->"Plain"]}]}], TraditionalForm]]],
 "."
}], "Text"],

Cell[TextData[{
 StyleBox["\t",
  FontWeight->"Bold"],
 "For our example where ",
 StyleBox["d",
  FontWeight->"Bold"],
 " has two rows and four columns and ",
 StyleBox["a ",
  FontWeight->"Bold"],
 "has dimension 4, this equation is actually two equations for the two \
elements of ",
 StyleBox["e",
  FontWeight->"Bold"],
 ": "
}], "Text"],

Cell[TextData[Cell[BoxData[{
 FormBox[
  RowBox[{
   RowBox[{"(", "\[NegativeThinSpace]", GridBox[{
      {
       RowBox[{
        StyleBox["e",
         FontWeight->"Bold",
         FontSlant->"Plain"], "[", 
        RowBox[{"[", "1", "]"}], "]"}]},
      {
       RowBox[{
        StyleBox["e",
         FontWeight->"Bold",
         FontSlant->"Plain"], "[", 
        RowBox[{"[", "2", "]"}], "]"}]}
     }], "\[NegativeThinSpace]", ")"}], "=", 
   RowBox[{
    RowBox[{"(", "\[NegativeThinSpace]", 
     RowBox[{GridBox[{
        {
         RowBox[{"-", "1"}], "4"},
        {"x", 
         RowBox[{"x", "+", 
          RowBox[{"2", "y"}]}]}
       }], GridBox[{
        {"2", "6"},
        {
         SqrtBox["2"], "15.4"}
       }]}], "\[NegativeThinSpace]", ")"}], "\[CenterDot]", 
    RowBox[{"(", "\[NoBreak]", GridBox[{
       {
        RowBox[{"-", "1"}]},
       {"4"},
       {"2"},
       {"6"}
      },
      GridBoxAlignment->{
       "Columns" -> {{Decimal}}, "ColumnsIndexed" -> {}, 
        "Rows" -> {{Baseline}}, "RowsIndexed" -> {}}], "\[NoBreak]", 
     ")"}]}]}], TraditionalForm], "\[IndentingNewLine]", 
 FormBox[
  RowBox[{"         ", 
   RowBox[{"=", " ", 
    RowBox[{"(", "\[NegativeThinSpace]", GridBox[{
       {
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"-", "1"}], ",", "4", ",", "2", ",", "6"}], ")"}], 
         "\[CenterDot]", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"-", "1"}], ",", "4", ",", "2", ",", "6"}], ")"}]}]},
       {
        RowBox[{
         RowBox[{"(", 
          RowBox[{"x", ",", 
           RowBox[{"x", "+", 
            RowBox[{"2", "y"}]}], ",", 
           SqrtBox["2"], ",", "15.4"}], ")"}], "\[CenterDot]", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"-", "1"}], ",", "4", ",", "2", ",", "6"}], ")"}]}]}
      }], "\[NegativeThinSpace]", ")"}]}]}], 
  TraditionalForm], "\[IndentingNewLine]", 
 FormBox[
  RowBox[{
   RowBox[{"(", "\[NegativeThinSpace]", GridBox[{
      {
       RowBox[{
        StyleBox["e",
         FontWeight->"Bold",
         FontSlant->"Plain"], "[", 
        RowBox[{"[", "1", "]"}], "]"}]},
      {
       RowBox[{
        StyleBox["e",
         FontWeight->"Bold",
         FontSlant->"Plain"], "[", 
        RowBox[{"[", "2", "]"}], "]"}]}
     }], "\[NegativeThinSpace]", ")"}], "=", " ", 
   RowBox[{"(", "\[NegativeThinSpace]", GridBox[{
      {"57"},
      {
       RowBox[{
        RowBox[{"-", "x"}], "+", 
        RowBox[{"4", 
         RowBox[{"(", 
          RowBox[{"x", "+", 
           RowBox[{"2", "y"}]}], ")"}]}], "+", 
        RowBox[{"2", 
         SqrtBox["2"]}], "+", 
        RowBox[{"6", "\[CenterDot]", "15.4"}]}]}
     }], "\[NegativeThinSpace]", ")"}]}], 
  TraditionalForm]}]]], "NumberedEquation",
 CellTags->"(9.5.6)"],

Cell[TextData[{
 "In ",
 StyleBox["Mathematica ",
  FontSlant->"Italic"],
 " this matrix multiplication can be done in one step using dot product \
notation:"
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"e", "=", 
  RowBox[{"d", ".", "a"}]}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.48"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"57", ",", 
   RowBox[{"95.22842712474619`", "\[InvisibleSpace]", "-", "x", "+", 
    RowBox[{"4", " ", 
     RowBox[{"(", 
      RowBox[{"x", "+", 
       RowBox[{"2", " ", "y"}]}], ")"}]}]}]}], "}"}]], "Output"]
}, Open  ]],

Cell[TextData[{
 "The operations of this subection are summarized in Table ",
 ButtonBox["9.8",
  BaseStyle->"Hyperlink",
  ButtonData:>"Table 9.8"],
 "."
}], "Text"],

Cell[TextData[Cell[BoxData[GridBox[{
   {
    StyleBox[
     RowBox[{
     "Table", "9.8", " ", "Simple", " ", "vector", " ", "and", " ", "matrix", 
      " ", "operations"}],
     FontSize->9,
     FontWeight->"Plain"]},
   {
    StyleBox[GridBox[{
       {Cell[TextData[StyleBox["a+b",
         FontWeight->"Bold"]]], 
        RowBox[{"Vector", " ", "addition"}]},
       {Cell[TextData[StyleBox["a.b",
         FontWeight->"Bold"]]], 
        RowBox[{
        "Vector", " ", "or", " ", "matrix", " ", "multiplication", " ", 
         RowBox[{"(", 
          RowBox[{"dot", " ", "product"}], ")"}]}]}
      },
      GridBoxAlignment->{
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[1.9599999999999997`]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}],
     FontFamily->"Times"]}
  }]]]], "Text",
 CellFrame->True,
 Background->GrayLevel[0.849989],
 CellTags->"Table 9.8"]
}, Closed]],

Cell[CellGroupData[{

Cell["Other Matrix Operations", "Section",
 CellTags->"c:22"],

Cell[CellGroupData[{

Cell["1.  Transpose", "Subsubsection",
 FontWeight->"Bold",
 CellTags->"i:33"],

Cell[TextData[{
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " supports a full suite of intrinsic functions for operating on matrices and \
vectors. For example, the transpose of a matrix ",
 StyleBox["d",
  FontWeight->"Bold"],
 ", ",
 StyleBox["Transpose[d]",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ", is the matrix obtained by exchanging the rows with the columns:"
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MatrixForm", "[", 
  RowBox[{"Transpose", "[", "d", "]"}], "]"}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.49"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {
      RowBox[{"-", "1"}], "x"},
     {"4", 
      RowBox[{"x", "+", 
       RowBox[{"2", " ", "y"}]}]},
     {"2", 
      SqrtBox["2"]},
     {"6", "15.4`"}
    }], "\[NoBreak]", ")"}],
  MatrixForm[#]& ]], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["2. Inverse, the Unit Matrix", "Subsubsection",
 FontWeight->"Bold",
 CellTags->"i:34"],

Cell["\<\
There are a number of operations that are useful for square matrices, which \
have the same number of rows and columns.  Consider for example the following \
simple 2x2 matrix: \
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"f", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", 
       RowBox[{"-", "1"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "1"}], "}"}]}], "}"}]}], ";"}], "\n", 
 RowBox[{" ", 
  RowBox[{"MatrixForm", "[", "f", "]"}]}]}], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.50"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"1", 
      RowBox[{"-", "1"}]},
     {"1", "1"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.44641711508358*^9},
 CellTags->"Cell 9.50"]
}, Open  ]],

Cell[TextData[{
 "The inverse of this matrix, ",
 StyleBox["Inverse[f]",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ", or ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox[
    StyleBox["f",
     FontWeight->"Bold",
     FontSlant->"Plain"], 
    RowBox[{" ", 
     RowBox[{"-", "1"}]}]], TraditionalForm]]],
 "in traditional mathematical notation, is another matrix with the same \
dimensions:"
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"f1", " ", "=", " ", 
   RowBox[{"Inverse", "[", "f", "]"}]}], ";"}], "\n", 
 RowBox[{"MatrixForm", "[", "f1", "]"}]}], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.51"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {
      FractionBox["1", "2"], 
      FractionBox["1", "2"]},
     {
      RowBox[{"-", 
       FractionBox["1", "2"]}], 
      FractionBox["1", "2"]}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{{3.446417107569615*^9, 3.4464171210269127`*^9}},
 CellTags->"Cell 9.51"]
}, Open  ]],

Cell[TextData[{
 "This matrix has the typical property of an inverse: when the matrix ",
 StyleBox["f",
  FontWeight->"Bold"],
 " is multiplied by its inverse ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox[
    StyleBox[
     RowBox[{"f", " "}],
     FontWeight->"Bold",
     FontSlant->"Plain"], 
    RowBox[{"-", "1"}]], TraditionalForm]]],
 ", the result is the ",
 StyleBox["unit matrix ",
  FontSlant->"Italic"],
 "called",
 " ",
 StyleBox["unit",
  FontWeight->"Bold"],
 " :"
}], "Text",
 CellTags->"i:104"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"unit", "=", 
   RowBox[{"f", ".", "f1"}]}], ";"}], "\n", 
 RowBox[{"MatrixForm", "[", "unit", "]"}]}], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.52"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"1", "0"},
     {"0", "1"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.446417128433651*^9},
 CellTags->"Cell 9.52"]
}, Open  ]],

Cell[TextData[{
 "The ",
 StyleBox["unit",
  FontWeight->"Bold"],
 " matrix consists of 1's on the diagonal and 0's everywhere else, and has \
the property that when it acts on any vector it returns that vector unchanged \
(like multiplying a number by 1):"
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"unit", ".", 
  RowBox[{"{", 
   RowBox[{"x", ",", "y"}], "}"}]}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.53"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"x", ",", "y"}], "}"}]], "Output",
 CellChangeTimes->{{3.4464171316702433`*^9, 3.446417146275856*^9}},
 CellTags->"Cell 9.53"]
}, Open  ]],

Cell[TextData[{
 "The matrix inverse comes in handy when solving coupled sets of ",
 StyleBox["N",
  FontSlant->"Italic"],
 " linear equations in ",
 StyleBox["N",
  FontSlant->"Italic"],
 " unknowns. Such equations can be written in matrix form. For example,  the \
equations ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{"x", "-", "y"}], " ", "=", " ", "r"}], ",", " ", 
    RowBox[{
     RowBox[{"x", "+", "y"}], " ", "=", " ", "s"}]}], TraditionalForm]]],
 " can be written in terms of the matrix ",
 StyleBox["f",
  FontWeight->"Bold"],
 " defined in Cell ",
 ButtonBox["9.50",
  BaseStyle->"Hyperlink",
  ButtonData->"Cell 9.50"],
 ", and a given constant vector ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{"r", ",", "s"}], ")"}], TraditionalForm]]],
 ":"
}], "Text",
 CellChangeTimes->{{3.52623520915724*^9, 3.5262352670956173`*^9}, {
  3.526235307127309*^9, 3.526235307129917*^9}}],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     StyleBox["f",
      FontWeight->"Bold",
      FontSlant->"Plain"], "\[CenterDot]", 
     RowBox[{"(", 
      RowBox[{"x", ",", "y"}], ")"}]}], "=", 
    RowBox[{"(", 
     RowBox[{"r", ",", "s"}], ")"}]}], TraditionalForm]]],
 "."
}], "NumberedEquation",
 CellChangeTimes->{3.526235273572939*^9},
 CellTags->"(9.5.7)"],

Cell[TextData[{
 "This matrix equation can be solved for the unknown vector ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{"x", ",", "y"}], ")"}], TraditionalForm]]],
 " by application of the matrix inverse on each side:"
}], "Text",
 CellChangeTimes->{{3.526235276137981*^9, 3.526235281907955*^9}}],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SuperscriptBox[
      StyleBox["f",
       FontWeight->"Bold",
       FontSlant->"Plain"], 
      RowBox[{"-", "1"}]], "\[CenterDot]", 
     StyleBox["f",
      FontWeight->"Bold",
      FontSlant->"Plain"], "\[CenterDot]", 
     RowBox[{"(", 
      RowBox[{"x", ",", "y"}], ")"}]}], "=", 
    RowBox[{
     RowBox[{
      StyleBox["unit",
       FontWeight->"Bold"], "\[CenterDot]", 
      RowBox[{"(", 
       RowBox[{"x", ",", "y"}], ")"}]}], "=", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"x", ",", "y"}], ")"}], "=", 
      RowBox[{
       SuperscriptBox[
        StyleBox["f",
         FontWeight->"Bold",
         FontSlant->"Plain"], 
        RowBox[{"-", "1"}]], "\[CenterDot]", 
       RowBox[{"(", 
        RowBox[{"r", ",", "s"}], ")"}]}]}]}]}], TraditionalForm]]],
 "."
}], "NumberedEquation",
 CellTags->"(9.5.8)"],

Cell[TextData[{
 "Since we have previously defined ",
 StyleBox["f1",
  FontWeight->"Bold"],
 " as the inverse of the matrix ",
 StyleBox["f",
  FontWeight->"Bold"],
 ",  in Cell ",
 ButtonBox["9.51",
  BaseStyle->"Hyperlink",
  ButtonData:>"Cell 9.51"],
 ", ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " can use Eq. (",
 ButtonBox["9.5.8",
  BaseStyle->"Hyperlink",
  ButtonData:>"(9.5.8)"],
 ") to determine the solution to Eq. ",
 ButtonBox["(9.5.7)",
  BaseStyle->"Hyperlink",
  ButtonData:>"(9.5.7)"],
 "  as"
}], "Text",
 CellChangeTimes->{{3.526235354192555*^9, 3.526235405355875*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{"x", ",", "y"}], "}"}], "=", 
  RowBox[{"f1", ".", 
   RowBox[{"{", 
    RowBox[{"r", ",", "s"}], "}"}]}]}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.54"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    FractionBox["r", "2"], "+", 
    FractionBox["s", "2"]}], ",", 
   RowBox[{
    RowBox[{"-", 
     FractionBox["r", "2"]}], "+", 
    FractionBox["s", "2"]}]}], "}"}]], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["3. Eigenvalues and Eigenvectors", "Subsubsection",
 FontWeight->"Bold",
 CellTags->"i:35"],

Cell[TextData[{
 "An ",
 StyleBox["eigenvector",
  FontSlant->"Italic"],
 " ",
 StyleBox["e ",
  FontWeight->"Bold"],
 "of a square matrix ",
 StyleBox["f",
  FontWeight->"Bold"],
 "  is a  special vector that has the following property: when the matrix \
acts on it, the result is again the eigenvector, multiplied by a constant ",
 StyleBox["\[Lambda]",
  FontFamily->"Symbol"],
 ". This constant is the ",
 StyleBox["eigenvalue",
  FontSlant->"Italic"],
 ".  In mathematical terms, the eigenvector satisfies the equation"
}], "Text"],

Cell[TextData[Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{
    StyleBox["f",
     FontWeight->"Bold",
     FontSlant->"Plain"], "\[CenterDot]", 
    StyleBox["e",
     FontWeight->"Bold",
     FontSlant->"Plain"]}], "=", 
   RowBox[{"\[Lambda]", " ", 
    StyleBox["e",
     FontWeight->"Bold",
     FontSlant->"Plain"]}]}], TraditionalForm]]]], "NumberedEquation",
 CellTags->"(9.5.9)"],

Cell[TextData[{
 "For an ",
 StyleBox["N",
  FontSlant->"Italic"],
 "-by-",
 StyleBox["N",
  FontSlant->"Italic"],
 " matrix, there are ",
 StyleBox["N",
  FontSlant->"Italic"],
 " eigenvectors and ",
 StyleBox["N",
  FontSlant->"Italic"],
 " corresponding eigenvalues. They can be determined in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " using the intrinsic functions ",
 StyleBox["Eigenvectors[f]",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " and ",
 StyleBox["Eigenvalues[f]",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ".  For the 2-by-2 matrix ",
 StyleBox["f",
  FontWeight->"Bold"],
 " defined previously, the eigenvectors and eigenvalues are "
}], "Text",
 CellTags->"i:105"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Eigenvectors", "[", "f", "]"}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.55"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "\[ImaginaryI]"}], ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\[ImaginaryI]", ",", "1"}], "}"}]}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Eigenvalues", "[", "f", "]"}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.56"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"1", "-", "\[ImaginaryI]"}], ",", 
   RowBox[{"1", "+", "\[ImaginaryI]"}]}], "}"}]], "Output"]
}, Open  ]],

Cell[TextData[{
 "Note that the eigenvectors and eigenvalues are not necessarily real. \
However, one can verify that they do satisfy the eigenvector equation ",
 ButtonBox["(9.5.9)",
  BaseStyle->"Hyperlink",
  ButtonData:>"(9.5.9)"],
 ". For example,  the first listed eigenvector, ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "\[ImaginaryI]"}], ",", "1"}], "}"}], TraditionalForm]]],
 ",  should have the eigenvalue ",
 Cell[BoxData[
  FormBox[
   RowBox[{"1", "-", "\[ImaginaryI]"}], TraditionalForm]]],
 ". This can be easily verified using ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ":"
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"f", ".", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "I"}], ",", "1"}], "}"}]}], " ", "-", " ", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{"1", "-", "I"}], ")"}], 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "I"}], ",", "1"}], "}"}]}]}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.57"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0", ",", "0"}], "}"}]], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["4. Determinants", "Subsubsection",
 FontWeight->"Bold",
 CellTags->"i:36"],

Cell[TextData[{
 "The determinant of a square ",
 Cell[BoxData[
  FormBox["N", TraditionalForm]]],
 "- by - ",
 Cell[BoxData[
  FormBox["N", TraditionalForm]]],
 " matrix is the product of the ",
 Cell[BoxData[
  FormBox["N", TraditionalForm]]],
 " eigenvalues of that matrix. In",
 StyleBox[" Mathematica ",
  FontSlant->"Italic"],
 ", the determinant is evaluated by the function ",
 StyleBox["Det",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ". For example,"
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Det", "[", "f", "]"}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.58"],

Cell[BoxData["2"], "Output"]
}, Open  ]],

Cell["\<\
which can be verified by multiplying the two eigenvalues together by hand, \
\>", "Text"],

Cell[TextData[{
 "\t",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"1", "-", "\[ImaginaryI]"}], ")"}], " ", 
     RowBox[{"(", 
      RowBox[{"1", "+", "\[ImaginaryI]"}], ")"}]}], "=", 
    RowBox[{
     RowBox[{"1", "-", "\[ImaginaryI]", "+", "\[ImaginaryI]", "+", "1"}], "=",
      "2."}]}], TraditionalForm]]]
}], "Text"]
}, Closed]],

Cell[CellGroupData[{

Cell["5. Nullspace", "Subsubsection",
 FontWeight->"Bold",
 CellTags->"i:37"],

Cell[TextData[{
 "If any of the eigenvalues of a matrix are zero, the determinant is also \
zero. Eigenvectors corresponding to zero eigenvalues are said to be in the ",
 StyleBox["nullspace",
  FontSlant->"Italic"],
 " of a matrix. The nullspace can be found using the function ",
 StyleBox["NullSpace",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ". For example, "
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NullSpace", "[", "f", "]"}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.59"],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output"]
}, Open  ]],

Cell[TextData[{
 "This is a list with zero elements, because ",
 StyleBox["f",
  FontWeight->"Bold"],
 " has no eigenvectors with zero eigenvalues.  However, the 3-by-3 matrix ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    StyleBox["g",
     FontWeight->"Bold",
     FontSlant->"Plain"], "=", 
    RowBox[{"(", "\[NoBreak]", GridBox[{
       {"1", "2", "3"},
       {"2", "4", "6"},
       {"3", "6", "9"}
      },
      GridBoxAlignment->{
       "Columns" -> {{Decimal}}, "ColumnsIndexed" -> {}, 
        "Rows" -> {{Baseline}}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}]}], 
   TraditionalForm]]],
 "   has two eigenvectors in the nullspace:"
}], "Text",
 CellChangeTimes->{{3.541766440706173*^9, 3.541766440706489*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"g", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "4", ",", "6"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "6", ",", "9"}], "}"}]}], "}"}]}], ";"}], "\n", 
 RowBox[{"NullSpace", "[", "g", "]"}]}], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.60"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "3"}], ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "2"}], ",", "1", ",", "0"}], "}"}]}], "}"}]], "Output"]
}, Open  ]],

Cell[TextData[{
 "One can verify that either of these eigenvectors , ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    FormBox[
     SubscriptBox[
      StyleBox["e",
       FontWeight->"Bold",
       FontSlant->"Plain"], "1"],
     TraditionalForm], "=", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"-", "3"}], ",", "0", ",", "1"}], ")"}]}], TraditionalForm]]],
 " or ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    FormBox[
     SubscriptBox[
      StyleBox["e",
       FontWeight->"Bold",
       FontSlant->"Plain"], "2"],
     TraditionalForm], " ", "=", " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"-", "2"}], ",", "1", ",", "0"}], ")"}]}], TraditionalForm]]],
 ",",
 StyleBox[" ",
  FontWeight->"Bold"],
 "returns a vector of zero length; the ",
 StyleBox["zero vector ",
  FontSlant->"Italic"],
 Cell[BoxData[
  FormBox[
   RowBox[{
    StyleBox["0",
     FontWeight->"Bold"], "=", 
    RowBox[{"(", 
     RowBox[{"0", ",", "0", ",", "0"}], ")"}]}], TraditionalForm]]],
 ". For example,"
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"g", ".", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"-", "3"}], ",", "0", ",", "1"}], "}"}]}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.61"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0", ",", "0", ",", "0"}], "}"}]], "Output"]
}, Open  ]],

Cell[TextData[{
 "Of course, any linear combination of these two eigenvectors is also in the \
nullspace of ",
 StyleBox["g",
  FontWeight->"Bold"],
 ", since "
}], "Text"],

Cell[TextData[Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{
    StyleBox["g",
     FontWeight->"Bold",
     FontSlant->"Plain"], "\[CenterDot]", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       SubscriptBox["c", "1"], 
       SubscriptBox[
        StyleBox["e",
         FontWeight->"Bold",
         FontSlant->"Plain"], "1"]}], "+", 
      RowBox[{
       SubscriptBox["c", "2"], 
       SubscriptBox[
        StyleBox["e",
         FontWeight->"Bold",
         FontSlant->"Plain"], "2"]}]}], ")"}]}], "=", 
   RowBox[{
    RowBox[{
     RowBox[{
      SubscriptBox["c", "1"], 
      RowBox[{
       StyleBox["g",
        FontWeight->"Bold",
        FontSlant->"Plain"], "\[CenterDot]", 
       SubscriptBox[
        StyleBox["e",
         FontWeight->"Bold",
         FontSlant->"Plain"], "1"]}]}], "+", 
     RowBox[{
      SubscriptBox["c", "1"], 
      RowBox[{
       StyleBox["g",
        FontWeight->"Bold",
        FontSlant->"Plain"], "\[CenterDot]", 
       SubscriptBox[
        StyleBox["e",
         FontWeight->"Bold",
         FontSlant->"Plain"], "2"]}]}]}], "=", 
    RowBox[{
     RowBox[{
      RowBox[{
       SubscriptBox["c", "1"], 
       StyleBox["0",
        FontWeight->"Bold"]}], "+", 
      RowBox[{
       SubscriptBox["c", "1"], 
       StyleBox["0",
        FontWeight->"Bold"]}]}], "=", 
     RowBox[{
      StyleBox["0",
       FontWeight->"Bold"], " ", "."}]}]}]}], TraditionalForm]],
 CellTags->"(9.5.10)"]], "NumberedEquation",
 CellTags->"(9.5.10)"],

Cell[TextData[{
 "Thus, these two eigenvectors define a ",
 StyleBox["plane",
  FontSlant->"Italic"],
 " in 3-space.  This plane, in fact,  is the nullspace of the matrix  ",
 StyleBox["g",
  FontWeight->"Bold"],
 ".  Any vector in this plane is a linear combination of the two \
eigenvectors, and when acted upon by ",
 StyleBox["g",
  FontWeight->"Bold"],
 " therefore returns the zero vector (0,0,0) (see Fig. ",
 ButtonBox["9.3",
  BaseStyle->"Hyperlink",
  ButtonData:>"Fig. 9.3"],
 "). "
}], "Text"],

Cell[BoxData[Cell[GraphicsData["CompressedBitmap", "\<\
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\
\>"], "Picture",
  Evaluatable->False,
  ImageSize->{189.5, 193.312},
  ImageMargins->0,
  ImageRegion->{{0, 1}, {0, 1}}]], "Picture"],

Cell[TextData[{
 "Fig. 9.3   NullSpace of ",
 StyleBox["g",
  FontWeight->"Bold"],
 " is the plane formed by ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[
    StyleBox["e",
     FontWeight->"Bold",
     FontSlant->"Plain"], "1"], TraditionalForm]]],
 "and ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[
    StyleBox["e",
     FontWeight->"Bold",
     FontSlant->"Plain"], "2"], TraditionalForm]]],
 ", part of which is shown in gray. Eigenvector ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[
    StyleBox["e",
     FontWeight->"Bold",
     FontSlant->"Plain"], "3"], TraditionalForm]]],
 " is not in the nullspace."
}], "Caption",
 CellTags->"Fig. 9.3"],

Cell[TextData[{
 "\tThe existence of a nonempty nullspace (or alternatively a zero \
determinant) implies that the matrix ",
 StyleBox["g ",
  FontWeight->"Bold"],
 "has no inverse. This can easily be seen by considering the equation ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SuperscriptBox[
      StyleBox["g",
       FontWeight->"Bold",
       FontSlant->"Plain"], 
      RowBox[{"-", "1"}]], "\[CenterDot]", 
     StyleBox["g",
      FontWeight->"Bold",
      FontSlant->"Plain"]}], "=", 
    StyleBox["unit",
     FontWeight->"Bold"]}], TraditionalForm]]],
 " , where ",
 StyleBox["unit",
  FontWeight->"Bold"],
 " is the unit matrix introduced previously. If we act on each side with a \
member of the null space of ",
 StyleBox["g",
  FontWeight->"Bold"],
 ", we arrive at a contradiction:"
}], "Text"],

Cell[TextData[{
 " ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    UnderscriptBox[
     RowBox[{
      SuperscriptBox[
       StyleBox["g",
        FontWeight->"Bold",
        FontSlant->"Plain"], 
       RowBox[{"-", "1"}]], "\[CenterDot]", 
      StyleBox["g",
       FontWeight->"Bold",
       FontSlant->"Plain"], "\[CenterDot]", 
      SubscriptBox[
       StyleBox["e",
        FontWeight->"Bold",
        FontSlant->"Plain"], "1"]}], GridBox[{
       {
        StyleBox["\[DoubleDownArrow]",
         FontSize->16]},
       {
        RowBox[{" ", 
         StyleBox[
          RowBox[{
           RowBox[{
            SuperscriptBox[
             StyleBox["g",
              FontWeight->"Bold",
              FontSlant->"Plain"], 
             RowBox[{"-", "1"}]], "\[CenterDot]", 
            StyleBox["0",
             FontWeight->"Bold"]}], 
           StyleBox[" ",
            FontWeight->"Bold"], "=", "  ", 
           StyleBox["0",
            FontWeight->"Bold"]}],
          FontSize->10]}]}
      }]], "=", 
    RowBox[{
     RowBox[{
      StyleBox["unit",
       FontWeight->"Bold"], "\[CenterDot]", 
      SubscriptBox[
       StyleBox["e",
        FontWeight->"Bold",
        FontSlant->"Plain"], "1"]}], "=", 
     SubscriptBox[
      StyleBox["e",
       FontWeight->"Bold",
       FontSlant->"Plain"], "1"]}]}], TraditionalForm]]]
}], "NumberedEquation",
 CellTags->"(9.5.11)"],

Cell[TextData[{
 "Therefore, the inverse of ",
 StyleBox["g",
  FontWeight->"Bold"],
 " cannot exist if it has a nonempty nullspace (or a zero determinant). "
}], "Text"],

Cell[TextData[{
 "\tWhen the matrix has no inverse, the solution of matrix equations like ",
 ButtonBox["Eq. (9.5.7)",
  BaseStyle->"Hyperlink",
  ButtonData:>"(9.5.7)"],
 " cannot be written in the form  of ",
 ButtonBox["Eq. (9.5.8)",
  BaseStyle->"Hyperlink",
  ButtonData:>"(9.5.8)"],
 " . Sometimes no solution exists, and sometimes there is more than one \
solution. Some techniques for dealing with this situation may be found in ",
 ButtonBox["Sec. 9.10\t",
  BaseStyle->"Hyperlink",
  ButtonData:>"Sec. 9.10"]
}], "Text"],

Cell[TextData[{
 "\tMatrix operations are summarized in Table ",
 ButtonBox["9.9",
  BaseStyle->"Hyperlink",
  ButtonData:>"Table 9.9"],
 "."
}], "Text"],

Cell[TextData[Cell[BoxData[GridBox[{
   {
    StyleBox[
     RowBox[{
     "Table", " ", "9.9", " ", "Some", " ", "matrix", " ", "Operations"}],
     FontSize->9]},
   {GridBox[{
      {
       StyleBox[
        RowBox[{"Transpose", "[", "m", 
         StyleBox["]",
          FontSlant->"Plain"]}],
        FontWeight->"Bold"], 
       StyleBox[
        RowBox[{"Transpose", " ", "of", " ", "a", " ", "matrix"}],
        FontFamily->"Times"]},
      {
       StyleBox[
        RowBox[{"Inverse", "[", "m", 
         StyleBox["]",
          FontSlant->"Plain"]}],
        FontWeight->"Bold"], 
       StyleBox[
        RowBox[{"Inverse", " ", "of", " ", "a", " ", "square", " ", "matrix"}],
        FontFamily->"Times"]},
      {
       StyleBox[
        RowBox[{"Det", "[", "m", 
         StyleBox["]",
          FontSlant->"Plain"]}],
        FontWeight->"Bold"], 
       StyleBox[
        RowBox[{
        "Determinant", " ", "of", " ", "a", " ", "square", " ", "matrix"}],
        FontFamily->"Times"]},
      {
       StyleBox[
        RowBox[{"Eigenvectors", "[", "m", 
         StyleBox["]",
          FontSlant->"Italic"]}],
        FontWeight->"Bold"], 
       StyleBox[
        RowBox[{
        "Eigenvectors", " ", "of", " ", "a", " ", "square", " ", "matrix"}],
        FontFamily->"Times"]},
      {
       StyleBox[
        RowBox[{"Eigenvalues", "[", "m", 
         StyleBox["]",
          FontSlant->"Plain"]}],
        FontWeight->"Bold"], 
       StyleBox[
        RowBox[{
        "Eigenvalues", " ", "of", " ", "a", " ", "square", " ", "matrix"}],
        FontFamily->"Times"]},
      {
       StyleBox[
        RowBox[{"NullSpace", "[", "m", 
         StyleBox["]",
          FontSlant->"Plain"]}],
        FontWeight->"Bold"], 
       StyleBox[
        RowBox[{"Nullspace", " ", "of", " ", "a", " ", "matrix"}],
        FontFamily->"Times"]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[1.9599999999999997`]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}]}
  }]]]], "Text",
 CellFrame->True,
 Background->GrayLevel[0.849989],
 CellTags->"Table 9.9"]
}, Closed]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
9.5.3 Creating Lists, Vectors and Matrices with the Table command\
\>", "Subsubtitle",
 CellTags->"c:23"],

Cell[TextData[{
 "It is sometimes the case that lists have elements that can be determined by \
simple algebraic relations. ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " can create such objects with the ",
 StyleBox["Table",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " command. For example, the vector ",
 StyleBox["v",
  FontWeight->"Bold"],
 "=(2,4,6,8,10,12,14) , a seven-dimensional vector of even integers, can be \
created using"
}], "Text",
 CellTags->"i:38"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"v", "=", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"2", "i"}], ",", 
    RowBox[{"{", 
     RowBox[{"i", ",", "1", ",", "7"}], "}"}]}], "]"}]}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.62"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "2", ",", "4", ",", "6", ",", "8", ",", "10", ",", "12", ",", "14"}], 
  "}"}]], "Output"]
}, Open  ]],

Cell[TextData[{
 "The first argument in the ",
 StyleBox["Table",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " command is the expression determining the elements of the vector, in terms \
of a dummy variable ",
 StyleBox["i",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ". The second argument is a list stating the name of the dummy variable and \
the range over which it  runs. "
}], "Text"],

Cell["\<\
\tOptionally, one can also specify the step size, so one need not iterate by \
an integer amount. For example,\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"v", "=", 
  RowBox[{"Table", "[", 
   RowBox[{"i", ",", 
    RowBox[{"{", 
     RowBox[{"i", ",", "0", ",", "Pi", ",", 
      RowBox[{"0.1", "Pi"}]}], "}"}]}], "]"}]}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.63"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0", ",", "0.3141592653589793`", ",", "0.6283185307179586`", ",", 
   "0.9424777960769379`", ",", "1.2566370614359172`", ",", 
   "1.5707963267948966`", ",", "1.8849555921538759`", ",", 
   "2.199114857512855`", ",", "2.5132741228718345`", ",", 
   "2.827433388230814`", ",", "3.141592653589793`"}], "}"}]], "Output"]
}, Open  ]],

Cell[TextData[{
 "creates a vector whose elements differ by ",
 Cell[BoxData[
  FormBox[
   RowBox[{"0.1", " ", "\[Pi]"}], TraditionalForm]]],
 "."
}], "Text"],

Cell[TextData[{
 "\tMatrices can also be created with the ",
 StyleBox["Table",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " command. Now there are two iterators, to specify both the row and the \
column. For example, the following creates a 2- by -3 matrix:"
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"m", "=", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"i", " ", "+", " ", 
     RowBox[{"j", "^", "2"}]}], ",", 
    RowBox[{"{", 
     RowBox[{"i", ",", "1", ",", "2"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"j", ",", "1", ",", "3"}], "}"}]}], "]"}]}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.64"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"2", ",", "5", ",", "10"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "6", ",", "11"}], "}"}]}], "}"}]], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["9.5.4 Operations on Lists", "Subsubtitle",
 CellTags->"c:24"],

Cell[TextData[{
 " \tAs we saw in Sec. ",
 ButtonBox["9.5.1",
  BaseStyle->"Hyperlink",
  ButtonData:>"c:17"],
 ", lists are more general objects than vectors or matrices: their elements \
need not be numbers, and need not have the same dimension. For example, the \
list ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    StyleBox["a",
     FontWeight->"Bold",
     FontSlant->"Plain"], " ", "="}], TraditionalForm]],
  FontFamily->"Courier",
  FontWeight->"Bold"],
 StyleBox["{",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 Cell[BoxData[
  FormBox[
   RowBox[{" ", 
    RowBox[{"1", ",", 
     RowBox[{"{", 
      RowBox[{
       SuperscriptBox[
        StyleBox["x",
         FontSlant->"Plain"], "2"], ",", 
       RowBox[{"-", "17"}]}], "}"}], ","}]}], TraditionalForm]],
  FontFamily->"Courier",
  FontWeight->"Bold"],
 StyleBox["\"a word\"}",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " contains a number, another list, and even a character string. "
}], "Text"],

Cell[TextData[{
 "\tThis section describes two useful operations that can be performed on \
such general lists. The first operation is to add new elements to an already \
existing list. To add an element to the end of the list, use the command ",
 StyleBox["Append",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ":"
}], "Text",
 CellTags->"i:39"],

Cell[BoxData[
 RowBox[{
  RowBox[{"a", "=", 
   RowBox[{"{", 
    RowBox[{"1", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"x", "^", "2"}], ",", "17"}], "}"}], ",", "\"\<a word\>\""}], 
    "}"}]}], ";"}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.65"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Append", "[", 
  RowBox[{"a", ",", 
   RowBox[{"Pi", "/", "4"}]}], "]"}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.66"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", 
   RowBox[{"{", 
    RowBox[{
     SuperscriptBox["x", "2"], ",", "17"}], "}"}], ",", "\<\"a word\"\>", ",", 
   FractionBox["\[Pi]", "4"]}], "}"}]], "Output"]
}, Open  ]],

Cell[TextData[{
 "To add the element to the beginning of the list, use the command ",
 StyleBox["Prepend",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ":"
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Prepend", "[", 
  RowBox[{"a", ",", 
   RowBox[{"Pi", "/", "4"}]}], "]"}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.67"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   FractionBox["\[Pi]", "4"], ",", "1", ",", 
   RowBox[{"{", 
    RowBox[{
     SuperscriptBox["x", "2"], ",", "17"}], "}"}], ",", "\<\"a word\"\>"}], 
  "}"}]], "Output"]
}, Open  ]],

Cell[TextData[{
 "Another operation that we will sometimes use is to ",
 StyleBox["concatenate",
  FontSlant->"Italic"],
 " two lists, or join them together. This is done with the command ",
 StyleBox["Join",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ". In this example, we will first define a second list ",
 StyleBox["b",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 StyleBox[" ",
  FontWeight->"Bold"],
 "and then join it to list",
 StyleBox[" ",
  FontWeight->"Bold"],
 StyleBox["a",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ":"
}], "Text",
 CellTags->"i:40"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"b", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "1"}], ",", "3", ",", "2"}], "}"}]}], ";"}], "\n", 
 RowBox[{"Join", "[", 
  RowBox[{"a", ",", "b"}], "]"}]}], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.68"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", 
   RowBox[{"{", 
    RowBox[{
     SuperscriptBox["x", "2"], ",", "17"}], "}"}], ",", "\<\"a word\"\>", ",", 
   RowBox[{"-", "1"}], ",", "3", ",", "2"}], "}"}]], "Output"]
}, Open  ]],

Cell[TextData[{
 "\tThe list ",
 StyleBox["a",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " has a sublist  in its second element, ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{
     SuperscriptBox[
      StyleBox["x",
       FontSlant->"Plain"], "2"], ",", 
     RowBox[{"-", "17"}]}], "}"}], TraditionalForm]],
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ". It will sometimes be useful to transform a list with sublists into a \
simple list. This operation is performed with the",
 StyleBox[" Flatten",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " command:"
}], "Text",
 CellTags->"i:41"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Flatten", "[", "a", "]"}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.69"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", 
   SuperscriptBox["x", "2"], ",", "17", ",", "\<\"a word\"\>"}], 
  "}"}]], "Output"]
}, Open  ]],

Cell["\<\
The result is a list with the same elements as before, but without any \
sublists: the interior brackets are all removed.\
\>", "Text"],

Cell[TextData[{
 "\tOperations involving lists are summarized in Table ",
 ButtonBox["9.10",
  BaseStyle->"Hyperlink",
  ButtonData:>"Table 9.10"],
 "."
}], "Text"],

Cell[TextData[Cell[BoxData[GridBox[{
   {
    RowBox[{
     StyleBox[
      RowBox[{
      "Table", "9.10", " ", "Operations", " ", "Involving", " ", "Lists"}],
      FontSize->9], "\[IndentingNewLine]"}]},
   {
    StyleBox[GridBox[{
       {
        StyleBox[
         RowBox[{"Table", "[", 
          RowBox[{"f", 
           StyleBox[",",
            FontSlant->"Plain"], 
           RowBox[{
            StyleBox["{",
             FontSlant->"Plain"], 
            RowBox[{"i", ",", "imin", ",", "imax", ",", "step"}], "}"}]}], 
          "]"}],
         FontFamily->"Courier",
         FontWeight->"Bold"], 
        RowBox[{
         RowBox[{
         "Give", " ", "a", " ", "list", " ", "of", " ", "the", " ", "values", 
          " ", "of", " ", 
          StyleBox["f",
           FontFamily->"Courier",
           FontWeight->"Bold"], " ", "as", " ", 
          StyleBox["i",
           FontFamily->"Courier",
           FontWeight->"Bold"], 
          StyleBox[" ",
           FontFamily->"Courier",
           FontWeight->"Bold"], "runs", " ", "from", " ", 
          StyleBox["imin",
           FontFamily->"Courier",
           FontWeight->"Bold"], 
          StyleBox["  ",
           FontSlant->"Italic"], "to", " ", 
          StyleBox["imax",
           FontFamily->"Courier",
           FontWeight->"Bold"]}], "\[IndentingNewLine]", 
         RowBox[{"in", " ", "steps", " ", "of", " ", "size", " ", 
          StyleBox["step",
           FontFamily->"Courier",
           FontWeight->"Bold"], 
          RowBox[{"(", "optional", ")"}]}]}]},
       {
        StyleBox[
         RowBox[{"\[IndentingNewLine]", 
          RowBox[{"Table", "[", 
           RowBox[{"f", 
            StyleBox[",",
             FontSlant->"Italic"], 
            RowBox[{
             StyleBox["{",
              FontSlant->"Italic"], 
             StyleBox[
              RowBox[{"i", ",", "imin", ",", "imax"}],
              FontSlant->"Plain"], 
             StyleBox["}",
              FontSlant->"Italic"]}], 
            StyleBox[",",
             FontSlant->"Italic"], 
            RowBox[{
             StyleBox["{",
              FontSlant->"Italic"], 
             StyleBox[
              RowBox[{"j", ",", "jmin", ",", "jmax"}],
              FontSlant->"Plain"], 
             StyleBox["}",
              FontSlant->"Italic"]}]}], "]"}]}],
         FontFamily->"Courier",
         FontWeight->"Bold"], 
        RowBox[{"\[IndentingNewLine]", 
         RowBox[{"Generate", " ", "a", " ", "matrix"}]}]},
       {
        StyleBox[
         RowBox[{"\[IndentingNewLine]", 
          RowBox[{"Join", "[", 
           RowBox[{"a", ",", "b"}], "]"}]}],
         FontFamily->"Courier",
         FontWeight->"Bold"], 
        RowBox[{"\[IndentingNewLine]", 
         RowBox[{"Join", " ", "two", " ", "lists"}]}]},
       {
        StyleBox[
         RowBox[{"\[IndentingNewLine]", 
          RowBox[{"Append", "[", 
           RowBox[{"list", ",", "element"}], "]"}]}],
         FontFamily->"Courier",
         FontWeight->"Bold"], 
        RowBox[{"\[IndentingNewLine]", 
         RowBox[{"Add", " ", 
          StyleBox["element",
           FontFamily->"Courier",
           FontWeight->"Bold"], 
          StyleBox[" ",
           FontSlant->"Italic"], "to", " ", "the", " ", "end", " ", "of", " ", 
          StyleBox["list",
           FontFamily->"Courier",
           FontWeight->"Bold"]}]}]},
       {
        StyleBox[
         RowBox[{"\[IndentingNewLine]", 
          RowBox[{"Prepend", "[", 
           RowBox[{"list", ",", "element"}], 
           StyleBox["]",
            FontSlant->"Plain"]}]}],
         FontFamily->"Courier",
         FontWeight->"Bold"], 
        RowBox[{"\[IndentingNewLine]", 
         RowBox[{"Add", " ", 
          StyleBox["element",
           FontFamily->"Courier",
           FontWeight->"Bold"], 
          StyleBox[" ",
           FontSlant->"Italic"], "to", " ", "the", " ", "beginning", " ", 
          "of", " ", 
          StyleBox["list",
           FontFamily->"Courier",
           FontWeight->"Bold"]}]}]},
       {
        StyleBox[
         RowBox[{"\[IndentingNewLine]", 
          RowBox[{"Insert", "[", 
           RowBox[{"list", ",", "element", ",", "i"}], 
           StyleBox["]",
            FontSlant->"Italic"]}]}],
         FontFamily->"Courier",
         FontWeight->"Bold"], 
        RowBox[{"\[IndentingNewLine]", 
         RowBox[{"Insert", " ", 
          StyleBox["element",
           FontFamily->"Courier",
           FontWeight->"Bold"], 
          StyleBox[" ",
           FontSlant->"Italic"], "at", " ", "the", " ", 
          StyleBox[
           RowBox[{
            StyleBox["i",
             FontFamily->"Courier",
             FontWeight->"Bold"], "th"}]], " ", "position", " ", "of", " ", 
          StyleBox["list",
           FontFamily->"Courier",
           FontWeight->"Bold"]}]}]},
       {
        StyleBox[
         RowBox[{"\[IndentingNewLine]", 
          RowBox[{"Flatten", "[", "list", "]"}]}],
         FontFamily->"Courier",
         FontWeight->"Bold"], 
        RowBox[{"\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{
           "Remove", " ", "all", " ", "interior", " ", "curly", " ", 
            "brackets"}], ",", 
           RowBox[{"writing", " ", 
            StyleBox["list",
             FontFamily->"Courier",
             FontWeight->"Bold"], 
            StyleBox[" ",
             FontFamily->"Courier",
             FontWeight->"Bold"], "as", " ", "a"}]}], "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
           "simple", " ", "list", " ", "with", " ", "no", " ", "sublists"}], 
           ",", "\[IndentingNewLine]", 
           RowBox[{
           "but", " ", "preserving", " ", "the", " ", "order", " ", "of", " ",
             "the", " ", "elements"}]}]}]}]}
      },
      GridBoxAlignment->{
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}}],
     FontFamily->"Times"]}
  }]]]], "Text",
 CellFrame->True,
 Background->GrayLevel[0.849989],
 CellTags->"Table 9.10"]
}, Closed]],

Cell[CellGroupData[{

Cell["Exercises for Sec. 9.5", "Subsubtitle",
 CellTags->"c:25"],

Cell[TextData[{
 StyleBox["(1)",
  FontWeight->"Bold"],
 " Find the magnitude of the vector",
 Cell[BoxData[
  FormBox[
   RowBox[{" ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"-", "2"}], ",", "4", ",", "12", ",", 
      RowBox[{"-", "3"}], ",", "6"}], ")"}]}], TraditionalForm]]],
 "."
}], "Text"],

Cell[TextData[{
 StyleBox["(2)",
  FontWeight->"Bold"],
 " A man walks 10 feet north, 12 feet southeast, 9 feet west, and 6 feet \
northeast.  How far from his initial position did the man move?"
}], "Text"],

Cell[TextData[{
 StyleBox["(3)",
  FontWeight->"Bold"],
 " Find the determinant, the eigenvalues and the eigenvectors of the \
following matrices. In each case show directly that the first eigenvalue and \
eigenvector satisfy ",
 ButtonBox["Eq. (9.5.9)",
  BaseStyle->"Hyperlink",
  ButtonData:>"(9.5.9)"],
 ".  (Hint: You may want to evaluate them numerically so that they are not so \
complicated-looking.)"
}], "Text"],

Cell[TextData[{
 StyleBox["(a)",
  FontWeight->"Bold"],
 " ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", "\[NoBreak]", GridBox[{
      {"1", "2"},
      {
       RowBox[{"-", "1"}], "1"}
     },
     GridBoxAlignment->{
      "Columns" -> {{Decimal}}, "ColumnsIndexed" -> {}, 
       "Rows" -> {{Baseline}}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}], 
   TraditionalForm]]],
 ".\n"
}], "Text"],

Cell[TextData[{
 StyleBox["(b)",
  FontWeight->"Bold"],
 " ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", "\[NoBreak]", GridBox[{
      {"4", "1", "2"},
      {"3", "1", "1"},
      {"0", "1", "0"}
     },
     GridBoxAlignment->{
      "Columns" -> {{Decimal}}, "ColumnsIndexed" -> {}, 
       "Rows" -> {{Baseline}}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}], 
   TraditionalForm]]],
 ".\n"
}], "Text"],

Cell[TextData[{
 StyleBox["(c)",
  FontWeight->"Bold"],
 " ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", "\[NoBreak]", GridBox[{
      {"3", "1", "4", "2"},
      {
       RowBox[{"-", "1"}], "5", "2", "3"},
      {
       RowBox[{"-", "4"}], 
       RowBox[{"-", "4"}], "5", "2"},
      {
       RowBox[{"-", "12"}], "2", "1", "2"}
     },
     GridBoxAlignment->{
      "Columns" -> {{Decimal}}, "ColumnsIndexed" -> {}, 
       "Rows" -> {{Baseline}}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}], 
   TraditionalForm]]],
 "."
}], "Text"],

Cell[TextData[{
 StyleBox["(4)",
  FontWeight->"Bold"],
 "  Find the nullspace for the following matrix:  ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", "\[NoBreak]", GridBox[{
      {"18", "6", "12"},
      {"6", "2", "4"},
      {"12", "4", "8"}
     },
     GridBoxAlignment->{
      "Columns" -> {{Decimal}}, "ColumnsIndexed" -> {}, 
       "Rows" -> {{Baseline}}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}], 
   TraditionalForm]]],
 "."
}], "Text"],

Cell["\<\
Show directly that any vector in the nullspace yields zero when multiplied by \
the matrix.\
\>", "Text"],

Cell[TextData[{
 StyleBox["(5)",
  FontWeight->"Bold"],
 " Solve the matrix problem  ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     StyleBox["A",
      FontWeight->"Bold",
      FontSlant->"Plain"], "\[CenterDot]", 
     StyleBox["x",
      FontWeight->"Bold",
      FontSlant->"Plain"]}], "=", 
    StyleBox["u",
     FontWeight->"Bold",
     FontSlant->"Plain"]}], TraditionalForm]]],
 " for the unknown vector ",
 StyleBox["x",
  FontWeight->"Bold"],
 ",  where"
}], "Text"],

Cell[TextData[{
 StyleBox["(a)",
  FontWeight->"Bold"],
 "  ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    StyleBox["A",
     FontWeight->"Bold",
     FontSlant->"Plain"], "=", 
    RowBox[{"(", "\[NoBreak]", GridBox[{
       {
        RowBox[{"-", "1"}], "1"},
       {"3", "2"}
      },
      GridBoxAlignment->{
       "Columns" -> {{Decimal}}, "ColumnsIndexed" -> {}, 
        "Rows" -> {{Baseline}}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}]}], 
   TraditionalForm]]],
 " and ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    StyleBox["u",
     FontWeight->"Bold",
     FontSlant->"Plain"], "=", 
    RowBox[{"(", 
     RowBox[{"3", ",", "1"}], ")"}]}], TraditionalForm]]],
 ";  "
}], "Text"],

Cell[TextData[{
 StyleBox["(b)",
  FontWeight->"Bold"],
 " ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    StyleBox["A",
     FontWeight->"Bold",
     FontSlant->"Plain"], "=", 
    RowBox[{"(", "\[NoBreak]", GridBox[{
       {"4", "2", "1"},
       {"2", "4", "1"},
       {"1", "4", "2"}
      },
      GridBoxAlignment->{
       "Columns" -> {{Decimal}}, "ColumnsIndexed" -> {}, 
        "Rows" -> {{Baseline}}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}]}], 
   TraditionalForm]]],
 "  and ",
 StyleBox["u",
  FontWeight->"Bold"],
 " = (0,0,1)."
}], "Text"],

Cell[TextData[{
 StyleBox["(6)",
  FontWeight->"Bold"],
 " A 3-by-3 matrix ",
 StyleBox["m ",
  FontWeight->"Bold"],
 "has elements defined by the equation  ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     StyleBox["m",
      FontWeight->"Bold",
      FontSlant->"Plain"], "\[LeftDoubleBracket]", 
     RowBox[{"i", ",", "j"}], "\[RightDoubleBracket]"}], "=", 
    RowBox[{
     SuperscriptBox["i", "2"], "+", 
     SuperscriptBox["j", "2"]}]}], TraditionalForm]]],
 ", except for ",
 StyleBox["m",
  FontWeight->"Bold"],
 "[[1,2]], which satisfies ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     StyleBox["m",
      FontWeight->"Bold",
      FontSlant->"Plain"], "[", 
     RowBox[{"[", 
      RowBox[{"1", ",", "2"}], "]"}], "]"}], " ", "=", " ", "x"}], 
   TraditionalForm]]],
 StyleBox[",",
  FontSlant->"Italic"],
 " where ",
 StyleBox["x",
  FontSlant->"Italic"],
 " is an unknown.  Find a value of ",
 StyleBox["x",
  FontSlant->"Italic"],
 " for which ",
 StyleBox["m",
  FontWeight->"Bold"],
 " has a finite nullspace."
}], "Text"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["9.6 Plotting Results", "Subtitle",
 CellTags->{"Sec. 9.6", "c:26"}],

Cell["", "Text"],

Cell[CellGroupData[{

Cell[TextData[{
 "9.6.1 The ",
 StyleBox["Plot",
  FontFamily->"Courier",
  FontWeight->"Bold",
  FontSlant->"Plain"],
 " Command"
}], "Subsubtitle",
 CellTags->{"i:43", "c:27"}],

Cell[TextData[{
 "In order to plot a function of one variable,  use the ",
 StyleBox["Plot",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " command.  The most basic form of this command has the form"
}], "Text"],

Cell[TextData[{
 StyleBox["\t\tPlot[",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 StyleBox["function",
  FontSlant->"Italic"],
 ",",
 StyleBox["range",
  FontSlant->"Italic"],
 StyleBox["]",
  FontWeight->"Bold"]
}], "Text"],

Cell[TextData[{
 "where ",
 StyleBox["function",
  FontSlant->"Italic"],
 " is the function to be plotted, and ",
 StyleBox["range",
  FontSlant->"Italic"],
 " is a list giving the dependent variable and the range of the plot. For \
example, ",
 StyleBox["Plot[Sin[x],{x,0,2Pi}]",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 "produces a plot of ",
 Cell[BoxData[
  FormBox[
   RowBox[{"sin", "(", "x", ")"}], TraditionalForm]]],
 " over the range from ",
 Cell[BoxData[
  FormBox["0", TraditionalForm]]],
 " to ",
 Cell[BoxData[
  FormBox[
   RowBox[{"2", " ", "\[Pi]"}], TraditionalForm]]],
 ", as shown in Cell ",
 ButtonBox["9.70",
  BaseStyle->"Hyperlink",
  ButtonData:>"Cell 9.70"],
 "."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"Sin", "[", "x", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", 
     RowBox[{"2", "Pi"}]}], "}"}]}], "]"}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.70"],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {Hue[0.67, 0.6, 0.6], LineBox[CompressedData["
1:eJwlmXk4lN/7x61ZEjPPEJKifSWltNB9KqFIKdEiJC0kiQhJpRKS7JVsqRCf
yC7JiVIUUopQFJJlZh7rmJksv/O9fn+d63Vdc57l/X7f932eazQdzu49LiYi
IpItKiLyv1Ucy9Z1rr26mVf2/+vC3rJNc6Ls4G5B0/Bssgqfazs2R56FczH5
hl/J+kfxFL8w8jJceVrum0LWFqPrFU8i74D61eSafWT9Zhe5OCEyCfS2z7Dc
H5EEe11UW+5FZsNaLHzlczsbIoZs8mIjMaxXemqo7o9hU+VO2a0e9XCj9NV2
2e314OZrfjTP7TsUXXijW9rcBGeKj4eJzf8FizLnfDJht8HXnh0yaQ5d0NXd
fLBSuhNCtHkihQd7QFMqQ3QnsxvOLa+Kef2EDUKP92sz+T3QdbzrSnIhG855
Fc9fK94LVskiLlfes+H5lRnqxTN6YaPShq2olw0N9rqLns7rBbGpp1y8ggPb
emdu0TPrhcgvt4xxHgeOnUxRFE3shVyf3YJX5Vwwb27y1NPvA+Gx01k/XQfg
v5k9dXcd+sGeOexd6jUAL6cOz33h3A+VZb7bHvgPQJRjVG2Dez+Eq4Z8PxA2
AC9MvTaNBvTD4k/pYl+fDcA685BFPSn9YLmx2+oDewByjy28Ffq7H7IYR6cK
nQdBNdbyTMVBNiiW9VTHuA9CarlY9fSjbPA57RZ93ncQTH+0GJmfYoPhu8tL
V4cMgkeDeEqZFxtaLybue/Z0EO7kuj8xi2KD9N/WtEc9g/DRUN5+9kc2OLyy
2hN+YggC92Oe/1oOrC5UoVTPDoEHb36Ihz4HxLJbGh5eGAKfeatq7LZxICXZ
1jovaAhWPrS3nGvBgY5rJ2wbM4ZALyVi80YXDjjs9HKZTQ/B6/V+tT+TCTfF
BKVfGAbG6Y2cOnEurK633qlzZRhsu5pyC2S4IFatKlcSNAxBjkXsKAUupJQk
3Pl4fxh6D0cUrlPjQkfCk1juy2E4kH/rvNJqLjg4FjzWFRmB32/cVq2z5cKx
wa+vXweNgFOAU7sgmwv2vuHWxeEj0JY7+5hvPhdsxM242fdGwEuvdsdwMRes
lN6oJaWPQFh88aY64qPJhhyvS1Uj0G48P2pJAxe0rt5esVF6FGQmPmu6jnBh
meyONzqMUVCPc7E8z+fC4iiJQ0tVRuFt8dJm93EuaDy5eFNlySjcBuVvByRo
YFU7dfCMR2FzuN/FKhYNfIbRvbybo7AuMz5rrQ4NI/dFtTPvjEL7x7zw17o0
DM57VZlydxQCRIUF29bT0KerOxyRNgrF9fffrQYafh6YZ+72fhREQwx68sxo
qEieFF8pxQMuW+X8lhM0lC0tiVugwINqz68L9jjR8DLXU2e2Mg845YXTrV1o
yH/Ltp2+mAe05KD3Lnca0npaXvQa8eDe/NzSH5doCF1VdDY1kAeHtc+aXo+i
4cPqpm7PMB4M7khZLhNLg/TasSPbY3lgwha5EXiPhusb9My6npDrszqTnRNo
uLi1aMm8Sh6MXlE48z2VhmLDpqTBGh7sbTsxTfMpDTyjsZnlX3kwQ/qIokMm
De6mepL2XTxouSEaWptNg7Nl0e8E8TF4tzOydUcxDelWTQfOTB+DlbEbp1uV
0NB9YOyTPmsMykROZR4qpeHoEb2y1nlj8CXy5KZdr2k4cKIoTnXrGDjqjYQ2
vafB2LtoX8yVMdCdKx595Rt5Xt+mD45BY7D81MZYVhPRz29si274GBRFqYsl
fadh81W9VQ1JY/Dc100pqZWGdSFFckw8Bq+XumgY/qbhfGjTtV/vxuDJVdUT
cR005IaNCbPrxmBVTB7V20nDyii9XvO2MWCXuSWd7aZhQXxRZejEGOSvq/LX
7KfBIbFJ30aSD9eabw5vZNOQnDyWt3wGH2YO9NSYcWiY/UQv5cNsPuRuDf3v
IE3DoTRr1bgFfNBwsci1HKDh3tML4U4r+LCx65WaySDJV1aRv7Q+H5pvp6qo
DNOw53nTaNM2Pgxo5WeOEA7LHXNJM+XD8MSth9UjNMgW6R02OsyHOkF9vg2P
BpMX1l+UjvFh+qy2z7PGaAh8eWHHH2fyPLtH93wmLPa6SO+6Lx8svsWcXyyg
IWMGlToRwIdQid97vhLee9hF8cItPvxMb9L1FtIgTH8XMBDFh4gqUw3WPxoe
8TQGneL5oM1lsp4QNjO8aNf5mA+BS0RnaI2T/Ed8q7V5xocC2eEZWYQNV4Zk
7C7jw0S6xYKoCRrYvl0q1e/4YK7pv4FPOLpq882tn/gw/mLFfstJGvRn3h99
2cQH6/htF9II/zk2fGztLz6s88pMGiQclrPrS1YPH6Z8dtetniJ+TqWhJYN8
eGarLn6acJuZWPZDAR8a7CQ3xxEOjLNRVxMTwBMDof9rwlo9hbeiZQUwpj9Y
+ZNw41qmcAZLANsWd1BDhP2vnT51U00AGTvfH58gvPhzZaPIAgGM+CSUTRGu
n6Ox3XeFAGLkHNUFhL1dfPOGdQWQ2TY7oJewRslXzTMGAhjfU8OuJ1wlpR3e
vV0APBOfI9mE3fYHT9qZCyB71cqv1wmrPOp0abYSQDtveI8F4dcDBq177QjL
/2hQJOy0+d6OmpMCeOTGs/lE3p8KHSra7iaAF/es2FcIlzSbLcLeAtgcRAUs
JeywOC16/VUB/Hi7dU410VfWU1Q8N1gAFQfEyu0I51YcPrc8UgCJX1ydOcSf
Q4zC9sdxArizPX2WO2ExW4b5nEcCmL/j82cO8Tcz07n0bqYATAXy4faELQVv
lzHzBbCLF7T/A8nHuNHc+yGlAnjl6DRvOWGzjgbPS7UCOP+KavjMJ3nQ1uri
fSPvf0O/SJlw/KWgvW5tAkB+YY8sSR45Kgbax2gBXD4cFJM3SvzdndpjwhSS
+eP6R3KI+JsgYl2hKoTMMQemBKmPtr5DlZvmCeFo7kVjAakn7UCFFK01QqB1
TRqqSL3Vl3ofVtwvhDpTNffxHuKPbEP17SNC0JCmx3L/En8OrFwvdUII2gbX
Q+xJPbsN/1YUeglB3PJcUzKpd+Yy07r2e0LYHW2lVviT9CepJGZVshD6z7hr
ox9E7z9Dls/ThZAY5XexooUGx4dxrVeKhZAb8aU0m/SfYpW+Hs3vQjh8VJte
8ZmG2zyDFbK/hMCwOlTr/Yn48zXi7NBfISyOjewuraVhevgGXsWYELjBbR9X
fqDBVipY3FH5H7DP6bnmVtCw5s8PI7O5/8Arg9J5Tfqh9JtVIbqL/0FdYtTq
d2XET//vDEm9f9A64jVcQvqpJG/xnFSrfyA1WOZrnEvDf13v1vfE/INi4XEl
ThINVytm+dUn/IPP/lkil0l/t0p2xcVP/kGt7IY1Mg9oELGZaRRc8A8qTlxy
m0bmw76G4/uWffsHHwfkjjy+RfpBuYSri+I4JPMqwlw9Sb9J2vpoIHIc3gXJ
bdqyjYabVfU/Ax6MQ7Ga58JoMt/eDdqqKD0mv9++SqVtEw3bDS/e3lAwDnOv
ds6yJvNxa2/ehYCmcfh5PSfv5wJS/2sWminOnoDM4DGtzWTernovNar3ZAKu
xnbmWpZy4exAjPaHZxOAnt/oDSniQpbqAmebwgl4a319d3EuF1a6oPYr7ydA
RnZ+Nj+dzHemT3V17wQU3t7epRDDhQWH+xIOa03C6cyjTvdPc0GZrjG6XDQJ
FZIdfvMpLtyLwEd78SSEXTVRtpXjgopurt++qkl4mbbUIXwaYZ+7uYubyf7O
aoUfQg7MEneYUy+chJXaEnyFTg7MUR4b1dg8BaMdw2f7cziwCDSfVLydglTv
MealHRyIe18iKu4kgg4p/lroYc+GgV/PfWgXEeTwPD5di5z/jIWpg61uIuhE
RtzBTgs2jKyI+p3vLYIWqB/dtX4bG8wjT5efCBJBSi7Jz8IXskHsyOyrH9JE
UMmXwI7xnn44PXRJJLJbBPk1iYjUk/OpvvqWKQ1HUVR/M+hg7aE+MLH56u5w
ShR9b3/TrWnRB5YPTnY/chFFhwQ3RM8a98Fp1bDaRZ6iqO1fXN/Qmj6IU2p9
sCJQFH0qPv79oVwf8Gd4rl+fLooulhlFJ5b2Qv5k+rndbFF0M9IoaLFyLyz/
xei6dF4MHdQb7lIv+gvP0qlTBe7iSI4n9cmtvQv82o40LA+UQD/3Hl96zfU3
nNNfb5oYLYku1RtHr/FvBWGSoUN/+DTU0m32sErrK9S7xdlfSJFCc+R8lrh/
fQ8bjOdN/nwojT43yp2YFHkO1ds3pKN4GbSh3nZOdmgWfpJzf0NHpiz6zNLQ
f3KhCivNX+Fs+3Q6slycu8DoTwP+IiodoFoqhyQ+JD3VbWnFBdIeqfXVM1C0
z6qCN7G/8QolhrNDpTxaEf7ogM3LLkyH8RTXNCog7dvMzkXVfzF7YE7FyhYF
ZJT0pqS64S/u22t8dkmbAqqk9z070fYXd828V63eTXj8zvew4b+4JXGDvzRP
AW2MNJu8q96DHazLhrmyDKSxzGHrLbcevOuk6JG3yxjIMMGxqZPZi+ffvKl9
1pmBZKqtAhq29GH3Rl1/BxcGWlcoHvdyZx9+vbCjZr8rAy1pO3EuYV8ftn2r
76zvzkARrW1W5sf7cJzo0GMZXwY63f+53DGoD1N+NrMeBzOQt3m4kUNtHxY7
pyPZnM5ATkfH6yP29mOL1237ajIYaGWw0p9nh/pxskJoCv6Pgfxi9b3fOPTj
zVndkPqcgX7kSCq2uvdj3/4Hvh7FDBT8l8V+GdmPh45PG5hRxUD1n0oubP3c
jzsOtbZs/ctAOtu3zLbawcZyBtZp9r0MlPiq9ZO+BRuvndvg4d/PQFx5hVi1
g2wc1PlBroRmoFlW7hblp9hY26Vksw6fgZyLphk/u8nGfpfup8yVYaIM+yhT
ybdsrJRs7Ty+jIn2Sodqpq3j4M0BDetmrWSi0pNf5EMNOPiU427x9dpMZLQk
pOaUIQeXLjGO91jDRPp9yTkyeznYIWddXd8mJnpTr8PpceHgrAql1c1mTKSp
kXJT7SEHm/xpEBS4MlHXfLMcQ3EuvrQ87GK2GxMZl0YPv5Tm4txzJhPp7kzk
F6HRtVyei9UmS0XivZjofXvhh1EVLubOTJUK8GeiyXDdYB0tLo428VYyD2Oi
Lyul/zO25uJfmbN1up8xUW2SAvvPIy5WGmrMbc9motXPjYLc0rl45/oI3eYc
Jko9/y1z+D8uznsrub6mgImy/sRc7yzg4sCf3M25r5hoOcPU1uk9+ZRVKDfz
r2UiQV51pVwvF3u7Hz81k8NE+1Ic7DIX0TjIlHtyI81EW6pXTYtcRuO7Cy6c
tB1kopNssddntWhc2Bh0InWUiUL6jU8x1tF4eON/jusmmajTY9Sl25DGruLD
9lYKFAp1MrPpsqfxpR8X7X2ZFFo0NjN/kyONQwsk7BNZFDL6e1Q+5CSNM0/O
tOtWphDFy3k33ZXGPR83HPHSoBDH9NCKR740PhZ95WCsDoUYciCpGUlj9zMy
B0vWUKj3rpJqTzSNA4wiD7StpdD+iYuaqXdpnMx/ZL1oI4Wi8hrlpBJo3Gbz
fn/hVgrND3Vab5NGY87aPftbDCmUFLC3teUpjcflmy0njSi06eJHlz3/0Vit
vG+fkSmFzjYmHtDIofGBhfJ7G/dRSMujEO0rofGpyVgL4X4KhYTyDYNLaXyh
aa7FnAMUWip5bnVhGY1jg3X2nLCh0PLnwe9GKmjcwLE05zlSyEkmtELiI43N
Cx/snOlFoY1qw7fONpPrDTtMKXlTaKvcgz38FhpfW7UsX8mXQvqjrRo+P2hc
nFGsruRPIXezjA6HdhrPS/o2wAqk0MInHr8bu2is/yP+CSuI6CVez5/bTWNr
VcdDrBAK2W8dVzn6l+gdNfSGCqPQy/s33D/20ph3U+EuM5ZCLMwKQFwaMyob
TZn3yP5N95t20DReLpYowowjftQ+XmM6QGN7vxXOjEQKPVbdPbl2iMa+L4bn
MJIp5Gnk4TJ3mMYxvJIGhRTCzkt+iYzQ+IPbDgOFVAolOp5oyhylcdczxpB8
OoUs468f8uTReKqvKVU+g+gbZtuxbozGusdPMOSzKDTbInDqIZ/ok7KycsZz
cn9Pn2hTAY2d2kd8ZuRSyFjovpJDOPHgtU65QgqdfNXsrPKP6BO7855cMYWG
t4zLpxBuaGDukiuhkGLBncL54zTmMppF5Uop5FrocTSBsLR5cuH0Mgqt7QpW
UJgget46eXr6awptbi147U3YoEpLY3oFhcT1fp5vIXxAkvdV9i2F0iL+Lted
JPnb+ipY9h2FJq6V/blBOPTy9c2yVRSKfLIrhZy3cVqp6bDMBwr9FxpwlDlF
4woBlS5TQ6G9dWbzTQn/WNdiI1NHoT2TCX/9CPM8HjJl6im0IdspK5UwM+fU
O+kvFDrjTqYR4RVc7YvSXymk/N1kWwdho+Vj2tKNFFpzdhdzhLD9qbIuqe8U
Cq/M+k2+P/DFJzfuS7VQqO6kcz75/sCxHWbmUj9IHn5fDibfH/j5XEVxqTZS
n6UD9v2EP9i0Fk37Re4X8HrjN8J/7qe4TOsgeSgZmVlEWKTJSXNaF4Wq2dGj
4YRnKeo0SnaT/QkZjQ6EdS34IZI9FLptsaVkBeHdYRgk+8j+WyeSuUQP54+B
IxJsok/d0uB0wtelzZ9KcCm0OC7+/CHCiduVbCUGKMR0/eIgQfhFwA9KYohC
56p+7Usl+nPHnf3EeRQKE/u7+Qvx7+AB06WCMQqddhBJsCX8Nm95I1dAoabK
0l2dxP/7zmztlgkKiXyJTfsmpLHEu5ofn6ZIftaM7tlG2FXzWXClKAtpynjv
ekryZPj9TOdzSRbyfX8F2ZL8Za8xD0+VYiHLhVZ6z0g+Z93RMoiXYSH7Du7V
EZLfge107M0ZLDQ9TZ3lQvL9IM9tp60S4dxXy6YGaTxNwWJsnzILHfTjvmUQ
dnPWebxDlYXGfnrnzyL1ZKQ5NKGrzkLPLgZFK5P6GwrzyJm+kIW8Cv3sCkh9
HunbZyu6mIXec60yg3toXLVdd/rYEhZKLIk1tyL1nDA+4tixguwXno3/Turf
xNlL5YUuC2XfkLe9SvpDXqVVZdY6FuJ03T6j0kbjOZp67o/Xs1CY90hjGukn
w01jH+/os5DBUEtxdvP/9Pe5fMKQhYp6V7451kBjmYcHV9gYsVDPR2Hmq880
Pj++odnChIWuiKYOKtTTeEeecLWBGQuZ1q2NSaih8YiGXzfLkoVm2fJMjlTS
2M7PJkrGioXyPR0X+L4h+WrSR1PWRM896vZ3ymmcFDZxv+8wC+3abSJMeUXj
neP+u8qPsdCSP9/fuRbQ+GHT1XxXDxaKnXVH5/4jGndXrmoP82QhISoskn5I
6iG/XSb7AgvNAMPdZxPJPAo3sKMvstANdmCB5n0a1+wQyLhdZ6ENtg0eamE0
5r90szsXQ65voeV0zIvGmzPmhkTcZSHt2kPHDD1Iv71Xl59zn/hb33JxthuN
5T1XyA4lsJB38KnpuU40nq/Vk++eykKX+s3K3G1If0q2kz1fxEKK4qImpojG
0WHya6NfsFCL+Ze7ifo0bvZ7ZZf/koVqm44r9a6nseNBtYIRzEJTWdMSj+nQ
2IdqsvOsYqHA1RritCaNH183L/BqZqFutp2ivSiNhacM7H3+sdCX2pDIvBdk
vr9chjwnWOhNTsZVROb5gxkqGuemWMjljGRn5XMu1s8daj8lroga/L+JlKRx
sf+/NLsD0xUR55JWlXEMF4uHUXZ6aoroWbZpoNCVi+Xy/h4Z3aiIyv/bv7By
NhfbSH4zGNRXRNtq5qQ4KHPxM+sKdc5mRVRL8Yv4TC42H4//2bVVEcVFrsqX
l+Li8O17j3zdqYjSEj0VOwY4WPF7qU3eIUXUU7UwffEbDlafiDh8zpfw3zjV
9Q7kfNSx68VdP0XUWZen7XiYg8+/l1Eu81dEhQNfPty05OAPEVe/yF5TRPIN
rHsFRhzstejcjse3FNHPa8XvMpdxcP3uPXpN8YroqoSFgcQgGwekyLMMsCJq
KVbaf/4CG3cb3/ogLaGEbOw4az6d7scOpvYaC6cpocs7fHWUj/Xjn+ZrvbZI
K6Fxwe8wa3Je/bq/XdNXTgl1a4t5lJv044pja3z6FZXQH2W0cOPCfpxwuXVx
3UIltGfE1bb8Rx+2LFp+I8pYCSXXHx5bb9SH3yyqgTm3lFDjsbeaDuK92Fk6
VUJTZiby2i67s9auGxclLzB4EzETSb1a6Vyq2YnrNulX7mUqo0D3kso3d9sx
3/nBPvswZbSqyLLkfdR3XLUnaf+MmSpoou37e42weuywQT8tLVoFxXvZpKvH
l2MnTu3oj1gVVCppr6VuVY7dHtoZUvdVUE3vx9PKjHJ8Webab78EFcSatslh
/NprHN9crbY3VQWFnH+7SKmpDDf6WIePF6mghp6ZXjEeJXhnibuPRasK+uKS
OONXag62cJWoCvypgjZ8b2ptV83BB+bFzixtV0Hzr33zaAl9jk+GvMhb1KWC
jgVQh67+ycLXD4lw/7FVUJWv1kCmXwYuE952SJ1UQV5PYxZFPX2IK7Pm5rSK
qCKe81kzxTvJuMYhZ4ohropaw/NrNHoTceuHr/EXpVTRZ+P7CaP+cZgfp9a0
h6GKfm1LKtmWEYGnzJ8tDKRUkeOinZsYfWF4mjicf6moilYPO8TcuRyCFU87
MBepkv3f/p68kHEVq80dsTuspooWUO3zKi/74nkNN7LC1VXRi1RPh6iMc3jZ
TeWJyrmqSC/+zOXijKNYZ9NT03+a5Pc6t//3/1bZ/wFpMdl9
     "]]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  AxesOrigin->{0, 0},
  PlotRange->
   NCache[{{0, 2 Pi}, {-0.9999998592131705, 0.9999998782112116}}, {{
     0, 6.283185307179586}, {-0.9999998592131705, 0.9999998782112116}}],
  PlotRangeClipping->True,
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02]}]], "Output",
 CellChangeTimes->{3.460567481837472*^9},
 CellTags->"Cell 9.70"]
}, Open  ]],

Cell[TextData[{
 "Note that the function to be plotted ",
 StyleBox["must ",
  FontSlant->"Italic"],
 " evaluate to a real number over the range of the plot.",
 "  No unknown constants can appear in the function. For instance, the \
function ",
 Cell[BoxData[
  FormBox[
   RowBox[{"a", " ", "x"}], TraditionalForm]]],
 " cannot be plotted vs. ",
 StyleBox["x",
  FontSlant->"Italic"],
 " unless the constant ",
 StyleBox["a",
  FontSlant->"Italic"],
 " has already been defined as some real number."
}], "Text"],

Cell["\<\
Also, functions that evaluate to complex numbers cannot be plotted (although \
one can plot the real and imaginary parts separately).\
\>", "Text"],

Cell[TextData[StyleBox["Forgetting these two simple facts is one of the most \
common sources of errors when making a plot. The error can be avoided by the \
following tactic: before you plot a function, evaluate it once at some \
arbitrary point. If unknown constants appear in the result, define them \
before continuing with the plot.",
 FontWeight->"Bold"]], "Text"],

Cell[TextData[{
 StyleBox["\t",
  FontWeight->"Bold"],
 "There are a large number of options available to modify the appearance of \
the plot. For example, to change the y-range of the plot from -2 to 2, add \
the following option ",
 StyleBox["PlotRange",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ", as shown in Cell ",
 ButtonBox["9.71",
  BaseStyle->"Hyperlink",
  ButtonData:>"Cell 9.71"],
 "."
}], "Text",
 CellTags->"i:44"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"Sin", "[", "x", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", 
     RowBox[{"2", "Pi"}]}], "}"}], ",", 
   RowBox[{"PlotRange", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "2"}], ",", "2"}], "}"}]}]}], "]"}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.71"],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {Hue[0.67, 0.6, 0.6], LineBox[CompressedData["
1:eJwlmXk4lN/7x61ZEjPPEJKifSWltNB9KqFIKdEiJC0kiQhJpRKS7JVsqRCf
yC7JiVIUUopQFJJlZh7rmJksv/O9fn+d63Vdc57l/X7f932eazQdzu49LiYi
IpItKiLyv1Ucy9Z1rr26mVf2/+vC3rJNc6Ls4G5B0/Bssgqfazs2R56FczH5
hl/J+kfxFL8w8jJceVrum0LWFqPrFU8i74D61eSafWT9Zhe5OCEyCfS2z7Dc
H5EEe11UW+5FZsNaLHzlczsbIoZs8mIjMaxXemqo7o9hU+VO2a0e9XCj9NV2
2e314OZrfjTP7TsUXXijW9rcBGeKj4eJzf8FizLnfDJht8HXnh0yaQ5d0NXd
fLBSuhNCtHkihQd7QFMqQ3QnsxvOLa+Kef2EDUKP92sz+T3QdbzrSnIhG855
Fc9fK94LVskiLlfes+H5lRnqxTN6YaPShq2olw0N9rqLns7rBbGpp1y8ggPb
emdu0TPrhcgvt4xxHgeOnUxRFE3shVyf3YJX5Vwwb27y1NPvA+Gx01k/XQfg
v5k9dXcd+sGeOexd6jUAL6cOz33h3A+VZb7bHvgPQJRjVG2Dez+Eq4Z8PxA2
AC9MvTaNBvTD4k/pYl+fDcA685BFPSn9YLmx2+oDewByjy28Ffq7H7IYR6cK
nQdBNdbyTMVBNiiW9VTHuA9CarlY9fSjbPA57RZ93ncQTH+0GJmfYoPhu8tL
V4cMgkeDeEqZFxtaLybue/Z0EO7kuj8xi2KD9N/WtEc9g/DRUN5+9kc2OLyy
2hN+YggC92Oe/1oOrC5UoVTPDoEHb36Ihz4HxLJbGh5eGAKfeatq7LZxICXZ
1jovaAhWPrS3nGvBgY5rJ2wbM4ZALyVi80YXDjjs9HKZTQ/B6/V+tT+TCTfF
BKVfGAbG6Y2cOnEurK633qlzZRhsu5pyC2S4IFatKlcSNAxBjkXsKAUupJQk
3Pl4fxh6D0cUrlPjQkfCk1juy2E4kH/rvNJqLjg4FjzWFRmB32/cVq2z5cKx
wa+vXweNgFOAU7sgmwv2vuHWxeEj0JY7+5hvPhdsxM242fdGwEuvdsdwMRes
lN6oJaWPQFh88aY64qPJhhyvS1Uj0G48P2pJAxe0rt5esVF6FGQmPmu6jnBh
meyONzqMUVCPc7E8z+fC4iiJQ0tVRuFt8dJm93EuaDy5eFNlySjcBuVvByRo
YFU7dfCMR2FzuN/FKhYNfIbRvbybo7AuMz5rrQ4NI/dFtTPvjEL7x7zw17o0
DM57VZlydxQCRIUF29bT0KerOxyRNgrF9fffrQYafh6YZ+72fhREQwx68sxo
qEieFF8pxQMuW+X8lhM0lC0tiVugwINqz68L9jjR8DLXU2e2Mg845YXTrV1o
yH/Ltp2+mAe05KD3Lnca0npaXvQa8eDe/NzSH5doCF1VdDY1kAeHtc+aXo+i
4cPqpm7PMB4M7khZLhNLg/TasSPbY3lgwha5EXiPhusb9My6npDrszqTnRNo
uLi1aMm8Sh6MXlE48z2VhmLDpqTBGh7sbTsxTfMpDTyjsZnlX3kwQ/qIokMm
De6mepL2XTxouSEaWptNg7Nl0e8E8TF4tzOydUcxDelWTQfOTB+DlbEbp1uV
0NB9YOyTPmsMykROZR4qpeHoEb2y1nlj8CXy5KZdr2k4cKIoTnXrGDjqjYQ2
vafB2LtoX8yVMdCdKx595Rt5Xt+mD45BY7D81MZYVhPRz29si274GBRFqYsl
fadh81W9VQ1JY/Dc100pqZWGdSFFckw8Bq+XumgY/qbhfGjTtV/vxuDJVdUT
cR005IaNCbPrxmBVTB7V20nDyii9XvO2MWCXuSWd7aZhQXxRZejEGOSvq/LX
7KfBIbFJ30aSD9eabw5vZNOQnDyWt3wGH2YO9NSYcWiY/UQv5cNsPuRuDf3v
IE3DoTRr1bgFfNBwsci1HKDh3tML4U4r+LCx65WaySDJV1aRv7Q+H5pvp6qo
DNOw53nTaNM2Pgxo5WeOEA7LHXNJM+XD8MSth9UjNMgW6R02OsyHOkF9vg2P
BpMX1l+UjvFh+qy2z7PGaAh8eWHHH2fyPLtH93wmLPa6SO+6Lx8svsWcXyyg
IWMGlToRwIdQid97vhLee9hF8cItPvxMb9L1FtIgTH8XMBDFh4gqUw3WPxoe
8TQGneL5oM1lsp4QNjO8aNf5mA+BS0RnaI2T/Ed8q7V5xocC2eEZWYQNV4Zk
7C7jw0S6xYKoCRrYvl0q1e/4YK7pv4FPOLpq882tn/gw/mLFfstJGvRn3h99
2cQH6/htF9II/zk2fGztLz6s88pMGiQclrPrS1YPH6Z8dtetniJ+TqWhJYN8
eGarLn6acJuZWPZDAR8a7CQ3xxEOjLNRVxMTwBMDof9rwlo9hbeiZQUwpj9Y
+ZNw41qmcAZLANsWd1BDhP2vnT51U00AGTvfH58gvPhzZaPIAgGM+CSUTRGu
n6Ox3XeFAGLkHNUFhL1dfPOGdQWQ2TY7oJewRslXzTMGAhjfU8OuJ1wlpR3e
vV0APBOfI9mE3fYHT9qZCyB71cqv1wmrPOp0abYSQDtveI8F4dcDBq177QjL
/2hQJOy0+d6OmpMCeOTGs/lE3p8KHSra7iaAF/es2FcIlzSbLcLeAtgcRAUs
JeywOC16/VUB/Hi7dU410VfWU1Q8N1gAFQfEyu0I51YcPrc8UgCJX1ydOcSf
Q4zC9sdxArizPX2WO2ExW4b5nEcCmL/j82cO8Tcz07n0bqYATAXy4faELQVv
lzHzBbCLF7T/A8nHuNHc+yGlAnjl6DRvOWGzjgbPS7UCOP+KavjMJ3nQ1uri
fSPvf0O/SJlw/KWgvW5tAkB+YY8sSR45Kgbax2gBXD4cFJM3SvzdndpjwhSS
+eP6R3KI+JsgYl2hKoTMMQemBKmPtr5DlZvmCeFo7kVjAakn7UCFFK01QqB1
TRqqSL3Vl3ofVtwvhDpTNffxHuKPbEP17SNC0JCmx3L/En8OrFwvdUII2gbX
Q+xJPbsN/1YUeglB3PJcUzKpd+Yy07r2e0LYHW2lVviT9CepJGZVshD6z7hr
ox9E7z9Dls/ThZAY5XexooUGx4dxrVeKhZAb8aU0m/SfYpW+Hs3vQjh8VJte
8ZmG2zyDFbK/hMCwOlTr/Yn48zXi7NBfISyOjewuraVhevgGXsWYELjBbR9X
fqDBVipY3FH5H7DP6bnmVtCw5s8PI7O5/8Arg9J5Tfqh9JtVIbqL/0FdYtTq
d2XET//vDEm9f9A64jVcQvqpJG/xnFSrfyA1WOZrnEvDf13v1vfE/INi4XEl
ThINVytm+dUn/IPP/lkil0l/t0p2xcVP/kGt7IY1Mg9oELGZaRRc8A8qTlxy
m0bmw76G4/uWffsHHwfkjjy+RfpBuYSri+I4JPMqwlw9Sb9J2vpoIHIc3gXJ
bdqyjYabVfU/Ax6MQ7Ga58JoMt/eDdqqKD0mv9++SqVtEw3bDS/e3lAwDnOv
ds6yJvNxa2/ehYCmcfh5PSfv5wJS/2sWminOnoDM4DGtzWTernovNar3ZAKu
xnbmWpZy4exAjPaHZxOAnt/oDSniQpbqAmebwgl4a319d3EuF1a6oPYr7ydA
RnZ+Nj+dzHemT3V17wQU3t7epRDDhQWH+xIOa03C6cyjTvdPc0GZrjG6XDQJ
FZIdfvMpLtyLwEd78SSEXTVRtpXjgopurt++qkl4mbbUIXwaYZ+7uYubyf7O
aoUfQg7MEneYUy+chJXaEnyFTg7MUR4b1dg8BaMdw2f7cziwCDSfVLydglTv
MealHRyIe18iKu4kgg4p/lroYc+GgV/PfWgXEeTwPD5di5z/jIWpg61uIuhE
RtzBTgs2jKyI+p3vLYIWqB/dtX4bG8wjT5efCBJBSi7Jz8IXskHsyOyrH9JE
UMmXwI7xnn44PXRJJLJbBPk1iYjUk/OpvvqWKQ1HUVR/M+hg7aE+MLH56u5w
ShR9b3/TrWnRB5YPTnY/chFFhwQ3RM8a98Fp1bDaRZ6iqO1fXN/Qmj6IU2p9
sCJQFH0qPv79oVwf8Gd4rl+fLooulhlFJ5b2Qv5k+rndbFF0M9IoaLFyLyz/
xei6dF4MHdQb7lIv+gvP0qlTBe7iSI4n9cmtvQv82o40LA+UQD/3Hl96zfU3
nNNfb5oYLYku1RtHr/FvBWGSoUN/+DTU0m32sErrK9S7xdlfSJFCc+R8lrh/
fQ8bjOdN/nwojT43yp2YFHkO1ds3pKN4GbSh3nZOdmgWfpJzf0NHpiz6zNLQ
f3KhCivNX+Fs+3Q6slycu8DoTwP+IiodoFoqhyQ+JD3VbWnFBdIeqfXVM1C0
z6qCN7G/8QolhrNDpTxaEf7ogM3LLkyH8RTXNCog7dvMzkXVfzF7YE7FyhYF
ZJT0pqS64S/u22t8dkmbAqqk9z070fYXd828V63eTXj8zvew4b+4JXGDvzRP
AW2MNJu8q96DHazLhrmyDKSxzGHrLbcevOuk6JG3yxjIMMGxqZPZi+ffvKl9
1pmBZKqtAhq29GH3Rl1/BxcGWlcoHvdyZx9+vbCjZr8rAy1pO3EuYV8ftn2r
76zvzkARrW1W5sf7cJzo0GMZXwY63f+53DGoD1N+NrMeBzOQt3m4kUNtHxY7
pyPZnM5ATkfH6yP29mOL1237ajIYaGWw0p9nh/pxskJoCv6Pgfxi9b3fOPTj
zVndkPqcgX7kSCq2uvdj3/4Hvh7FDBT8l8V+GdmPh45PG5hRxUD1n0oubP3c
jzsOtbZs/ctAOtu3zLbawcZyBtZp9r0MlPiq9ZO+BRuvndvg4d/PQFx5hVi1
g2wc1PlBroRmoFlW7hblp9hY26Vksw6fgZyLphk/u8nGfpfup8yVYaIM+yhT
ybdsrJRs7Ty+jIn2Sodqpq3j4M0BDetmrWSi0pNf5EMNOPiU427x9dpMZLQk
pOaUIQeXLjGO91jDRPp9yTkyeznYIWddXd8mJnpTr8PpceHgrAql1c1mTKSp
kXJT7SEHm/xpEBS4MlHXfLMcQ3EuvrQ87GK2GxMZl0YPv5Tm4txzJhPp7kzk
F6HRtVyei9UmS0XivZjofXvhh1EVLubOTJUK8GeiyXDdYB0tLo428VYyD2Oi
Lyul/zO25uJfmbN1up8xUW2SAvvPIy5WGmrMbc9motXPjYLc0rl45/oI3eYc
Jko9/y1z+D8uznsrub6mgImy/sRc7yzg4sCf3M25r5hoOcPU1uk9+ZRVKDfz
r2UiQV51pVwvF3u7Hz81k8NE+1Ic7DIX0TjIlHtyI81EW6pXTYtcRuO7Cy6c
tB1kopNssddntWhc2Bh0InWUiUL6jU8x1tF4eON/jusmmajTY9Sl25DGruLD
9lYKFAp1MrPpsqfxpR8X7X2ZFFo0NjN/kyONQwsk7BNZFDL6e1Q+5CSNM0/O
tOtWphDFy3k33ZXGPR83HPHSoBDH9NCKR740PhZ95WCsDoUYciCpGUlj9zMy
B0vWUKj3rpJqTzSNA4wiD7StpdD+iYuaqXdpnMx/ZL1oI4Wi8hrlpBJo3Gbz
fn/hVgrND3Vab5NGY87aPftbDCmUFLC3teUpjcflmy0njSi06eJHlz3/0Vit
vG+fkSmFzjYmHtDIofGBhfJ7G/dRSMujEO0rofGpyVgL4X4KhYTyDYNLaXyh
aa7FnAMUWip5bnVhGY1jg3X2nLCh0PLnwe9GKmjcwLE05zlSyEkmtELiI43N
Cx/snOlFoY1qw7fONpPrDTtMKXlTaKvcgz38FhpfW7UsX8mXQvqjrRo+P2hc
nFGsruRPIXezjA6HdhrPS/o2wAqk0MInHr8bu2is/yP+CSuI6CVez5/bTWNr
VcdDrBAK2W8dVzn6l+gdNfSGCqPQy/s33D/20ph3U+EuM5ZCLMwKQFwaMyob
TZn3yP5N95t20DReLpYowowjftQ+XmM6QGN7vxXOjEQKPVbdPbl2iMa+L4bn
MJIp5Gnk4TJ3mMYxvJIGhRTCzkt+iYzQ+IPbDgOFVAolOp5oyhylcdczxpB8
OoUs468f8uTReKqvKVU+g+gbZtuxbozGusdPMOSzKDTbInDqIZ/ok7KycsZz
cn9Pn2hTAY2d2kd8ZuRSyFjovpJDOPHgtU65QgqdfNXsrPKP6BO7855cMYWG
t4zLpxBuaGDukiuhkGLBncL54zTmMppF5Uop5FrocTSBsLR5cuH0Mgqt7QpW
UJgget46eXr6awptbi147U3YoEpLY3oFhcT1fp5vIXxAkvdV9i2F0iL+Lted
JPnb+ipY9h2FJq6V/blBOPTy9c2yVRSKfLIrhZy3cVqp6bDMBwr9FxpwlDlF
4woBlS5TQ6G9dWbzTQn/WNdiI1NHoT2TCX/9CPM8HjJl6im0IdspK5UwM+fU
O+kvFDrjTqYR4RVc7YvSXymk/N1kWwdho+Vj2tKNFFpzdhdzhLD9qbIuqe8U
Cq/M+k2+P/DFJzfuS7VQqO6kcz75/sCxHWbmUj9IHn5fDibfH/j5XEVxqTZS
n6UD9v2EP9i0Fk37Re4X8HrjN8J/7qe4TOsgeSgZmVlEWKTJSXNaF4Wq2dGj
4YRnKeo0SnaT/QkZjQ6EdS34IZI9FLptsaVkBeHdYRgk+8j+WyeSuUQP54+B
IxJsok/d0uB0wtelzZ9KcCm0OC7+/CHCiduVbCUGKMR0/eIgQfhFwA9KYohC
56p+7Usl+nPHnf3EeRQKE/u7+Qvx7+AB06WCMQqddhBJsCX8Nm95I1dAoabK
0l2dxP/7zmztlgkKiXyJTfsmpLHEu5ofn6ZIftaM7tlG2FXzWXClKAtpynjv
ekryZPj9TOdzSRbyfX8F2ZL8Za8xD0+VYiHLhVZ6z0g+Z93RMoiXYSH7Du7V
EZLfge107M0ZLDQ9TZ3lQvL9IM9tp60S4dxXy6YGaTxNwWJsnzILHfTjvmUQ
dnPWebxDlYXGfnrnzyL1ZKQ5NKGrzkLPLgZFK5P6GwrzyJm+kIW8Cv3sCkh9
HunbZyu6mIXec60yg3toXLVdd/rYEhZKLIk1tyL1nDA+4tixguwXno3/Turf
xNlL5YUuC2XfkLe9SvpDXqVVZdY6FuJ03T6j0kbjOZp67o/Xs1CY90hjGukn
w01jH+/os5DBUEtxdvP/9Pe5fMKQhYp6V7451kBjmYcHV9gYsVDPR2Hmq880
Pj++odnChIWuiKYOKtTTeEeecLWBGQuZ1q2NSaih8YiGXzfLkoVm2fJMjlTS
2M7PJkrGioXyPR0X+L4h+WrSR1PWRM896vZ3ymmcFDZxv+8wC+3abSJMeUXj
neP+u8qPsdCSP9/fuRbQ+GHT1XxXDxaKnXVH5/4jGndXrmoP82QhISoskn5I
6iG/XSb7AgvNAMPdZxPJPAo3sKMvstANdmCB5n0a1+wQyLhdZ6ENtg0eamE0
5r90szsXQ65voeV0zIvGmzPmhkTcZSHt2kPHDD1Iv71Xl59zn/hb33JxthuN
5T1XyA4lsJB38KnpuU40nq/Vk++eykKX+s3K3G1If0q2kz1fxEKK4qImpojG
0WHya6NfsFCL+Ze7ifo0bvZ7ZZf/koVqm44r9a6nseNBtYIRzEJTWdMSj+nQ
2IdqsvOsYqHA1RritCaNH183L/BqZqFutp2ivSiNhacM7H3+sdCX2pDIvBdk
vr9chjwnWOhNTsZVROb5gxkqGuemWMjljGRn5XMu1s8daj8lroga/L+JlKRx
sf+/NLsD0xUR55JWlXEMF4uHUXZ6aoroWbZpoNCVi+Xy/h4Z3aiIyv/bv7By
NhfbSH4zGNRXRNtq5qQ4KHPxM+sKdc5mRVRL8Yv4TC42H4//2bVVEcVFrsqX
l+Li8O17j3zdqYjSEj0VOwY4WPF7qU3eIUXUU7UwffEbDlafiDh8zpfw3zjV
9Q7kfNSx68VdP0XUWZen7XiYg8+/l1Eu81dEhQNfPty05OAPEVe/yF5TRPIN
rHsFRhzstejcjse3FNHPa8XvMpdxcP3uPXpN8YroqoSFgcQgGwekyLMMsCJq
KVbaf/4CG3cb3/ogLaGEbOw4az6d7scOpvYaC6cpocs7fHWUj/Xjn+ZrvbZI
K6Fxwe8wa3Je/bq/XdNXTgl1a4t5lJv044pja3z6FZXQH2W0cOPCfpxwuXVx
3UIltGfE1bb8Rx+2LFp+I8pYCSXXHx5bb9SH3yyqgTm3lFDjsbeaDuK92Fk6
VUJTZiby2i67s9auGxclLzB4EzETSb1a6Vyq2YnrNulX7mUqo0D3kso3d9sx
3/nBPvswZbSqyLLkfdR3XLUnaf+MmSpoou37e42weuywQT8tLVoFxXvZpKvH
l2MnTu3oj1gVVCppr6VuVY7dHtoZUvdVUE3vx9PKjHJ8Webab78EFcSatslh
/NprHN9crbY3VQWFnH+7SKmpDDf6WIePF6mghp6ZXjEeJXhnibuPRasK+uKS
OONXag62cJWoCvypgjZ8b2ptV83BB+bFzixtV0Hzr33zaAl9jk+GvMhb1KWC
jgVQh67+ycLXD4lw/7FVUJWv1kCmXwYuE952SJ1UQV5PYxZFPX2IK7Pm5rSK
qCKe81kzxTvJuMYhZ4ohropaw/NrNHoTceuHr/EXpVTRZ+P7CaP+cZgfp9a0
h6GKfm1LKtmWEYGnzJ8tDKRUkeOinZsYfWF4mjicf6moilYPO8TcuRyCFU87
MBepkv3f/p68kHEVq80dsTuspooWUO3zKi/74nkNN7LC1VXRi1RPh6iMc3jZ
TeWJyrmqSC/+zOXijKNYZ9NT03+a5Pc6t//3/1bZ/wFpMdl9
     "]]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  AxesOrigin->{0, 0},
  PlotRange->NCache[{{0, 2 Pi}, {-2, 2}}, {{0, 6.283185307179586}, {-2, 2}}],
  PlotRangeClipping->True,
  PlotRangePadding->{
    Scaled[0.02], Automatic}]], "Output",
 CellTags->"Cell 9.71"]
}, Open  ]],

Cell[TextData[{
 "The arrow ",
 Cell[BoxData[
  FormBox[
   StyleBox["\[Rule]",
    FontFamily->"Courier",
    FontWeight->"Bold"], TraditionalForm]]],
 " in this cell was obtained by typing ",
 StyleBox["->",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " (\"minus-greater than-space\"). ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " automatically reformats this key sequence. Several other common symbols \
can also be created in this manner, such as ",
 StyleBox["\[LessEqual]",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " (keyed as ",
 StyleBox["<= ",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 "), ",
 StyleBox["\[GreaterEqual]",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " (keyed as ",
 StyleBox[">= ",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ") and ",
 StyleBox["\[NotEqual]",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " (keyed as ",
 StyleBox["!= ",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ").  Keyboard equivalents for many other symbols also exist; see Sec. ",
 ButtonBox["9.4.3",
  BaseStyle->"Hyperlink",
  ButtonData:>"c:15"],
 ". "
}], "Text",
 CellTags->"i:133"],

Cell[TextData[{
 "\tOther options can be added as extra arguments to the function ",
 StyleBox["Plot",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ". For example, to create axis labels and a plot label, use the options "
}], "Text"],

Cell[TextData[{
 "\t\t",
 StyleBox["AxesLabel \[Rule] {\"x\",\"Sin[x]\"}",
  FontFamily->"Courier",
  FontWeight->"Bold"]
}], "Text"],

Cell[TextData[{
 "\t\t",
 StyleBox["PlotLabel \[Rule] \"A plot of Sin[x]\"",
  FontFamily->"Courier",
  FontWeight->"Bold"]
}], "Text"],

Cell[TextData[{
 "\tOne can also change the color of the lines in the plot, or change from \
solid to dashed or dotted lines. To change the color, use ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    RowBox[{"PlotStyle", "\[Rule]", 
     RowBox[{"RGBColor", "[", 
      RowBox[{
       StyleBox["r",
        FontSlant->"Plain"], ",", 
       StyleBox["g",
        FontSlant->"Plain"], ",", 
       StyleBox["b",
        FontSlant->"Plain"]}], "]"}]}],
    FontFamily->"Courier",
    FontWeight->"Bold"], TraditionalForm]]],
 " where ",
 StyleBox["r",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ", ",
 StyleBox["g",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ", and ",
 StyleBox["b",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " are real numbers between 0 and 1 giving the intensity of red, green and \
blue respectively.  For specific colors such as red, purple, green, etc, one \
can also use direct commands such as ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    RowBox[{"PlotStyle", "\[Rule]", "Blue"}],
    FontFamily->"Courier",
    FontWeight->"Bold"], TraditionalForm]]],
 ". To change to a dashed line, use the ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    RowBox[{"PlotStyle", "\[Rule]", 
     RowBox[{"Dashing", "[", 
      RowBox[{"{", 
       RowBox[{"line", ",", "space"}], "}"}], "]"}]}],
    FontFamily->"Courier",
    FontWeight->"Bold"], TraditionalForm]]],
 ", where ",
 StyleBox["line",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " and ",
 StyleBox["space",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 StyleBox[" ",
  FontSlant->"Italic"],
 "are the lengths of lines and spaces in the dashing. If you want to use both \
a colored and a dashed line,  make a list of ",
 StyleBox["PlotStyle",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " options: for example, "
}], "Text",
 CellChangeTimes->{{3.44633288580406*^9, 3.4463329280209007`*^9}, 
   3.44650540183629*^9}],

Cell[TextData[{
 "\t\t",
 StyleBox["PlotStyle ",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 Cell[BoxData[
  FormBox[
   StyleBox["\[Rule]",
    FontWeight->"Bold"], TraditionalForm]]],
 StyleBox["{RGBColor[1,0,0],Dashing[{0.05,0.05}]}",
  FontFamily->"Courier",
  FontWeight->"Bold"]
}], "Text"],

Cell[TextData[{
 "produces a bright red dashed line. The use of these and other options is \
illustrated in Cell ",
 ButtonBox["9.72",
  BaseStyle->"Hyperlink",
  ButtonData:>"Cell 9.72"],
 ". The ",
 StyleBox["Style",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " command, used here to change the format of text in the plot, can sometimes \
be handy."
}], "Text",
 CellChangeTimes->{{3.446417848497233*^9, 3.4464178893078403`*^9}, {
  3.446505431324518*^9, 3.446505445841263*^9}, {3.448646913857843*^9, 
  3.448646914350602*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"prettyplot", "=", 
  RowBox[{"Plot", "[", 
   RowBox[{
    RowBox[{"Sin", "[", "x", "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"x", ",", "0", ",", 
      RowBox[{"2", "Pi"}]}], "}"}], ",", 
    RowBox[{"FrameTicks", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", "Pi", ",", 
         RowBox[{"2", "Pi"}]}], "}"}], ",", "Automatic", ",", "None", ",", 
       "Automatic"}], "}"}]}], ",", 
    RowBox[{"Frame", "\[Rule]", "True"}], ",", 
    RowBox[{"Axes", "\[Rule]", "False"}], ",", " ", 
    RowBox[{"PlotStyle", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"Purple", ",", 
       RowBox[{"Dashing", "[", 
        RowBox[{"{", 
         RowBox[{"0.05", ",", "0.03"}], "}"}], "]"}]}], "}"}]}], ",", 
    RowBox[{"FrameLabel", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Style", "[", 
        RowBox[{"\"\<x\>\"", ",", 
         RowBox[{"FontFamily", "\[Rule]", " ", "\"\<Times\>\""}], ",", 
         RowBox[{"FontColor", "\[Rule]", "Green"}], ",", 
         RowBox[{"FontSize", "\[Rule]", "18"}]}], "]"}], ",", "\"\<y\>\"", 
       ",", "\"\<The Sine Function\>\"", ",", "\"\<\>\""}], "}"}]}]}], 
   "]"}]}]], "Input",
 ShowCellTags->True,
 CellChangeTimes->{{3.446332962985108*^9, 3.446332964077372*^9}, {
   3.4464173603743143`*^9, 3.4464174027862253`*^9}, {3.4464176911716957`*^9, 
   3.446417753745154*^9}, {3.4464178130661907`*^9, 3.446417828791237*^9}, {
   3.446417911865089*^9, 3.4464179126421347`*^9}, 3.448646939422167*^9},
 CellTags->"Cell 9.72"],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {RGBColor[0.5, 0, 0.5], Dashing[{0.05, 0.03}], LineBox[CompressedData["
1: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
     "]]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  AxesOrigin->{0, 0},
  Frame->True,
  FrameLabel->{
    FormBox[
     StyleBox[
     "\"x\"", FontFamily -> "Times", FontColor -> RGBColor[0, 1, 0], FontSize -> 
      18, StripOnInput -> False], TraditionalForm], 
    FormBox["\"y\"", TraditionalForm], 
    FormBox["\"The Sine Function\"", TraditionalForm], 
    FormBox["\"\"", TraditionalForm]},
  FrameTicks->{{{0, 
      FormBox["0", TraditionalForm]}, {
      NCache[Pi, 3.141592653589793], 
      FormBox["\[Pi]", TraditionalForm]}, {
      NCache[2 Pi, 6.283185307179586], 
      FormBox[
       RowBox[{"2", " ", "\[Pi]"}], TraditionalForm]}}, Automatic, None, 
    Automatic},
  PlotRange->
   NCache[{{0, 2 Pi}, {-0.9999998592131705, 0.9999998782112116}}, {{
     0, 6.283185307179586}, {-0.9999998592131705, 0.9999998782112116}}],
  PlotRangeClipping->True,
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02]}]], "Output",
 CellTags->"Cell 9.72"]
}, Open  ]],

Cell[TextData[{
 "Plots can  also be modified and examined using the drawing tools palette, \
available in the ",
 StyleBox["Graphics",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " pull-down menu (or using the  ",
 StyleBox["^T",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " keyboard shortcut.) Using various tools in this palette, text and simple \
line drawings can be added to the plot. The ",
 Cell[BoxData[
  FormBox[
   RowBox[{"x", "-", "y"}], TraditionalForm]]],
 " values of points  in the plot can also be read out by choosing the cursor \
tool and placing the mouse over the plot. "
}], "Text",
 CellChangeTimes->{{3.460566947536352*^9, 3.4605670521596727`*^9}, {
   3.460567086842297*^9, 3.4605671985923853`*^9}, {3.460567240927087*^9, 
   3.4605672959177513`*^9}, 3.460567352852141*^9, {3.4605675125210648`*^9, 
   3.4605676794703417`*^9}, {3.46056872745958*^9, 3.46056875636462*^9}, {
   3.50308934454025*^9, 3.503089373392881*^9}},
 CellTags->"i:ginsp"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 "9.6.2 The ",
 StyleBox["Show",
  FontFamily->"Courier",
  FontWeight->"Bold",
  FontSlant->"Plain"],
 " Command"
}], "Subsubtitle",
 CellTags->{"i:45", "c:28"}],

Cell[TextData[{
 "In order to show the same plot again but with new options, one can use the ",
 StyleBox["Show",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " command. For example, to display the previous plot over a different range \
of ",
 StyleBox["x",
  FontSlant->"Italic"],
 " and ",
 StyleBox["y",
  FontSlant->"Italic"],
 ", use the command shown in Cell ",
 ButtonBox["9.73",
  BaseStyle->"Hyperlink",
  ButtonData:>"Cell 9.73"],
 "."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"newplot", " ", "=", " ", 
  RowBox[{"Show", "[", 
   RowBox[{"prettyplot", ",", 
    RowBox[{"PlotRange", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", "10"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "2"}], ",", "2"}], "}"}]}], "}"}]}]}], "]"}]}]], "Input",\

 ShowCellTags->True,
 CellTags->"Cell 9.73"],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {RGBColor[0.5, 0, 0.5], Dashing[{0.05, 0.03}], LineBox[CompressedData["
1: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
     "]]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  AxesOrigin->{0, 0},
  Frame->True,
  FrameLabel->{
    FormBox[
     StyleBox[
     "\"x\"", FontFamily -> "Times", FontColor -> RGBColor[0, 1, 0], FontSize -> 
      18, StripOnInput -> False], TraditionalForm], 
    FormBox["\"y\"", TraditionalForm], 
    FormBox["\"The Sine Function\"", TraditionalForm], 
    FormBox["\"\"", TraditionalForm]},
  FrameTicks->{{{0, 
      FormBox["0", TraditionalForm]}, {
      NCache[Pi, 3.141592653589793], 
      FormBox["\[Pi]", TraditionalForm]}, {
      NCache[2 Pi, 6.283185307179586], 
      FormBox[
       RowBox[{"2", " ", "\[Pi]"}], TraditionalForm]}}, Automatic, None, 
    Automatic},
  PlotRange->{{0, 10}, {-2, 2}},
  PlotRangeClipping->True,
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02]}]], "Output",
 CellTags->"Cell 9.73"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["9.6.3 Plotting Several Curves on the Same Graph", "Subsubtitle",
 CellTags->{"i:46", "c:29"}],

Cell[TextData[{
 "More than one curve can be plotted at the same time using either ",
 StyleBox["Plot",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " or ",
 StyleBox["Show",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ". \nFor example, to plot the cos and tanh functions over the same range of ",
 StyleBox["x",
  FontSlant->"Italic"],
 ", use the ",
 StyleBox["Plot",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " command specifying a list of functions,",
 Cell[BoxData[
  FormBox[
   RowBox[{" ", 
    StyleBox[
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Cos", "[", 
        StyleBox["x",
         FontSlant->"Plain"], "]"}], ",", 
       RowBox[{"Tanh", "[", 
        StyleBox["x",
         FontSlant->"Plain"], "]"}]}], "}"}],
     FontFamily->"Courier",
     FontWeight->"Bold"]}], TraditionalForm]]],
 ". Here's where it comes in handy to add colors and dashing in order to \
separate out the curves, as seen in Cell ",
 ButtonBox["9.74",
  BaseStyle->"Hyperlink",
  ButtonData:>"Cell 9.74"],
 "."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"CTPlot", " ", "=", " ", 
  RowBox[{"Plot", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Cos", "[", "x", "]"}], ",", 
      RowBox[{"Tanh", "[", "x", "]"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"x", ",", "0", ",", 
      RowBox[{"2", "Pi"}]}], "}"}], ",", 
    RowBox[{"PlotStyle", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"RGBColor", "[", 
          RowBox[{"1", ",", "0", ",", "0"}], "]"}], ",", 
         RowBox[{"Dashing", "[", 
          RowBox[{"{", 
           RowBox[{"0.05", ",", "0.05"}], "}"}], "]"}]}], "}"}], ",", 
       "Green"}], "}"}]}]}], "]"}]}]], "Input",
 ShowCellTags->True,
 CellChangeTimes->{{3.446332989135046*^9, 3.446332989914441*^9}},
 CellTags->"Cell 9.74"],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {RGBColor[1, 0, 0], Dashing[{0.05, 0.05}], LineBox[CompressedData["
1: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
jPkqFWp+BoEqc5T/NUw1nVsqD////8L/AWFzd/g=
     "]]}, 
   {RGBColor[0, 1, 0], LineBox[CompressedData["
1:eJwl1ndYjt8bAPD2Xu9qi0IoWjSEzi00aQ+SSjQkmhqkNDSMVNKXQhlNGtqh
Iu1ClFIhKu3eJ2kP/c57/f461+d6n+c9933OfZ/zSDt6mDmxMDExLTAzMTFG
1mqeDwOqoVqjVf8fN49W7ZG6bY+GK6aeSeBxqUDxdHeCB3oyv3fzRzz+prou
lCaEoCOi5qs38dijE1GTnnAL2Wpr9jDj8Yt9wpYHCakoIO14OX9cKjJzF+u5
m5CPJgWH1tlF56P4aduipIRqdJ9Z+XDvmWq0p86AR9unDUnSbusOi7Yhz4tG
J4s8v6Jds2sTxqZd6Fy5UyzLxp+IfYOyjH7zd9Qxos+d6TiITlm0yMiw9qNr
inNMpcdG0AEdkRH96EF00V9ffshtBO3PyOM7lTCIzlTftxQOGkH9vLaaF+4P
Ij3jAzl+D0eQm0FaaUTBIOL0iDNXHxhBCveKjpt8HUQReXIZ5e6jSEsvuDBF
9jcK3mFv+CpkDGXLXr8pUPUbeck33nmTPoHOKrdd+/J1CA06DV5JK51AUqdm
tUV/DSGrNCb3Kw0T6GHspxqL0SGkSdutDaMTyGAubOOrxSHEspZNr94+iZ5+
1s3bJz6MEj5f160umkQ63HrrJW2GUWGg8WLlWzpybbpXZPJlGC2dOpv3/fwU
6osQa1R5OYIcSH8DXvtNoW+RJt1Rb0ZQXdXFAynBU+iGd4v41/oRFCd27evR
2ClEvmig4dY+grZ8zGLpyJ1C/t0fpC0nRpCF5pBV88QUOlP5sUN33SjKEzq5
Vur2B12MFyIVXhpFjpVWJnHO00hN+j87WfkxpFIqShbzmEZRZ6YsW5TGEEt+
T/sj/2m0cfjzybNqY+hxmp11UfQ0+sctW3t//xjqD3e268yZRgo3HvHXWY8h
RwM/d0liGr1StIxWCMfuuhOd5f8XNXufK7zUOYZO/el48yZ6Bu0zUOQu9BhH
DhfjrMvjZtC6abv6EZ9xZMt6mJ5/dwZNLHmNSwSMIyvaO4nUrBl0ytvC3//K
ONLb/cLvcuMMIgIcvrHGjyOF0JvbNblm0Y5vhby+L8bRgpDO3aKoWfSRScby
HTGObiiVeWREziHnFn7zdMcJ1KzSNXQhdg4FnC7VW3CaQFyq8ycOJc0hfwFL
O70zEyhit/rhwfQ55OsuNN3nMYEuaZdtlambQ8dVr81PBE0gN4uyXw9Y55HW
q3jrK0kTSDegzPzOlXk0UHlSKgXXAcubMvWIiwtoT1PkMFlmEuXwkzNWwxZQ
WWf5+oVNk8jsuDvV//oC8jPdFtuzZRI9mdvw58z9BSRi6Cry345JdHDHtRzj
qgWk2XxJitCYRJHJtuskWBbRD5Yf5HXGk4jnAjNrYcwiCti1ZeBK4CQiyRl+
6Lu7hIbb027+rp9EQ5yppMa0JbRzWvwGa9Mkevl72qIgawk9b+q6u75lEp1+
lNx7pXwJPX5aMGD6cRKVi46NSH9dQpbeb9xTuyaRHWcM62mRZXTt6vOyvuFJ
9HywXmPkzjK6pahnwsRJR6E14kFtD5bREfqEygAXHdf/+ery9GUUc97FqpaH
jphshXViSpaR3OPfTqECdGTe7mQu92UZ7RZn/jREo6Olt2zn3akrqOH5340O
m+hIL1X7yVTCCrJrlxgSBjqKamz7Hpaygvp3vawe2U9H9X/sRGlPV1DLuaM1
5Qfo6NDBSzd3l6ygL/du65vr0pH2aJF/WNcKKhnKi/M2oqO9OzcfpkquoqeX
JcKO29KRUgPnrHr6KioW//2834+OPKbuKDbnriKOEksiKICO8sQ2udmWriLf
acE42kU62uEOfVcaVpGXUt70/st0JEcKbGoaXUVqQQ6uUeF0tOn42IPjCv+Q
alGhR/0tOhIhWnVCyv6hgBO1gesz6ehufPXJ0ep/yHhQYCA0i45EdxUGmTf+
Q38fjwz3Z2MH/le4pfsfSm553JT2nI7EWR2l2pbw86oOZL5COpISmZ/doLWG
CtcX/Hj0mo5kkXR6Te0aUjgzZdHeRkcZvyhvtr9fQ095Gl7wfsa/R3D0Jn1Z
Q8wKHz5rt9PRlqZxobNDa+hMooZz7hc6Stx2vIqbjQksElr/+vTQUVLRZrnC
zUxwd/5PQcMAHSU3vGRmPcMEWsVfi+Nn6WjqZ0Eg4c4E/ZLHLRLm6Eh3KeNP
rycTZIRXMSXM09HM9tu/igOYoCDvUXjsIh0ZJZx96xzNBBc4WQyCVumI5YRk
aHMmE1wl896VZyfQ2enLTAlDTOD96ClPH4VANby+AcFjTBA6cG64hkog0c1u
U250Jug+dXU8nUagemurnwfmmCBItsr9jAiBNlQqvJllZwZ+xHNmSJxAHVF9
Icc2M4NCSOBMuTSB9q7bv7bhNDMorVTdqlMgkJ5th7ejKzP8vX/gZ5oigSxS
XIaeuDPDe7WvRy4p4XjEYt/LXmAGZ/F34TtUCJRM603ZHskMh5LcfaJUCbTA
f0FDI4sZmsVKN5P3Eqj4X5aX8QQznG7RbozWI9CbfXt/x00xg7R0mZO+PoFa
gz4e/TzDDJ3nNPZwGxBoYGkWWa4yQ6bdjfhIQwKR57UFjguwwGtKAHOAEYE8
iW85zkoscORAd4qaBYHkfwoNXvZlgfd+HWtb7AlkNLyhxi+ABY7tKu+pw/ak
K6V5BLFA02Y1yVMOOJ4VE9uTESxQ5an3JeUkzl8svuNgIgu8UExT5DhNoMNm
pDreYhbg19zNUu1KIPdaUsa9vyxgtOXGZK0XgWJbpCMS5lkgMnXguYk3gQo+
KzteX2YBz651g73YMz9NpS6zssKGNe3XUz4EClqNT3KgsIK6iZc01Y9AN9TI
UVt2sgLb834F7YsEys0iu5Z4s8JNE7+XWmEEivhSvZ/VnxWiu81f1mLbspyT
ML3ECk3Ele0G4QTisW34MBHOCtKyIm7mEQRyFgxS3XSHFfZzKtvYR+L99vvN
cruMFbKJTTdOXCNQ4oHyB54rrLDJjZdnPh7vn6eTfxUTGwxfynF2TyCQ9gOy
KR87G9iivzq/sP/MubNl8bPBBvGYxKbbeD1zpM/2SbGBP/mbV+IdAnGRrmsY
7WeD5sObnlLu4fx+nGiXj2QDk412h16l4vx19z1wusYGYKYuvyENr98LSZfU
WDY4j4jMCOzjEb1L5P/YYPvPZy6HHxFIU+6YzFImG4TbUPm6HhNo8YKFV2MT
G3yY2HioO51AfvyGgk787JB/r0sn8RmB6H5y3Q9J7HB0et/nCWznn9xPvtLY
IbABMR96TiCroka1w1Ls0LLttuEMtuoxHbudiuzA86AtxSgPx/d0fy6zKTsI
ae0Imi4gkNdeDcOHiewg7f2oZLGEQEznE0Nu3WWHPZ3GKtqleL9Tp4qu3GeH
p58tXK9h57BkS556yg7Wx32YxcsI1N8oRt9SjONjdiNUy3G/WC7HvWhnB/l1
mTMOLwmkdr6qs5bMAW3n+t2uVhGoNlWct1SYA+LDvsfXYZt98kOZ4hzQ7Kx1
kb2aQOd3KWbFyHBAdvPGuAjszKXUQCMVDlDLFOwKeYP7PSpU8qspB9S66bCf
rSHQUupBx/E4DiDcUv1o9QTSmt+XoHyHA9TLXzGZY4caqdf43+OAfJV8/Ths
rtVtMmyPOeCV+w4xngYC0WwE+yWLOEAo92/JErYSteek0RcO0FrbIt3WRCCn
aI+TL8Q4YWX3nogj7wmU1ecaP7+OE9pcqlzDsSfUHN/uk+GET2mbqBXY3r8t
pJvlOMEq/tqbjR8IdEVb81f/Hk7IsdzvN4edvMJ2kmrHCSXtZdHxbQRq80x2
8H/MCY3Eqa+p7QSSixNa9s3ghBM7HUdbsMPzI+9453DC8sHXH+ax1ejezecK
OaEvWVHEuINAD84a7jpdwwl33F8/WcZ2c17hNO3nhIrdKm2HOwnEZmuXLyfD
BfUtLoltXwlkd6lDf6ssFyQZUkLnscuSDQY3y3GB1pK8rlQ3fr9bTUxahQuU
xvc6nMX+ZCUYLqLNBb93rTax9hDooekbKzZHLni+7cr9Hb0E2q0r8+/7Iy74
oRKq6fydQLueNEc3pHPBu8v6RBS2wpo35UU2F8RVHAnPxpYpe7c14gUXGNZG
609g827B9/tb/P/1u808fxDoO0dWlt9PLrgpl+Ph3Yf3r36HueB6bmiL6cq1
/4X7Tabz+4IMN/hGmV+9jO0XHOzaL8sNk7eaUAq2m9rHyyUK3OC8kWrXiW2e
4Zl1XIsbitcpHTDsJ9DmyKLVzBPcMGeQ0KA4QKCmQ7uz4D43hNze4Ds4SKCA
hmCFkDRuyPrBJ8n8m0Bb9WuLK59yw6aFl+nrsCMPG7/VzOUGUkmvnRX2QXOn
nl1V2NOPztZjv3GI59v2kxtolLM8j4bw+l4a9SRt4oEc7iLF/SO4X1cV5o23
8kDzHR5DG2zhEN/Lsdt54K3gT0MfbN+wtRheVR6oNPH99xRbJYb2hF2HB3S1
9eQ4RwmUl7T/y6ILD6SGexXXY6e/uLe7/xkPpHBmGe4cx/kvH5f7ms8DFe1q
7brYSoekJD4U8UBZb7SOLfbrr49XKl7xgPem+qkI7Pa1Z9XxLTzw4t97yy/Y
zEZVh/aP88B+WREf7wkCnRjrN02T44UP4r3BDyfx/u1K105S4IXfMPWkAHvk
ssvOGyq8EEKRLqvB9iVNUAM0eSFWWDJrCPu6xmyXsQEvdO91KN1BJ1BFJKfd
2hleyHukcLscm7Zxu5tdNi8EGo3VvCUIFJdw3So7lxeSOHM2tmPzsIxrz7zg
heRfnV6D2Ey/siWuveSFyI0NnRxTuP8ebnlf0sILu/y31Blg14pvVOKn8wLH
3raDH7F9yeJzr1T44LX2kFnLHwIRoYH9HOp8UImkI3uw3f58/WC6hw+q1CWz
R7Ed2v7LHD7AB+pO/1VxTuP7MJZ2jGLJB1GN4dsOYG/kIb128+eDiUZmgTLs
z8xcYWKv+cC4+HjE7b/4fM69Z2fyhg925LXHp2Fz28jviarlA+nC/+JzsaHQ
aGamlQ/4tfa5NmDnOd5xbvvOB36jN3yWsK+/kzGMWuODsn1hAnYzuL6u7qPO
avOD1it6scQsjk/545S8Lj8cID+W3YJ96bvDe0dDfijdZnpDBbtQNSKyzZwf
lGc6dupjbxhqXnh2mh9C4tpmLmCv6Bz97hjJD2flbfTfY5dw+WS0NfFDc41y
nM8cgYaCQier3vPDTymLiSBs0T+3duV+4od0fkMUiR3U/bwmppsfqoJ7mu5i
H8wZ+qE9yg+e9QHeldifDW1ESrgEgOuEvRj7PIGmYvdH39MVgCCh4MWb2DKs
Jh+jDAXAavMUJGFb+NsJ+xkLACXp0JWH2OX2l56aWQvA2KGXQ3nYIUolb3hd
BOCafqb5R2yBz1sXL0cKAPtWm2KBBQJtpwm5OdYJwBqZXheFTcl/9Ty9SQDU
q++V3sJe0nMhRt4LwJHCLw//w24MqvL16BQAkpqMVSb26UH3kKBhAXCR4ThZ
j/2gqCkxiVsQOpwfEiyLeD6z8OrmI4LgImQj74c9O67AImAmCOzipVKXsb9d
7TloaiUIhUfzeSKwcyqUm7vsBOFsy93WeGwd6Z8dgx6C8JokvfgcO3hq79i/
eEHwyi1f/oVNxM5Rd3YKQpc1vUdnCdfzlFTNjh5BiO1YH3MYe8xM12PrD0GI
Ds5TNsMeFL7btG5IEIbzFr1OYPc83B3MNYfne9Cf74PtaF31l84jBF3FdZtT
sY+4MJ+olRMC2y9/pKaxD9+9U/R2uxCcdNm1cR7boGkbT7WCEAxnBMmsYOvJ
m5VVqAjBmRFlMscy/j4iHpPyNYUgOLC8VAxbw/9g/T0DIQjbcV4UsDdGRSl6
uAmBC0nPPgbbu3NXsKO7EJTZbSu7if1mc3+r5Xkh0GD+xJOAbVe7122vtxDk
FISnJ2MnM08/5b4oBHfrR7KeYZODbMWfxghBs6XqeCs2i5cye3eWEJi2ywXy
rRDI9M0P89YcIbitGWoqhJ0meONx9XMhuLQsJkvF1sobQhkFQpBGka6VwL44
nnLRp1wIpJPH2uWwp504pvgbhWAiKOqQHna/TW+P9rAQqEmLx1zB5ttnnekw
KgTz1ZGaEdiq69t9gseFYNKVfyQKO3qgme8lIQTs+oHqt7AV3V9qKS8IwXfb
fVkPsIMu33u8npsEX/IWOyqwaWnWbityJIgpCfEjGPGFtauJ7yDBvFxH4TS2
62ljVg1FEpRpVI3PYr/eqnvfZycJ9kScNF/Bdnyh9mFsDwkOfNVb4lrF50UN
TaX7MAnUJPKypbH1frcvlpwnQTPpRYYJ9mX52Ev5niSonRg2NMcu9NJbzfIm
QV9WON0SW+Lfa6b7fiRoYJ+RP45NF87gDAsmQVfsWpQTdqJeAM0olgSN9/7W
B2L/fCapPJRLgkouO680bNp0Z2FfPglcDy81PMY20Ijf1f2CBHI9epLp2EW1
7BqtJSRoGWSvysaO/E7XKqwkAbVAa6gQe7vg28PB70lgVpLSUosd4O3kKjxJ
go/RIotD2NGGdBdNggSSN5LVRrH/2+TvYveHBDnbKrzGsUs7o50zZklQ59L+
k8D+q/n8tNo/Eqyvr3m8gH2e9a+DlSAZhqZflnH/I9CpxCvHkpTJcFtvXk0O
2/sc97GXO8mwa/X59u3YYToJR3+oksHor8EGBey0hSfWsppkOBevx6yC/cO2
wbJUmwzRsdE5u7GPbhYw6zQng1wG6309bKPSFANhPzII7MnndsJ2/eu4Rgsg
Q9F0/BNn7HAluWLaRTLkD/buccUuzylfRwsmw+mOZy5nsWVSv0xRIsngT3F9
7oU9FyX4HymJDK5+eeOXsR8eCx/gKyXDzxX2w3cY7ycZ3OUrJ0NUc0NJEnZ7
O+kI30sydH/cIHUXm8sorZS3igzU9Q/Hkhn5alfG8NST4U/bhHcato78vCJX
Jxl+sAloP8Omr7gFsc6RgUOmZKAa+9hRw22L82SgWFdKvsWuLZLvpC+S4fuF
2xY12PfcJhR7VslwUzLvTS32wa/nBgrYKRAfWnmtCTulyNPAjkYB7sSDw5+x
9dz8RCt2UaAgrKJpELuozqouT40CsSq5P35jS0mrez/VoMANcsL0EPbfrvmW
W3spsBqxU2SUkf+hwBDngxToGP1jPok9syFoiGJBAUFpdH8W+1FXaPF5Hwo8
z18+z76G7686pb7YCxTI0KsI4MDeXtzHne9PgQtCJ0I5sUvj9tkTlyjwsvP4
LW7sVv1Fbs8ICtimWj3kx1545WnvdYcCMkoQQ8M2SrPn8S2jANuNB8mbsBNj
BVQTKyigUno4fDN2d1ClffErCjyTZD8ri336mETJTDUFJIrvqG/FDiR32V9o
pMATF7M6eeynEUYlft0UeKAhVqyCveS6zyFwmQImr9N+I2yDV3JwYZUCytof
ngB2Cr/oBq81CqRHoJP7sfcWTve5slJhZctUtzZ28HKm/VFeKtAlH9YcwmaN
JdurS1DhJKnVyxCbr2j4xKwmFZxtdA5bYduyf9n3Zy8VqiZ1ZhjOta5ZN6lF
BTblRynWjHxX7n8f1KbCzmNOI0ex4w6ZnegwoMJbbq2Lx7GpX1/bFtlQwTWn
MsQBe91q/HGvi1TIrd8j7Iat13+k4r8gKoyf5C5j2LeBW6QqmAo1YXLWZ7Gb
40M/84RTwVPD7Y47tp+sl/7T61R4F/yX2wO7zdhEves+FbqNW9p9sMMeC1D2
VVPBq8OaCGLEG9XseeotFWyWJy9dxv7qHvkh5h0VKq0mOYOxFdT/xXQ2UEFJ
WU4qBLu3ZZLJs40KPUu5B0Kxd8220h//ooJ3v4vPVUa96F5v5mKjwfPVz2du
YjsaOmzYzEGDOI4r/Qx/N1L1289Fg+TFXJtY7A7LPumLfDToL47Vv4Vdc2pn
4DiVBsNM3tLx2A9Cerd82EwDmx0qLxOxLcrkr97WpcGqhODtFEZ+L5l68/Vp
8OzY5xWGDau+KLUa0uC7qqzzfWztupBvbCY0CHsYqv4AW6m9faffURpUDFG+
PGTsJ3Gp/+gZGqT48Kw8wn4n24qkrtPABPRWMhn1E9tnIHyTBgVva8yyGPPN
TlsK3KKBneFIFsM/asXc/yXQQLVO1SKbUe+OLnd/JNNgu8NARg6jX1JZ/jzM
ocF4YtveXOwkkd2P1zfTQOzHuh2F2JIhh3NFWmmwY92dQIafDNmXC36gwaTm
2zqGC0oiP6x9osGF3btPFGG3mHcs9XXjeA8URBdjM8V5mKeN0sAzZ/FTKbYb
VwabNLcwsJ4ZVHzFeJ4l+uYBXmFQ1lUOZHj76hlhZ35h2EJSqmGY+LNj6zOS
MNQUHzR/zaiv3hJDVXFhSN3X7lWJfTmvLkFfXhh+GLemVTPq1+L3Bu8jwiD4
06LxHfYfo4bsRGNhOPI1kKsW20w/W6XMVBgWgmz0GKZpnTu4YikMjnTjBoaT
t8y6RNoJg74FpaaO0b9LbPnJHsLAoa/5rAG7LG3TvnfxwtB8ZexIC/amtYOX
3t4WhqVl8zCG4044VVTfEQYhq5hShl3FM1Rf3xMGcb+jUq3Y4olbFEoeCUMd
W+w4w0FRcuszXwhDQF5Y0AdGPZxXYr7+SRgaUsYCP2HntZqgmHZhULmvlMWw
hLzX5agvwuCbpNfJ8Mzwi8XwbmGIViSUP2Onn9w5HfRLGPTGJIYZ5rJUGzj/
Rxg8nojrd2B/2LO3zowkAuLq3yc6sa+VX1jWoYiA+u0xahe2rmq+8h6aCFj9
atvL8BsFmYcbxUSgfHzrDYaLpLn8ZzaIwNEenm1fse9ydmxNUhIBn4LS493Y
p9rP3ug2FoG/gc/Se7E3mKTXvDcVAUsZqSaGv7X+WHhrLgIcmucnGLaqN3XK
sRYBilamyjfGeVKhrnXJXgR84UolwwqprFOSHiLgwDze+p1Rv24p5g6xIvAt
Pry9D/vWxSecIXE4n2/XZxmWvfbs1YMEEfgk6ynyE9sy+9XG3iQRGLR8b8Nw
4XDvX8tUEWjV/NHHsPtpyUTDAhEYTb048Av754kHHWqf8XxT9z4NYPufS4+2
7BCBIfEzBMMCl3P3+nbifCtF+Qex992vfPqiRwQWCDE9hpN7vvtuHxCBj5mZ
rxm2sJaiycyIQEYPX9pv7EaTVEt+YVEIX9drMszoh9rfVZyiojChuPsMw/wa
27eyiIuC5a6QUIbN1lcsza0TBXbvdy8Y7p38nPpzsyjwWSiSRrDp1zjGilRF
gcKU3cIwre5csI2lKMTUvlUcwy7XKB62sBaFaTuDQwzbPF8yMT4mCmFllTYM
P7wdtfHgCTz/3OmrDG91fNS4w0kUXGbLuhneu9ZBZr4gCiO/QoPHGefl7r2Z
mYmi0DWuVDGBfWby/ey3JFFIqzn3gWHPR/YHyfdEIXLn7QGGQ7jDfwU9EIXr
Bnf5J7HvdzdJmGWIgp9orAPDnYHWcStlovBOQYuFzjjPXnoHmvaKwuYbNqoE
tul5tsbI76KwPqxHl+GjMknCr/tEwVZYx4Zhl2sVRbKDeL18fgYzHGHDRF+e
EIWxc5saGK5auumY8U8Ujl1fMZ/Crstb/6KXSQyyS8GJ4VbHF2tCrGKw5ZuX
H8O9zR33L3GKgcOZlLsMLyRLdJkIicHaJ/5vDK8Z5W6OJIuBP/X1BMMcrMj3
FVUMDs5ZrzJMPetIkhUTg5qRo1J/GP26fsb+uIQY5ElXKTAs0341L26dGDgb
kBDDclEiq3XrxeC9n5kxw8p7sg2XpcXg1ctQe4b/B0Mzq1g=
     "]]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  AxesOrigin->{0, 0},
  PlotRange->
   NCache[{{0, 2 Pi}, {-0.9999998830731719, 0.9999999999999918}}, {{
     0, 6.283185307179586}, {-0.9999998830731719, 0.9999999999999918}}],
  PlotRangeClipping->True,
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02]}]], "Output",
 CellTags->"Cell 9.74"]
}, Open  ]],

Cell[TextData[{
 "The first element in the list of ",
 StyleBox["PlotStyle",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " options in this cell, ",
 StyleBox["{RGBColor[1,0,0],Dashing[{0.05,0.05}]}",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ",  applies to the first function in the list of functions (i.e. ",
 StyleBox["Cos[x]",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 "). The second element, ",
 StyleBox["Green",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ", applies to the second function ",
 StyleBox["Tanh[x]",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ". "
}], "Text",
 CellChangeTimes->{{3.460505516639738*^9, 3.460505533860416*^9}, {
  3.503089483187042*^9, 3.503089483901411*^9}}],

Cell[TextData[{
 "One can also use the ",
 StyleBox["Directive",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " command to group multiple style options for a single curve. In the above \
example, it is equally valid to use\n",
 StyleBox["PlotStyle \[Rule] {Directive[Red, Dashing[{0.05, 0.05}]],Green}",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ". There can be situations where grouping directives this way works  better \
than grouping directives as a list. "
}], "Text",
 CellChangeTimes->{{3.503089507935358*^9, 3.5030895083027477`*^9}},
 CellTags->"directive"],

Cell[TextData[{
 "\tIf you have already made two separate plots with two ",
 StyleBox["Plot",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " commands, you can overlay them using the ",
 StyleBox["Show",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " command.  For an example, see Cell ",
 ButtonBox["9.75",
  BaseStyle->"Hyperlink",
  ButtonData:>"Cell 9.75"],
 ". "
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Show", "[", 
  RowBox[{"newplot", ",", "CTPlot"}], "]"}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.75"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    {RGBColor[0.5, 0, 0.5], Dashing[{0.05, 0.03}], LineBox[CompressedData["
1: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
      "]]}}, {{}, {}, 
    {RGBColor[1, 0, 0], Dashing[{0.05, 0.05}], LineBox[CompressedData["
1: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
jPkqFWp+BoEqc5T/NUw1nVsqD////8L/AWFzd/g=
      "]]}, 
    {RGBColor[0, 1, 0], LineBox[CompressedData["
1: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
      "]]}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  AxesOrigin->{0, 0},
  Frame->True,
  FrameLabel->{
    FormBox[
     StyleBox[
     "\"x\"", FontFamily -> "Times", FontColor -> RGBColor[0, 1, 0], FontSize -> 
      18, StripOnInput -> False], TraditionalForm], 
    FormBox["\"y\"", TraditionalForm], 
    FormBox["\"The Sine Function\"", TraditionalForm], 
    FormBox["\"\"", TraditionalForm]},
  FrameTicks->{{{0, 
      FormBox["0", TraditionalForm]}, {
      NCache[Pi, 3.141592653589793], 
      FormBox["\[Pi]", TraditionalForm]}, {
      NCache[2 Pi, 6.283185307179586], 
      FormBox[
       RowBox[{"2", " ", "\[Pi]"}], TraditionalForm]}}, Automatic, None, 
    Automatic},
  PlotRange->{{0, 10}, {-2, 2}},
  PlotRangeClipping->True,
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02]}]], "Output",
 CellTags->"Cell 9.75"]
}, Open  ]],

Cell[TextData[{
 "Note that the options chosen for the first plot take precedence over those \
of the second, determining the plot and axis labels and the range of ",
 StyleBox["x",
  FontSlant->"Italic"],
 " and ",
 StyleBox["y",
  FontSlant->"Italic"],
 " plotted.\n\t",
 StyleBox["Plot",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " and ",
 StyleBox["Show",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " are summarized in Table ",
 ButtonBox["9.11",
  BaseStyle->"Hyperlink",
  ButtonData:>"Table 9.11"],
 "."
}], "Text"],

Cell[TextData[Cell[BoxData[GridBox[{
   {
    StyleBox[
     RowBox[{"Table", "9", ".11", " ", "Basic", " ", "Plots"}],
     FontSize->9]},
   {GridBox[{
      {
       RowBox[{
        StyleBox["Plot",
         FontWeight->"Bold"], 
        StyleBox["[",
         FontWeight->"Bold"], 
        StyleBox[
         RowBox[{
          StyleBox["f",
           FontSlant->"Italic"], ",", 
          RowBox[{"{", 
           StyleBox[
            RowBox[{"x", ",", "xmin", ",", "xmax"}],
            FontSlant->"Italic"], "}"}], ",", 
          StyleBox[
           RowBox[{"option", "->", "value"}],
           FontSlant->"Italic"]}],
         FontFamily->"Times"], 
        StyleBox["]",
         FontWeight->"Bold"]}], 
       StyleBox[
        RowBox[{
         RowBox[{"Plot", " ", 
          StyleBox["f",
           FontSlant->"Italic"], 
          StyleBox[" ",
           FontSlant->"Italic"], "as", " ", "a", " ", "function", " ", 
          RowBox[{"of", 
           StyleBox["x",
            FontSlant->"Italic"]}], " ", "from", " ", 
          StyleBox["xmin",
           FontSlant->"Italic"], 
          StyleBox[" ",
           FontSlant->"Italic"], "to", " ", 
          StyleBox["xmax",
           FontSlant->"Italic"]}], " ", ",", "\[IndentingNewLine]", 
         RowBox[{"and", " ", "add", " ", "an", " ", 
          StyleBox["option",
           FontSlant->"Italic"]}]}],
        FontFamily->"Times"]},
      {
       RowBox[{
        StyleBox["Plot",
         FontWeight->"Bold"], 
        StyleBox["[",
         FontWeight->"Bold"], 
        StyleBox[
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            StyleBox["f1",
             FontSlant->"Italic"], ",", 
            StyleBox["f2",
             FontSlant->"Italic"], 
            StyleBox[",",
             FontSlant->"Italic"], ",", "\[Ellipsis]"}], "}"}], ",", 
          RowBox[{"{", 
           StyleBox[
            RowBox[{"x", ",", "xmin", ",", "xmax"}],
            FontSlant->"Italic"], "}"}]}],
         FontFamily->"Times"], 
        StyleBox["]",
         FontFamily->"Times",
         FontWeight->"Bold"]}], 
       StyleBox[
        RowBox[{
        "Plot", " ", "several", " ", "functions", " ", "on", " ", "the", " ", 
         "same", " ", "graph"}],
        FontFamily->"Times"]},
      {
       StyleBox[
        RowBox[{
         StyleBox["Show",
          FontWeight->"Bold"], 
         StyleBox["[",
          FontWeight->"Bold"], 
         StyleBox["plot",
          FontSlant->"Italic"], 
         StyleBox["]",
          FontWeight->"Bold"]}],
        FontFamily->"Times"], 
       StyleBox[
        RowBox[{"Redraw", " ", "a", " ", "plot"}],
        FontFamily->"Times"]},
      {
       StyleBox[
        RowBox[{
         StyleBox["Show",
          FontWeight->"Bold"], 
         StyleBox["[",
          FontWeight->"Bold"], 
         StyleBox[
          RowBox[{"plot1", ",", "plot2", ",", "\[Ellipsis]"}],
          FontSlant->"Italic"], 
         StyleBox["]",
          FontWeight->"Bold"]}],
        FontFamily->"Times"], 
       StyleBox[
        RowBox[{"Show", " ", "several", " ", "plots"}],
        FontFamily->"Times"]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[1.9599999999999997`]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}]}
  }]]]], "Text",
 CellFrame->True,
 Background->GrayLevel[0.849989],
 CellTags->"Table 9.11"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 "9.6.4 The ",
 StyleBox["ListPlot",
  FontFamily->"Courier",
  FontWeight->"Bold",
  FontSlant->"Plain"],
 " Function"
}], "Subsubtitle",
 CellTags->{"i:47", "c:30"}],

Cell[TextData[{
 "Experimental data often comes in the form of lists of ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{"x", " ", ",", " ", "y"}], ")"}], TraditionalForm]]],
 " positions. The ",
 StyleBox["ListPlot",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " function is useful for plotting such data. To see an example, let's first \
artificially generate a list of data using the ",
 StyleBox["Table",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " function:"
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"data", " ", "=", " ", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"i", ",", 
      RowBox[{"Sqrt", "[", "i", "]"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"i", ",", "0", ",", "10.", ",", "1."}], "}"}]}], 
   "]"}]}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.76"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0.`", ",", "0.`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1.`", ",", "1.`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2.`", ",", "1.4142135623730951`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3.`", ",", "1.7320508075688772`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4.`", ",", "2.`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5.`", ",", "2.23606797749979`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"6.`", ",", "2.449489742783178`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"7.`", ",", "2.6457513110645907`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"8.`", ",", "2.8284271247461903`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"9.`", ",", "3.`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10.`", ",", "3.1622776601683795`"}], "}"}]}], "}"}]], "Output",
 CellTags->"Cell 9.76"]
}, Open  ]],

Cell[TextData[{
 "We then plot the data using",
 StyleBox[" ListPlot",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ", as shown in  Cell ",
 ButtonBox["9.77",
  BaseStyle->"Hyperlink",
  ButtonData:>"Cell 9.77"],
 "."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListPlot", "[", 
  RowBox[{"data", ",", 
   RowBox[{"PlotStyle", "\[Rule]", 
    RowBox[{"PointSize", "[", "0.02", "]"}]}]}], "]"}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.77"],

Cell[BoxData[
 GraphicsBox[
  {Hue[0.67, 0.6, 0.6], PointSize[0.02], 
   PointBox[{{0., 0.}, {1., 1.}, {2., 1.4142135623730951`}, {3., 
    1.7320508075688772`}, {4., 2.}, {5., 2.23606797749979}, {6., 
    2.449489742783178}, {7., 2.6457513110645907`}, {8., 
    2.8284271247461903`}, {9., 3.}, {10., 3.1622776601683795`}}]},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  PlotRange->Automatic,
  PlotRangeClipping->True]], "Output",
 CellTags->"Cell 9.77"]
}, Open  ]],

Cell[TextData[{
 "Note the use of a ",
 StyleBox["PlotStyle",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " option here to make the size of the points larger. Another useful option \
is the \n",
 StyleBox["Joined->True ",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 "option, which joins points with line segments, as in Cell ",
 ButtonBox["9.78",
  BaseStyle->"Hyperlink",
  ButtonData:>"Cell 9.78"],
 "."
}], "Text",
 CellChangeTimes->{{3.446332452273171*^9, 3.446332453042293*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListPlot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"data", ",", 
     RowBox[{"data", "+", "2"}]}], " ", "}"}], ",", 
   RowBox[{"Joined", "\[Rule]", "True"}], ",", 
   RowBox[{"PlotMarkers", "\[Rule]", "Automatic"}]}], "]"}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.78"],

Cell[BoxData[
 GraphicsBox[GraphicsComplexBox[CompressedData["
1:eJxTTMoPSmViYGAQA2IQjR18sEelGRzOWtenzVvwDcrncFjlE/GiattvKF/A
AaYOQok4rPgyfXb5Y0YoX8JBT5FTpG8GM5Qv4/Dqx6WV9VqsUL4C1Hw2KF/J
AWYPhFZxCI6+ZRXhw4lmDwOaOhgt4PBsrr2xfwA33D2hajoltrd54e5BdbeM
Q8iv02d3f4TxFRymT2Dhcj8jCHdPac3LK/ZTheDugZgvDOWrwe2B0BoOq3Rz
ZXWWiTgAAD7rPHU=
   "], {{{}, {}, 
     {Hue[0.67, 0.6, 0.6], LineBox[{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}]}, 
     {Hue[0.9060679774997897, 0.6, 0.6], 
      LineBox[{12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22}]}}, {
     {Hue[0.67, 0.6, 0.6], InsetBox[
       StyleBox["\<\"\[FilledCircle]\"\>",
        StripOnInput->False,
        FontSize->8.96], 1], InsetBox[
       StyleBox["\<\"\[FilledCircle]\"\>",
        StripOnInput->False,
        FontSize->8.96], 2], InsetBox[
       StyleBox["\<\"\[FilledCircle]\"\>",
        StripOnInput->False,
        FontSize->8.96], 3], InsetBox[
       StyleBox["\<\"\[FilledCircle]\"\>",
        StripOnInput->False,
        FontSize->8.96], 4], InsetBox[
       StyleBox["\<\"\[FilledCircle]\"\>",
        StripOnInput->False,
        FontSize->8.96], 5], InsetBox[
       StyleBox["\<\"\[FilledCircle]\"\>",
        StripOnInput->False,
        FontSize->8.96], 6], InsetBox[
       StyleBox["\<\"\[FilledCircle]\"\>",
        StripOnInput->False,
        FontSize->8.96], 7], InsetBox[
       StyleBox["\<\"\[FilledCircle]\"\>",
        StripOnInput->False,
        FontSize->8.96], 8], InsetBox[
       StyleBox["\<\"\[FilledCircle]\"\>",
        StripOnInput->False,
        FontSize->8.96], 9], InsetBox[
       StyleBox["\<\"\[FilledCircle]\"\>",
        StripOnInput->False,
        FontSize->8.96], 10], InsetBox[
       StyleBox["\<\"\[FilledCircle]\"\>",
        StripOnInput->False,
        FontSize->8.96], 11]}, 
     {Hue[0.9060679774997897, 0.6, 0.6], InsetBox[
       StyleBox["\<\"\[FilledSquare]\"\>",
        StripOnInput->False,
        FontSize->8.96], 12], InsetBox[
       StyleBox["\<\"\[FilledSquare]\"\>",
        StripOnInput->False,
        FontSize->8.96], 13], InsetBox[
       StyleBox["\<\"\[FilledSquare]\"\>",
        StripOnInput->False,
        FontSize->8.96], 14], InsetBox[
       StyleBox["\<\"\[FilledSquare]\"\>",
        StripOnInput->False,
        FontSize->8.96], 15], InsetBox[
       StyleBox["\<\"\[FilledSquare]\"\>",
        StripOnInput->False,
        FontSize->8.96], 16], InsetBox[
       StyleBox["\<\"\[FilledSquare]\"\>",
        StripOnInput->False,
        FontSize->8.96], 17], InsetBox[
       StyleBox["\<\"\[FilledSquare]\"\>",
        StripOnInput->False,
        FontSize->8.96], 18], InsetBox[
       StyleBox["\<\"\[FilledSquare]\"\>",
        StripOnInput->False,
        FontSize->8.96], 19], InsetBox[
       StyleBox["\<\"\[FilledSquare]\"\>",
        StripOnInput->False,
        FontSize->8.96], 20], InsetBox[
       StyleBox["\<\"\[FilledSquare]\"\>",
        StripOnInput->False,
        FontSize->8.96], 21], InsetBox[
       StyleBox["\<\"\[FilledSquare]\"\>",
        StripOnInput->False,
        FontSize->8.96], 22]}, {}}}],
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  AxesOrigin->{0, 0},
  PlotRange->{{0., 12.}, {0., 5.16227766016838}},
  PlotRangeClipping->True,
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02]}]], "Output",
 CellTags->"Cell 9.78"]
}, Open  ]],

Cell[TextData[{
 "\tAs you can see here, you can also plot several sets of data at a time \
using ",
 StyleBox["ListPlot",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ". To get more than one dataset on the same plot, the syntax is  ",
 StyleBox["ListPlot[{data1, data2}]",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ". "
}], "Text"]
}, Closed]],

Cell[CellGroupData[{

Cell["9.6.5 Parametric Plots", "Subsubtitle",
 CellTags->{"i:50", "c:31"}],

Cell[TextData[{
 "\tParametric plots are useful for plotting functions of a parameter.  For \
example, the position ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{
     RowBox[{"x", "(", "t", ")"}], ",", 
     RowBox[{"y", "(", "t", ")"}]}], ")"}], TraditionalForm]]],
 "  of a particle moving in two-dimensions is a function of  the parameter ",
 Cell[BoxData[
  FormBox["t", TraditionalForm]]],
 ", the time. The orbit of this particle in the ",
 Cell[BoxData[
  FormBox[
   RowBox[{"x", "-", "y", " "}], TraditionalForm]]],
 "plane can be plotted using ",
 StyleBox["ParametricPlot",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ", with the notation ",
 StyleBox["ParametricPlot[{x[t],y[t]},{t,a,b}]",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ", where ",
 StyleBox["a",
  FontSlant->"Italic"],
 " and ",
 StyleBox["b",
  FontSlant->"Italic"],
 " are the initial and final times."
}], "Text",
 CellTags->"i:51"],

Cell[TextData[{
 "\tFor instance, consider the case of a two-dimensional harmonic oscillator. \
Here the position vs. time has the form ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{
     RowBox[{
      SubscriptBox["x", "o"], " ", 
      RowBox[{"cos", "(", 
       RowBox[{
        SubscriptBox["\[Omega]", "x"], " ", "t"}], ")"}]}], ",", " ", 
     RowBox[{
      SubscriptBox["y", "o"], " ", 
      RowBox[{"sin", "(", 
       RowBox[{
        RowBox[{
         SubscriptBox["\[Omega]", "y"], " ", "t"}], " ", "+", " ", "\[Phi]"}],
        ")"}]}]}], " ", ")"}], TraditionalForm]]],
 ", where ",
 Cell[BoxData[
  FormBox[Cell[TextData[Cell[BoxData[
    FormBox[
     SubscriptBox["x", "o"], TraditionalForm]]]]], TraditionalForm]]],
 " and ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["y", "o"], TraditionalForm]]],
 " are oscillation amplitudes in the ",
 StyleBox["x",
  FontSlant->"Italic"],
 " and ",
 StyleBox["y",
  FontSlant->"Italic"],
 " directions, ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[Omega]", "x"], TraditionalForm]]],
 " and ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[Omega]", "y"], TraditionalForm]]],
 " are the oscillator frequencies in the ",
 Cell[BoxData[
  FormBox["x", TraditionalForm]]],
 " and ",
 Cell[BoxData[
  FormBox["y", TraditionalForm]]],
 " directions, and ",
 Cell[BoxData[
  FormBox["\[Phi]", TraditionalForm]]],
 " is a phase.  ",
 StyleBox["ParametricPlot ",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 "allows one to see the result of such an oscillation. In Cell ",
 ButtonBox["9.79",
  BaseStyle->"Hyperlink",
  ButtonData:>"Cell 9.79"],
 ",  we show an example with ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    FormBox["\[Phi]",
     TraditionalForm], " ", "=", " ", "0"}], TraditionalForm]]],
 ", ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["x", "o"], " ", "=", " ", 
    RowBox[{
     SubscriptBox["y", "o"], " ", "=", " ", "1"}]}], TraditionalForm]]],
 ", ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["\[Omega]", "x"], " ", "=", " ", "2"}], ",", " ", 
    RowBox[{
     SubscriptBox["\[Omega]", "y"], " ", "=", " ", "6"}]}], TraditionalForm]]],
 "."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ParametricPlot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Cos", "[", 
      RowBox[{"2", "t"}], "]"}], ",", 
     RowBox[{"Sin", "[", 
      RowBox[{"6", " ", "t"}], "]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"t", ",", "0", ",", "Pi"}], "}"}], ",", 
   RowBox[{"AspectRatio", "\[Rule]", "1"}]}], "]"}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.79"],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {Hue[0.67, 0.6, 0.6], LineBox[CompressedData["
1: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
d9vxIubj0vqq/bDzPbi65vlYVp7aAwCMSam0
     "]]}},
  AspectRatio->1,
  Axes->True,
  AxesOrigin->{0, 0},
  PlotRange->{{-0.9999998831351729, 1.}, {-0.9999990682297951, 
   0.9999987335310796}},
  PlotRangeClipping->True,
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02]}]], "Output",
 CellTags->"Cell 9.79"]
}, Open  ]],

Cell[TextData[{
 "The result is a Lissajous figure. Note the use of an option,",
 StyleBox[" AspectRatio",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 Cell[BoxData[
  FormBox["\[Rule]", TraditionalForm]]],
 StyleBox["1",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ", which gives the plot the same dimension in ",
 StyleBox["x ",
  FontSlant->"Italic"],
 "and ",
 StyleBox["y.",
  FontSlant->"Italic"]
}], "Text",
 CellTags->"i:119"],

Cell[TextData[{
 StyleBox["ParametricPlot",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " also allows one to plot functions inpolar coordinates. To plot a function ",
 Cell[BoxData[
  FormBox[
   RowBox[{"r", "(", "\[Theta]", ")"}], TraditionalForm]]],
 StyleBox[", ",
  FontFamily->"Symbol"],
 "where ",
 Cell[BoxData[
  FormBox["r", TraditionalForm]]],
 " is radius and ",
 Cell[BoxData[
  FormBox["\[Theta]", TraditionalForm]]],
 " is polar angle, write the ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{"x", ",", "y"}], ")"}], TraditionalForm]]],
 " positions of this curve as",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{
     RowBox[{
      RowBox[{"r", "(", "\[Theta]", ")"}], " ", "cos\[Theta]"}], ",", 
     RowBox[{
      RowBox[{"r", "(", "\[Theta]", ")"}], " ", "sin\[Theta]"}]}], ")"}], 
   TraditionalForm]]],
 ". For example, a curve ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"r", "(", "\[Theta]", ")"}], "=", "\[Theta]"}], TraditionalForm]]],
 "  is a spiral, as shown in Cell ",
 ButtonBox["9.80",
  BaseStyle->"Hyperlink",
  ButtonData:>"Cell 9.80"],
 "."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ParametricPlot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"\[Theta]", " ", 
      RowBox[{"Cos", "[", "\[Theta]", "]"}]}], ",", 
     RowBox[{"\[Theta]", " ", 
      RowBox[{"Sin", "[", "\[Theta]", "]"}]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\[Theta]", ",", "0", ",", 
     RowBox[{"6", " ", "Pi"}]}], "}"}], ",", 
   RowBox[{"PlotRange", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{"-", "6"}], " ", "Pi"}], ",", 
        RowBox[{"6", "Pi"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{"-", "6"}], "Pi"}], ",", 
        RowBox[{"6", "Pi"}]}], "}"}]}], "}"}]}], ",", 
   RowBox[{"AspectRatio", "\[Rule]", "1"}]}], "]"}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.80"],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {Hue[0.67, 0.6, 0.6], LineBox[CompressedData["
1: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
b0my+a92g2VsiHflkethVnTCNs0oK3UZM2c/6BZ6iBXRV5TqJNGvYP8uxfy0
UGFF+/8oP/1qt4KpkzFigwI13vtvJ5rLVrCNIydvLVP9cELz9Q0OkVXMaLzg
ejXVL/phma227qtYt13c6Cmqnx7LvsT/al/FXoy3lJ/jZkUJjlpP616vYdmO
0mWdOFY0cNTL/tbcGvaoYPwlOz0ranjm+lLw7DomdeT7uucKDuXIaYl/YN7A
4ifLYSHV/y/uqh12v7GB3bFTKIofwaGuXrVdm8oN7GLzqci7rTjE4ss5rfts
E6MLZPlm+QeHvk+pluv2bWKm9lbXZxG1PujWovW1t7D631y8ItR6tGRi/OSw
voUlHW3a9fTFIfPvtuqV9ylYgOSfy9gjHFrSs1P/V0/Bxj+o2H29Ra1X4ehf
cwo72BdPsYnnJtT69M5vYJvYwbh6Ru5qC+PQjbux48tX9rCAFNMzzWzUev43
39xetoepHH0jyLPDgkyUdtrbOWhQ3Yki8Kqf2u8+Fe9740SDaOMHJb0SWNBQ
QvXnQllaxJ+60GH3kgWJpCcaOZjTIqYga+45DxY087eWhc2fFvmLnplmsGRB
394cMlAl0yLiqGyENBsL2voT9XXgHR1ycWdoJF5jRmLb0npH2BhQc+rtbnFj
ZvTLIp5nXJ0BefN89Go8zIz8/mQjPzsGpKTcmmPMwYyMN5gLfAsYkF1QWf2v
XCbUqKZeGGbLiMooAY1J84xIf/n9wpNMJrS3wdQ4086I+jj+vvvdzoTODUmf
mi1hRHwX+ymUXSZUPUJc5AxiRPzmZ/r5zjOjhJquqk4CIwr2aWtYWmZGE19a
Y2NUGVDwBUuTVWofHvCcXznBy4DCvyeZX7XBIdtvsoEZK/Too/b3uUw/HPox
RtcRV0iPykhsHV1N1LyuXAMimvTI68ieqZcTtQ91vPievZ8O+WBxFs/fsqHp
lYaBEWY6tHqYTzqinA25eF3tbhmhRZYfkzxchtkQr94n9r4EWqR0sa0h6wA7
+lv7jiubnRb1MTodFChjR41dw340JXuY2upg/752DhRTu3fE7h71/hJGU5my
xoH+7IEKILWHFUxmmy0KciL7R1nSPgG7mKu8bM6qNSc6J3EgnFd/B8vK+Jed
2sOJ1LN8H64WbGH7Xi12n2znQulJNA9D7bcwibsl/YHLXGje3t/5K/sWhi9v
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
EhZw5V7/D4PVOFE=
     "]]}},
  AspectRatio->1,
  Axes->True,
  AxesOrigin->{0, 0},
  PlotRange->
   NCache[{{(-6) Pi, 6 Pi}, {(-6) Pi, 6 Pi}}, {{-18.84955592153876, 
    18.84955592153876}, {-18.84955592153876, 18.84955592153876}}],
  PlotRangeClipping->True,
  PlotRangePadding->{Automatic, Automatic}]], "Output",
 CellTags->"Cell 9.80"]
}, Open  ]],

Cell[TextData[{
 StyleBox["ListPlot",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " and ",
 StyleBox["ParametricPlot",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " are summarized in Table ",
 ButtonBox["9.12",
  BaseStyle->"Hyperlink",
  ButtonData:>"Table 9.12"],
 "."
}], "Text"],

Cell[TextData[Cell[BoxData[GridBox[{
   {
    RowBox[{
     StyleBox[
      RowBox[{
       RowBox[{
       "Table", "9.12", " ", "Two", " ", "Useful", " ", "Types", " ", "of", 
        " ", "x"}], "-", 
       RowBox[{"y", " ", "Plots"}]}],
      FontSize->9], "\[IndentingNewLine]"}]},
   {GridBox[{
      {
       RowBox[{
        StyleBox["ListPlot",
         FontWeight->"Bold"], 
        StyleBox["[",
         FontWeight->"Bold"], 
        StyleBox["data",
         FontFamily->"Times",
         FontSlant->"Italic"], 
        StyleBox["]",
         FontWeight->"Bold"]}], 
       StyleBox[
        RowBox[{
         RowBox[{
          RowBox[{"Plot", " ", "a", " ", "list", " ", "of", " ", 
           StyleBox["x",
            FontSlant->"Italic"]}], 
          StyleBox[",",
           FontSlant->"Italic"], 
          RowBox[{
           StyleBox["y",
            FontSlant->"Italic"], 
           StyleBox[" ",
            FontSlant->"Italic"], "data", " ", "of", " ", "the", " ", 
           "form"}]}], "\[IndentingNewLine]", " ", 
         RowBox[{
          StyleBox["data",
           FontSlant->"Italic"], 
          StyleBox["=",
           FontSlant->"Italic"], 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             StyleBox[
              RowBox[{
               SubscriptBox["x", "1"], ",", 
               SubscriptBox["y", "1"]}],
              FontSlant->"Italic"], "}"}], ",", 
            RowBox[{"{", 
             StyleBox[
              RowBox[{
               SubscriptBox["x", "2"], ",", 
               SubscriptBox["y", "2"]}],
              FontSlant->"Italic"], "}"}], ",", "\[Ellipsis]"}], "}"}]}]}],
        FontFamily->"Times"]},
      {
       RowBox[{
        StyleBox["\[IndentingNewLine]",
         FontFamily->"Times"], 
        StyleBox[
         RowBox[{
          StyleBox["ParametricPlot",
           FontFamily->"Courier"], 
          StyleBox["[",
           FontFamily->"Courier"], 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"x", "[", "t", "]"}], ",", 
             RowBox[{"y", "[", "t", "]"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"t", ",", "tmin", ",", "tmax"}], "}"}]}], "]"}],
         FontWeight->"Bold"]}], 
       RowBox[{
        StyleBox["\[IndentingNewLine]",
         FontFamily->"Times"], 
        RowBox[{
         StyleBox["Plot",
          FontFamily->"Times"], 
         StyleBox[" ",
          FontFamily->"Times"], 
         StyleBox[
          RowBox[{"y", "[", "t", "]"}],
          FontWeight->"Bold"], 
         StyleBox[" ",
          FontFamily->"Times"], 
         RowBox[{
          StyleBox["vs",
           FontFamily->"Times"], 
          StyleBox[".",
           FontFamily->"Times"], 
          StyleBox[" ",
           FontFamily->"Times"], 
          StyleBox[
           RowBox[{"x", "[", "t", "]"}],
           FontFamily->"Courier",
           FontWeight->"Bold"]}], 
         StyleBox["  ",
          FontFamily->"Times"], 
         StyleBox["as",
          FontFamily->"Times"], 
         StyleBox[" ",
          FontFamily->"Times"], 
         StyleBox["t",
          FontWeight->"Bold"], 
         StyleBox[" ",
          FontFamily->"Times",
          FontSlant->"Italic"], 
         StyleBox["varies",
          FontFamily->"Times"], 
         StyleBox[" ",
          FontFamily->"Times"], 
         StyleBox["from",
          FontFamily->"Times"], 
         StyleBox[" ",
          FontFamily->"Times"], 
         StyleBox["tmin",
          FontWeight->"Bold"], 
         StyleBox[" ",
          FontFamily->"Times"], 
         StyleBox["to",
          FontFamily->"Times"], 
         StyleBox[" ",
          FontFamily->"Times",
          FontSlant->"Italic"], 
         StyleBox["tmax",
          FontWeight->"Bold"], 
         StyleBox[" ",
          FontFamily->"Times"]}]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]}
  }]]]], "Text",
 CellFrame->True,
 Background->GrayLevel[0.849989],
 CellTags->"Table 9.12"],

Cell[TextData[{
 "Many other types of plots are available, including plots with logarithmic \
axes, polar plots, etc. The syntax for such plots is similar to those \
discussed here. More information on different plotting options can be found \
in the ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " documentation."
}], "Text",
 CellChangeTimes->{{3.446590057937042*^9, 3.44659022261579*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["9.6.6 3D Plots", "Subsubtitle",
 CellTags->"c:32"],

Cell[TextData[{
 "There are various ways of plotting functions of two variables. One way is \
to make a surface plot. For example, to plot the surface ",
 Cell[BoxData[
  FormBox[
   RowBox[{"z", " ", "=", " ", 
    RowBox[{"sin", "(", 
     RowBox[{"x", " ", "y"}], ")"}]}], TraditionalForm]]],
 ", use the ",
 StyleBox["Plot3D",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " function. The basic form of this plot mirrors that of the ",
 StyleBox["Plot ",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 "function, as shown in Cell ",
 ButtonBox["9.81",
  BaseStyle->"Hyperlink",
  ButtonData:>"Cell 9.81"],
 "."
}], "Text",
 CellChangeTimes->{{3.448633835503577*^9, 3.448633841077612*^9}},
 CellTags->"i:48"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"plt", " ", "=", " ", 
  RowBox[{"Plot3D", "[", 
   RowBox[{
    RowBox[{"Sin", "[", 
     RowBox[{"x", " ", "y"}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"x", ",", "0", ",", "Pi"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"y", ",", "0", ",", "Pi"}], "}"}]}], "]"}]}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.81"],

Cell[BoxData[
 Graphics3DBox[GraphicsComplex3DBox[CompressedData["
1:eJyVvXVU1c33/o3dgd2KHVjYxcFO7O4Wu2+7G7u7RazbbsVjCxYgKqDSnUdE
BRXl8XzXvPbci89i/dbzF4uLzbz3XLNnT+49ViOn9hyT0cLCIndOC4tMf3+2
e73tVNcym2z52elC9zqf+1u32JLi6lPu1ksDuO/E3V8fZp9o22XN+4iytz4J
bh/tbvkw+wLbqh1OXPJ2DNN4vjO9t7ZbaXumy5CpZW/FCj622qQjD7Kvt91V
df2uK4kJgl+3Kvp9btgWW+8z42Z7O34T/Fyt5JJb2+2wLVazTe9fVj8E39HM
t+Vp5922Ay6Uq1f2VorgEzvcHvcg+37bV3v+rLWqamEHXrvP/o2+4w/ZxvlO
mnslMYPg8XXu+c4NO2Kbp+THcW2NmQRvfON8bOZdx2xrDu7Yz9sxi+D/tDic
uqXdCVv7gzfaje+bTfATjzYXKJ3kZDvVv1LDX1Y5BH/ScWml087Owi+8wie/
83N0ic5rhz45bYBn8C7XygVbuNwywDN45galq3Vr/cgAz+BOjm9WHdzvZoBn
8Ec2z4bZh7gb4Bm8mWv/c5VyeRngGfz40zb3OxR7b4Bn8H/3/EguVNTXAM/g
ObKVu7wnyycDPIO7Nj7vExvkb4Bn8NJdlhUs+S7QAM/gC+PPWPeqFWyAZ/CA
rP7n7i0IMcAz+L6QuXVX3Q0VO4A/7FN4VDh8yu/q5+BaASXNvMEz+IJ/S7Y1
8wPP4IsLPBhl5gGewQustStpri88g/e8O8Wl5996wTP4kB3x11b+1R+ewXNv
aeAWXShCeAZPLP9iwNS6UcIz+LSTOyrsyR0jPINn9L0zfcfRWOEZ3Mn70oGO
sXHCM/jA72EXhkTFC8/gsRW3lrTbZRKe4Yn+Ds/g2Cf/Dw6f/M7P2gUumHb/
tR94Bjctru1s5g2ewc9NrWJ6ZwoTnsHz7pvV2MwPPIN7r8z63CowRngGdz6f
uMTMAzyDX+h8KvVbR5PwDJ6wfU2fOgkm4Rk8abXl2Gr+JuEZ/OA4Y4Xulibh
GXzM4ULZu22OE57BXbof8f88PEZ4hg/8JzyD09/hGRz7pFxw+OR3fq448/C4
2d7gGfxcWUPy7r92Bc/SPt+H/mPmDZ7Bt2eMyWK2E3gGT6obtL7VD5PwLP2p
89U6Zn7gGbzw3X4ebhGxwjN4wVXWEfm3RwnP4IkLDkUebhAmPEt9c1273elH
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
W6eWq9JV92u+T72oD3zAA99FHj37nL0eUs0ms/TfygkTqr8bGG+cHVvR687v
LHbIz++zse2jQtoPgHc7/3nOsC8mkaecthWmnv0aazKiP/J97oRsaX7fJP0C
vJh7avYsS+NFnnIG7zvtW+hyrJF60W60F/YAnrVYTNtuD2LF3sDzldxt3ze7
yYg8/WxZalXnkJEmIzwg337+q3Zme8Y+wa853R41Yb2Wp5zh498Pmptb84D8
3Fqxvm8fxEm9wEstjcgYPy/cWLjah8xZ91vY8fNwGdPW8EnaX4H3bbY8h+Na
k8jzd3Dqxd+Pva/k1vWz9m/gTTLMmbfvULzIU87hLSVDbYbHS72knDmZs552
ijHSD/k/+iP9EJz+SD3BaRf4Aod/5NGX9kIP5KkXeoOjP/KUk7a+/GzjfSo8
36to8VfUG/tHH3DsAf3BaXfksRfsBH2Qh0/sAfz9kdmbqxXW/hz8lc2GnQF/
1+PIU/7s6vYZqqVq/4Pd0U+pFzj9EXn6Mf0X/ZHHbvmdn40SqyX82q3HBfAb
czcNXflXH37n7+Doz98317Ov+GuEHkf4O/4NPYUn5TeoFzj+Qfyw4g9/Qr2Q
p9/BLzj8w6/oq3gW+1Dl0y7UB3nqhX0+XTkgxKpqoME3ctKgbLtiDdgD/elL
h84zbM7Ei365svzMnmLla4itvP9Nualx0k9YZxSZdjBT4m893sk5Z+5icVdm
6vv28Jr3aWAt8zqX8iXeaEaVD8+TTUb+n/Ioh/kxuOWBcZnmpmj/xjq4pFvG
rjeCtD9kvZPyKNbnv+dZlGOzZWiPGTYap33mOC4uei5ejy+UnzOx6Ki7b7X+
cs/z48xqeU/qcUri/xbGFjDfG6edkM82KduoqcNjxQ+w/nr0ILLtsZ46fof+
XdXRvr7tde0/ke+21enQ+Fe6vnIPq/SC0WY9KZ/1yKUReTZviNPnPpS/dKVv
FzNv4OLXu5Y9n2exHncoP6GeX562Dto/U/730uMemO+5YU+Ug11hf9gjdsj/
g1sOmpHBfI+O71EP+GEdhXyjcLej5n02fmcduXly5J053zUP4FmyjtldZqL2
h5RXZHnlo56J+vyF8igHnPIoB/1pn9CRy9/k3aP9M7zCM98Fh2fsj/YfnVSj
yrNz+nyB8ml3cNqBdpf4CiVfwjJn4z/P9f4t8j/mZ/bq3FPfk6Gd91YYEV/3
j/Zv9A/6C3qC01+wb/oB/RE9KR/7YX0L/qHEgORJO7R/pvyBkW6uqfP0vTLK
d65u3SD5rPYzlNN/toeLdbE48b+U07lOSZ8wd10+fqVK/oFJX47oe2iUs7//
3dIWN/Q9GfyB3+59Xcz3e/Hz1CNzi9rHR/zSPCCP35B7R+r7+A30QH5b2JNW
009of069qa+cA6ly4EfWS0o+35NdtzKu1eWg54U3R5+f2KL55P+Qx+9TPv4f
HuD1bfz5Oma/BA+0Q66nW74eWBQn9UUev4d9gy8Nn5K8qrge12gH7JP2AKdd
kOe7t7xKNnwYofmhfNq9xt05iyvfOic/hxlX+tR2HS/6gbvPq7fLJddT+S58
HNtt7/JsVYzg+LN25S7YlSqi+Ufe3cVzoO2HWMGRr/c8QxvPeyb5LvJ97Mvl
HvVN2y3yw4LH7uj+d9zHn+BfX34uEz7yrzw489/m12qcrXNJ728gP6TNrkuj
mmgc+WXlm8+e93ccx18gX66H05FBoRpHvpLhz/ioKbpdkJ9l8fBB5kSNI//I
7rZntxx6noZ84iXbpuZ1Ezjypaf/ztnsfYzYEzzkqv71qPm8GH4ox2XG7JOd
Wuj5KuV4Ln1Z/UZopMwn2Ke58OvUVW8PPW9hf/FCx16b9v+HZ9Z574zdR7tu
1PMo8ExTT1Uy64n+9A/8A/qwju7frtT2/qf0/hjy9CP0oz9tHr55qecAvY4G
v9j0WpeFfzTP+G/8Nv0cefwSeuK/z+dtduL+xWgZL5Cn/8Ij8tO3nj1rth/0
BL/51mK72T7hEbxugyETzPcM4Y1xkvEdP4A84x32hjzjKfowfpZqVfbc5S9a
H3CHsW9e7lmmeQM/uXFWDYshcTp+W+GM++jJ35lXMN9l3Gfei37gzK+wH8mv
o+ZvtDvyN8amrJnWKkLsFnn8IXaPn7Pqmmm+/f546f/gtz5e+T/+4Qd8WUpX
D/M+JPYBznwY+5dzajWvpl7IM6/DfsCPHOt7+Po7vX8OPiw1bsabFtrvUT7j
msRDor/y2/DAeLVsUvPG48KjZDwCf7cxx5EsjWKFH/Dj98d6jJxjEn7Aq52c
bLfGqPkBP/fL4/fx7HGy7gPv3vGkt7N9jJzTSfkXBvh/c4yT8zhw5vmyHlZ4
pbqVSne3jxZ+wYvEj/3HfI6GPPwx/+F35Bmv4ZNx2fnCQ99aE6NkPIM/xi/4
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
DRb5RW1bNja6LLMFR77cqGInlvndNziofiT5pEutn3/aeY0tOPJvA+b0+2fq
U8PA88v7zp/wn3cYEt/e3b51oy048hc7bpqz5PsLuS+KfOLozan3XLbagkte
8DCLqVlvehjKNmudcOe3foelY/er5a5e3mELjnz2Du/zPp/kZbAs2/ZG03b6
HRaPyn9GHjqwzxYc+Ul/gqc3u+Ej/gv5P5YVVm7fetAWHPkZE98/Sur40bBs
2fF7g9vrd1s2/Tnes03rI7bgwmd440727n4yT0a+4KyGIfdcjtqCI29XP9aY
vUKgYd7ME1YHJmYW+c1RrjObND5uCy72EPW51Ja+el2KfMZhgzJfvXzCFhz5
nVdv5D6/LNgwfYzTyo+b9Xsx49/G7ahV86Qt9oZfeVo+/tfwVdfF3sCnzKuR
0GfSU7Er8NKVJt6veNVD7Ac8ZdiUt6Us34udgO/039KhUuuPYg/gJYO3N7Ev
FyjtDt7rxuKUYkuDpX1lvnPxZVZ/t3BpR/DyB/pmb3o+UtoL/HQWr15Ph0dL
/5K8xZdWTwr7cF/qK/mOHJJ9nlz0kPqCT3h5w3TO2UfqC55p5Ypum4sFSn1l
/j/POjhkV4jUF7zN7fktm98Pl3qBV682fkLei3GiJ+Pn1rvVclV3eCp6gtuU
Xf/rYeb3oif4y+C6C9pbBoqe4DcLzXM6dDRU9ASf0Xf68RdbI0UfcK8WJfJM
TTGJ/YAHGqpN/3eZv+hJ3FPrOqOTQsJfiJ7gY7qMv/+h0kfRE7yrccfPlktD
RE/ws+2vJDZcrPUBt1r3bPac9vq+BHi3AZGB0x9FSbuD+8e1qVQsm45XB5/S
sf6Qub38pd+BP5u3ssqniZ76Hibv6oweHmXs/K/wAL7o9Y7DCWceG+GBOK+J
ngPLPjjtITyAt6l86FH5zIHCA3j42J6ObbaECw/gJVzH9/u0KUZ4AC80bdbS
xNza/sF9Vl/YXHiBv/AAXrZMlx1V278SHsC/Bi4derbKYSM8gE/eZTXr7Ng3
Ui/2n3suXe9t6OMl9QIvsXbBkUndg6Ve4KccFwU/tYkS/cF7r86ap/eV96I/
+IWO2QpMcT4n+su7DLUjYy+Odhd9mDeNi4zZbPP1negDXmZYtuvbZoSKPuCZ
+06asPKx5hN8z/SRhU8WOCL7eOBXay8+tfeotxF9wK/9GLtz8Ogw0Yfz9ta3
LviErfQRfcCLDjqw9+mYcNFH8vO/9R2X6e98GL8HvtR9ZWSz6+9FT/CRR3/k
2Wf/QfSUPCEjDKv3944wYp/gB4YdmFAw+K3oKfck+9RadiHLR9ETPLb1k2sX
KkWKnpLvYoNny7deOg4F3GfTvnnbv/mJ/uAnJvpWbOj1r+gPnniy4+ZdNhGi
P3hX77dLPrXR92/B868vcPVESRfRn3VnWP/550yz/ER/8I1d8h+4YxUt+su7
ao3yrFu70SR+D9z5wIqIy/1DpV7gOy8umfKs1Cupl+S1qF3Oue6f10bqJXmg
6yeXzukTJ3YCvrjCt4nJQVHSv+Q+yYdioQ9rbxb/yXy535i2AZaeAVIvcOdt
hbaY/QD1Ak9YHtWp8S1dL5l3f1vVosNoP6mX5FePfJOS8fs+0R/cwWt44c8B
+t4L+OmdYy08N0RLvcDrnlnROe8+ndcC3LrJp0HjC5yXesl7U0vrZGqfO0jq
Bf7spvUEt4exUi/wDT3andzYV9cL/NLZekdavveQesk7HrVynvnnoKfUC9wz
S7t7hkM6TgT812TrsTmcAqVe4HtCW/j+fLld9Jf77zmHVp7817+hD3g+Y/Wq
E0doO5d4+oolZ7qUCpPvSnz0ufyLB+28Ld8FnzT8ziu/xn7yXX72dq3zYfXn
E8Jb7uR8JX0dnxjiJ3p/vnvlkvDmOrte82uJDwyn8+7dWaHQTRlHLNW6JPJw
s+eH9t8S/bcGf0354HjNsGP1yooLo28InxXVvujAf4Z5V811Rey/w9hcWWvd
OmDwbVXxcI9iJ6W+3ZWeJW9WW/d/fljVN7/SMyLnnQSbzO/En79Wer5OiXCp
b+8l4xHrp1u+Plal3nnIuLxH6Xmt+vQzS9q+kHHZWun5qmHx+Q8XPBK+rNs5
JG+M+2A4lH9h1NCb14Q3fpaYkLzLKudj4S3y0friE/p6G7xuu94fevSl8Oaq
1puL31dJGTLYU3g71fJC03ZGL8OAPzkeD9jppePv1HquruWxkWNzvxPeHIxv
BpWv6mHo1LtjxWCfd8Ibes6uXjDFc7veZ2H92rBo6u+FNcOFt2ilZ8UW/cpZ
rQ+X+u6pEncrr9Pfca57xmH/ncdmU+vjwH1xmfq7ukt9+Zm7TbaJ57q/l/qG
q3XwmT4uHcOufJT69nXK/zE6T5DBuezHPZX/ziepL+tpxwF9+hcKCpJ6oU/u
3k3mlIiNFT1LWJ+c09crxvBjkNPvav+Zx65T54qLZ32tfavJO9EvObrR2sfZ
og3XjWGdCvv7iZ78fFn8lf3H9bo/+px222PTPNLQYNBOp3PLwkSfkuq7XkXa
lssTZhJ9uu65UMJ96d95pntA1H/nq5xvj7hR/Uno4A+ij8uc5PJZ9382tPS1
XttkQrDoMVvtn3XpdqPb7IN6Pt9Nld8jX5d5BT31fJXyqzodcnHuGCPte0+V
f29jniKNbkXKPLPJ5ELjIg/FGW68vlmsfYqP6L+5xIYfX4p+M5Q7uqfYf+eZ
7VWc9xuLsq5hLQNE/z8/3maobvPV8PzHaNeW6zQ/lHO7c0CG5hF6Pkm8+PnZ
ha/sCAsSPSmnTYmx7VKG+Ur/JY9BcLWi5165u0n/neJbOueILomGlQMcT/b6
c0b09zjg4FPkQrIha3c3j//OJ9nP7JL9TwvX+CDR37DwUqC9W5LhgKHKqM8L
9bqAcjrtt6wyqKev6E85FRYt/tlv/WPR306VM6Pt6x335l2VeYXYC35M6eOm
9kv9Hn+udauAnk8u/bPROH34L8ObQ4/H3I2Jlv/nZ8PRfdZuqbJI9KGcJZsT
Ozq28xT/Tzmfew24+WRToOjT86jVrqF+qYaktXGe/51PUh7+ge8hv/SYk3fW
Nd4y7vDz5p0v39uvDJXy3SyXNG15O4Pd84qT5v93Hsg+7bZrE60O5YoUP5Yw
PPbp9hEWdgscrhkdkvR+C+VEXZha1z1PuJQf1TOumteqTHb7qt50+u88jf3b
KhvWNLG/ESX+hH1E55/ujn0q+Ur5lDO2cP+my9vHSfk5dgwqPqZHFrtIpwVn
Et8HSDnspyWtOhG3NONjKQd53+gjuR/cNwn/DzItPbjUP7NdSNKP+AqewVJ+
tXdu2ZNKZbPL6OCe2i639m/gDj+HPy3VRZ/7s087aZldlxLfg6X8oDbxGwqc
yWp34GG72XuG6XVi5yKNk9dGZrdrdSN1v3Vj7cduf1tqcT9jdrvJp5aeXpL5
qXwX+TqVBoRY24fLd9kfzVv2V5BHlhfy3YyrBy88MTu7XdVOawcGz/DS8wo1
jn9dUnx1Qdfx0i711Hg6fk394d966/kP41eRMaljWlc7JfKOarxbZlF+ReV+
d6S/M16ML3rkwulaJsHnqn7TYOjc5mcDTdIf8du3j9Wv7hGp5cFLPF5V+55r
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
u35T9zvJP1956vVSg/V+IPsz5e+Vf5U7i5vMx5C/mqHg8g5N9b0Cyu+65l/L
TtP1/gDyqcn9rjZZrdfFyHfxPXn1/MBwkQf3dM16q+y9J+Jn5B3M0ReOlNug
93XZBwjt86lsEe8YvQ/DPc8x7XKEZ42U74JvmmFMXJoYIv2Fde6dia/fnl2i
+yPz8/abf1f+ViNS2is5zToIPZlPVgl8NWNERIjYCfOiMVscz7U/o+OUmEct
NIzf37pFmMx/GN9HdtrZssBevQ/D+Ftgf+3s4x4FGtEf/zO2ZIezieW0P5f3
w886j4v+4i08y/tUpvAl12bqfQziApa4ftu8eFOUyINnzL2xVcITvc5l/+fm
yY4L3Fbr/U/w9dVPhK/+ovcBOG96U2zgx7599L42+1Hd3R8VK7JIr6+5J9B0
eBen93/9KvLswy9ePCh3Jgc9XrOOWDnDr3DLXnq8kHO8VhtbFr6jzyuZ59yo
V6B442iT9AvmS14FJx7ZUyhW5MHHFnd1WXVP48wrLIftaJlcOUbKYXxZfqli
TM43unz884bJhx3fHYoXnP3PDjdWZyhxVvtP7i34Z/8+41Os3ocZotr5e90/
7ULm6nUZ+wCZBvdvliFG41PVfpHny66ui4I0LvuCi5abBnbW6+VLav3bsF6h
CQMdtV/1VOdcpbM3PjlvpV5Pca+gj1PwtrwZ48U+8yt9k5Se2DP4gTZj1ziU
0+UMU+dQga2rD13ponHWxVaGgbuvbtE4fIRnuV65v41ejyxR51DOtVzuHMmh
9Tmm1qGnRibcq9dM6wNuvW73zkiTPgfBrvp0jr+fd1uclM969lVy7zttikQJ
zjqxdXO3NRufhomdMN8+/77SiWOz46V88H96Zini7B8j+wDMY892Xdh2cS5T
uusUyke+YVPPa/9W0vbGPG3+iTJ39m/Q9sb3D6bhH/k/hozjRxtjpN2Rz1Yp
8uZvm3jBme9dGths5vZU7f+x/3dRXtN/V9F2yzlFxt2jx9fy0Xoyn1ncwttr
aXmtD/J2w+6sTKmjy0f+4Cb7tmf7aL8h+9PKHsAZ14KsFrdv112vZ2coeeoF
3knNE3yuj3ngM0vzzD757MFnAh4N1fzUVvfQnDbZtTRYa34i1P5/nh5rfp3J
Eis4+0IHyr5c/sLXJPbJ+Wz87K0VCp/R9gl+7n6oy/Gn2n5Y1w/LWPmC3Vdt
t/Ku4rQKo9b+7S+yv6Tsbcf8J17P3mj/LO8JXrfp9O8D7SdZp+9JbnUlwKRx
1js9O993ORWm7UrySMyp+LmSv25HcOfyXinP3XQ7Mq92fNVyylwPXV/mP3se
lz2341l8uvMx5JlvPJ50zW76SV0O86UNl7yujwzQ7cg9ij7FZ39otVSPL5yn
nLn2/FKeOVqe85S7Jw5uL+ar7Zn7dYtLDPNff0XLcy9i3pK3hs8pev01Qvm3
bc49kh/80TwQ51pzYY4S7n4mOUcemGa/jvKZP2wIL33kcwZ9zp52f4nv0u6e
7zfv/fVVj9f4k4xjTu2oflLbCX6g0ULH8Sk3Temuu+GB9em2D2czxEXr81bw
Yh51MyyuFpfu+ojv0t9L7rV5OcjHlO46lO9Sznn3mgE7t2p7Ay+3Yk5Stx/a
frCH3irPW3o4+lDepg73HRqPN/3PeiqvWk8hzzi+blTCjqcpep+KdUe1iKAt
Z7y0n8GfJG/weRPwTY+zDgof+aN09ycTtJ30V+eP/ab2zd8iTts5dju65uMi
uZ5pnPlYpzr3N9S+qHHs2dXFssFJG13+PlVOmSqHe99qov0Y9diseAC/rsoJ
r+r8z80M2r99UPeO6m98l2Ohnd4fu6Hk16/9VL9uc+23kQ+wj5trbantnHO3
+4dPjtrkovWXeeOEoNk3huhzVeSNjiu6vM+q97Hd1bxlVLdqk2P9db+Q/PQX
r0849FXXi3nQkbnrIrZk1eM786Iubf0caueLlX7XX/VTe9VPwdPmfYLHB2oe
a9HxVq+XmbS9cZ9kWdcLeYbPjUt33xj9eyj5KNPva8M2avm0eZzA0+Zx4rvw
3Vv5Q3DmyR5bCx/N7R2f7jwEfZCvX2bS9B319TlF2nxNlM+8uneeR8agmRpn
Xh3TMNPnZWfT9z/I42de//sr5O1rLc/+m4vKA0A7Ur7r/EanPa30egd9Rn27
WMqnd5jgfHfZ7WqnihyLFr/BuHZU5VNKD5d2V/OibdOW9Fr1QdeXeZTd008b
SnxJ3+8hT/mHX7fO3CdSlyP7kaVHXC70187Rh/2c1yp/UXo45bBO2bLw+JI1
l3X53Nss+bxTg8un/9cf5kvjDyn/3OyEVxUu6nIYxwN6jlp/e6hej1B+hQVZ
skVujpD9DfT5d9zdTn3vhAlO+xxT/RSc+d6vDhPbltmr53uUH+vkY9emYKz4
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
E/zJ3AvuIc30+9fw0Xln+b4Zm7zWeWAU3qJkZweX69ovg3eKGRjoVcdHv5fE
e5Jruxdbt1LHB0pcudX5jFF9AkVP8OPBh44U8NL5XmT9/jDf4XpeOm4WvIBf
res+84L0OxfER+eI7HKqu35XnfKc71dxWlJGr8ckfvbZ1FHebq9EP+zzj+XC
L06tQvX7rQr/ou5X8F1wC8fw8v96x0g7gu8LaPzDctZbyc/G30eMnzSiabTO
Pybv3lwM2Nx0WLzk8ZD8am2qvk4c9kS+S/vXMx3ee+HgO8Epz2r41FzfS91P
d14BTr1/q/oiJ+/5KPtHDryLshN5n07x9En1C+TBsR/+H5z2FftWPO1X/Yhy
wDsqe6MccOxB8p4xT1DtnnY8OqnGI74LfxdUP5V8GswHlD1LPhaFY298V+5N
HctlsJ+m1w/gQQeDxkxKCJL2k3mIake5R0v8smpH9JT3E/AbSk9w+hd6gm/7
OKddm186b7DEyZbw+PP4q7ZbeRfI0t755OSP+t6DwocqO0R/ub/0sma92rNv
Sp4c8Fz1L1vO3Pxe3luU99SUfxM7VPh+1V+Ql3ZTfg+c77srvyfxYMrPPVb+
jfYGTypbt2eZfR/0/rXC8zkktDh//J2cM4IH9Vuyo56dq5Qj+SmV36CdwJN+
JXXrGeEleaolL3Tm6q5xi/wlDw/4k4pdMvr9vCL6056MR/Len2o3N3WfQfK8
Kfy0OveHdznnfT7CwbaI9juS13ZuKctjQ2JlH5t2y9oyzj3/Bz3P4O8PexqG
DrkcLHlj0Pdamney0q475H0f8ld1vlqniG3c/4zj5A2Te/zs6yq7lXecuU+r
7FbeFeLe7JT691ou1O8fyf6q6o+yHiBvfe3lBRta6/ezwL8pO7FM53yQ3+U9
GcWzxDkofMIOr2WGcD0f4u8Z1HjBd5F/kIZn5FOVXcl5J+9DTh75/e2zEBkv
ZBxR/ZdywLFDiS8iv/KSpXX7v9HzUfBA5a8kXgJ/oL6L/uD0I4kLVbiXsnP0
pJ/9q/wG5YDT75DHPnMrf8Lv/F8WZbfz0swnM6n5JHpQ71+qvvPSzNvTvmsA
H9iJ8KnK8TGNKvOtmLZn6Weqf8m9UlUO9jAwzTwZu+L/0Wu3mg+knT+Tdxc9
0CutPtg/+1eUL/lE1TzEIc0+yX21TwIueb6V/wGX/KNp3jVLuy+dXpyanEeq
8ri/irzor/SR+aqqx33lTxzS2a+TfMjqO/iHnOns5+DXwFMbZuleZYm/4f8D
eRtbqw==
   "], {{
     {EdgeForm[None], GraphicsGroup3DBox[{Polygon3DBox[CompressedData["
1:eJxNnQXYFsX3/p9ne7HFLiwsxMLuxg6wEwsbbESxg1IBxQBFwQJEUBEFFQMb
GxRMsMVGsft/f977fK/f/7pYzjyzs7OzuzNnzrlPvCsd3b1Tt6TRaHxVNRqp
6E9Fo7GI6MSs0ThaFUfp2LPZaMxW/a6i3fJG4zjVFTr21u/WZaOxkdoPE11f
bbZW3XFqc73OD9Zxp36vp/otRY9R/Yu62eU6Run3c6KX6Lhb5UXUZl3Rg9Vm
uu69ivrcX3SajpVV3k+0m/prpaOz2uWV77us7vuuzm2g8pGib+hYSeXOorvU
jcbCaj9PbVdVeX6Vv1N5NZUXVHmuym+q3apqf4DoiaqrdOyr/t/R7/VVf4To
whrb4hrnQqI/634vqr6X6OW6/imVe6h8kcqPqXyWyvN0PKLyGaL/6Hn+Vn9/
i+6ovjP1s6Z+T+BeKlfq82KN50m1P0ftp6l+Px2r6twROleIlqJf6mit8oKi
/6qv1dVHZ1E+2kOqX03HfTpW0LG+zv0mei9j1nGVxvaSml6o/i9Q+VGVz1R5
GfW1ss4vLXq0jhVVXkq0h8bzqtpcojbPqv+OOhbQuW1EFxFdR/0vo342VJtl
1Ka93tHaOtbVuR10bKfzy+ncLJ07SrSjaD9d21fHdTr3o9qepPoLRH/RcQb3
Et1UfR6p8k5q/4GOLirvLLqqxnSZrhui591CbY5X/Z6qn63jaJV3Eb1D5/5V
eXXRA/T7MpVHiv6sfk9X+WLRNrr/EPXT1DFMR6rjNJ3bSH0eIrqt2t/O3NJx
tn7fo75uVHm0aC89180qJzrmqa+TeZ+i16jP5XVcz/fQ9Rer/i7RzdVnV5X3
ULmX3uexKu+m8t861lR5PtHHdD2fcGveg55xUZV7M3cyr8XNRR/VoX+NLfXf
4zp0urG96BQd89Gn6NM65udeok/qqHlvok/paMX7EZ2so+AZRXfkO2m8y+v3
M/q9gOheos9nHsMWoi/oaK3yVqJTdSyu8naMq/T6ek7lF3UspvI2oi/pWELl
HTI/G894k+i/epBtdK9l9TtTeXOVN9Oxu8praBwbq9xbL+FnnV9edLKuWVHl
puifOtZQuZXocql5xWC13zfxPOrBuHXuBNE79XBXq81Vqds8oTbn67hB5RVS
8xzKI3N/27ty86drVXcOz6nv1Ut0ROm5xRw7Qy/ycV3XKfH33Ue0H2uZ8en6
W0Sv0/Mu03T5WOat6qfp9/uij6rP81ReV/Qd0bd13Mq6UD9DdLyv35+p3fKi
e4g+onbnqryO6Kf6vSzvSXSWjqVU3ll0oMY8IObx7bnn72qiK6muv/q8S/W7
6vormb/Mx8Q8mGd8SuX94/fdel9DRcfq2gtjbnfnedTPLSpfSL+p21zAN65c
d4f6zFR3VdPrqk/mtbap+umjfu5Q/eX6PVB0UNx3gOg1saZ21fXHiK6v/nau
3HZU6fO0O6vh9Tcg2vN9BkY//+joH/f9UmNbMd7DCNEZokvr+JDvzbtRm9dE
7xDtCh9mrap8legzql9Ux9X6vabewxMqT9X4X9bxpMoviR6qa27Q+ftFr9Nz
vaz6JXRM17nnRKeJvqljMZW3F31bbQbqmKrfq2g8k0UX0rG2ylPY33T01POO
V5/d1WcflaerfKXKL2tMq6t8kOjvpcu16BE6hqk8XvTR0vsy+/MTarcUfFL0
EdUvrPLPqt9c83UL9mbRj9X/XRrPc6LddTygNt3U9gGNYz4dF8X3HatyrSPT
M4xR3S3qc29d/6P6m1/MY0/Karet6Ddqs6La7iV6jvocq/anqM+D1Hau6n9S
/S86VmWNin4i+rGOO9VutProoOMz/T6z8r1OYn/QcZfKD8PvS7d9qPQ8vE9t
W+lYXf3fI/qI+lxH4/tG5+5FVlC7AWo/TvSNxPP/UdW/nHguTlL5VR1L6hgM
r9P1D6r8tOizOuZvet4+puvb6Hwi+raOXVReR3Rb3fdUtblCbVbWmHdV/bqq
P191fzQ8jy9Q+c+G+fvVaveb6Iqi/XX8qnIb0Z5q83vDe9V5+v0D+2bue3Cv
nnq3s3jvKp/MXFD9dvStNh/o9168K9GNSrc5X+0/0+/DVT4bvh6yELLYa+zD
Kh8q+rqO9VQ+TPRTHYchn4j20vs7X8fhGtdXmfep80V76H5zVV5a9HP9PgKZ
RLSffp+gtpfklq+Qiw4XfV/HniqfKHoR+y7rV/Rw9b2jyl/q3O76Doep/I3K
S6n+EJW/VvkIlXfm/irPr/F/y56i8S+k8ncqv6DyhWrTpenfi6h+DvNfdLHK
ff8qOlv33od5KLpk5f7+EG1V+Z7PqJ/uTe8v++u4VOP7UXQ50dNV/4vKB+io
Ko9ritpfwX6R+tu/p/rBeoYpopep7kyVT1b9bbrf/Q3P80N17kXR7/VdLlab
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
0u8effm7zOO5KLPN8Ur12a1hzOyKKGPj5BlPr23j5Nknqf/bC+vft+W2m/Ju
dijcx+VxLbbIPvHs2KT6xvtHnrq/6fk9pnD5yTxkyabXwN6VzyOLjtfYttPx
lc59qn7u1PF503OVuccc3CoxRV/9tPC62F90OngmPEt0Cz1DrvqL1fcyiWWn
t9V+AdX/p3Iv1b+BTq1zbVjnifkV/OGjWPuso6fU131q9wR279zYyKjMsg8y
1Veiewb/gQ/dq7bHxJhnJF7P8Mq5osfr+Iu5npjPsHZ31TU3N8wTHtG146LN
VI2vVPkS0QV17gP4iu77WeF1PUF0ZGoeBK+pc2Mz96vNC6o7SdcumBgbBitA
J1ovt/0Ke+PFoReUTdu1sG+BjY6uLOt2FF1efd2jdvPYs0XH6PhD5XmiJyYe
33aJbe/Yjf5R+VQdK/GtkM1ELwXPED058f79gsY9WeN7TnQOeoGOH3T9irrX
CYm/WTOx7PpiwzIpPgzzRCfpuq4xhvF52Iuwh1TGN77T/PlS54+LMV+TeR/D
FvZtav0IG03rzPoRdqbVU+tilA9OLOMh6yHTwXcHid5V2QY3TvfqmLgM3grG
/njTtqENNa+eUvkIZF7WcNzr98xt+4EtxHgYF3grZerQVyY0rbPcU1hvezy3
nY7yVeynareejq9T2xbRS5g3k3LbVXcvrG+hf7HX9o5nAVv/LrXOxfjuL3zt
a7ntpegX4OenZuaH4I9r1LZPrF1az0LWReb9OLFsz7r4pmksCJ+SUypjTl8h
O4HFxTf9XPfaBP2msA5IP1ew3gvrbs/pXmultmWil72Q2ya2Bu+gso3ySPQb
tWmf+vchlfd3dEZ0O/rhmpdCB2yxryWW0+lzzdT6GvWdCuvaF4vepfqNYs9+
SPct4Mm5fSOwPV0EDyxs0x+V26bIfsgzNmtjU9uJ/sCah99n1sO+1TEZvtS0
nfHBhnW1p1hb4GS5ZZgbM/MOeMic3G0/ifbb1MbTTmfeFX7Xc9Wmb2G+eAey
R2UfHnDmFZADAwdfOfNaAzdfRuWxgaOBFRyYWAYbF/x1InMjt/xys9oum5nX
falzaW26vehVhflSl8K23E9jnGNUvic1r0OX/UXHFNVvldrPh3X6bfC9P1X+
XvTu4G+twCGRizKvVzBK8En02O/jHaJLgl9mtbHNH6J+w9R2ZO47MTVez716
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
4puW+28e8beP/h9f1JNF
         "]], Polygon3DBox[CompressedData["
1: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
jN/O/My/OWM/Zdydfi/6gF585lrIa+iPkOek7bBB1rhrXR/letJH6atGRZ+3
H/80tBNMR2xnEeb8Cfm/zDFE/2zM1suaOYlrnmv+3I3P375O3GX8pU3RtkzB
Obshf0b/g1V8nr7vRo71+rm/87uJUY1V3+hn7WmDb2j9mb/9A47v+vlm/XaN
gWdDfmCQ3OzhIjZCe+278hn7rF1DriVzNO3Lk/28KzEhf+9THPd1ggnN30/M
auxqTDSUucbn/jen72Pmv6dKfnlaN/fovc7dz9pxjbnW5mb8Tb1gIF9VwQO0
leaM29H/Fs/ow2589P3I4zB+E8afTl+f938v/1+HPgn9d/n90L8j+qdc//4q
36TXPl0Moh+fom/5uRN/9AJtT3QSwyxqPsTxMfq1vcz3PvobneSQc7u2B+nT
hmvL79Nno3/SiT03vtDWeo7n7kLbj92sEd/f14P44wmNL5BH537X5fzp0C+o
833c04nN8XsyHjO+u8mYkOvNy/iHGT+Evu+RT+ecoYzd03tBnxP9EOMp3xv6
uBybMn4FY3T6luGZ7MK1vmb8/eIv6Nugf45+t/Ewxyd+K9pfxh9TB68bYxB7
9jL6893kbOZub9ZZa5Mx/lPmupZ5qm5ibv2ha961f1qLLxifrd+NT9I3aV+0
Pxf5G5HXZY4zGP8b5z1ifoZ+JPpP6A+hrzbIu3RObfFw2hv06Ti/QX+P+/nZ
WMCYtE5+NSJ9F+ojGLt2lfj8F+SHxevQX0Yf0bXdBDMSOxLDmw75Um0c8siM
v8xYDH1U5CGdfE/z17Ev/zYOarL+dmD8eegD1uck6Nuhr8KYXxl77iD9S6Nv
WAZP2Qh5D+b6USyB41P69+ae5qXv7H5ye3P8KbXNHPfRPwvnjOW3W8e3XW4M
0mQduB5+oe0j5Alp25LxKzH+J3OxJrGcsaL4Wskc3W4wPn3We+hjGeN08r1M
yZg9OH8d9DGbxJueP7/PnLFP8Py+Klos0vzAmIPxWzN+8ib2xnjk907woKlp
24f+9XzfbXwl3qfPvLpMfrgFfQcw30+M3a8Otm0M9j3XWohja+TPGHuX8Zs2
j/6nOedFzqnR625yfNfDROYgfp/o93LuZOg7o6/F+DGa2BHtiZjRGL579K2M
r5j/LeSnOOfrIljj84w/qM56c909g/5MlVhUrO8F9FNd371ccwfa9h4kVtQm
7eb64fxvuvlGHkN+aBBs/xHmuIo536HtC/qm4v6+Ye5H0PvoT5hTGn8w/hHG
j+RvRL6tn7UyF/rU+nfu4dBeMIFbGP+YmFmRWNJ46xFtGP1Td8InTOU3ybnn
o1/fTwxlLGWM4Pp/rJ/YZ55ucs7ZBsESxGQPpW9lrvc+/aMZFyCPr1/uJWeT
35hGG498F/M9oj3kfu5g/Or94DUzchzZC+Yn9id+IVYvxi/WPyL3/O0g/MQK
jP2BMaO1+eEkVTiIrctganITI9O/fCcYgfH/EG1eJxii/vRKxi9mPuj6qPJ+
XAuLFYnnxSC2KoNRiU3IAWxZBvOSGxDjn7AfvEPsX8xhmzKYg1jEVegroU+i
TWH8pOL/ncR0L4lVVcFqx2/Xy7OMXYVjMvEebRHy+hyzoo+Dvmc/9mFN9B1p
n4a2hZF37odPqevYEm2K/s7347tftQjeczVjVhbjRx+J/qkZv1UnGPXL6Hs1
uffJB/neRqN/xU6e8eNev8m9G5dqn8QsNymDmYpljsP4VRk/NuOfRr+Q/kPo
34v+FdG/Rz6M4wD0VarwSeJDo3USP4hxzsD/vU6wz28YezDHnoxfSSyhSbx2
aj948AV+v/SvRdvMVTAmcxTtsdjTz/QdVcZnLFcHnxB/GbsT/35GnfXuup+p
H4zicMYfWAS7EDPaFH2hIliSGOXGZTBJscsxOX9lbQe/90n0idHX7YQDewF9
X+bcrMw7mpK+iTjW7iTGk7+4gvkWLf+mkYrfjDfr+Cdjp19cW+hrdpKTmt+K
sW5UBpMVe5Wzu7RMvi+XJ0a6LvrMRbBTeRX5FZ/PTq3P0nfJychfioeZa0/a
5q6jmwMw9sle8EgxTbHNR3vBL7SB2sLt0c8eBAcVD/X7WaLF3MXe5ZhOGyQ/
k7805zb33q4frL1XBmMVb9D2GDPd18ZTxk7GcMZyYi7GVsN74SuNc4x3HurF
3q3ZD36mDdQWPjPIvZqzzzAIH3pXi2eIZYq3PtnmS2LJVfu9yJ8O6uBlV5hb
cdw+yKF8STf5gPyp92JM+Hk/+anY6yja6kEw8nWQZyqCncs5yD2Yk7w+CH4q
NjVumZzlTP7/2mdNW8HY5Th/JvEKnz227nZjUPpnpO3zdvxlDP2GtpcH8S/6
8ulpO2UQe7Fp+z3KZRxahltxjpcG4TTWo22Wtv/8Jutzoda+/CH/0QlG9XuV
+ON09O+McbifM6r0iWPJ94kJiA3o47y+8ZhY1Vht7CAeJFYh5ib2Jj82bjcc
pVzlJv3wh+My51JlOCq5KjkuOVQxfbF9MfS9BolxjHWe6YWvkr9SnoZzPx0E
3z+nk5js3XZ9uFZG4JqNfXXiA+OExfRXdfgPeZA5OD6RszSf4fxl/fbRH+2E
w3hfrlt8tUwON1uLFxnbiEGJRQ2jf0zkdcW0kPeswvfJ+43k70efiLmmo20Z
bUmduf8sg4eKx7k2xBA/ZuxvdWzpvIyZrEp86Vo7nraZGbsgx0edrBnXzrv9
cIFXM/7cMpyV3JWYgvjqXszxSy+Yl9jX5i2fN7s+y1ypjuyaXKAJxyXX5Zor
Wv/7zSDneO7yTXyxNQNbVOGv5HrMmeVLxL/Fe49HP1bco0m+aN64AMdXTXhW
+datuHZvkBjU+G/nKs9ErFj83Gclxm3cYfxhviFmL3ZvvLJInfjhAOQtOH8G
5C/6iUuNT8Vjv2lSgyGmsFkVDlQu1HhknTr380o/+OoGxnrtM70KfVP0Oerw
E7vxW+6h79cyPJ583qp1+OCDkLf0ndbJybRZxmeHNcH3jU29/gWc+1M/HP+9
6Nsx/5qD4AziDSXjRxyE55PvO7TKvcrfnlIkfpJjkGuQj3u3CgcjFyOf914V
DlYu1hhr6yr8pbbGnOrEMhzKOWVqQORWxOzm6wfPEMubswneKO64fD98ntyk
nPOpZfhRsXvPt4bm7CZ2Tnu3R5McSLvomnXt+szO5JyDO3mWcgZyB6tz/g5N
clZzlk3Q92nCN8qnHFaE/9A/WhsgJ/FOlXhBbnQ/10sTfvfNTjB983PzBfk1
ucLekHCwcubnFuFmd2vy7K2tkH/ZgvFP+ny74ffFu62nkfvqDglnI2ZhPYRc
zoZ1+AuxOtfzzVXWsjUEG7br61HjmiLc+6V1uHVz5vXqxI/aOe3d9u27k087
tggfa7wtv2P8YhxzAue8bD4ipoG8tzaiFwxwJM6/m/HXdvI8rHcZNME2xFTE
Vg7gnPt7yRnn8f1UsSUnmEM2qWGwlsEcd6YmfPUNncRDxkWOcaw1FdZy+O3J
n+1fJF9YiP5v6R/K0WmSj1zRSfxnHLgwbd/1gtn1kJ+qg1Xr08UyDhfzQL6l
zddXq4N1mKOvgryCnEovNRd+X/okfZw5sr5qH9cY8nIc/0AfoUnuLwYnFqdP
/bQf/6m9FM+9UvtmnkjfFVXWmpiH2IcxmByfa861Z/wiPzwVY9YsM5++Wv5l
pzp4gs/KZ7ZKa59u6KcGQK7xqirvdngbn65Q533d3fof8Q2flc/MePWaQXBR
MTf9zZkcq4sLGq8w9r46a/VFjs18HxwnIr9gvoV8dVt/oI/T12mjtFXGmH4/
N1Wxfae29m5IFV+sT5bfPMZviuuNRtsP3MtZg+TE86CPLl5Zxdbuz/hZ0Y9m
/FyMH5W22+m7BXkOjlHQb6tiL8WtfKe+W+3XPP1cX+70dPRV2/ynFJutg8eJ
y+mv9TlDy+SA+iJ9gr5BTEz/PKyKr9HnbFTHxmhrxLTEti7hvDP6sdGu78Vp
O7yTGPV15CU5ju4k53wTebEq3IIYmljayi0+ZkwkHrNEFW79d9reEN+sg12J
YVmf5fdlrYGYkP56+Sq1g+a4+qelXA/oFxsHG/+hn9gJxyrXqr+UCzCmMLYY
2oRrMAYxFrmuCh+uDdIWaf8X6qdNbt4cyVxJn2g+faW/twinfBX6XBzHdYIB
igUuy7Frkba56VuqDn8n1r7MIHictkibtC59l1WpRbsY/XL0Y7nefNzb6LT9
qF2jf41OamSsT3yoTP45Cf13VsnZzE3MUaz3O61J/jupOQJ9M1XJdc15rS96
tUouK4c9bZ0alkn7abO25TWO1Ypw0nLT8/j89ReMmYzjLfSNitTMzFwnf7ZW
bLNO8rPjfX5cf0zG/DxIfm7tljWL1lOdQv9yZfinP43nmsStfjO/o5/YJA8a
p83n9G+Tc91fi9yPNQU70L9GkVoDOQfzeH+jXIQ1F3IA4g/WcpyKvkIZPuov
2ifSd/aTs5u7L0Lb8cZ16Lejj9fiCdYIjId+Aucvwvlj0faLcUWVWtAfi+T7
I3CMh7xAJ/H+mVVkOTb5E2uY5NXl1621sl9uxRzBXOED2hbqhDP7EHn0KrZR
G2k+9dkgse6sZfBt8xnt7SzoX6LfVyX3MgcTu/jI39QJJv5xnZzH3EfOSBut
rTXWvboXvtua2GOYc7dOamXnqFKbKWZoPcnsVWpHrAkRj7Hm0trLPdBvQ5+F
Y79OvkG/xRer1NaJ0YjVvN6kDs96vB76uVVkf6O/9Qz6V+N+Jjc81tb6/tDH
QP9pEH7ee5UDlgsegTmW7aRm+DfGz1eH25TjnFX/RdtLRWIW8c0fqnCP1gAd
hPxyk7op66d+rJJPKM/N8RPy23X4dXn2tbl2gb5oJ5zCX8bTVWoVvuF4sI5/
XKYXn6vvPacJ3mR+KP70vWumk5pa7fcnVbD9L7Sp+uIqXIs5iP7++iqx53Ft
fGUNinUj1o8M1/dUwV6MYY2Hrq4Ta5oTXNP6K2t1jSn0l9eij9xJDLh26z/F
dvSZK7T2T+zImEl7N7xKLKyNWwd59Sq2rU/b28jX16nd1KfcgHxJFazpXI6F
6qxHuSJtlrZrxirf6g9F8Dr5VmtrjTEeHWS92LdjJ/WY2pc/i/gQfYl47l+d
YKxird1BsF0xCeuzxZDFkq1fPdJcpAqWuD36NE3q2Kxnu7eXelvtm7ZEm6Zt
0x6K7VvTp/0Tcxd7tx54YuROFV/8QWtvreccW7yLd/zJIHjjei1eJB743SDl
tu+1/ls8Re7SGhZrWbpVfPn7HHdUqQf23sSkB8iXVqnF3rEIvqeN1lZbd6T9
7aIv3klNQadODbc8jHyMtd3PGO91w5EdVgcvPKBMDZF43Bh18DZrguQTt6nD
fcqByjdtWyf+t7ZzpX7yK/Ms86096+SDZ7f5zs51ap5/7Kde/7w2/xRPM1/a
vw6mv24/9ahi/Y/XqZX4juPAOpzJJS3+Zq3yDnVq++fphb8cqQ7+bE3VXegX
V4nNxSgua9efsbM1nuKdq6HvXKTGfdE6a9K1ObwffPKaKrnuAYxZC7mpg2db
U/BLlRoTa5TkV/5dp8bZmv6bi9Q+W9NpnZH1Rp/XqXm09vFp+g9ugoHru8T0
rIeVb7i2m5zB3EHOT15IfkguUE7uyBZfNTaQQzusxU+Nha0R26cMZms8I8e4
lxhVG2/I4YnvGvMa+57VpAZ6SvQK/QH0vcvU5BmPiAfvW4bzEU8239y8Hx/0
Z5X80tzcPQn7NuGEdilTwy9XdHI/OKgxh/GqHJ88k3iD3J+cmdyZOeEh9I9d
B8+WA5Ivsub5hDL5s7XQxhDGEtbhGr+dS/+wMnj9KFU41F3LYAbGn3Kwu5ep
aTSeNN89qR8fJHd7nvad/n/RP2qVeFXO0ZjR2NF6R2uDrGmytulk7XcZH/4H
43avgnUN6eb+xR82HqRewPxqvyq13nK4vj/tg7HYg2X4GuP/adCfLFPf+kSd
WiY5rieRj6xTCzYGx1HG+xxjdoNxiXXJP3pt19Nurf9StibJ+pmVmr9d0t+Y
t9i3/I22Sk5KfmG/fmIxa0LlIKzPde+He0AOpH8Vzhm7CGcjdyNH4TjHyxXK
SchNWJMul7pfk7XgM/fZH1ClPtdapw0H2S9gbGc8ZVy1dhNbqE0UK/2d43va
J6f/c879ugoW/J6cPvOXQ9qaoU7864hNck8xNrE27ZnYjzUt1rZswrFOkTXp
2rSG3Vr2DXrhUzdtslZdM66dy6vspXCPiSRBtwn2bF2CeMwD9A/rxQbIbU1Q
pbbINvnMQ/RfvdhU62mOH4RX1AeJF4iJiI1YTz0K+shNZDGFvdt44eJubKq2
9ec6vkqOV75jf46Ve7ER8pHrGP8X4SjkKg6mf7VeaqisR9usCbajDdAWrNUE
K5ezkLuwrtXY1T0MkwyCMYs1W3Nr7a0YjViN+2GsnRXf0NZas1M1ef4PF/G5
5v+j9uPL9GlzMs/hVXJZc1Rz1T3q2H454l21R+iXIs/PfLW2p44tfai1n/Ka
+j59oHntA/RfaC2IPrBJzGTu+t8ysdSCvo9uap6HMnbbJlipNlnbrL/UlstB
yUUZUxlbuYditzr7N9xP9HmRejltgrn/82VshRyuXK71gdbSbVulvs06N/2f
9VM/drKHSP+nTTJWfa6MrZIz0ndZM6o/lI91b481APq/NRkzYxFOQ27DeHnj
IjUF2qvVaJu4CMcp1/nEIHGA8YD40rltfO8etRMZf5gxQTd77KynHL2f2GTU
9p2IcYp1GpNaL3VUEz5Wrtz6CTkKbesrZbgLMWJtty9Y/7t6E3tmjinXKR53
aZE9EFvXwVi17W93Um+1XZNaAn2AvsD9Igsbzxbh/413xdKNMYw1/P6sjRTD
Esvars5cPnOfvfi5WNDQFk8XnxdrEhMTG3OfiLmwnN6u/dR3avu0V9b3GU+L
nYm5ir0+Wofrt0bAWgFjDmOP4W29wOsc73SzBrVPr9WpdRYD+qBKDZ91/db3
W9unzdJ2ucatJ9C+39CNTdQ2LlinFnCVbuKTZ+vU4llDYy2NNaTWifmNyR+I
P7mXxz1R7o1ask5t4Grd7Iezft7aIfeEuTdMjEqsypqf69p4ytoH64S0x2JW
YlfrdZMv/I/j3m5q8N1PNscgdWDWg7mXyP1f1mMsw7FFmZopa6f6veSjPj+f
lTZKW2UMZyx3Q+vPxB/1jdoobdWtVWI/Y0C5VTkCsVv3ZskdiKHLBXzdD7b+
NeeP3EuMZ6xnjbq1CKP2Ul+lPfm1kxoOazncXzNCa6+N3X70G+i1HLLvts65
cu6j1smHq15yOB2nNfnW5rvn5e+9T3X2PngP7u+TvxIbNsY21r6lvd9zWqxf
DkPs271ichvWUI/VD79mbbV7WPVH3qPxoXyEdYPWdL3ZrgexWX3KIa0/tDbF
nNPc87MqvtIaPWv13P9mPYx72NzL9gttY/XaGoE69ehyl/5G832/cb9162Os
nbIGe1H9YS/1Q+s24b7l4OXi12vCxVuDYC3C+k24TzlQuXv9o7WT1vhY62P9
zvbt9a1VeKiKbbWmydom91Pq29yDOpm5T5Vry9nL3bv/zNonazKtzdTma/v1
kebT+iB9kXWk5t9yOHI5F3RTr+h+IGud9mqft9fX94sJjFhnPX1YZM+mezfl
/zbtZI1bT+H+WnPDw7jPQvyzSX4qhiSWNIxj2SI1KtaquAd3cWPbXvJJ80tl
fcok7fr7uEhNmLVh7rewNtCaTWs33W/g3jE5cfePWN9sLZh7LNxrIf7jt7Zw
G39bg+P636aX/HMsfV4v79x6N/Fj66Csh7IWy3qxbdr1by2Fv8nf5v4U6yfc
r+reVWuyrPX0+9A2W8NoLeMjVWr7rSGzlmzHJrG1mJDY0EZNyy2Vwd6srxSr
MmYzdnM9flKkJs/avA2a1PZY82PtjzWlY/ZTz+D13WPk92bNuvX5GzapDbLm
yNojMfG/sfFe6uvE1MW25TjlFp9H36WbGhFrRax5MsfX5+p7xYx8tXeUwZLM
wY1fbm3jFXFisSrz4S/L4LfmUuZI5krmq9aiWe+2e5P9zWLVYtb7l8E0hYXu
LIN1Gg+KY4hnyJ2YD447SMxt7C2Gy9Di9jLYrjWZ4ttixO6HX6IO9ntwEXzl
P1Vkc3pz+wur1B/I0cjVyCEYyt5Whluwpl/8y5pG96+Zj7unxhrGA5D3b5L7
mUOaS5p/PIh+RRk+XX7BPd/Gd2IX8gJD23zX/evme6f0k3+Kr8opiE0/UoZr
sGbKfcJiwGLBb7Ux6MKMGbfK+3ItWkNnLZ32wL3H1jRa2+ieAetYrGexnt/6
TLkC9+S5N8/4UKzNHMJcwj3O1uSI94ptv9HGBGK2YrfmXNbUiCebi4kh01Tc
UwZbFsOlubirDLZr/a1cuDXC8oni4e7tdD/oK1X22LnXbosiXI344Yb91Bs7
kfVJ5lzWfFnf1Gvj44fLYPHin1vTPxtto1XJEY2BjdfMHc3BzcW/LVPrdWiT
/QXGHMYe4tPuuZcjkSv5tckeezFosWgxW7HbDYrwLzPVwbLF6N9sf794xN1t
vnh4P1ib37T7C90j5165i4rUe/rbxcKMUd0Pa7zgvi9jImMj850TBqkhlRv2
+7bmU5tydxW+zRp9OVq5WjlB9yxYf31Jm/9Y6+U3PmkVTtg9Yu6JkiuWZxCb
M8ex3tZ42Bpdc25z7yP7waK1UeakezepVbRm0NpB+Xf3zsjx7NIEkzMffaaN
Z93jYN2QNSLWisxYB8vesAj/JH4zNfITbX787yr7jeVurW07pAn25N5X999b
c2itqhyHXIfchlyDeIr7a27sB4sSkzqozB4M/zaBOYW5hZid2J3XEK9yT+jl
RfbAuP9OfmjVbmyG3Jj8jzG/a8y1Jv55ziA+Wd9sjaT54NNtPuEasTbRve+u
nQuq1Lce0q43cTHxMfe4+vcfjGfcY6RPf7iKL9Ffygm539F6QOtirY89sw6f
4t9xkDOQO5Br8dswn3f/zzZ+P0UwH7Ef83FjW2NSY1Mxf7H+R8twAUdX4VoW
au3rkW3/fK39PKK1P/O09u+oKlzTAq29933KJe7RDT9xfBWuSYxHrMdvdqQi
HIDf8glV3pfvTW5Km7KU/qAfW3NMFbxkkdZemHe7NsWQPy7zvcl1+jcx5I9c
E64NOUv5ff9+iH8Lw29Snkm83tom93hZH+Lfs/Be5VDlUo3/jHXMScxN3H8t
1+g+VvnD46pgVXJmcmfHVrF1S7T2TX++YzfxtLW7p1fhWsQExQZPrPJ+fE9y
Y5f2w5X6N1r8Wy3usTY+dg7rybX9ctPyn/Kg8o3+vYh3y9SOyrEtVsQnWx+t
rTRXlx+WJz6wjK8Vn/uqjA/Vl8opu79ebFqs+8/WHxsDGQtZAyM26X5ccxlr
yKwlO5/+tYvUrHr9U9p8fNXWH/n3ReTm/KblqU6rgoXK+cv9b96kFlbMVOxU
PmNYNzUr1q7Il2sLbZPfcP+0XJg21pjo1BY/WK1drye3eMUqrb0Xnzb3O5vx
C9TBYF3Pj7fPf6cqex+tiXH/p3vq3Vu/Rjd8svyy8mW0LVNnf4vcnzV1Mw2C
p+ib3bMqPq1PEos9rR9fNWi/h8fa32t+7d9qcI+Ue6W2aIKXiDGLNbsn273Z
q3ezP8X6DWU5a7lrOdoRGX9/+324P9daMPe8Wl9nvYTclH9zxHz5hiq1TdYI
WSt0XpVYYLMWb5CD/Qf6A+36E3MdAf2+9vuUA8ZEF/e269v4SO5JGyg/Ll4q
luQeiP/UiTHEenfsJ/aQk5GbEVN1P/a1bfxozfxZdXyw60FOUt/sfm25WXMG
+YVzqvjqDVp8aLxW36afWMN6MutirY91b6v7EY1d/JsP8gf+PSO5Af9Ggfzk
v5pwk9ZwWctlTaS1kTN1U38kfnZ3kT3Q8idbauOKcAJyA2dVwWvWb/Ew9xy7
p9Scz9xPG6wtlhN2P6WcsNyw9TzWq57dPp9hLV51Y5uPW8NpLef/ATOUdUM=

         "]], Polygon3DBox[CompressedData["
1:eJwt1nmQz3Ucx/Evll12nTkGGWmXqSmkRTOxWbRlnNkci3XtOnfd7LqFcqzc
cpSjmhEzJqZJhyIU4yhRUYj6g5pxjaSxUo4en347s6+d7+v5fb3fn8/38/18
P7sNcsZmjikdRdF4KkudykfRE3FRdLVcFA0GiuOjqDd2ChtMHUtFUXxCFM2n
YoWT5HJpvswi2uR6I7XU62G1J6iuPgWUpbaeuky5g3p1p/pyu2Wq4i+5v0Zt
Ddm9WANq5f56bAMVqUuWm+7+o3yq8Vfzu+TisA36vS+fz4+U/ZdfTmux/tgI
7A6/hJZhfbB87D6/mjZhOfrlYXf5FbQOy8bmYR2MmUcHjNsB2xEf67NYbqfx
22MfYhuxVVhb7CL/mtoX1Y2kfWrT5T7A18gtk2sld4FfSJ/xz5KfqFj+Y2yz
67XAEbl+aouwz/nWcbF3dltujDGSmJ3YaWyGTA52mZ9OQ7HW2DDsBj+XJmId
scHY73wh9ceaY0Oxa/wsysfaYkOwq/xMysPaYbnYFX4GDcPSsNFYvLlsww6G
vRXW2by/835/xs9SHj9K7kFYY9oilyu3iHbzz5HHiv72a6DcRX4S9cNSZaZi
U/SZSr2xJtgs7C2+oZpnrPPz2FYqVvcRPkmuV3xsHcJ6XMKT8XHqFmC7+Kp8
Gfdu6TEHD5N4ktL1myBTGTsMl8aWUxV+YZiL66nU2TMmerajsrX0Wlcutq+r
YYXYcbUVwndFs9XNpephz9MZ92bKjMdSwn6meWozsHX0rfkNwerIJfIZYe+a
7Dm1w/EpfCH1dl0eSzTnyXLTwxyxIhqgtgU2DZvNLwrrYoyW2CvYZv698L3K
dY6P7Y+wT/4w9kp8hsy72F/8tvB8atM8Wyq+xZjbQ0b+ab5r+dh7De/3T/e6
8S1ov5pjcmlhbH6OfuflKvHZNBmbQI+53kIr5LvI9Md+CfuRuso3xAZgv/Kj
qBvWCBuE/cYXUHaYC1aAddPrGl3Srwz/Mn0jk0WN5BLk3qGbJft+FJbJ95I7
EXpRUywJ64kdD/uRmmAVsXvWYbzeC4xRj8bKxIV97rq+53/K+1jJ16WJ2CNY
M2wVP1d9sus6WG16Nawddkv/OSXfak++B36M70ON5Zeq3RnGjoudQ+E8Gsg3
x9cYYyLWN7xz/hNK13sevkftKf4kDceaUoa5l+IL6IbMRrXb1RbyfY17Ouw/
aoPVNMYCrEBd5bB/9dsq1wf7SSY3fMNy1eVWJMSePaxBfvi++Cy5H2VyKE2u
hlybcDbZz2fkrshNkPsUL1U2dp6Gc3Uof50yscvhfDXncXL91J6TGUmd5VJk
NtBJvhc1xKrxb9MFfgR1wprx2WrPhzONumDJ4Wymo+EMp5pYPP+4ccYYbzTW
IJxj2BLax79AFeTumvti7Au+HSmJ/sFex/bw6eQyulMudj6FcyrF9Zv6zTSP
4XRbpogWymXJrKWv+fZUq2SfrqYj4V1QjXBM8W/Q4bCeVD38PQ9rTwfC90KV
ouj/wTfRWX4gpUK1w/cc9rk53KTrnnGyia/HfpDpSSlyVfnaYY/LDMKaY3X4
NiGrZgfeOOy5cA7Lfi/TI5yxclX4VXQo/L2jh7A4fint5ztQInbPWizDvgz/
a1ASdj+ctdhX4d1SRewBlpQQO2+nua5p3EMy3Y29VyajZK3C2v8HHG0O3w==

         "]]}]}, {}, {}, {}, {}}, {
     {GrayLevel[0], Line3DBox[CompressedData["
1:eJwl0ktLVWEUxvF11OyUqYmXyFBRFNM0CaFEVEQiIiUzIUSRKBEqUGmmX0Cl
URPzExSNTZ050qmTLl6O3REEEZoEiSj0Owh77//zPGut9z37Pbvy6cTD8URE
vHWnMiPSehBbiL/ZERf5jLMRFZiL17EY27Eae7AZh7ALX2AfTuEAzuIwzuMI
vsNnuIQvcQ1fJSOKMiIO7fuJ38YufiEr4jN/id72W47kX/h1vCxLyY7pDVkh
XSrbpD+Y20rPycrSs/Q+fVVewfebScmO6Ur3onyHX8KvuIzfsA5r1B/p/84n
8Ip1amUD9A9ZGV/H/6TL6Wv0idovfgPr+Wnv+ZEvoCfpVfqAPnLGyXMRHfoW
Zb9lu7I/maf/xxO9b3AIZ7DbOb1Xr1af5Ff0z/F7fK+e57Kbsk56kL6B3Tiq
p4puo8f0llinX1ZMN8q28LWsyWw5/09vq/qOPJ/fxAa1B84jj7+PudiDF/Ae
5uBdPI930GvFbUymvwu0ZHSiI4oOPINt6IpWD1tEC9omHiveSpx+j/8BOttJ
xQ==
       "]]}, {
      Line3DBox[{1780, 1977, 1207, 1779, 1978, 2443, 1927, 1781, 2444, 1928, 
       1782, 2445, 1929, 1783, 2446, 1930, 1784, 2447, 1931, 1785, 2448, 1932,
        1786, 2385, 2474, 1787, 2449, 1933, 1788, 2450, 1934, 1789, 2451, 
       1935, 1790, 2452, 1936, 1791, 2453, 1937, 1792, 2520, 2038, 2379, 1938,
        2039}], 
      Line3DBox[{1794, 1979, 2386, 2513, 1793, 1980, 1221, 1795, 2454, 1939, 
       1796, 2455, 1940, 1797, 2456, 1941, 1798, 2457, 1942, 1799, 2458, 1943,
        1800, 2387, 2475, 1801, 2040, 2190, 2388, 2521, 1802, 2042, 2191, 
       2549, 1944, 1803, 2044, 2045, 1945, 2372, 2373, 2424, 2459, 2046, 2277,
        2278, 2208, 2323, 2564, 2047, 2048, 2279, 2280, 2209, 2552, 2259, 
       2049, 2050, 2281, 2380, 2282, 2192}], 
      Line3DBox[{1805, 2389, 2476, 1804, 2390, 2477, 1806, 1232, 1807, 2460, 
       1946, 1808, 2461, 1947, 1809, 2462, 1948, 1810, 2524, 2051, 2193, 1949,
        1811, 2054, 2055, 2391, 2526, 2374, 2375, 2041, 2057, 2283, 2522, 
       2284, 2210, 2258, 2043, 2059, 2440, 2523, 2286, 2211, 2228, 1981, 2062,
        2288, 2326, 2289, 2061, 2327, 2328, 2565, 1982, 2065, 2291, 2329, 
       2292, 2064, 2330, 2331, 1983, 2068, 2294, 2333, 2295, 2067, 1690, 2334,
        1984, 2071, 2297, 2336, 2298, 2070}], Line3DBox[CompressedData["
1:eJwVzU1KQnEYRvE3uOVNhCD8LMuulNJOGjloVA1bQK0jhy7AdlBOXECWfdeg
Jk6iFUgQBEGD/Dk4nPO898I/Oz7dP1mIiA5KuYiD5YgLFPUhX6Ksj3iAip4k
EVU+t/tcw6eupRFrc+wPO9E9LGLd7QqpHnHm+1I+ost1u8hNXOu8f254257q
DV3SOxjrgtst/9stfNmb9pDb9p1e0fe8Z3/rhq7rXeS8+2Cvuj/yD29xw7c3
PM3fc3vmX874zP0dL7rq9sp/3OQZPTck7A==
       "]], 
      Line3DBox[{1828, 2395, 2481, 1827, 2396, 2482, 1829, 2397, 2483, 1830, 
       2398, 2484, 1831, 1405, 2085, 1832, 2528, 2075, 2195, 2076, 1833, 2516,
        1999, 2077, 2000, 2377, 2346, 1834, 2339, 2347, 2001, 2078, 2002, 
       2260, 2230, 2530, 1835, 2231, 2348, 2003, 2079, 2004, 2560, 2300, 1836,
        2344, 2005, 2080, 2485, 2415, 2301, 1837, 2006, 2081, 2007, 1838, 
       2425, 2550, 2196, 2082, 1839, 2529, 2083, 2197, 2084, 1840, 2464, 1951,
        1841}], 
      Line3DBox[{1843, 2399, 2486, 1842, 2400, 2487, 1844, 2401, 2488, 1845, 
       2427, 2489, 2092, 1846, 2426, 2551, 2198, 2086, 1847, 1310, 2087, 2008,
        1848, 2554, 629, 2088, 630, 1849, 631, 2089, 2009, 2533, 1850, 2010, 
       2090, 1314, 1851, 2011, 2091, 2490, 2416, 1852, 2402, 2491, 1853, 2403,
        2492, 1854, 1427, 2098, 1855, 2535, 2100, 2101, 1856}], 
      Line3DBox[{106, 1149, 107, 1150, 108, 1151, 109, 1437, 390, 110, 1439, 
       392, 111, 1441, 394, 112, 1442, 396, 113, 1152, 114, 1153, 115, 1154, 
       116, 399, 117, 1447, 402, 118, 909, 404, 796, 119, 1640, 702, 406, 798,
        120}], Line3DBox[{1858, 2404, 2493, 1857, 2405, 2494, 1859, 2103, 
       2495, 2429, 1860, 2430, 2496, 2104, 1861, 2417, 2531, 2093, 2012, 1862,
        2232, 2532, 2233, 2094, 2013, 1863, 1603, 2234, 2095, 2014, 1864, 
       2015, 2096, 1319, 1865, 2097, 2199, 2497, 2428, 1866, 2406, 2498, 1867,
        2105, 2499, 2106, 1868, 2431, 2500, 2107, 1869, 2418, 2534, 2099, 
       2350, 2349, 1870, 1700, 2351, 2102, 2303, 2302, 1871}], 
      Line3DBox[{1873, 1265, 1872, 2465, 1952, 1874, 2108, 2366, 2570, 1953, 
       2109, 2354, 2355, 2466, 2110, 2352, 1954, 2353, 2235, 2555, 2436, 2112,
        2216, 1955, 2111, 2419, 2467, 2114, 1956, 2113, 1327, 2200, 1957, 
       1875, 1268, 1876, 2468, 1958, 1877, 2116, 2117, 2536, 1959, 1878, 2016,
        2119, 2217, 1960, 2118, 2236, 2262, 2557, 2437, 2120, 2218, 2304, 
       1961, 2261, 2237, 2263, 2238, 2122, 2219, 2365, 1962, 2121, 1611, 2239,
        2124, 2220, 1963, 2123}], 
      Line3DBox[{1880, 2407, 2501, 1879, 2125, 1272, 2201, 2126, 2212, 2568, 
       918, 1042, 919, 1708, 921, 600, 1043, 920, 2469, 2128, 1964, 2127, 
       1335, 2130, 1965, 2129, 2537, 2115, 1966, 1881, 2408, 2502, 1882, 2131,
        2133, 1274, 2132, 2017, 2135, 2553, 601, 2134, 649, 718, 602, 714, 
       652, 2470, 2137, 603, 2136, 923, 2202, 1967, 2138, 2538, 2018, 1968, 
       1883}], Line3DBox[{1885, 2409, 2503, 1884, 2140, 2410, 2539, 2203, 
       2264, 2141, 2213, 1710, 2356, 2142, 2357, 2420, 2569, 2359, 2221, 2222,
        2143, 2358, 1343, 2145, 1969, 2144, 2540, 2019, 1970, 1886, 2471, 
       1971, 1887, 2146, 2411, 2541, 2147, 2020, 2149, 2223, 2517, 2224, 2148,
        2240, 2021, 2267, 1591, 2265, 2225, 2150, 2241, 2266, 2022, 2152, 
       2226, 2227, 2151, 1349, 2204, 1972, 2153, 2542, 2139, 1973, 1888, 2543,
        2154, 2155, 1974, 1889}], 
      Line3DBox[{1891, 2412, 2504, 1890, 465, 1500, 466, 280, 1501, 467}], 
      Line3DBox[CompressedData["
1:eJwVzTlSQkEUheELMjlswl0gCWpoFThEFKEJivAQLK1yMSzAHRgrboHIMUIU
HEhMDPhe8Nd/7unb3ZvHvaMkExE1nBQj6qsR+9hYi2iZD+R+KaLKA17X1+Rt
7CCDib0y1/MRWd7FCi7Tc/t7/G5ni095bu/CW235RnfLZ1ikd/RX6Jin6Mgf
/MyNQkTOzp38gk/9I8/4X38v53nEc12XD/3VlRN5iB4S85/+Op3lsTtffG7+
5oq5gCKa/nzV/+if+Jff+AEl50uYVytI
       "]], 
      Line3DBox[{1905, 2413, 2505, 1904, 2171, 2214, 1672}], 
      Line3DBox[{1912, 831, 953, 686, 1676, 842, 684, 747, 683, 840, 839, 
       2170, 2547, 2422, 1911, 2180, 2508, 2179, 1910, 2432, 2507, 2206, 2168,
        1909, 948, 1053, 682, 838, 1675, 680, 743, 679, 837, 836, 2167, 2035, 
       2519, 1908, 2175, 1539, 1907, 2173, 2506, 2433, 1906, 2034, 2164, 2562,
        835, 1014, 834, 1729, 946, 833, 1013, 832}], Line3DBox[CompressedData["
1:eJwVz8tNQmEQBtAxJioPUenAOmTn3oUdSAGwNCCCguCTUAJLOlHeYgtoCbAl
nn9xMvPNzL2597xcva7sRcQVvcOIl6OIIfmDiK6czURckuPZ/IdfVjzZL9WM
3bfaS/QbSizkjpszfZGuvJXbdOQVfbNH+Ta9g7Y8Z8aD+Y3vmKYbJqwZ07L7
VL/SHReenbltmn/Iy/Qu7uWFWqGh39C0389GnJqdcGdWUAeeb9gd6/PUzf/k
Xfp3Rvp3aune7av+jX+dzy1Y
       "]], 
      Line3DBox[{484, 937, 287, 1512, 482, 481, 2545, 1894, 462, 1509, 479, 
       286, 477, 1508, 285, 734, 475, 733, 284, 473, 1507, 283, 472, 471, 
       2544, 1893, 1975, 2472, 1892, 282, 1503, 469, 281, 1352, 281}]}, {
      Line3DBox[{1080, 1297, 1208, 2443, 1081, 1299, 1221, 1106, 2477, 1231, 
       1116, 2479, 1238, 1123, 2482, 1244, 1130, 2487, 1252, 1141, 2494, 1260,
        1150, 1266, 2465, 1156, 1465, 1575, 1272, 1162, 1481, 1577, 2539, 
       1276, 1169, 1499, 1500, 1280, 1177, 1752, 1514, 2571, 1773, 1723, 1724,
        1186, 1672, 1532, 1533, 1730, 1731, 1195, 2558, 1653, 1551, 1552, 
       1677, 1769, 1678, 1753}], 
      Line3DBox[{1082, 1209, 2444, 1083, 1222, 2454, 1107, 1232, 1117, 2480, 
       1239, 1124, 2483, 1245, 1131, 2488, 1253, 1142, 2495, 1433, 1572, 1261,
        1151, 1449, 1450, 1267, 2570, 1157, 1751, 1774, 1466, 1772, 1704, 
       2568, 1705, 1163, 1645, 1482, 1483, 1710, 1711, 1170, 1620, 1350, 1501,
        1715, 1764, 1716, 1178, 1668, 1718, 1358, 1515, 1725, 1728, 1726, 
       1187, 1673, 1729, 1363, 1534, 1732, 1735, 1733, 1196, 1679, 1736, 1369,
        1553, 1681, 1746, 1682, 1754}], Line3DBox[CompressedData["
1:eJwVzD1LggEUBeBrZaBj/YKGhhpr1bkmk7CloCFoixobo0EoQXATTBeHgkqQ
KMJEaqolAjcnKaIt6CfY8w4P55z7fizsHW0epiKiQG4m4olqJiIv36jrJTmk
qe/KEfvc22N5QE8/S0ecc2y/2A19cTbiQrZY4oZlvtzb3rmUHftEXrGi91nl
1r5moJ8m75HT38mTyUbcuXX5sLfkN2v6mHUe7Qc+9bL8IeW7DfuXIs9uf7Ii
pzwr6ZPkf7wmN2pMe7btNqfvyKGc5x/9TSzd
       "]], 
      Line3DBox[{1086, 1211, 2446, 1087, 1224, 2456, 1109, 1234, 2461, 1119, 
       1241, 2463, 1126, 1405, 1406, 1571, 2551, 1408, 1418, 1409, 1420, 2531,
        1316, 1436, 1317, 1760, 1698, 1439, 1661, 1699, 1323, 1452, 1324, 
       1641, 1607, 2555, 1455, 1613, 1762, 1332, 1468, 1333, 2469, 1707, 1471,
        1666, 1342, 1485, 1343, 1713, 1488, 1353, 1503, 1354, 1179, 1517, 
       1579, 1518, 1188, 2506, 1536, 1580, 1537, 1197, 2509, 1292, 1203}], 
      Line3DBox[{1088, 1212, 2447, 1089, 1225, 2457, 1110, 1235, 2462, 1120, 
       1393, 2527, 1394, 1568, 1395, 2528, 1407, 1396, 1411, 1310, 1419, 1311,
        1422, 2532, 632, 1438, 633, 1441, 638, 1454, 1325, 2467, 1457, 1334, 
       1470, 1335, 1473, 1344, 1487, 2540, 1345, 1171, 1281, 2472, 1180, 1284,
        2473, 1189, 1539, 1540, 1198, 2510, 1556, 1557, 1559}], 
      Line3DBox[{1090, 1213, 2448, 1091, 1226, 2458, 1111, 1386, 2524, 1387, 
       1567, 1388, 2525, 1389, 1397, 1307, 2516, 1410, 1308, 1412, 1601, 2554,
        1602, 1421, 1312, 1423, 1603, 1604, 1440, 1318, 1442, 1326, 1456, 
       1327, 1574, 1458, 1472, 2537, 1459, 1164, 1277, 2471, 1172, 1505, 2544,
        1506, 1181, 1520, 2546, 1521, 1522, 1366, 2519, 1541, 1738, 1737, 
       1542, 1739, 1740, 1558, 1748, 1747, 1770}], 
      Line3DBox[{8, 1786, 23, 1800, 38, 1811, 53, 1819, 343, 68, 1834, 363, 
       83, 1849, 377, 98, 1864, 395, 113, 1875, 128, 1881, 143, 1887, 158, 
       472, 173, 1900, 493, 188, 837, 516, 752, 203, 1919, 850, 542, 763, 
       218}], Line3DBox[{1092, 2474, 1214, 1093, 2475, 1227, 1112, 1390, 1758,
        2526, 1236, 1121, 1693, 1694, 2566, 1398, 1659, 1242, 1127, 1599, 
       2530, 1600, 1413, 1588, 1247, 1133, 1313, 2533, 1424, 1254, 1144, 1319,
        1443, 1262, 1152, 1268, 1158, 2502, 1273, 1165, 1489, 1490, 2541, 
       1278, 1173, 1355, 1507, 1593, 1282, 1182, 1623, 1670, 1624, 1523, 1596,
        1649, 1285, 1190, 1629, 1675, 1630, 1543, 1597, 1766, 1288, 1199, 
       1633, 1634, 1560, 1598, 1293, 1204}], 
      Line3DBox[{1094, 1215, 2449, 1095, 1378, 2521, 1228, 1113, 1379, 1584, 
       2522, 779, 991, 780, 2340, 886, 587, 997, 794, 2560, 1414, 1248, 1134, 
       1314, 1425, 1255, 1145, 2497, 1426, 1263, 1153, 1269, 2468, 1159, 1474,
        1475, 1274, 1166, 1346, 1491, 2517, 605, 1174, 665, 733, 609, 818, 
       673, 2556, 1524, 613, 1191, 948, 1544, 1289, 1200, 2511, 1372, 1294, 
       1205}], 
      Line3DBox[{1096, 1216, 2450, 1097, 1380, 1229, 2549, 1114, 1637, 1381, 
       1585, 2523, 1656, 1657, 1749, 1658, 1302, 2559, 1695, 1586, 1587, 1750,
        1660, 2485, 1309, 1415, 1249, 1135, 2490, 1315, 1256, 1146, 2498, 
       1264, 1154, 1460, 1270, 2536, 1160, 1336, 1476, 1589, 2553, 1590, 1664,
        1618, 1347, 1646, 1591, 1647, 1592, 1667, 1622, 1648, 1356, 1508, 
       1594, 1595, 1183, 1361, 1525, 1286, 1192, 2507, 1526, 1290, 1201, 2512,
        1561, 1562, 1295, 1206}], 
      Line3DBox[{1098, 1217, 2451, 1099, 319, 2045, 320, 230, 2062, 334, 2063,
        237, 352, 2081, 245, 1136, 2491, 1257, 1147, 2499, 398, 399, 261, 
       2119, 419, 269, 718, 441, 719, 278, 2152, 460, 286, 573, 2205, 480, 
       1193, 2508, 522, 524, 2181, 308, 979, 549}], Line3DBox[CompressedData["

1:eJwVzj1LgmEYQOE7yELnJKHJtanGmhUcSqGGWnLIqLBQBOkD+heJBS0FVr+g
pqaoUSepodaW1sQiCLocDufcz9f7ZjfrK7WxiChiaTziEa1kxDJvJyLeJiJ2
+MLau97VpzzFZ5xIRaR1W9f5nKd50vqVzuhLzmLojSPzMRrefzB/8gmedMf6
NW4xhzvMo+puAX/O3JuLeg8Lep8X+cZeST/rVc5xH3nMml/4A6+j//G9b/7B
L77cXeOkc+vc4y5SGNircBMb9g64zIe8hRn8A0KyKv8=
       "]], 
      Line3DBox[{1102, 1219, 2453, 1103, 1385, 1582, 2564, 860, 1025, 861, 
       871, 2331, 870, 1032, 876, 2514, 1399, 1305, 1570, 1403, 2529, 1404, 
       1138, 1427, 1428, 1429, 2534, 1320, 1446, 908, 909, 640, 705, 642, 
       2263, 711, 653, 924, 923, 1576, 1479, 1493, 2542, 1480, 1175, 1510, 
       2545, 1511, 1513, 1362, 2518, 1529, 950, 951, 683, 757, 685, 760, 2275,
        695, 981, 980, 1565}], Line3DBox[CompressedData["
1:eJwVzL1KgmEYgOEnqCCqE5AQOgDpAJoL+kNrSwOtoZxScnNobQla7L+hQcEz
qDwA14QWCyJoMXTQUWjpari4n+993u9dPCjtHE9ERJrMZERhKqI7E7Gvg+mI
ISOWOGJsd6if1Lik7O6d3vLFPQ+8uVu1S1D09jePzip65axnvtYb6u43aJpX
dYUia5yyzpPdpm7wbM7oNm1z31vLeuHtrg59v+sHW/zw8v8fLXY5I8uv3Z6e
kKNCnnMKzNKhxysp5lhgniR/QgsuyA==
       "]], 
      Line3DBox[{1202, 1291, 1768, 1550, 1194, 1287, 2505, 1185, 1283, 1778, 
       2572, 1777, 1176, 1279, 2504, 1168, 1275, 2503, 1161, 1271, 2501, 1155,
        1265, 1149, 1259, 2493, 1140, 1251, 2486, 1129, 1243, 2481, 1122, 
       1237, 2478, 1115, 1230, 2476, 1105, 1220, 2513, 1298, 1079, 1207, 1296,
        1375}]}, {}, {}}},
   VertexNormals->CompressedData["
1:eJxEXHc41e3/TykaGppSJOtpl0pDeStSqWgRWdGSVGgQkSSUSlHJiIxQyN5y
29nZe5y9OI6Kkoaf33Wdt+/zz+c65zifc3/e92veXdcjZ3nt+PnJkyZNmjVj
0qQp49fgar9YXZmn+Xjd+W9s/D8ByBe5Pd529kn+brEix7Rp1eTb/scp23cI
4ECbxqHTTj75Zkm2VOctHcQp1IhWt4kPKnJPpEX/eOdn7dn1qaKHSigfC14E
+vBgsYVCY+8lz/yKLAXzuWeYJMe6/uqpOjZskAjiLp7hke/z7PLpx3Q22fvG
bnGADhOaXB/a6g7fy39hmMq/m8Ql0S3KAR4L6OCVc1r+/Vq3/Ovir6Vv/+OR
fWHSUww3UMHdNs1e9ahL/myJEAX/oT6ybePHGDHFXqBXTnkaluOUH/Yj/7FB
Qj/5wA0slL7QBbPdpHYwPBzzM3bIbYjcySfDnJVu4hIdsEP5zk+Z0Fv5Xz87
zQ6M5ZNNK3+u6RBrgwva7rIXRm7kfy0MP/B0jE9m3333unx/C3RNZ0je9r6e
v7R0cL7BvgHSZ6e9qbegCc77KeYd2mefP3SmT22B6wBhXfZYf+9SI+Acca44
z+o9Yt9eG1YRvDaqbjqqdG8Atuqzfno+ryCvPKzlPJ+3k+Vm35QvhvfD70Kf
/GnwmXwU5xzSukYl9Ufv7DumwoObj66apLeXkJqPkgZp7QzyV+f5AuN0Nly3
kj0liCgi74/vGnp/iE28dWwL99gyQd4h9WVmcgHRGLCf7DeDS9q0k1LXOtMh
Vu2yhfnsfOJ2eNbv54d5RMZYZLCnhQrBG07HlmzLJYF/K5cUb+sjPcrVxySd
KaCzR2/EqjqLnAg+7DDE7CNyqkPlVTk9IP+tyuJPdgYx3X645rZVP/GafXia
DqcLvohqXM4dTCODl4/9GavsJ1n3ThTpXu2E5DWyslFnUwlD/cK1Gwv5ZKfI
3Fkd0AHHbLPFV4mnkIrhsxyNI3winnl9suB4OwyExomUNCeRoxe+b1t4i0+6
ZI+nrn7bBohLxCniE+eIc8V5/o0fchtlthK8eq8QH3uxtg98vf3o0anN5EXn
6r952hTy9D/7EJkTXLhdtDdOw7qR7BNtMtKwphOfGPc3S++zQUlhVF9kfz1R
8SlVL3zNJEaORS19v5jw9ULxzMWklsTVd30+OodNphR3XJxUx4AxGn9ynlUV
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
rs47WrypnKyqeN5p7dxLtu4Pqdup0gdXLszeHlbola93sm72izg6eSlv5fJs
Nxdquhxn/VhSRkzuOFpf3jCuq5wNzYsmc8Fm5lGTkScP8u1dY5Z+NGIRxSkr
fqWwWKAW29NFn1lC/rEPmJPxfrewd+5GGToLntSofg31vp9fecF/3lVjDlF9
sPuKWCEDisKsf8WuKiKnBleJniZsErZ0MNz5BwNeBCR4uH+6l//7hOt+mS4u
8RqUOryrnQa/P87zvDjuI+eu+WWc3jK+z5f3nP2ynw5zOMMny1Nc8mk7FMyV
W/vIb72DY4VPeoHZLyiP8c8lx7vPL7eS7iPHHopP2xgz3gvaNzx5ZuGc7zXw
YnWhWz85J9KR4rS4G9iuFfuOW2UT3TuX3/jn9pF1XFfBd51eeOQ8y1Xn9O38
1zfjOxaI8cmB0yO5xYIO0DqdJZd8L5NUGS8hd7b3k6vbzZ6qve6GQX2TunN+
Dvn6R0t/Z9vzybqHSwssZ7bDogeCpO7mdLK9yoV7IaifqLo5tX1f0wVXZr6Z
7zPpVv6X2Ye4vyr4RHRS0uKrZ1phklfx26UmaSRP7EHlMXY/CfuuY7r3bwe0
129UzAu5ka8WdKP21rwBMlUsOvgcqxk8mgN8WLNSiZLO8pNB8nyiq735bbVo
B8QNfDXuMrueP6g77w/l8ABZTFf6EfuiCQajmO+s09qJiW3SIRGbMqKs5pWR
VtwPzIgNjf+dayOxe10Grm5oJsnb93lGhvXB668Kc8dethDnL3Z3qiy7iRrz
4+jDRTzQNO79uOd1E/la16vtR6ESNSlB3qpbHAgXjFT4hDeQ7cXxEq81GERy
7wGl7cMsuJ2v1dlbW0cijGzuvB9hEg01hykfk5kQPI91ar1+LQlR97X0Xscm
d+xNzJZkMcDh5bn8v63lJH5PS6uhNYcUZq8okMulg4OXxBy5/z8/8lke2/yC
Q859eFrsmkoHFbGx9e9OlJC2rYcUZ9txSIW/8pYpUxlQNuQoa/GASkYf/9SP
OVNCZkoP6X46yIPDIwd2vgqmkAUyIh+nqTWS8D3pOnbBXHBY6Xlz8ocesuXr
710rXnWQ9Ic7P23P5wDda2rvjrJOMqf/77sncygk8UK7YMZXNqSu19NSqmsj
f08vuHXmB5Vkc6PyEs+z4ZfIhv+MOc2k2bkx7cw8OhnOmdGgBWw47pO+umdT
JbE0cSzUXUUlNdKntv3bzAPnoiVGZt8YZGDQTNxkXxHZdumcUUwhGxa5ZgU4
19GJ70lZf/bmerK68bvh1BA2+H+oq3+2mkZO396x50hQK/ndH7XN6gkbEsUm
fdi/lkKut2hblI11ks9ODn9aqtmgaDTp2tKWTvLzDO3HHNke8vqwd3DBMw5c
89efu1zlMTwY9Jr2n1MI6FrFzp79RwDLEtaaeN+thykzV1uvT+kH85hY5S37
WmCVzVefzPNs8v39j7luJwqIzj+fsmn2TJi3N3HO8Tks8k52aiXrbS1p9L1j
rUkd92WVAfuOH3QyZSf0b8poIg0r6IfvFrMgcLOda9wyKvEV/5H36WUr2WNw
d5KZPgfevZ+6tpXdDMr/TljZHqTCjKvsutpADli5L4k5bNgOcpo/T0ttZIFY
LHn+RpMOjLQvQ4TSDpzEtg8FbA7UumXcjc3vgbxlIveOrW8H66wtx6ovje/3
jza/NE47TK26es1Ptg32bdFZ5GfVB1MCnRuePWsBxc3vD+7pawHp0VKf6Fn9
QHX8KCH/sgnMbCvmr0tuBoXLGofjb/TDuq9H985/3wi5U52T3BS5JNvLPGmL
+ifyUVvGT+46HebP65y//DWbeN5TOKSzv4r8NBv9dPs+A2i7LjFaexnkwoX8
NvrvenJ5f/zGZ57jvZ2m2l1ym0JGR/JTRlIaSFTvjhS9Si645L0ZuHyNAnef
nz/m7M8E4wgtf/nfFHCeGnTu8lEKHDPTqd9SwYbLnAV3WZmdsP1CedBz414w
N78zFiPDhTljkf6HNdtgyvFt67eWd0OI9MiGf6LjOEtWX0S3aAHdvq2+VXO7
4ITTFyPHZzy4/u+IbOL0FuBnbN69y4pHxvZcu/fnWA75fr1m6ctSKnzIWt6r
F8whn6blFsUZl5MzOar/R9d9h1P9/48fb4iWRCqRUZqiLbQeUSoatKOFjFIK
aSgaGiiVopJC9szKiniSvbL3Os4+HKMyQup33tfn9ei6fn2v/jrX9bo+1/uj
M17n9Tyvx+3+lExzZsDBCPbeFD6TVA9sbFZMEHyOG8M1VgywoTUkrr7qIANo
ln506QwWTJh5wsg2pBFupa5Qi3Kjw032s5/zl3Lg6PIdUrr9dfApoGw+cW2H
0fB7+V0SXHBc/HB2nlkdqNSmRK052ElWn84zE6pJJhLiu0vYRjSon0+/ukqd
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
jzkHPkpLVKkHNUGv354tn38LzhuT7674dLEdZKLPTg7a2Ay5q6J91wiu5+y+
G/yM0GuCeXLZnosmF5O5KYm/9Yw+k0n7113Q6e2Gxe59t405OUTcbUmy+aU0
kqFp9kXRpAfEx+RKit1sh5lXbaKDVdogPfb4McNiFgy8TB48yKPBVfVfb5Q/
scCO9n10/G4aJE5Xi51ysRGMf0/ZMqGHBwy1J1birxrhK7V/x92/9u/opY7f
+ev4rPNLxodOSoaUBRfnpGZFAssm+UREZQ8U2+boe0zMB/evl/fHBKfC1lfl
YSJ7euBmoE/JOn06bDz28v3H9nr4sjdkPE+aA0MHW2b4BtAhStXtKncCDUZS
i/efusn883fjvwP//pseCZ3+zk2wv2L5GDdNwffds8RcGXcGLA/bYpARKlhv
vVFZ2reIAfRZ6S0zV7NhM7WvRwK1r8dNal+PddTx4L+O2/fdH2praILQHLXX
g8tLwXmy6NhNbZ1QEGE83eQQDcjK3tzhN+VgaZBZI7KxA0QXW2+wSGYCXJj3
aZ1FI0Tfo+9svsP883rj64+vu/TMh3c61enQyngtNOcbE7Q+6NGuVLXBgXZy
7L8O1VG+3dP0lnwysPKyp6VCD1Q6BB1vfVNLxq/4sMA9v4WcsO9TD/jBA+ZZ
iU/X57UT2fxky5kHeYT1NHni8dZKmEbtAzJ0/n/7gOhT+4BIUcfH/LU/yKmo
JddP7GXBjIMFDjWcKsjb2CFb8oH153Nyj/rcJFCfF+kpLo/3qXOht9SjVvJ2
E7yK8R7aeq8NVkkujlxxlgdZW3hLWk2b4I7+vqUTfZvA7ZDke6tpTHiby398
5Qcd+uIXdvssp4HKuASv5g3VMG4g/Pq4/GownuXS+faB4Hr++201YQU62Sff
uuzJKIskAPfxbNkWIK+Me+RmMIjrhPVH5z5kk6Rfye1jIgXXA2UHWgIfNBLZ
X/3NNOdU0iZZOJV082EGtZ/IeGo/EQ9qP5FZ1HFh6vgz6njjpY3GvoL1QXPk
sDNveg1c6L/4iTe9HXyS5CyyCngQ+qFjm8P2GvhyYyg95GQbmDywvf5N47/9
RN+6ee5shxnns+W0LFsBcpwmil6mEX2hH3DtYSuZ1+/GelTKBrlMk+DbkXTC
O7N7ftBaLom2fFSxj18J42z/dz61o86vk6nz6hJqPxF/aj+RbdR+IrhPUiB1
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
v++7rtoFukPFqV+6UmFX0DMPe6FsCIuQFpYTfP/aD70odZrVQnpuCz1g+tPJ
Tz7PYtlzFqQfhcyIba3kVeOuhQE2XDKr+HzyU+lm+JT68fyqiTRSvVgkWkSe
R9Y3PMmK1a+DmRJL08ShCeq/nnQIyGiGe4cvn/w+nwflSZd7Hce0k1cym84G
rWSR6y0PStK4NAilaW6aHtNMetY6iby1SyePJrkz4SQfxKh1yhJqnWJGrVOq
VO7v8tOuJZcdzc60qtQQ0TeSGZ6C7+82xVhPA7d2uBImOcqqqIfX9MLaxYkc
MKKe9/PU68Cgnv/eVuHrx1jtpGNNiEeiLIs4ffFZ/VnwfhYdIycc7kYjIkfy
b3vNYRC1jhW2kv4MUP3lGPTW8BmJ7tWb2R3qQTy/Zp/UH+0BPxFLMLCqItec
70fL9NcQ+3FHR9g2fJgzaeCR5PYyYmzHPb74Ug6JXz+jT+lNN1zbr+vX7N1I
Rn+eWmE9Uk7ykqZrOdZ2Qs7nPKOaWVWwRyZof0VwNWjajenkZfChyXXcye9H
2uGw/RdfF1M6iOZ7+zr6MoBHvQ9GqPfFWer9kK5xdOnW3VyipFG51tW3mdBv
SR84odkK+O/Bfx/+u3LqzYYSrxWB4xGeu01RLgyRO48Cqrthx4DlmDD3HOIm
VKiQb8ghZWeCKy23smDaC8n1wykpZIF64fOELyzSE5F14fM6DlzwNMz8ZfiR
XDrKOtafxCMPZuq6VuXT4Yeoyo8ruzPBdVLogVPnvsCsHVOyA8q7Ydqv5Lcm
gyWgNnqvbPROJhwNTp62gdUNSbNCuHM4tSDzM6InopAGmZ/dlsmkcMH2pr2K
3xIvogUxRYNm/mSBD6fg548eaF/3tcc1ppxsuulxocGsltS5LbH+XMQXrFdb
OZeN6ST85ZjdG6flEtu+CxE/wwTfm2+KtVLXFYN8i+/VRaeLIX35oPUlp25I
2T/m/Tudt0RxxzjfwGgfIvStXPrCUA9EF3z0nfimmQTPUabv7GgkilE7Bxu3
8qD7sWm7UXImDAXcOBfKSoRq8/D8J296oGqtXqbRtiICJm3W+rKlZNmvOn+F
K90wWn3Ya/RSPrSIW0+YxiyEJO7YTWMKu2GWsopJUi+NiDs3Tng+sYUs3HA2
ltPL/uf1mIJ4sadpQBVZ3rZOu9SqnLh8rYkTOdgFTkqb2kNeR8PWfPFo2UcR
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
    "]],
  Axes->True,
  BoxRatios->{1, 1, 0.4},
  Method->{"RotationControl" -> "Globe"},
  PlotRange->
   NCache[{{0, Pi}, {0, Pi}, {-0.9999912420492627, 0.9999989963365273}}, {{
     0, 3.141592653589793}, {0, 3.141592653589793}, {-0.9999912420492627, 
     0.9999989963365273}}],
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02], 
    Scaled[0.02]}]], "Output",
 CellTags->"Cell 9.81"]
}, Open  ]],

Cell[TextData[{
 StyleBox["You can change the viewpoint of this plot by dragging on the plot \
with the mouse (try it with the above plot). You can zoom in or out using the \
mouse and holding down the option key. You can also change the viewpoint \
using a",
  FontWeight->"Plain"],
 " ",
 StyleBox["Show ",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 StyleBox["command, coupled with a ",
  FontWeight->"Plain"],
 StyleBox["ViewPoint",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 StyleBox[" option, as in",
  FontWeight->"Plain"]
}], "Text",
 FontWeight->"Bold",
 CellTags->"i:53"],

Cell[TextData[{
 "                  ",
 StyleBox["Show[plt, ViewPoint -> {0, 0, 3.000}]",
  FontFamily->"Courier",
  FontWeight->"Bold"]
}], "Text"],

Cell[TextData[{
 "(Try it!) The command ",
 StyleBox["ViewPoint->{0., 0., 3.}",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " moves the ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{"x", ",", "y", ",", "z"}], ")"}], TraditionalForm]]],
 " position of the viewpoint for the graph to the location ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{"0", ",", "0", ",", "3"}], ")"}], TraditionalForm]]],
 " in \"scaled coordinates\", i.e. a point on the z axis, directly above the \
surface (see ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " help for more information)."
}], "Text"],

Cell[TextData[{
 "Various other options can be added to surface plots. For example, the mesh \
used need not be the rectangular mesh shown above. The option ",
 StyleBox["MeshFunctions",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " allows one to choose an arbitrary mesh on the surface, as shown below.   \
The syntax ",
 StyleBox["Function[{x,y},f[x,y]]",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " is used here to define a \"pure function\" (a function without specific \
argument values)  whose contours determine the mesh. We will discuss pure \
functions in more detail later in the chapter, in Sec.  ",
 ButtonBox["9.11.3",
  BaseStyle->"Hyperlink",
  ButtonData->"c:63"],
 "."
}], "Text",
 CellChangeTimes->{{3.46056664286525*^9, 3.4605666584308558`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot3D", "[", 
  RowBox[{
   RowBox[{"Sin", "[", 
    RowBox[{"x", " ", "y"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "Pi"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"y", ",", "0", ",", "Pi"}], "}"}], ",", 
   RowBox[{"MeshFunctions", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Function", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"x", ",", "y"}], "}"}], ",", 
        RowBox[{"Sin", "[", 
         RowBox[{"x", " ", "y"}], "]"}]}], "]"}], ",", 
      RowBox[{"Function", "[", 
       RowBox[{"x", ",", 
        RowBox[{"x", "^", "2"}]}], "]"}]}], "}"}]}]}], "]"}]], "Input",
 ShowCellTags->"True",
 CellChangeTimes->{{3.446419486862262*^9, 3.446419721083068*^9}, {
   3.4464197621496553`*^9, 3.4464198062778883`*^9}, 3.446419860020577*^9, 
   3.4464201237920933`*^9},
 CellTags->"Cell 9.82"],

Cell[BoxData[
 Graphics3DBox[GraphicsComplex3DBox[CompressedData["
1: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
T0x1Biq/6uKSrTP37597iH2O8KXsu1OVPVxqZ6xOZO4d/DuNSNjVF6/py6D4
/CNtbx7U9serC2bEOv9k3zutn7nCYdWKLGJ87J/+mHgW/74u6NX+mlxCTg8t
/5dSSJyVGr5mBDbS64qlGQ/Y0VFI7cbc6hM6Ey0yiP8yaZvAQi7FXw1btP7k
pmyyQJz5/fQqK/8mx85ijX0+mdukMvF3FY/U3+v4+XF4O/sdH2UVxb/d7PcI
Lta+tMkMzCIyuzrnnDpQSPHWb3IfJYfnkilT2rTtgnnsezGKow0WPs4kw9c/
6dhhV0jxj0skDxftzybP8rX+8i6z8svSVK3Vi/+Q83b+ek2xfDqvTbZUPg0r
/0HGGYSOe59dSPF5753WKqz6Ra6HJRu3HORRPN+kTtZBL5c8evj9C2cvn87T
5RqqI3udfpK1H87Ov5LNI9nSKQdm9LHvhdsjbfi5oI99L5aZ+2OHR4qZRNN3
W82QPzyKz020Lhqo+Zt8+uU/vTqXT/Vf407XjhVvfhCPpnSX8mb2uekqiyFn
ND2zyBqjA9xpH/hU/2+ldQVXrfhJLIxNP7r48an9hT+EH8S8gF7Dn8KP0u/y
iPwpfa+cSN+h55gP9Hs4onmBc68HPwauWlFC/vQOjvWu49Jz/A4c8+LPx2nt
GYElRDn+aMrqvEISN/nT9MbSCir/QWfXmwVV7HuqpTTm771R+I8Mmb6jdXE1
i7tOOO+zcCmPrFiSOUOikEfKC6WC+wbX03bCQ2Z9Su3nE/NizqUlFX2Di8j8
Z3btrjksLlO675eqRin5W7wlbED/uIRnqU/V0Wim7TDWMVHv6/lU/6vu2utV
rSgmdxRWGgv5hz5P4PKYnoUFRE5y4M7AKvb7U2M8Xu6uKy4iG+f4jbP9I6D6
lit7zN1qTwF5Oetg52qugPpp8IS4BfEKcMQtGC/YFdgT2CPIwy7BHgGHXcJ9
YhzAP8aJ1mFE44XzOIURukajKsjhjLY3q6t59By/A8d4/a4fuE5qdgXpnu9U
b5fNJxe9DqZ0L2TflxNsXrVYyBvGxSXv3XWysZL46Ixd0x7CfvdkEn/CI9nP
ZUTGZE3x0S523nlbJtVfCaogls5Z897080z90TyrEr34cvJQfUJrW387CjNS
Pj3dyH7nKPru05zBEmy9srzG9/CeCZXkoF7Hkt3ipRSXPaPzZK4Fn9gW7pC8
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
HQP1C+CoY9DvPzpetNu2oYPYdmQEuvYKyJCdipu6xNi6SELsenmVUgEpU7jb
0mvTTPEPNps31Jaw+SbmDeYLcMwbzBdT95qnmffa2Xx0+aBOYT6CcymvXx/W
9XWRcrtBfXJnVtF1nFvzLhjdL+4kk9ZlTyaH2TqwW2dwxAlOv/05PDUpJS6D
/h+/ox38Hzjawf+Box3Mx8dSx1OW1XaR7scj9i/z59J5rbd6TOxgXic52rvn
u+b4DPb9h1s8H+sUdxB+vIdHuxSHY3RldrDB4T7afnRJ24WyN1xOWK3tQX3S
S/GCNXqjxJkMTqiZsWTp+B6KHzT/MXyNM4fOR2PtkOlzTnSTzks3Bv3KYL8L
Nmqp3oKU2V3EuDLw/KM9PIrPcIpOuqzSSRTSpf0ihxZSPE1Fw7xTtYPE3F+e
NLLfj0xquD7OIJl9X+5/UWoay6v5dN4Z33g8kPeng8h5t+pmxvI5tg5Mjz/D
fufROG2fXWOHgOO2YZblnx72vbXv85qdpzTwqD+i9k9Ub0edHTjq7aizA0e9
HXV24Ki3w09p90271b2wlyxaneIl3ccnqNNBHvU61OmAo16HOh1976yoXod4
Xd1xwGnHxz3E+677/q9NAlJ657RM5HH2/beZZsq3BJXs95TPHo29NtG0h+iv
6ZRb2cojD1TzyvdENlP5rTkpcwS/2Lol7D3sPHDYe9h54LD3sPPwQ/T9uiJ/
BD9Ev7Mq8kfwQ8Dhj+CHgMMfYVyh19Bn+l5jkV5Dn+l70UV6DX3GvEL7mF+Y
V8AxvzCv6HunRPML5wqr5sQr9Y/7qDE/ripVsd8da1VvOSk7oIdEnHtvP+lv
Iafy/fXLjU/62Pev6wosNuWx82jvc2urQb095OjDttZbGQKO/eKtBZuD2Oe4
FUboVDh0Cjg/nQuy5zmz3+WsdUot8+xkv8tZpT5k64rMHmIToloaH8znmMm6
mAZlsu8NS1ByHlKbxsZ1XgVn3Gdt7iEr3kV2aGmwePrlq7HyA3vJ1SxTy5bf
ORQP3bNOS+ZLLylScWmwyvpBcTHHH4+LLPrIpDU6ShylKIpfj2lrHi4mxvx3
bUhTRtIxcmLQkS2XtrPfD3X4a+M1uZbLGX7Hq9Wfx+Kqo38dMzycwek99ffg
qz1yFF88urzOtDeac7ElOjSYx+ILRngpmNlsof4OvGL9C+tewLH+hXUv4Fj/
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
gm6xH9gf7Av2A/uDfcH74P3wXngfvB/ey2mCjMWG26zdG2K5fPZWdpzZP56m
ewmZGet2WlENafqw/zjtIV9byJynRTrX9ucyiV+MnbTrpei/4ukOkya0kB1b
nu/81ZHGtD+2FKTflKaLZg8fnOrQRurn/TpyqELEhE0+PmPIHj69onXi35OD
rYQZ2va5wFLMWFwxjvzRxNr/UhsHlzu1kMYaxtrIQcSAnkBfoCvQE0dfPXQF
egJ9ga70Rj7PzCnm0QP+u1Mfq3cS//efMlyDRMyeq74/lG7z6NUbDs96Xeog
JhZbFt1wEjKd6aL1gmU8+m12XWB5QTvpPXz40YKvuYwgw3nGd3U5Osjr+7/i
AZ2kjjHe/ZwRM5Urc87PaJCnLu1H33g0dpCSUXPu9okXMtIXLF/5qwloqLVT
+eeTncTmiLKzbm4u4zR/6doDuwR0oFR9b80VneRE4dQmS34eg3OOc4/zjvPA
nY+ec4HzgPOBc4HzgPOBc4HzgPOBc4F1wTphfbAuWCesD9YF64T1eW1sd22h
A5+a5fznqVjDo6tsdk3K/ytiwJfBp8Gfwb/Az8DHwL/Az8DHwKfAt8CvwNfA
58DfQMega9Az6Bh0DXoGHYOuQc+gY9A16Dm+v83D8NfSFNdHQ70G6IeLmGem
dhHmV+Xp4v/mNgdMkKa2M/VDa0gaObXOd2xFkDwd6rB/84Id0lTWd93SrJAc
4m75a/C1Jnm66oON5p8H0nTQgStC7YNCMjmgclHUIgGNrH91eFCaNJ0WabNB
npUjDtuzRzRsFNBkoy/3v4Wz+NTYP5ntLL/qkWeQb5BrOG84fzh3OG84fzh3
2D/sJ/ax4I3teqP7sjTUrO+u2EgZevedQvDu7DQyK3PEDBrN2pmP3y/92Mna
AV2hf+6IcoiK4NiUgbJyVC5SepH9Ij7NjR55m7dYSO6O2zswd7UctcxrGLfB
jk93qvb5bsXqJ5C7kMOQv5C7kMOQv+C/4Mfgw+C/4Mfgw+C/4MfgwzjPON84
13hPvDfeF++J98b74j3x3nhfvCfeG+9rvty3QauPgOrwVsl9Zud/64G0vOIr
MYE+Af0CegX0BugR0B+gN0CPgP4A/QP6CPQQyBvIH8gd8C/wM/Ax8C/wM/Ax
8C/wM/Ax0D3OAegfdI9zAPoH3eMcgP5B9zgHoH/QPc4B6B/riHXFeqJvC+q7
u28JPPT+93Dub/wfeI7NvOnZ/9PHob/ZdSZkpyYx1j0+auMHdr3Mz6uf/eZB
kn+/X7R9QghLf4Eb2qUFdIXdMPe9Tp/JyzujD+nIJZL6q8z3KBsBNQh7MGCL
ymcyW297fnBMAkl/Nf7ub2UBLbw/bIXylhBisbGu/0wmjWh5lK/QCJCntXY2
Q/48jSCFcdt+Np2UfBeD79jw/RpwfMeG79eA4zs2fL82u+kyv+BNB3nh2vDp
6dAkot04ZezyplwSevTo5dvvuojH7VduZlWJROPVraE53d8DpgbOC5zRSV6X
Hy3yK0slmVff9nIpFZJ1atu+6Mp1EIWn/vVFFf9I1bMCY2uxiMTmHKOLznYS
R7fbCmGF+WT8kWP8Ex1isqJ+xNgV9zqJfrB32r3MfBJadE5vQKeYpJr6ambv
51GHeOnNZjsSieqsAaa14lxidWnS6btlPHro79MKectkwmjd/P6jQUh4ZtMP
KeRK0d1L8oKOycQTuXvJCjeEuaSIeVB+fpkUva4zKWaiQjI5HjrE8Hu+kMQq
/42dZcWj2/ar/v58IJM8nGOeVZkpIo5MhneVJ4965RjcidqdR6p1/3Zt+yUm
244lmP7kS9Mlx2vPdf2OI40eMVMedfd9aLeOKTknTV/d+cxf8iWJzJpSO3ZX
sZAUL2/y19ogQy+vviRztfwPCT1u99+wGCGxLZ3ZVvVCmhb3jv+zZGMa8Tb4
2fQ2XdJXcfGHlVP4fdLIFTN//cvZEnx2fvL9iOpsUvTaYM3xZjGxVh/kbDyC
5RvbR+UcnP+H5KQb9dNKFxLFM+qmfs58evUcIbxhKcRkz8/sp/Ui8sb8RLCf
jiy1Lusz78OyRLLj88VTsn+ExCbl+dtPX/m00i/gz4+GZLJXPHivYbmI61eU
1x6vduZ4JgmrvR+dEiYmuim7KuYGydIvjgMWR8cnkHuW4eFZaULiUK1QVTRX
jo4dd2+a7MO/pJ/dnyj/eBF54BLVy19Lns7S/vbmhH8c4cVqbN5TLiSZs7JO
7wuWowU1q/9+VP5LWlPPkawfIqK86Jv8/l5yNPE/g71uYelk5d73FjvbxFw/
TYf+diU/NqWTI46rlVxYu7hx1zjhtCR56nzJd6Pr4iQiiD1s/4jlA9va5wf9
GCag7Y7CJXavU8nbo5bjAyolfWYPxPdrmX41lXwkg0YpsvqGXZf7XNdpjSQ7
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
NJGpNx00WmMk929tU3xKSlvI6jDVxdPjhEylbvFlAys+dVE6591W3UhuxA0I
VXDLZRQGBnedmsanGc4zPZaaNJLXA3bHdT1IY7Rzijv6F8nQdXPtXx5JbSDL
p6/1NHRNYBqzeAN3bpClq941SyXKNpLL3ruMXsbkMtUzX7y5TPl0s3xgst2Y
ZmLH77dSqlBSlx51vFC/CzjqeKF+V/KfKXMLKvlcP2LTtivnBlYLmXqhl8vJ
fFkON/EvUJAXixjUC8O6oW4Y7BHUKSx2/eQRnSTBH3eJooI9m8iOS/yKrnQh
h1tuurZmq2IrydE5a3feV8yojvS64D5I0h+5eX5dfp8WMcevIoxy/TS7mohD
6vMla96LGejr0N+ht0Nfh/4OvR16OeQS9HPoH8Chh+Ccog8M+r9AnuF+yDX0
j+H6Afb0kcH5hZyEfITcghyD/ILcghyD/ILcghyD/ILcghyD/BpmduTu8nIe
/Rg5Zs+St61Ehxe3+HV2GjOt2i/F3J1Hk7I+Vjwc0Uqsdhion/NJYN5/Wv3X
axePphullvS53UI0OnJ+xkUyzE3/K6Oka6Qo+MN320Zefksagzq8XJ32nnq8
qMMLHPV4oc/cqk2t2O3RTlTu3pxi0yrk8Mqw2bVTL7aRj+vT6ZffkvsvOrcr
P67pIPuMxqm6ZErqSaI+JepSjg10Pu7ZKE2xLyez7al6rYhpmPlo54hOGQ73
lTddW5wvZlDvEvNE3Uuc63ORrkopd9pJweQbr96WSPDqg+tWmym1kVUm/f+m
lUrqdaMOFupfgW6XZ52Z8DSsgxTueLlJz0PM1UVBHR3UzwGOOjqon+PjW9ts
Eifg5l8Y+3JlFHsuUJcH80d9Hs6uXPlyTJFjGylU/nzR6ZWYw8/7tARHf2kn
W8wryvIbJPePL3gc8PF5B9k8wizh+2eJ3Hx06c8528OdxGrvuMQZwlwGfij4
peCPgr8J/if4neCfgr8KfqrgZ3q2xwrzSfHOrY39z3aS8vG/Rh9k7Wj4m+B/
gt8Jejz0d+jz0OOBQ5+HXs7ZDT32As41+jKhH5NhW1Sclk89N455gY3TGaGQ
jK7k/4gc28ThVtd2l22tTiNWfydtG9LQwOG6xCDWrziXoC8UVx++pz8U+kJx
9d57+kOBP0D/hd4LHPov9N7gi8dWDuzTyV21pinaz2Ll0ejs2qDZth0EV4f5
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
ciN791ffkb1o2b0NY5V/pJCrl96+WNchJp4+RsaBx2WpjnKq/7XwErK4cH2v
RHad2yPaN6VVyFHzl3cuj5kpIlpXA1Oz2PvH9lFav/SfHA240OqxepmInFL3
ThrdyuqZQ47k6rDrJu/xeP7aMaUke5D/PkOpQhIp8ClNCxfQxONeRuafRKTM
zWHIEbGILNVXO7BXV0CfegVue5FVRDrPvPHew9oFL4IsYjY6SdGcn5smfNSo
JD8neOWLusTkwLmBkzNPs/qScawg50AlkQ7/O1jM2o99C66f9zoloKp1ri3h
Uo1krY/GOXuWz4f2PV5jPoY9JwmyNkFKnWTw4U8zFFk93Kw6/dLsn6xe7fzn
2bIdHeS8vkO9RpTE3oG/DX42rZF3FfRYe0d/gaN2ynFpWvt1fbpTkYjkBrxQ
kVfoRauSnxs7hEvTdMOzJ2mymNi9muX1ngjoLWaGcGaTFD1+fl/Z9cZcYrdY
zeWorYDe0FdNqpwrTeWGPq2K/SMkOD84TzhHm5NerL3B7q+b5Zk9s0351HTT
dv50Vj9RC6oPEJyTo5d3JPz5ECtDb7g4dGaWCEnkobrYpyFydGiv+CLanx0n
dOvm8hgRCXpXkfp8jTw3/i2P3O1L2HVLTLO07ejTi461XnffbYcctT1x51O/
VCFRknIJUU4U0L3/WWX8HC1Ht1Ub7nsULCK2yoaTHS+x+lugOp2XxNLLySjn
uZ5iEjT4sdXqjHSyNn4b9aiXpSvatc4ns+NHDfO72/dsCXkQtXToYH9ZGq4u
0uOxeP3CwK6MhGaioe8oVeInS9XSL56Y2iJmTOv7n7bb10xMjc3yjQfJ0Vvi
Pldn5YsZ9BOqTvKbUOopS8fF1tlVZYsYizFrdOXPNJOT5RP/fu+QpesMzsw8
XCZm4n1vBwzTkKVGf1f55E+QoytUGrc9/ComPnXl+4d58SlVdN+d7yhLtYIf
8vt3CYne51l774r5tDClaOf2P7L0zc+Evm2sXhpbf2rHmD2yFONr+d/801TB
nruF/QWjF7L67vaIruJRAuqccelsY6iQrPqp/72tTY6m5vfzC8uXpwmvtm4w
iRIRow38Y3becrTy6PcDmg/l6dIOT5Xb/0nqA4PfgM+Av4DfgM/gfvAV8BPw
EfAV8BPwI/An8CXwBfAJ8AfwBfAJ8Ad56cuDmq4Vk4ibVaM/sfPP6F0w3YC1
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
46UbDSz7Rd2+g+0q2WEP7M//D4Qt22M=
   "], {{
     {EdgeForm[None], GraphicsGroup3DBox[{Polygon3DBox[CompressedData["
1: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
         "]], 
        Polygon3DBox[CompressedData["
1:eJxFnQOUNEnXrauru6qrujy2bdu2jXds255vbNu2bfsd27bN+zy98193rT6r
wxmZlRlxsM+JiTfeYZXty6VSaepaqTTA//V7pdI29VJpW2gE6SsqpdLl0D6D
pdK+0EC1VOqH7iV9H3Q4dBh0B23uhKZolUrfMU6d8Sai//+oOxS6jbrboadI
PwmNzhhjQEeTPgq6h7p7oUtJXwJ9Svoz6H+0ORTam/H2gY4ZTB/b3gc9RvpR
qEObLrRIp1S6gPx71P3bZu6kL4M+J/8FdAjpg6EbSd8EPT6YMezbgxag/0Hk
b6DuD/o/yEN5AHqeuhegt6j/qq9Umgoqca+TQxuSvpa5Tcj9HkT+Z/IjGWOD
LnNs0L+fZ8EYswyVSqNRvxD1x9J+dNpPxXWmhMaj/fiDebZl6J7BPOOTuN4l
XOo8fo/VGW9i+rxI/caMMSVj/cuY/0BjQ+NADzLnf7negVxvjF5+G38Dn72/
kc/+CWi0an6DXUnvAp1O3RnQlZX85v7W+0GLc/1H+N/2dyf9N9f4C3qP+bxf
z7P1N/O38hlf5m8I7UXZ3lClmnfGd+V+6EjoCOg62lxfyZz/5l6WKedeLi/G
sK/vXLWaMez7AHQF13yB9t9zj7818tvcD42s5jc6m/RZ0DWkr4VeZaxXoPma
pdL80H5cYyKudTO0Jb/BVrSdiOf7CXSYvy/jf8z4m1B/PuOvT5/xqNuAdmPz
/MeADqDdgdCY3ZDpg6CxSM9B+1loOy00PemPud5H0HnM/XxoT665BzQNddNC
J1F2IvQg130Iehl6CVqeNitAOzLODtCxjH+c7yC/wSLM7yTqHuf3XYkxxmJ+
y9JmiOsvyf8loK1ou3U16cWhLaspW5r0UtC2pLfzO+Za7zDeedzvMoxZZ4zt
Kd+hmvGWomxJ6C6e4d3QqJTtS91+vj+ku9DepPfx+yG9nWNDR5M/BlqV+Y3N
/FairEX9q7yfy5BvMuYk5PfhHf6Q67/A2BXuZw/oWeb0HLSn6wf/H6d+feZX
4ffop10Z6uOZlX0/7Af1uzb5nTP+LozfpWyRbsh0D1qUdM9vHRqH/LjQklz/
OMZvcp3FqR/dbwMaxXuFfuIefoQ+Y/6fQ/PT5lv+fwct0C3mApUGMyfb/gB9
OpA+p/J73cbYNeZ+O9ca4J6W5d6Xq+V+52OMbwYypmPPC309kDLrPuZ+Ni+l
zLoF6bcAdDjXPALanTGeqeeZ+ez2gc5gHme6XpM+kvKnub8NeH5V5jA2c1ia
/AWMcQ7jXUTZVXxL10Dv0PYE+h0PPUz6Eeht6BPaX0L/i2k7If2XIn8+/cd3
fOZ1BHQO93wudDu0VClr4oG0H5P2U5A/jTZjubfwPGYjfwr5cdxfGGcN2m4B
3UbZO/RxQ5ocOpHv5gzqF6NuPeZ3OumzoSXI30X9Wb5DjHEX/e6GJiW9G/93
hU5mHqdAI7jearR7hfs4i/QV1G1C/9EYbzGu9Vola4RrwwLNfHN+exfT/hJo
V2gXaEdop2LN+5T+S5ezFr5B39ehs3lm50A7cY3v3RoYY3LmswbP+D3avQ+t
SfoO+l9L/biMcSfptSg7hX6nQmt3cw/eyz3QZKQblO3EfewMNUnvPpB79N5O
hUbl+S7IWMdwvQmoX4W6lX0G1O0GjccYV1Xzmz/Gu3Q885isnGf8eiNjOvYu
1Xyfqw5kDPvuDrUp24P/e0Id0vsPZQ0dXjuhtXlm43I/a9NnNOpHkB+f/KnU
nUZ+XOgE+p7oXEifw3wX5dqH0H5M5nYR7ZZhbl/Sp1pLfvZS5ntxLXPup227
mXsZy/7UX0rZuOS75Od3/2VO4zP+TfxfhPrVKbvZ/aSWtGUX0+e2avKzFWOc
CJ0AXUb55dB5pM+FriN9PfQy15+ctjsPZP5+N85t9uKd9ntYk/xi5M9njsvy
Oy4DrcY7sTp0MemLoA9If1jske6VkzO3KaCxiv3P92ldfo+1a+Et5DHetg/X
/JP/f0EfkV6A9vNDv8ufFDyNYzrWlNBlzGc7+q7GfC5hPl9Q9jn0A21+hA7g
ndsfOlheCDqM9BO0P4Prj98IzyTvNBF9ruJd/qiY9wTkJxxK2nsZfyhls9L/
Iq8nE9kI7/IIyVtL4WH2ZryVqZ+O/F6kV22l/WKM8R/3cwv5u8m3/b1Iz8d4
V5Bek/FmbIQvnQpaiPYLy6/xzB+DXvK3qYbveZSxb4PGIH13K+uVa9nrvB/T
1DKGfReBduOZrE7bMSm7jOs/y5zGZ7w//bbJP8b/R6HToNPr+b4d22vIf/xL
/8kZ/03q3qP9h1zzA+gx5wZtwzV3p90e0La9lN1I3/f70vZg5vcL6Trpd+n/
A/nbyY8Ofc3Y/eSnM0/9x9RvwRhnca2zoS17IdPnQFuRrtFuEHqW6zwHHQ89
U6z32xR8ubyffPAV0Evc967WM6dPC75MPtM10LXw/oKvf61Y1x4o+DbTPos5
mN9u9N/Q76cZnt9rOPaVti348i+Z31fQZ7S/mPYt77+ZOnn3L+pp4z14LyOp
35G2W7uGD+YZ+iydm+/RK8U6LR/nu3UZNCfpyeSZ6XsuNDHjTOSzIr0/9z9Z
LXvDndAz3Ouz0JH83juw9g9R9wPPd6pW9oPbyX/XzdprH9s+B91G+a2OQ/pu
qET6Q/4xtdJctFud8Vah/+fkVyM9Ltc/mfzKXP9I3t81KVuN/BfUr0F6Fq63
E/lnGOdH11u+sTVK4S1+I78M9Sd6L9zr3+QvJb8++SVpc2Ez8tVG5Pdh7O+p
/wOq8Qzq0J/dyCHuve7BPddnrrk2+cXJX0D/xeh/NPl/a2m/CvUrkf+M+pVJ
HwxtQH5u8geRfoV2e5Hfg/sZVRkR+rgUnnkLZSPy90P3+i5B8zD+PrR/jbKf
5WfI7+dvT9vfyW/Ogzuznnfad/sX+R36fQP96vPgPlaBNrceWpP0Gr4LPI9t
oa19Z6DZGX8O13bXWmgr66B/fMeY22+0OZTxt/P9I/8EdZv2ss+63z6pLAqd
Vuy9pp+Gtm/le5UX3839m99nJ/IzK08yv3+gyWk/xWDyzs05eG3n6B7mXuae
cBn3vDvjPEh6et65uah7jvFXIP+N12Cuu/GMlyc/DfldST8xkDXOte0VaGWu
cUw93/STzGUK5vQq5ZuSn5qxNoce9vehTR91s3KNWXwHmMtG0CaUnUzdvco0
/jZcYznXGtczrn8JZeu537g/kt6T+hXJT0t+D9Jrcc2ZGW8txliP+o072d83
ZY6dXmQmZadRoC0pW461aFloZ97PXaCd5Yl8xj5raBpoavcTyiYcTFoZWNl3
gkIWtY9tlUn3hh5hPqNAIyifjvy00MSkJ4Emr+X7Pw+alDmOxT1tqaxQjrxt
n/WhvYqxTqbsJPdPyv6Anib9FPQE9CQ0L3Me4Ld6C/qa9DqMuXY9PLe891nc
75nQINepQZsyxibK2O6llaQ3VudRSdmKyjjK09BKpCdwX5HfYfyfGP8nnvG5
pbSx7eyUbcfcJ4YOZD6387xP4f+fjLk86en4Py00UyXv5DQ+Q2hO0nNVMjf5
QXUAznFm20KzUjcbNMtgykzPDq3Cb3oB7WdiXktx/XYv8qlyqr/vOfK2lfwu
6gqalO1K3W5Qi/SerextN1O3nt9vN7+3v+Fq3ZRZd4u/Qze8tbLPRfXw2PJG
F0LvF3zFlcU+9Q7pdyvR/RwC7VWLDkg+SH7oVtrcBm0EbQgdQNmB0FLKdNA8
lM0Ljc7zHA1agGstCB3HszwW2o6xtleWoOxq11ee9x+Ur0Df5aEF6LvgYNoe
A21bS59lqFvafYi6+dWPQItBa1K2FvRrO+vNDoy7Sjf7hf/m4ho7k36T36RC
ek7ql+lmLOfsXOcrxlrUNa+SMffnm9pPGYu+R0Lz8A5sqR6Fup+51gU8/8WZ
+xny373o1NTrbOs9QmMWejbT20M12s/K9eeTL/T34f+6Q9GxqGv5irKfyP8M
fU16E/6PXo5+Zjb5U/JrDYXP6y90ZurOPlP2hoZI112fmOtmtfB369J3ReUb
5rfOUMboL/RCN1B/OfMZhK5v5Zpe+xfoG9LTtiIbrswzvKiZNWU13u3Z+rLW
nMIz2Ib0qq5f1B9M2UHqeBh74mr4CPmJ83he50PTM95WfZEhHqd9H3P8qNjP
5+QZ7lnwbhfQ9sJKyqxzz/+P8rkHstbZp0zf3RnvPcZ7lLab9dLXa3otx/gf
czkUmpS5TAaNUjwzn9UX0Dq97Gfua+uSHhU6pBaZRtlmd3nWSmRQZdH1bFes
Sa5N33L/t/albI1eyk5gbjf3pe1SXGNJaARjbFDw++dTPxr1h8sjM7fXlGOh
N6ExeCZX8Xv92BeeeGv3Vugo+h5dybe2AbR/Jd+cv726108H8w4o+ywNrVqJ
DCR/ezzjjcXvtlYv3+uojH0cc9iP+k/VcVD2if1JX03709StQle1sm66Nm5Q
fOenMs4p0AvM9cWhjLFvMS/H3pH0DpXsy/IOu5DeGVrbZ+0aVkmZ6XUHU7eT
3+5g2vR6+eYO8HcmPQ+/xdzyQDyLvaG9mNMHfdFPvaWujD7bQceRP179HXN7
hvdzSvpvzvw25veZlvzR3NJa9N2e+hXI/wn1uX/4zMsp266hYoz3jP9bQ9tA
G1K/QfHN+O18yLU+gObgmc8JbcT4U9P3ULp+wfir0GZl6DTodGgZxhiX+p+p
v7KWdWwbdXrULQVNzRhTqSeV53f9oWxRZVPKpoRuZPyR9F3EMXkeK5BvMd4C
PIML5Z3Jz0D+SfI/kV+GdktDL8uz+x2RPh/anXns4foBLUj7hxlzesafUB5e
fof8e4Ohd+UFmqnbivZbNvJMfDamXyL5e3/KNuD6k5Dew2+0FZ2wuuE5GHNR
v2+u8TP5LXjGdzPuQ7T/T/6fuve5nz9ofwV9f6Tsb+Vf2vwDVaivQstRNil1
h9Fmc98z9QHk9yW/fCu/zYhiTfQ32pL6+fpVZrAmMP4rzbzLP8sj877MRvnf
1K8Mve/7yvhjMbe/yJebufd3oPGbeQafQB35cd6tJ7vR67u3u8cfxZjTMt5v
5LdRnzOYZz0N6bX788yPZo7Ncniy05lPXf2x/LbfKumf+f+T3zf1Rw+lTt5D
HsQ2J9N/UtJHqMOmf7OZ57dwoYP+rxPetVY8T+/Be3ncPVB9IeNNIE9C/4WG
kh6/Gj2GZabHq0anYdlG8q7QaEORga/VBqNqgfRx6vqY053uM0MpO4T5PSC/
z29zDPU9rl8fiMy1fyP7nnvhjtBO3mMhMyt/2/6oXuTnWlHnOzkdtFbxrn7F
tb6UF6BsIWhxaLFq9hj3ms1psyz3+4I6J8p3Kvan1aFdSb8Jvahulfoj1RM0
ox+8lHs8n99zV8p2Gcp1vh7Mb+Rv5d52Ri99fPZvFGPdyvN+m/5Lcq3zfb86
kQ1v556nI/9oM/a3Sxj/PMZfopizcz0EupH275fCA19M+5f9PV07aH9PNzyx
vPEa9FlTnSPtp+b3P5v2l6hvo/0A15qjFJ2c97watFkjz2JRaBTudx7qL6fd
1fwuV8nHyKPJd/J7fs54k/L73NvK+6Q9Q+Nji/Sv3iv9l4O2ZayJ1beoK6TP
ZtTN0Rj+nEpvUv9VI+updVOo/6Xts9Bv1O/tNyNvyvW+HIiMOZWyDPf4OunX
oBlJz0P/uaHNXK+h67nG64xdhxah/HD6b0u6Vou8PUMlvLs8/KTcz0TN8EfO
cRLS89H+V/Jt5WXSZ1cjS71Nn28auYayhTKG156YMa8pZPaPmd/pzPk16j6j
7l2e93nM51zoE/KfNiIzeP2ZGGdmrvdaOzYVbSmTaouhfiPqPy3Fxngo+UOV
Ncg/Sf7uZuqUQZ9tRZ+qPn8taKJWxnTsuV0zuNcX2rFnzW4/5WfyhzHeX+4J
8p71Yi7aN2lzCNc7kPpvNYlwvZHkn4O+4x6+HwrPK+87B7Q06Sfo8wNtt+X6
MzLewtAf9PtdnR/pF6n/h/pj1GGQX04bE/M6lbLPmuGB5U3kUeSNp6D+uVp0
fE81Y9PRttOAFiP9YDOy7wjGO5a+80I/c68tqEl6Huh70k/7TdlfXRX3swZl
cypz1rKed+QPqF+J/MTkx5b/dq32HejLN+K3MjPjfUDft31pSc8EvU9+PPJ3
tPJtuF9p0/QbOZ1ndTZNR6f/qPSfjvZv0v4p9xDaT0/+LXW15H+h/lLaf0Z6
HNqPTn526r+g/nfKKqTngL5StiE/1M735F47WfG+zkrZx9Tfqw5V2yX5j8rR
ofa38767130lD8G17mxkbZ/Qb7LYo9yrlCGUJVyjXKuOKeSsuRnjO79PxntQ
e3kza6Fr4hSkX6XtK9BWtN26oFdL4aGsW5D+f9B/evo/Lu9F2fvQmbQ7S37I
/rS9nTY7aiuifZn87LR/uhX+x9/6U8p+IH013+N8jP8x+e/Jz9rMvSkD+v4+
T9mT5K9jvI2Vc7nGzNSNpOw16oZakT1eIn9rO/L6P+oa1GE3Mp85SL9M/Uek
F6LNX9S/yTXvZPxuI/1f6I/9ZS5tmv2RL5QPtc9Y5x7iXrKw9vxybDajkx7g
HV6M9P8G8j1uyDs/QhmTfleQXgy6XTmd/GWd8DzyPl9DszLeWYyxu98T6Zfp
/5Z8ju+P9j7GPs7frj97wniU1clvTN93aXO/tivG24z8D+R/JT8oj+r99cWe
9Rv1O5CfhvlN2QyvfnZ/eBh5dnkUeZVJtN9QfyHzOdPnTf0FpO+lzWza5sk/
wn09RP5B6B3S70Lv+cypf4Cyq7UfkT+L/j11sM3oKNVVbq9MRrrGM1jY+dL+
Jtq/yfXfgGZw/Yfuofxu6E51vNC5jHeS6z/932W86wZzz96rOsXDO+EFRxV7
wHiX8/9m2t9D2bfaSnk//leOzsH6MdxDyN+m/q0SveVx5K8kv1A99tkxSJ9M
2di+G9QfW45MLM+n3KT8pA38WGUwyi7kWqdQNg5117Rju53Q74O5jaeepJz9
79VadODqwo8i/zfpX1uxBx/HWA/1YvPR9vMGZQ+oc2OM6xn/XO2btD2P8fcn
v6K6Itr/04ou8ljfF/ITNYIdEEPwkGsZ9ff0hVd+kPopB6MrVcemru1X5jBC
WZs+jw3FxqKt5S3Sb0O3MN4d/VmvbpCXd00uR9a7ppf62/pjg7nZb0ddxFBs
XNq67qDsLuofc/9RX9+J3etG9Sqd6HuOKmV/G0n7Z1zP+rNfP9FI/tH+2GCe
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
nPlVuNYCjfjvLtmOf6N+jk/04s+rv+x+5E/oxl49Bu23g/alz+j6v9H+FOpP
l7dpxv9OLNjJfjvt+EfqJ/lkL3LTR9XICMoK4hkOKwXT9mNDRoo9kX/jk1+2
Ebno/WpkBmUHfcz1Nb9dfT/j/z4UX65B2i9E+85QbHHa5K5vRGZQdtAHW19s
ZQ5lD33qzitoQfqvUErdkd34N+vnfBTpiXw/KL/I95d7W7ma39jf9pfByIbK
fMp6yogrNOP/vGexFnlN9+blS5mLa6Zr563M79pG8Dg+f30Q5Zk+b8RGpG1I
PI72kGnLWTPUvZw6EF9BfQb1JdxCG0cpvoTnqt9Rx8x4jQLPNR7zv4lrHE/9
5s3Y98V+y2PJa/l7++zecU+Styt45zfq8SkTz6FuVp2qutWDGW9M/k9PmzW1
ZWsj4b5PUEeuvb8XXlqeelHSi4vRKvhr61aEpiE9tbKk7xs0iXpp+r/O/JYl
v3LB0x/SCZ5O/7RRuP8R6rp68Z3T/2450jtDx3H9G8QQyJuQ71evTf6lZq4/
YSU+ywdoK2/G90IfjBtIL9MLZv58rrGS2KNesMLqkK4r6vWbFDu8dC+YYW3g
JyoDdIKR1i9I/yCx0+bFTqsTEg90BGNOI39f8Dsd6PpydGLHi3Vop25unvFx
5B/rZR1zPXtffkN/RLEk5eCjZtKeTXpn6HnxZNr31QWQH68dHyF9hfTf31V9
KvXX+G5B87fDA4/F+zBFI7zxmrQZUY+OSl2V8TZOqEQnezRtG7S5lr6/uybL
37gmFzrOL5vR/7v2uQaOTfrEVmzP1xf842q0X7MenZu6twZ0a7EhLUL93gV+
+TWfXzf+6beTXlo5vBN+zbgExieQt1uoFzlLeeuNZvz19MvRP+f//BFN69+j
P5f+exfUo+Oav5MYF+LQPmUKdzXjo6CvwlTqHDrBWIu1npr8mc3ErBDj6pq2
RSc+4/rZ6m97djMxNvRxU2fydDPxMc6vx6d+3U5sDgcpN/THFqGPsWula6a+
x9pnxd6KuRWfrVynbfGRUjC83oP3ckolvmobyd8y/qPa910LyR9Vj473h2b0
2S/2xcavvcX3QR9Sdf76kl3UiZ3yKcr2aMWe9kpfdPIHqm/tJa6C8RV27CV/
C21fo80utN+lFz5VflVsxtFc80HaHqv+gfTevez77v9XtRMzQWy6v7G/9Xba
4OvxOb+Z9jv0opdXP7896b2gF4r2Ytut18agT9LJnYynX5z+ccYX2LHQX/ob
G4/EMuv0pzMWwTjt+OaX+c0ebUd+uLMcHxV9VS4s5AlthNoKryN/qfwN+QnI
f03+ZPXvyqzkR4g3IX0M9I14a+hZ7dfQ56R/bgZL94ryoVi2ZnyJHyE/IfmJ
oEfLsenpX7IG9Fg5GJ1PSU9M/ePlYG6+JT8n+W/KwUyJV/ujFeydmDuxd1uJ
zyR9Qjl492+a8d0VoydWb1LoyXIwP/q7Tkv+ddInOb7yDX3eIH1iOXi+21rB
zr+qvVnsXTO+ss+Rn5z8lMps5dgc9Y/WBvyZPE85tmHlB22v2vjFAtxRfF8+
b22p4itXKcXnRd8XbbJnUr9E8fzFaNzBeEuXgt04qR1fdn1qTlb2gb4tR0ZW
P1JuhR/V5qjv9O298ARi0kbyvvziNagfSX6KdjBAYzaCeRIb9Egrsqg2zOeK
39vf9gVoqnZ0GO7L7s8fMt4c0AqDWdOO6MRm/vRg1lTX1ofo/1dfMIZiDR9u
RXYUwymW0/VU3YkYT7GeP7by203F9/I/7ndVrrcMY9/oHl38nv424q22LN6v
M5VFoRnov3ovvpCu3x80g4EybooYKLFRR1B2QSl9fnduYtzKkTEPJH+w/KL7
KfdwbTOYKvX86vvFWokvm7+eZ/YE6dF8JvTvk2cRS9kM9st3yndrALqsnN/I
30qfg8kaidehL4IYr3HJn1oO9us/bY3lvOO+68ZUEMctnvucZjBfE9L+vnrW
mz/Jn0PbGbVZUn9fK75BYrjFch9K/sty5iDe1Gfks9qoHHzr+M6B9FHl+Ke4
H4nNFCMtVtr9UmynGFWxqsfIf5SzB4rH/bUZLNq7zqEdMn12OfhXn69YcjG2
Ym3Hhe4jfUg5/iCrQw+SPhj6wHezFSyuGFyxuPe0ItuLgZ21eJ4PlYKhFUvr
8xK7KiZWbOwBtP/Eb6scfYAxKC4teMRteV5j96L7mZz81p34UG5ayF/6Vm5S
2Jd2HIx/oJgYsTEz885f3YkMpiz2FP1/Iv8W+Xup7y9H//1fO3iXqyn7mvo3
qG80woN/Q/5N8pM3ooP4rpPvc4ZG1mTX5u9awS7Iw7jeieEwFoffm9gO8S7z
FDLnkspnrcj0yvJfdaKTUc+wYSP6hJNpP9dQYl4Z+8rvd69G4rWom/SevLf7
G7kfYzJc0kh8JWM1vCR/0IjPu77v2py102qvFav6aitYpY2Y7ys+e+pna8YH
udyNTklsgTyLvIt5dU0TlII9WIA+B/VFR39doU/YXD5eexvz+cDn14xPjbGz
zia/2v9hS3rhgeSF1BmP2Qn+/XDSO2hTFw/Vis3Ob/hz6r9ox6agLeEL27ve
qEcg/5fPT36qEZn4Z/Kv+r408ptsSNtfO5Gx5UmfJf2a/FQjMZKMlaQPlnK0
8rS+WXd1gsPSt+qDTnxG9B0Rr1dvBeOjnkR9ydKdYO7E3umzKz9yUyvY1JO0
aTVTL6/yZD1YvQMpm6USn/drSD/QCQZP7J3ygvYtMYpiE+/vBF/w/FBiyMnP
3iI/PxSd9yOdYDBvYqyfGFNQnvp08Wf6LOnrcCHtl6/G5+jkYv7aubR3iV3S
Z+lb0otW48t0I2V9Q/H5f7iT3+N67f2lrK9XyV/Vsr/dS/3xrWDNxZz/0QmG
WLue9r0pyZ/bi95X/a/8+rHN2JK0Kd3ajM+QvkPKSMpKB5H/hPprXD+Vn8iv
p58F+fM78VlSLlY+1pfJ30e/Y32J9fU5thestuMZG+Q6+dV6MB8PdTK+cTSM
lXGg7zb0D+nJtJc2g9kUly4+XSznu+og+mLTeqeVGAh/FO2NjSA+TtlZe6nY
O32efmX+v1TiC+X96UtlmXVi6F4sbKv29XpiRdUZ/cn8TmgFI+8czL9H/VKN
+F/90wkeV7yTeCHxfPNQ/01hL5u7l/xfA7Fp70P7+cj/x2/7r/qvXvI/1fIN
T99JH/v6Pc9Fekbfj1ps2Nqyp+4Fxy2eeyrSe1P2AeN/rl5euYayh2uxd07T
ik/xE9WU6Wu8gPOpxedE3xNjMN2onqyW2Ezy2OpWn6+H9z6KPkPl6CzVXdre
2E1ioHZwL7eN9hR1OuTvgx4dyj16P7P2YvvTBjiLsk4nMdnkKX5rJl7Y85XE
AFS+ubITG5u2NeMPDvaCIxZPXCW9PvWr1vKbX9Ap9pxCX6i/vmRaHaK+/KvQ
ZpxafGZmbWVNdG3chHzVtaETn3nfWdeT2ejzUWGvdO5zQBO7njKdvTuJUfAX
czl1KLELbP/LQDAIe5K/phN9qzZQ95frO9Fz+427Pu3LPQ9VEtPkSnUH2jwG
wvNeRnp616dqYqbs7rrfi1+T/k0TO36riP9C/mrq76e+1wgez9hD8mviqMRT
+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
9BlWHjM+lbH3lR+Nvaw+acFGMFFio8REiY3yN5Dfur2d2EnV/vAz8sjyyr6T
8jPGSJqvkZgGxk4Sn6wv2b7Q8e3IeMp6vlOuB5ZZJ09j/F1lAmUDvzn5R985
3z1j3J3bDJ7w3UZ0aOrSXGNca8bpD/+g/kd8pDEkbmqHB5cX952Sn1SmULYw
Jpb8jPY9bWEP9gd7qc5e3f1UPM+R7WAixUz+H1bSNcG1wd/EeEXy8PLyrslf
tSLjKOu45sjfat/WlmNMPmPzye+uXErMbmN3a8PVlqsO4aZm9EV39CWGoLEE
jZ+1Ee33UKfTCj/ps/cd912XB5UXlYc2/rfx7cQOuse51ylDKEto83bRFhMt
5lissVhp41/r/2RMQtdf+TGf5Q6MN3MrNnlt8/pMa49yTXNtUwY2frX6/jdr
iSltbGnfUd9VZVDjGatP03fbmIDGBpy4EVutGOG76rHVfFzJGUOeW+OZLSMK
fKlnuRgfXSynmM53BmIzna4UjIO2VGNUe66H53sYu3r2Au8pxlP/N+1/yg5j
ca0laP9QYWtwvFsG4lP3doEHta862ClqweQp3xoD3FjgXsNreaaBZxvMwD2c
oeypTEn7L6uxV/kMfZZLN7K3GTPH38YY787feA6jlXImyxHqdqBtqtF3iZ1U
3jbmrJg8sXcb+/3T9iTanE56Ka55fF8wYGLBpm8Eu6M+6bqh7GE79kUH794m
pu/AUjB8jrdeM3u3Oj91f8r0xrf1msP4vuawyndYx6aubcpezvTx3CXtN8Zr
06dRP8NZC3qjwO5a57kunu/SYrz2YPy0j3C/KMVvarF6fIf0IVqkHp288ve+
zPkNbVDd+KnpmzZXN2doeJaGZzSp79LvUv9LZbKxKjmzYLHCB0k85mTk768m
9rnx18TJi5f3zIFpCh8Jdc2uSa5N+k8Zq1p/R2PXD9ZzDcceu5IzYPT90gfM
8198Bj6LhwZi2zJmndhlfd70fRtLXeZg4psZ5+xq2l3l7y7WtBGMirokZSxl
Ld8/fTuXUb/Xic/nV+Q3LexnnmnzRzVzcC4rd+If6x7tXu2cnJs+ep5H4zXE
vxpTy2sbl2VyaDloefUYtcRtavobVXKmkGcV6V/sWUMbaWMrxcdGeVh7g7L9
j7XY//T50NdAn6OxOzmDSZy436zfrvP1LB59HqftpI99tRlqO/ylFt/MbWXj
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
xdCKpfV8Ze0N59TiL6dOT2ytOjx1ff8PKFAnUQ==
         "]], 
        Polygon3DBox[CompressedData["
1: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
1+7CypfSXdQryllpPwWNaaMNbX6vGNjNleo+mu40yvcOKY/knkXoTKKNG+vo
vKQ8shmj7F6J7nXV1Z0xkI33UthSElRU/lP5VK+db+Ry89/KYS/yWh4/PbQJ
ioFCds9P9/2yut9q24Cd6axxvzf5UUuwazF44LGYQfdC5MemCVpeOxb+dDpD
dOM7nYncks+s2JI2Z4JWtJfKPWvRnbbP4E0KPoc3NzquIR+lmAeccPM0OrvS
GdZh+SToSKe1RN8D9d+Blm6uyu/GdBVBJ6+dCeq+m+5alYk0XskoPnmkfBz/
WWnmayO/3UXVndRCime1T/McoHy8cqX0axr6poNDOq/Q3Iuy2ET+UEB3ZXx2
T0F5QuUwDwbND5M/Jh9oQIzdVUyAvibQ+osGPPAVQaaw1hOvnU+nUWzPmOfE
rnCtf9DOwDedNqdFWeykOM8LrZTOIhTXee3MXPdMFSspZhrg2N3P4/I33Jxb
LeXRYuxeg+6ZKmek3JRyVEH4aqGrJujptfPTxNDqU64nv9hrZ6XKx/Vyc4Gp
FCeC2/quKe9W+i/cYt2PuufGe2rdiaFuJO3uC9k9UeUtZ4bbN6McgnIJ3dxz
qfroqwFfE4/5mDofHh6wez6646BvZiT0UeD/qTRMew==
         "]], 
        Polygon3DBox[CompressedData["
1:eJwt1ElszHEYxvFfJ0oX1ExJUaJqCapoKip2F7UFKbGdqCVDYomd2EXEVikX
PdTScpEgxL4lDnrR2g4SXKy1HBpLUwdLfCbj8OR9/995fs/v/b+dac/yVWUr
IyGEYmpNgzqEUEhrs0K4lxbCc7C3fiblen5CT+lGqxA2tA1hBO9P/fv2IYzU
t/AP4L2mz24TwhD9df0Xntc8q9qFUJ1OqSGcoPU8o3mW8OzLCCHfMD+w6XIy
8Ug0hEr+hpQQKtQVPhuZmA3Pygwhj3+Lc034ZHw83omvkr+j2hUvwi/hjXxj
+T+pEarFK8wzWz/fffPolP4WPgZv8p5/zf2HHuD38EXmnMQ3kZb7vNg9U/BG
uyjxHPdOy2iWe4fjcf45zsbce1atodt4D/yI3CI7P6TWyMvFX8opkDNWxjjq
p3+BnTP/DWeL5dxJzIiv4c+TU+P8ODkn1ctyuuFP+H97juN77WkfNeK/+CP2
ctjcKWqGOQfhx/1tDvFkpyf3dlhfhaXxT5WTI6dUXS4/i3+G/EK+03KK1CLz
zMW30lf9D/pO32gb1iTnon4h/4XE90dOd7xaTl931csfj/VL9Phm+sD3iT5S
I23B+si5ao7p/JfUOmfy8Do7yuQpdX4C3devw6dRuv6Wnd3MSO7wLvY88XfE
c80zQT1g183ed1g0eddO/IuaR7P43/C3crYZ/6x+5w/4Mf5Uzw0eh6oldB6f
5PsTtZd8vp6pye/kLnwU/lpmNhajLPsfjNebP4Y/pHpqoA14rZmOep9y5xfS
Mf0ZLLg37vmOeZaqZXJK+LPlH3R2h91sp/36GFZg/gG0mucK9szeeul3Usz5
LtSZcmg3VhhN/sbXyH+cmIs/H1+A7+apw3epcfeOwB+ZP4fvnTNv6ZV+I74/
mtxJmu9tFxkp/393VWZZydfLq1Sotf+//zPxKntp8Y5liXnlj0r8f6C9MvfQ
Yn2lz45SuX4TVuD+gdSfIvg/O/uZTQ==
         "]]}]}, {}, {}, {}, {}}, {
     {GrayLevel[0], Line3DBox[CompressedData["
1:eJwl01toznEcx/HvY3OYzalIFFoRYyOmzZm25DDGtmyzKaUmm1O5YEO5w51R
s6jNKRIXbriQRM0tc5gdnVuJVq5Iy8brSe29z/f3+Z7+z+//PJl7DpceSkTE
D/SmRCTjKrpMMFE8CwuxGltQjTo04CyacQsP8AyTR0T81v9G/C094jt6nH+N
jSiQWzwqYgly0aGmhj+Vn8iIGFT3lvecTuP9oUvVdSZ3qqvFuXER0+Xy+Xno
Sj4bXYWVWIHlaDSvW65ezzEcxQx96+TWokeufXzEvFSfkV9m13k9vfw/zqfU
Z9ICtWkTIgppn9xGugmbMZZfRLfgnVwxTedto9tRglJcMPe9/ByaZV+j2U0+
xxzzy+39IFfoWRLiubwj4kpxmd6Pcg/NvKznErLkM5wr5MrxSf4G/xHvOr2G
BWpS7RrmpdAhs6rVflbb7310Oreoa8V8tZVyO1GF12q28osxSS6bl4M2fq7e
Ad6g78YaM+7zvjj3O/+U+8HrGBlxk3+NXsUVtKIFF/kH6H7UoRb7cIa/Ms27
w22zis2abVY9/7H5TbyvzrXObZ7rGfL4Q+5yGH9Rlfze0Bdox0u8QhH/yZiI
p6gx5w7vLlbxT9pzMHnP/Ck0h9dN75m/yPzT6mbyTug9jgasUDugr0/dXvka
uObocm72TrP17XbnXmHsotVgRyWtgL/Y4Z8RUUpLYF1so2nJu6fWxGa6CaPF
rj82iF1VrKdWhnVhVeQn/v9u/wHDVnNk
       "]]}, {Line3DBox[CompressedData["
1:eJwVzj9LgmEUhvHzDtWS/dmChGzoG9RcDTlVg4uBS0gKESRvc41BW3NQkEFW
U+EXaC+3wIbAVsMtB9HJn8PNdd3nnAee1XKtcJpExL7szEYcL0Rk5iOmMK9f
4ZL+NRdxw5f5ClbtsjzHT3iOr/GUr2ciNqTjzZvZJn+338JtabvZxW/8cHMr
e/oh3knHvKj/Yl2/lwO9jA/SNT/S/7ChP0pFH8gn/zdPeR+f9Sc506vYkqH5
uT7Ckv/1/O1C/8HAF0zw1e0l1ibvFiOmedNuZvIX74b8mo8BCugt0g==
       "]], 
      Line3DBox[{3143, 4202, 4203, 3219, 3144, 4233, 4234, 3222, 3169, 4250, 
       4251, 3226, 3175, 4253, 3230, 3180, 3370, 4394, 3371, 3234, 3186, 3372,
        3382, 3237, 3192, 3280, 3394, 3733, 3240, 3195, 3545, 3546, 3406, 
       3500, 3243, 3199, 3742, 4434, 4072, 3417, 3245, 3202, 3306, 4447, 3430,
        4353, 3248, 3206, 3929, 4355, 3902, 3833, 3995, 4478, 4477, 3906, 
       3838, 4010, 4498, 4497, 3909, 3843, 4327, 4326, 3256, 3216}], 
      Line3DBox[{3145, 4204, 3854, 4102, 4103, 3147, 3865, 4123, 4124, 3796, 
       3946, 4377, 4378, 3947, 3481, 3948, 4379, 3352, 3360, 3271, 3373, 3272,
        3375, 3537, 3538, 3383, 3277, 3385, 3541, 3542, 3395, 4414, 3282, 
       3397, 3925, 3407, 4423, 3288, 4032, 3971, 4427, 3418, 4435, 3972, 3821,
        4302, 3897, 4176, 4175, 3827, 3987, 4463, 4462, 3988, 3834, 3996, 
       4481, 4480, 3998, 3999, 4483, 3935, 3462, 4571, 4082, 4081, 4011, 4083,
        4572, 3760, 3472, 4090, 4508, 3764, 3791}], Line3DBox[CompressedData["

1:eJwV0M8rw3Ecx/G3kh81Zke1y/6BJXJx2W0HorjNie2wpGaTk0LKQaY5KQfK
YfEHEBebCztIppS/ZDeFxw7PXj/en8/78+2bKW6tVAYiooDFRER1IqKGbSST
ESN0Sd+gZ7jgS7jkJ8ciOuMR6ZSs28CJXEfGrECvdRV05U9M4QZN3Q6WvZF1
f07Xs/NWt4sv5PT75j/6LM3RPf0zbWNal6eHug59xaxugR7pynau23GqW+u/
QXu+6dt8lT/HozMts3vn6/iVy8780QM8YUZ+6P8DDPGbGMax2Qs++Lxdg0jx
V/a983d4M2/L8/wo/gHS6jJ8
       "]], Line3DBox[CompressedData["
1:eJwV0L8rxHEcx/E3pdBxZ7XdpEvhIpOBycBFkoG64e47MyCr8QbKwGwgBhZK
Hfm5kAF/Ahshk0EZeHyHZ6/X5/V6fz6f7/eTryxMzTdERBkTmYjFXMQSctmI
FtqKSfkGzbbJOyI6dfs0kVf5Or+tG2uPGMcZSrjSr9Ed3S4u+Fncy4vWeXu7
7V223nP+I12RdeFA/mz2WH6EIfO98hF+GK+6G3qNfvkofZfd0Tmz0/bX5IOY
4b90T7oPd6zLbnEuPzFbk/3QgplvvofWrfvoKU1ooIhf/Wr6LxiwvqR/9NN5
L85/4Btlh+k3YdMdW2ji3/TN6TvxVT5J35f/B07aNT4=
       "]], 
      Line3DBox[CompressedData["
1:eJwNzr8rxHEcx/H3LZa7c/eNhTLoykSnDAYbi4m7r9QNLiUkA4NuMinUDUQG
NldmgyIr3WbxN9xGMciPKMpjePV8vV7v7+vTd3BpM93IRESdqrmIRjEiKURk
MUd5mtMf47K+J4ko5iMG5DNc1fXqWnxCfd0R/biNd3aHeI8HWNIfYcXm3b6B
D25D/JhbKn/zE3zZm49u43LH5hZH3adwkp50bdzTzfp2hlK7ad2+riLXcEE3
z3e81ZRr/JvuRV7DVxz21ge/Tj80In/qy/iFv7pT2y3bjK7Ot2hX/nNv81f8
BTbxEk9wx27R/3TJz3iN5/obXJGz+A9WSjM2
       "]], Line3DBox[CompressedData["
1:eJwVzjkvhHEUxeE7JWHG2gmZyFjiC9Ap7B1hNMRWaIQOwRdAoRBLlNPQ0RBL
h0YsNcoZCRWVkIjEo/jlnHvO/973TU/ODcwmImIKQyURS2URy1hBRSoiSVPI
6jb/s9KIStTyVbS6POJcl+Mv6D2twQMuzRvJiCua9v7FvYy8zs6tbN58R5t0
jXj09oDuo1nXRluRl5/RU3TZ70Yn34Eevt29J3ee0SfrxaD8FXlZvf0CzdA3
2Rg+0WB+l7fQD9pv78Z3Z3S/uHb3S74t+6ZZ/TD2dIe6IyzwOf0iHdGNImHO
0wJW5WsY5yewzu/Y20URf+JtMT32D9P6H/OW+Q8H0Tik
       "]], 
      Line3DBox[CompressedData["
1:eJwVz00rhFEYxvFj63VmDBtReBbiI3gphi/AYrIRU6LUjMWMFWHssKAm30BZ
TdkreRSlfAEvNYoFsbAwG4vxs/j3v+7rnPs5Pf25wmy+KYSwimxrCFuJEDo7
QkhwEimkMe9sRd+dDOGqPYQXjrnGDf21XEQJPW2+w5u4xS7KiPRv7vbZOTZf
yAVE5kEMYN087L0H5yPyhDyOMYziVb+tn3F3GhlMYUdXRhYN9+a8dal/4kf0
2nvnJf7gBXwhMn/yEN/Zje3UzWvIyd/+O9ZX5SNe5g1nRS4hL//affbmqfN9
3QEOsff/jv5Mv4hmXQuq8g9O5HO7dfkeN+Yap3QVu108iTQy+AMt1zt6
       "]], 
      Line3DBox[CompressedData["
1:eJwVzTsvg2EYBuC3WxvngZKQ6OIwGBxikfgBBkPDQtqIThKpIGmrCxYGwkSq
MSGRSKxNDAaJwe6QEAQ/QE2mDi7Dlfv+nvd93i8xv5TMRkIIWWbrQ9hsDqG1
KYQ2GaedDlLODuSCs3hLCMcNIXzpFT3XGMIteQp0OduQ69yxxTY/9nucdduZ
tHvNhb4i+2Ufvaz6HnD39f89fcRsmCEGWTMrMqpPyZq7E969931kp8SDXpZv
5u9M80mn2YdMyG9ZZY4n98/MTnnUb7y7Q0pPs69nZMbdpP/9uvcsS+Y58zwF
is5nzMvmaaJmMc71b/b0S7tV/UWP6ovE2LVbL8eoY5w2lolz6Lxm78RexD8q
Zle+/wAIozxy
       "]], Line3DBox[CompressedData["
1:eJwV0L8rxHEcx/EPne1+sFKKYpYcR/kLKKUYGHQ3cJZDWTg2ksHAIpRFGViI
oiyUKzJcDFgsdKdMbrJ6fIdnr/fr9X6973N923Jzo4W6EMIipuIhHDeFkE2F
EKcJJJFCTlbfGELF/JwMoUpj/GEihLLdFd8sL2EJy2i1W6dreMSXXllv01xz
u8B38CO0nX+Vd5p7zWn0oBtd+LAr2g3o9yODPqzIVjFo3tV5od/8kLff8YYW
+Sediv4DHUcVFdzqb+g/4M78K8tiwjwZ/ZZvMuz9mtttnWnZDPKYxbzumP2O
3SRisgYUo7fpj2yZnrg/xRNfiu7N9dG30WugacSQQQIFJLFl/+dmz03wzoXs
nr/kz+gB3ce1+Yie07zeDf0HPmlBnA==
       "]], Line3DBox[CompressedData["
1:eJwVzj1LgmEUBuDTXmlTLRH9AedwamgoaYgCf4BTBK8f2BJEhQ5BJeEHNEQ4
BEUgQkRErU5BDZFj/ZACo8vh4jn3fZ730cVCabM4ERFbNCcjnlmejnidkkmb
y6Q4t3siax7YHfOditiRv5wNu0cOZyIO7GrOK/2J7oFE3tWXnRWq4zf097yl
I96pm/us2q+RY8O9I12PkTt/5L27L9/xI/+y4t6HvMcNL7691S0x5JOq/pqO
/5yR284Wia7Lgm7ed4n3t+VL5uRZfcF8QcNvnXHK+vgtSuYiCTn5HxieMd4=

       "]], Line3DBox[CompressedData["
1:eJwVzTssg2EUh/Fj0cWtJqtOIixiN1gMdasmBjEglTBoIlEstrokpk8MBuJL
WCwSlyaMLCabvWZbBQkGP8OT8z/POed9u+fLhZWmiJhD0hKx2BGRb484yUYc
tEak6ikSOcOPYFe/g22c6V/dhDqMDNeMVK6qv97cx6o8xN17Zw2P+h/1G3vm
V+hti6jpl/COBX1DrZpd/u/Is5h2W9c/+ffNzqB389woJs0f+C3zC1zLN7hF
DXX7PfY/5E98YUpfsdvvPic3uAHvzNjt4164snmKcz6HCbNxLHPHGJNTvku9
c/PspsQfoVOfRYlLvF3kDrEpb2AdFRS4P5mwOWw=
       "]], Line3DBox[CompressedData["
1:eJwV0Lsrh2EYxvFHUgbHhVFOo4QBOewUxYCBkrIgBkr+AUxWymDA4BBhQohC
iOScHHJcUDJZHD6/4dt1P9d13c/T+6a3dNV2RoUQ+jAcH8JdcgjHiSH0J4Uw
gHheAlJ5j7InPKM5LoRo+QhOEkJI0Tmmp3p78grzMiqxrjtI61CPH517nQbz
mP0deQ8vDVnOmbiUTdIJjCNbVkDzkIteO/N0DuXeXpfnoNS9JXi1f+G8Jj/X
HXWe1ptBk/mZ3vIzzNt6q3YWeDX0nbdv7wCvOkXyKnM1viLfSM8i96LLTpm8
zV47OvCtc8W7kTfSfd4Ub9c8G8mcV+21mqORjz/vFNJNfjHdohv02s6Lez5p
DG+eVmDJHYuINX/I3/GGIZ0V3gOO5IfojvxL+sv7B0Y4T20=
       "]], 
      Line3DBox[CompressedData["
1:eJwV0Lsvw2EUh/EXo3vKiDSGBpMVA1JNjGrBYBCDSFriD6jL7jLYDEziEgaX
SNRYDAxMiOiiSyPBwGbw+Q1PnnPO9z1neONTc+lsRQhhFgt1IdzXhpDkOx7k
au7jGDK40Z/wNb81hvBTH0KVutQQQlFdiQ3zdSTVu1hVr3hT9ObP7jiPoV82
LcvInvVP+JUfmfVGt3iNv2tCeJB9RbtmZ96fIqEvydr4Qz/Jx9wa3eBtfpUX
7JbdKetT9rvVA7zMw95dyvN4l/dwp/k+H+AQL+Yd3IV2Wdxuwt6Oft79PX2L
+ac+ywWzUTt5pDGCHK7MU3yBR+9u7Q2pt9w6V8+Ybbox4V0zx9BktsSLyEX/
JvsH/94+4Q==
       "]], Line3DBox[CompressedData["
1:eJwV0L0vg2EUhvFHYpL6GhgMQiJC0ogFi0ZMLBYfW2PoZtG5YVIWf0DFQEIM
JL42hqKLIBZtKlKVmGqQCBsL8XuHK/c55zrnedN2p9LTi3UhhDRizSHstYYw
Jc9wr441hvCjfm8J4VUWmkK4NRuTNzIh6+WwbMACCvpjeSUr3vhw9xdz742K
+pdbNl/CuH4TGXXGftXOM77tzMoZjPJJPsWX9EV88YdmI1yQ67LmG3fck/qS
P7V/gi71S/R9dVJ9IPdRdJfTl7m8uzd3D2Y1syEZ1w/KhN1D/ghVLi4H0MP3
8v38jn4Xj9H7Zp3cp76Pu/b+trpslufnot+GLC64SXmOiei/dVuyt+WuDRvu
cpi31yHbuTW5iixWkOT+AXFqRhg=
       "]]}, {Line3DBox[CompressedData["
1:eJwV0DtKA1EYQOF/YnygFtrbWLkD80ARC4mNhQEhooQQCMbgI5ooiWBAK9cg
tlrpDixcRCy1FXER4zfF4Zz/zsy9l1lunlfPkojYRysfUZqL+MH3YsQav8xC
92YiGp7fL0TcYTQVcWAe6VsMzXvmG93Xu/paX6Fr3jH39Ine1l3d1lv6NFtH
y7xpbvIGd6w19Lo+1nVd1odc4pw7JSjodDriImt3/sMqBiji0nqg6L0JzuNI
P9nngV/5kT/4jb94zGHPZDJiiVe4zBWuZWfxkJ+5MO9f4VO/W8v5vua/1dFx
foo2fvEPJF8ptw==
       "]], Line3DBox[CompressedData["
1:eJwVz7ErxHEcxvGPwh1nwHK6IqeMyMCqrMpgNp2slMUiN8gtlNS5O+WKqHMn
ZXD/gIHNoCySGPgHlBTJ64an5/u8P8/n+/v+srnVhZW2iFiiQnvEeE/EBFV6
I8b4NB0mI6b4R1/Etk5JLpsXeRrbwpp8X96jLt03OcUTrf3OiF18yM4Oz+v3
m1fwy+6IQbyAb+BlrGZ2gdcp3/oWfsKP9I55SR7Qqete6VSxjFzEz7EDXsNO
edVOEztzvsGu+Z082uLOD9gTf8ee+Zd8687ORESyw9u6vJs+UxGT/mUOuzef
MZ93XjN7lBfldbkmN2hTbsg/9r7pBZu1/8p/9dOUoT/K0bDZCGVpWf4HWWo4
Ng==
       "]], Line3DBox[CompressedData["
1:eJwVz88rhFEUxvGj/HpnFsxCSk2M3iyxt1Mauyk7NVEUZcF2kpW/Q6xIiRIy
aXZ2DHZ+xEbvxkKJrCzwmcXT9znPuefce0sLazOrbRFRpYP2iHI+It8dsdMb
sYs5+uTreE4ffKMz4iIXkaiHChFHWJft82fyTTtO8Vieyhr2FvhDGlT34A01
6cu+a7N3/Ah/iwOUmenHPdkV9tEjPdC37M3MqzNP6iL90S/96CVd/tDhQ4md
smEsu7eEqd6YXsqP6k3jOFZwAmt6887W1HPOrqs3+MnW+3EKT2QZ/4xb/pr5
67azL+pZ/Xf1ZesN3pjyTfsW5cv8Et6bWeH/AWewNDo=
       "]], 
      Line3DBox[{1233, 4260, 1755, 4149, 1225, 4390, 1750, 2238, 4391, 1216, 
       1744, 4137, 1221, 1785, 4158, 1263, 4263, 1777, 1254, 4341, 1772, 1258,
        4279, 1812, 1298, 1807, 4161, 1302, 1842, 1333, 4287, 1834, 1336, 
       1867, 1365, 4426, 1861, 1368, 1894, 4176, 1404, 1888, 1407, 1927, 1465,
        1961, 1502, 4477, 1953, 1504, 2593, 1991, 1553, 2024, 1597}], 
      Line3DBox[{1279, 2287, 4271, 2284, 4409, 1274, 4400, 1788, 2280, 2277, 
       4401, 1266, 1780, 1270, 4283, 2319, 4420, 1310, 1816, 2316, 4165, 2314,
        2090, 1346, 2348, 4290, 2345, 4430, 1337, 1837, 1340, 4295, 2386, 
       1370, 1862, 4171, 1373, 2429, 2432, 1420, 2120, 1467, 4465, 2484, 1932,
        1470, 2538, 4480, 1508, 1956, 1510, 2600, 2604, 1994, 1558, 2669, 
       2673, 2680}], 
      Line3DBox[{1384, 2103, 4299, 2369, 2102, 2410, 4443, 2407, 1875, 1383, 
       4305, 2771, 2412, 4446, 2450, 2446, 1901, 4525, 2778, 2776, 2453, 4453,
        1477, 2500, 1936, 2784, 4183, 2782, 2504, 1520, 2558, 4358, 1968, 
       1521, 2792, 2562, 4489, 2615, 2612, 1998, 1563, 4328, 2620, 2153, 2686,
        2154, 1608}], 
      Line3DBox[{1437, 2461, 4309, 2460, 4457, 1431, 1907, 1435, 4314, 2509, 
       4471, 1482, 1941, 4185, 1486, 2568, 4491, 1526, 1973, 1530, 4322, 2623,
        1566, 4488, 2002, 1572, 2693, 2695, 4197, 1614}], 
      Line3DBox[{1492, 3062, 2895, 2974, 4554, 2127, 2468, 2126, 2516, 2977, 
       4474, 2512, 1946, 1491, 2902, 4319, 2522, 2135, 2575, 2991, 4494, 2571,
        1978, 1535, 2915, 4324, 2581, 2145, 2630, 3015, 4502, 2626, 2007, 
       1577, 2931, 2636, 4504, 2158, 2702, 2159, 3038, 3035, 3110, 3109}], 
      Line3DBox[{1581, 2905, 2640, 2012, 4531, 2802, 3023, 2800, 4532, 2645, 
       1621, 2918, 4555, 2709, 2043, 2716, 3041, 2714}], 
      Line3DBox[CompressedData["
1:eJwN0LtKA2EUReEjZIy3IkEIpIraCSkCWgsSWxsLe32AiCARCQTRpFDwlnHS
aKPgBTvRV9DOJ7BIEx9BLETwKzZrnf3fhpnd3FprjETEuiyMRgzyEZWpiBrf
mIj4k7KU5FcG4xHL1lekLj+TEY+6e2kmETu4Lat8yV0fztTNVfOcOY8J5vB7
LOIzFzH01gu+4TO+4y3OFPT8hr9iD+/wSn/BH3iK5WLEtbt2eU93Yr3JM37G
93jb+pNv6esK9rd003io70qRt3VHPHXmGPfNJf0pv9Sd44Euxczcl4x3dIv+
xZe981iVIe96q2X9HwgvLxw=
       "]], Line3DBox[CompressedData["
1:eJwV0LsrhmEYBvCb8Dkl+sQiESZiMZikkMNCJsVkkAmTwVn8ATYkLHKWjdid
JgtWBsXkkA2D3zdcXYf7eu73ed7KobG+0bSImITGrIjnRER1fsRwbsR9XsQI
HsfpsjFcxZ/jUv4Cl/H92RGD9GtOxA4eKIx4o7fsejHvNS/W3zA7zoyYl6/T
RzprKZa16kzxK3xSdxVP8E3yLtyr0+JcB71s1lcU0SNrMK+S1eAKXI3/IMcs
of9DN+v+4jJ4hKcMd/XWC/k9/wBJuEzdE+rlzzol9A0s+d4trpXfOndFX8O3
dxbgfejW+YIuqNM7c75QfghzskrdI3qePrPjgC7XW+AXIcGfpv6t2bvuCd8q
37VnCn/KsmXbsEm3y96hDfZ07uyaoYv8u1m8o9eJn+QfqfNwaPc0/ge+rENx

       "]], 
      Line3DBox[{1590, 2017, 1589, 2025, 1554, 2594, 2797, 2589, 1505, 1954, 
       4478, 2532, 1456, 1921, 1454, 1928, 1408, 1889, 1405, 1895, 4302, 1369,
        2344, 2380, 2341, 2764, 1330, 1829, 4349, 1328, 1835, 1294, 4159, 
       1802, 2305, 2308, 2269, 2753, 4273, 2272, 1299, 1813, 1259, 4151, 1773,
        4342, 1255, 1778, 4264, 1213, 1740, 1209, 2227, 4138, 4139, 1745, 
       1217, 4392, 2233, 2747, 4257, 2236, 1226, 4150, 1756, 4261, 1196, 1725,
        2239}], Line3DBox[CompressedData["
1:eJwN0EsrxGEYBfAz5c7CUHJduCwVTczWWlYssMHEwo5S1lZGYsjeXvkAFjKM
+AKkfAdKKVvxW5zO5Tnv8/7/7+jm7tJOIckyzLUkH63JXkdyWUzeO5N9erst
eaQbMM3f4xLu70q66Cl6HVdgDT6bk2t7Duz4ak+uZN940Z5bPMo/6tR06jpt
/I28IRuhq/QR3Jk184d0zayfXpVt8BVo4tfximzLvI+f5ee7kzIu8GV3lOgi
/aA3Q0/6jkH8rHchH3d2QK9Xdsq/6Z3jMxiW/fm/F9kxP8RX8YQzr7ITusc7
jNn5A3U7F2Qx//WeT87+A5R7KzY=
       "]], 
      Line3DBox[{1603, 2030, 2682, 2685, 2152, 2619, 1562, 4501, 1997, 2614, 
       2986, 1561, 2561, 4529, 2790, 2791, 1967, 2557, 4485, 1519, 2503, 2781,
        4182, 2783, 1935, 2499, 1476, 2452, 4526, 2775, 2777, 1900, 4354, 
       2449, 1424, 4445, 2411, 2768, 2965, 2770, 4524, 1874, 2406, 4442, 2409,
        2101, 2368, 4298, 1350, 1849, 2363}], 
      Line3DBox[{1612, 2034, 1607, 4511, 2692, 1571, 2001, 4487, 1565, 2622, 
       1529, 4189, 1972, 1525, 4490, 2567, 1485, 4184, 1940, 1481, 4470, 2508,
        1434, 4180, 1906, 1430, 4456, 2459, 4308, 1392, 1879, 1388}], 
      Line3DBox[{1619, 2039, 3111, 3112, 4514, 3039, 3043, 3042, 2160, 3026, 
       3027, 4330, 2919, 3070, 1579, 2008, 3099, 3100, 4505, 3021, 3025, 3024,
        2146, 2997, 2998, 4325, 2906, 3069, 1537, 1979, 2867}], 
      Line3DBox[{1622, 2040, 2706, 4515, 2711, 2642, 2804, 4332, 1582, 2009, 
       2637}], Line3DBox[{1626, 2646, 4331, 2803, 2641, 2710, 2647, 4200, 
       2723}], Line3DBox[{1627, 2044, 3044}], Line3DBox[CompressedData["
1:eJwVz79KQmEAxuE3yhIp6c8SRFRLg1urEO3lINEQCA01RlokiOAS0VIWQVMU
gU1teQcN3YRLQ11Jj8PH83u/wzlwNo5b+82JJDWnW0yup5O/haQym3Tssj6Z
Sm7mkyvPlnlk9/SSXnQO7Y5d1ge6y0t7jnW7pUt6T5/qoq7pJ93mnf2oV3hh
P+hz3tp9fTZuNvns7l339YD3HPKVn3zjN4f85YiTM0mhkKxzk2uscJu7bLDN
Hj9Y9e87zos9sr/G7/tWo5Ssuv+xt+x/DXEjkA==
       "]], 
      Line3DBox[{2240, 1726, 4131, 4130, 2060, 2229, 1722, 1193, 4258, 2748, 
       2234, 4393, 1218, 4385, 1746, 2228, 4386, 1210, 1741, 4135, 1214, 1779,
        1256, 4343, 2075, 2256, 2072, 2268, 4399, 2266, 1769, 1252, 4274, 
       2754, 2270, 1292, 2306, 4347, 1803, 1295, 1836, 1329, 4350, 1830, 2762,
        2760, 2342, 2381, 4435, 2378, 1857, 1362, 2385, 2105, 2425, 2108, 
       1409, 1929, 1455, 4355, 1922, 1457, 2533, 1955, 1506, 2590, 2798, 2794,
        1985, 1545, 2148, 2018, 1591}], 
      Line3DBox[{2362, 1848, 4433, 2819, 2367, 2837, 2365, 2839, 4545, 1382, 
       2892, 2408, 4352, 1873, 2769, 2964, 4565, 2962, 2402, 1872, 1381, 4304,
        2405, 2112, 2442, 4450, 2440, 1899, 1423, 2445, 4548, 2122, 2493, 
       2491, 1934, 4466, 1475, 2496, 2131, 2553, 4484, 2551, 1966, 1518, 2984,
        2985, 2613, 1996, 4500, 2618, 3011, 2617, 2858, 1601, 2856, 2684, 
       2831, 4542, 2029, 1602}], 
      Line3DBox[{2638, 2010, 1583, 4333, 2805, 2643, 4506, 2712, 2707, 2041, 
       1623}], Line3DBox[{2678, 2681, 2028, 2676, 2671, 1556, 1992, 2602, 
       3005, 4571, 2606, 2139, 2546, 2548, 1964, 2544, 2540, 1468, 1930, 4461,
        2482, 2485, 2118, 1418, 1897, 4448, 2434, 1415, 2110, 2393, 2395, 
       4438, 1869, 2390, 1376, 2098, 4432, 2349, 2351, 1844, 4428, 1344, 2088,
        4416, 2317, 1312, 1814, 1308, 4418, 2322, 2329, 1819, 4417, 2325, 
       1313, 4348, 2080, 2282, 2952, 4560, 1276, 1786, 1272, 4407, 2288, 2291,
        4412, 1791, 2757, 1277}], Line3DBox[CompressedData["
1:eJwNzr0rxWEAxfFDuVwkb8m95LXoThRCyWbzEiaDAXdmMBpYRRZl8xfIX0Do
Z5Ld7B+wGCSTz3D6nnN+53me3+j+0dZhQ5JVOm1Nam3JGc5hB53wk3jblUxg
fyl5b04q7UmVCt2MzW5L0if/lZPPzuRO/9WU3Nv+6H5pXLdNY3TsvifdMP+M
ZXzEV/0QXzg7ghe6Km6685Iv8edYwSubwn6An6ZBqvtW1+/oN7y9J1/rP+QD
/oaf9a+L/Js71+RvWnFm3n5B3yO/2PfisvzAN/JTtCR34zr9A3b5I50=
       "]], 
      Line3DBox[{2713, 3040, 2715, 4516, 2042, 2708, 2917, 1620, 4507, 2644, 
       2799, 3022, 2801, 4530, 2011, 2639, 2904, 1580}], 
      Line3DBox[{2718, 3046, 2046, 3078, 4517, 3076}], 
      Line3DBox[{2721, 2724, 4557, 2934, 2719, 1624}], 
      Line3DBox[CompressedData["
1:eJwV0Lsv5AEUxfErMd7rkZBsgmxEJ4hXzY7E/gFaHdsulcImgkql0WAmSAjx
2GBtMjMK26xkZiuFZItNCI1OJ2FE4aP45txzzv3d+f2mbXxqdLIkImZxXBUx
XB3RUxORpH8bItIVESl081n+2c5n8xAK/KpuBTN8hn/Sp8siHvhB5GXL+ho3
P6AKt7IKmrK3UBrx3d6SnSZ5gq7Jzsyd8i4cubkob3z/PV2OLvA/5PO0zq16
1KJFd+DutnwLZdj1TKt80/zTMxu0md+RZ+z+kp1iT56Rdej+mAu63/JzXPDX
uit6L78xn9T7Xj6vf6ZFtKMrEfGp0lzufzM/+oZ+79aHEfml/S+0SKfpP9pn
pxcv5qQbh/IUv0/n3Dl0p8i/vu/gTr5Dm9xc1//Xj/EfPd+MrDmHcu86QCdk
X/HN3O6ZSVpC3wBenUaZ
       "]], 
      Line3DBox[{2756, 1790, 4411, 2290, 2289, 4413, 2954, 1317, 2949, 2951, 
       4284, 2281, 2079, 2326, 4563, 2957, 2324, 1818, 4422, 2328, 2327, 2093,
        4351, 1348, 2355, 2816, 2359, 4170, 2091, 1343, 1843, 1347, 4296, 
       2353, 2097, 2392, 4437, 2389, 1868, 1378, 4303, 2397, 2109, 2436, 2433,
        1896, 1417, 4310, 2121, 2487, 2823, 2489, 2488, 2130, 1514, 4482, 
       2543, 1963, 1516, 2911, 2549, 2138, 2605, 3004, 3003, 2609, 3007, 4572,
        1598, 2675, 2027, 1600}], Line3DBox[CompressedData["
1:eJwN0M8qhHEUx+EvhvFnlFnZKUuXILKhREmNhZqa0qTU0Lw1MqmxmIUyY3IJ
YseKO7BwC4olF2Bt7Vmcns859dbbb7lZ1NpjSfbM32xyNpc0eGTqpjSVvJWT
r8lko5KsmifdcztnnTtc5wqXOMFxfpaSb99/8IevfOc9XzjiA2/5yFMO2OKQ
gwX/o0d6qAt9p7d4zE2W3U90wW17S3f0rp5h276vK7qjL3lg7+orfair7Nn7
bNgX2bdfs2mfryYX08mz97hx6+o17/Rr/gH/PyXf
       "]], Line3DBox[CompressedData["
1:eJwN0LFKQmEABeBjpUU62NLW0NYjRGZEQ9RS4BAIRVggXSTDKAIbHAKlZ4ga
a7I3aOghamyOnqJvOHzn/Jd7ufyrZ1etfinJofxVk0JSS3o8XUzaMltJPuaT
73LS9GxdXvWhs2u2uccG17jCGZb4NZf8eP+dn3zilI985oQvLDjmBSfc5Akb
LNf9i76ld9izt/VzfYcVu6v3uWsX+kDf1y/1G/1Ar3Jg37Fl3+r3+pFe59Ae
8dhe5sh+YMeuLfnOQvLmPsbOmu7nVzak6/k//c8jyA==
       "]], 
      Line3DBox[{3061, 2896, 2523, 2975, 2826, 2980, 4568, 2525, 2978, 2524, 
       2979, 2852, 4549, 1536, 2903, 2900, 2989, 2988, 4569, 2827, 2995, 2996,
        2992, 2994, 2993, 4570, 2853, 1578, 2916, 2913, 3013, 3012, 4573, 
       2829, 3019, 3020, 3016, 3018, 3017, 2859, 4550, 2933, 2932, 2929, 2703,
        3032, 2832, 3037, 2705, 4199, 3036, 2704}], 
      Line3DBox[{3075, 3077, 2045, 3045, 2717}], Line3DBox[CompressedData["
1:eJwV0D0vA2AUxfHTeKvSBJuFCFKLL2CRiFiaCN0tTQwiYRRWX8SqFulApYO3
iSYSg8kgacPAF2CQ+BlO7v+ec+/zPHlm6vu1vUKSGjX6k7WR5LaYXA8mc2NJ
Gc+PJxdqm3eKr0pJixq4zb+311RPzF/yz/Hsf8Z/srPAn+B16FG/KGvJnvWT
9C3v6l/xp/xMfuOca3rjlQeSZV7fcDI6lEzxfunHXlFfklf0Fdyx80AVs1U7
m7IqXpFtqOu0ZPZIPaCCmS3ZoblV/jFu4q7s3Tkfak8/jYve9qXe/d+Jt833
8C6v7i0v/m4H/wGwRS6z
       "]], 
      Line3DBox[{1229, 1751, 4143, 1234, 2285, 4410, 1275, 2276, 4268, 2273, 
       4402, 1267, 1781, 4154, 1271, 2320, 4421, 1311, 2312, 4280, 2309, 1303,
        4275, 1808, 1306, 2346, 4431, 1338, 1838, 4167, 1341, 2387, 1371, 
       4293, 1863, 1374, 2430, 1410, 4300, 1890, 1412, 2478, 2481, 1471, 2539,
        4481, 1509, 1957, 1511, 2597, 2601, 1559, 2670, 1592, 4326, 2020, 
       1593}], Line3DBox[{1230, 1752, 4145, 4144, 1222, 1747, 1227, 4269, 
       2274, 4403, 1268, 4265, 1782, 4155, 1260, 1774, 1264, 4281, 2310, 1304,
        4276, 1809, 1307, 4291, 2347, 1339, 4288, 1839, 1342, 2388, 1372, 
       4294, 1864, 1375, 2431, 1411, 4301, 1891, 1413, 2479, 4462, 1460, 1924,
        1462, 1958, 1512, 2598, 1548, 1988, 1550, 4327, 2021, 1594}], 
      Line3DBox[{1231, 1753, 4147, 4146, 1223, 1748, 4140, 1228, 2275, 4404, 
       1269, 4266, 1783, 4156, 1261, 1775, 4152, 1265, 2311, 1305, 4277, 1810,
        4162, 1296, 1805, 1300, 4289, 1840, 1331, 1832, 4166, 1334, 1865, 
       1363, 4424, 1859, 1366, 1892, 1414, 2480, 4463, 1461, 1925, 1463, 1959,
        1513, 2599, 1549, 4497, 1989, 1551, 2022, 1595}], 
      Line3DBox[{1232, 4259, 1754, 4148, 1224, 1749, 4142, 4141, 2237, 1215, 
       1743, 1220, 4267, 1784, 4157, 1262, 1776, 4153, 1253, 1771, 1257, 4278,
        1811, 4163, 1297, 1806, 4160, 1301, 1841, 1332, 4286, 1833, 1335, 
       1866, 1364, 4425, 1860, 1367, 1893, 4175, 1403, 1887, 1406, 1926, 1464,
        1960, 1501, 1952, 1503, 2592, 4498, 1990, 1552, 2023, 1596}], 
      Line3DBox[{1278, 2286, 4270, 2283, 4408, 1273, 1787, 4405, 2279, 2278, 
       4406, 2081, 1314, 2321, 4282, 2318, 4419, 1309, 1815, 2315, 4164, 2313,
        2089, 1345, 4429, 1845, 2352, 4168, 2350, 2099, 1377, 4436, 2391, 
       1870, 2396, 2394, 2111, 1416, 4449, 2435, 1898, 1419, 2119, 1466, 4464,
        2483, 1931, 1469, 2537, 2541, 2547, 4483, 2140, 1555, 2603, 1993, 
       1557, 2668, 2672, 2679}], 
      Line3DBox[{1385, 1876, 4173, 4172, 1389, 2456, 1427, 2414, 4306, 2772, 
       2413, 2451, 4451, 2447, 1902, 1425, 4311, 2779, 2454, 2501, 4468, 2497,
        1937, 1478, 2785, 4527, 2505, 2559, 2555, 4359, 1969, 1522, 2793, 
       2563, 2616, 4499, 2565, 1568, 2689, 1604, 2031, 4195, 1609}], 
      Line3DBox[{1386, 1877, 4174, 1390, 2457, 4454, 1428, 4444, 1904, 4178, 
       2415, 2448, 1903, 1426, 4312, 2780, 2455, 2502, 4469, 2498, 1938, 1479,
        2786, 4528, 2506, 2560, 2556, 1970, 1523, 4321, 2564, 1999, 4191, 
       1569, 2690, 1605, 2032, 4196, 1610}], 
      Line3DBox[{1387, 1878, 1391, 4307, 2458, 4455, 1429, 1905, 4179, 1433, 
       4313, 2507, 1480, 4452, 1939, 1484, 4317, 2566, 1524, 1971, 4188, 1528,
        2621, 1564, 4486, 2000, 1570, 4329, 2691, 1606, 2033, 1611}], 
      Line3DBox[{1438, 1909, 4458, 2464, 4181, 2462, 1432, 1908, 1436, 4315, 
       2510, 4472, 1483, 1942, 1487, 4318, 2569, 4492, 1527, 1974, 1531, 4323,
        2624, 1567, 2003, 1573, 2694, 4512, 2698, 2035, 1615}], 
      Line3DBox[{1439, 1910, 4459, 2465, 2463, 2123, 4356, 1488, 4473, 2513, 
       1943, 2519, 4186, 2517, 2132, 1532, 4493, 2572, 1975, 2578, 4190, 2576,
        2142, 1574, 2627, 2004, 2633, 4192, 2631, 2155, 1613, 4513, 2699, 
       2036, 1616}], 
      Line3DBox[{1440, 1911, 4460, 1442, 2897, 2466, 2124, 4357, 1489, 2514, 
       1944, 4475, 2520, 2518, 2133, 4360, 1533, 2573, 1976, 4495, 2579, 2577,
        2143, 4362, 1575, 2628, 2005, 2634, 4193, 2632, 2156, 2700, 3033, 
       2696, 4510, 2037, 1617}], 
      Line3DBox[{1441, 1912, 1443, 2898, 4316, 2467, 2125, 2515, 4567, 2976, 
       2511, 1945, 4476, 1490, 2901, 2521, 2134, 4361, 2574, 2990, 2570, 1977,
        4496, 1534, 2914, 2580, 2144, 4363, 2629, 3014, 2625, 2006, 1576, 
       2930, 2635, 4503, 2157, 2701, 3034, 2697, 2038, 4198, 1618}], 
      Line3DBox[CompressedData["
1:eJwV0L8rxHEcx/GXOudHCsVAoptvs1oko0E2l1IyI9eVLt/lusEg52SSohxl
dH+Bwf8gi8H9Ix7f4dXz+Xr3fn+GT+3odO9kLMmurFeT34lkdSY5mE6q+qf+
M5484qb5hrzrhT7A16mkhU08kx2+jVtS5zV7VayU71SSP29+4wiH+IXP+IFP
OMQers0lL/yGD/BBv+VvvIk9PMcV8z6/xpZ+X97wC3456YYX2NY72NfvpMsL
syts4Gx543afL/DF8k4/1Jf4snT043J33q67ur8Y8a55W/8HPpEpdw==
       "]], 
      Line3DBox[{1625, 2720, 2935, 4558, 2725, 2722}]}, {}, {}}},
   VertexNormals->CompressedData["
1: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
lHO5pOTpxIPW44vIC/u3i36N+ppDbrADZx2b7HjK9ZnrVETsOsRtNrxjQsJS
JYfMuGZgvU40U/+RMerHBhrixwfBSTLryytLGrwuTPmuLM2EkQ2BPI/5/bAr
347LP8ckpWu+dbV9ySdbzhnWz7jPBo/eGPezSnQYF7L63wVSAhXjb+7qVhvN
PxLnJzbuY8CSqxL2QiYdPv7xffLcuheQD8gP5AUwPDw6ttDIzJVbBhtGMsl5
mkUocwUPkCfIG+TL1cPrLoEvByS3HrritK0CLkt/a98yqg/Yr7BvYc9CfiJf
kadVojnGiOaK88Q54lxxnjhHnCvOE+eCc8L54P3g/eF9IZ4QX4grxBPiC3E1
hicRvhBXY3gS4QtxhfuK+4z7i/uE+4b7hXPEueI8kSfIG+QL4hXxi7jFvIX5
C3PXk+7ZOtN03pBU49ua0qxkohV0PHkcVwj4GF/H59Ev0T/RN7HfYt/Fnou9
CHsS9iPUL9Qz1DHUEdQV1BPUNdQ51DfUF9Qb1Jmxninqndg3UQdRF1EP8RwE
z0XwPAT7JPZL7JWo46jrqOeop6ivqKvYT7CvYE/BPoD9AHsB+gH6A/oC6jLq
NOoz9kDshdgHUTdRR1E/kf+oB6gD6DfoP+g7m27SnE5ZCkhExNkWPatU4jH1
CyXmSwfEBm9OU/ceIBOZz8psSAZZFeCjfdirB76UtJVN6uaRxM72xkk22cTQ
mb3wswp1zD/QT9BHNER+cFnkD8kiX0CdRd1FvUUdRF1EPYwUrU9NtF5P0Tpx
fbheXCeuD9eL69zw9MqrSj8aoadMOWU2sZJ8Vh4Q+Jhy4f2g/+y94Vyi8lnJ
eMsGQgqP7PWYXE4D8vvuM43NbDLHfEO98eEqsqns1q2j85lAmaboLXmDSU42
saUmjK8mI+yEm7JtLNATGv9aci+T/InKqA7yGCC6s6afiPPtgQmfXW5+X5xJ
Qr00POS8Bohsjli08eg6dy2aNtUtWkBSHm1d+yMsmgj0vThvfrRDj4/j/c4v
A2RlsCTttFIGKb2hqH6svgvqh183RW0fIP2PrhvfksslmtNla82u94Lri4hX
7F2fCwXfffX/+3sdMy63Z/z3dzrwMb6Ozx9JGeiRXkkp9N2w+NV/f3ci7/Hb
z//9vYl/hq2yk6ObC/vmN3n893cSXKPP5f/39xG8IzVP5Z8oJeeHe3KTH1JJ
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
896IQxI0tlycEt8IW58yk7UMuGTzilt7R3XzSJMO/UaF7D6MHF5oefwLl9Qd
m/Jb6w+PBIf05t1g18Iks6qPsyU8Umua9XPImEembjbZyt5dA3XvFwaXl/JI
hfP8tFm3eGTWxdwjwQer4WV3ZJhaC4dErBI+KD0sIHNUd5yZoFANTls3LL4/
jUv6a2bnGC0TEOUf/hFt8tVw/vRHpyfbuOTShvsXVUcKSGCEwNxtZDU8VH7a
oRfOJdXepXHuFXzS73/szt5h1RBcE+k+7TGP9Fufuimo5ZEs21xpRXsVvB83
uDV1P484DSXaOCjxSfB47YlmXVXwaMeuhzk6PMI75l++eDWf/DGqu27+qwos
x4YsXt/BJYuXblsedpZPLng/nFPbXwVVAYnrF7axyeZxUg25+UKiO9qro2hJ
NZxTCovvn8ghV93KjeIZAhL0h3HCZ14NHBznvzRDxCGuH6O3BRM+uTw4I6C+
rxZodef9ilZxSDmj8e/r63xS7BqU6GhYBwURy5eGyHBsQ748o2m6kJRwZx6Z
95gBuM8G993gfptYap8N7rtJpvbbzKL22eC+m1fUfhvcZ4P7bnC/De6zwX03
uN+mQkMwsW6jkLBbxIGf03NJ4KqVxcxLXFCvYd6bsk0M4oLsGVcCquG7bs4a
i82tsPbAEeGBSDFcTC++t7aoEoQumyq1TrX+y5MwX8JcCfMkzJcwV8LcC3Mw
zL8w98IcDPMvzL1qqBwM86+NVO6FORjmX5h7YQ42lPV/+Rf6yOgro5/Mpnzk
vZSvnEP5yehro8+N/jb62uhzo7+Nvjb63Ohvo6+NPjf621cPrsqOlenH5+I9
qbkdzVDzy+F2yrJmuOOn6u3Zxoe3onHTQp80QIVy46puCQtUAr0s3TuE8F7H
Y+2aC42wooB1ZdiSZmjZ+GIVM45HJi4/4agwuZXMLXAaVM1lQV3B3Ha6k4D8
HVwwovMSi0Ts29+js6EBQrr5L/oM+KT8Xedkgw4OWRRhvS1lHgNuadDXtn/j
k9XPLQvO/+SQI8J9tPaMWlgy6/3XhnwBMbLu/LixkU1qhGazqk/VwtH6zaYD
aQKyp7PexcycQ2p3dElaHWrA09vptHmUgLT1BLxmPOEQxcCJ6+/PrwbsW+xj
7F/sW+xj7F/sW+xj7F/sW+xj7F/EHcQhxB/EHcQhxB/EHcQhxB/EHcQhxJ/R
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
MZnfvzLZaTELnr7v/bN4bxzxmnpTlDJNQqrqMlxODzDhttv9yb27M4jNFbXu
q7oS4ldyZ7d9IRP2VpxP11LMJlNUKtcMLpMQ8mP7456rTAha22FYevpl/oit
Yfp3uyXE+OTA1dHzW+GKq7UpY8djovtLaZTdLwlx9f0c7KzSCiUDnW8VdqSR
MU6/hf6y7/9PPW5WaEcLsC7mTN8H78jJJ88VjKUSkmTg2vOsvAV0+ovLNvsk
54/zOeTzv3wv9f1rJfWDTaBwZgtv4+0HJDkuJHxenJTc1gHB6bAmiNC7WjD9
dhKxvjQi9E+ElIQ3XRjgpDdBsFP4+cupGaRIyTGJ7yclDV+0GvZUNoHy9bae
4akJ+cs8PinFr2wjd1JEs/6XI/y8knNmvuQucZzetGLC/DZi52tp5nugAdL+
dprqSeLJnTLdrwfHtpHEEcrbdXIaoLC7Oduh9SWJ99Moi/9PStY5xfwdrdII
l17v69AXviVlhvquZVVSMnfkjLejdjWCum7VCeOMuHzGogTm/3w+7/WWKv/z
9zhObbrKE2+TRoVWh/9uthGzOxGLc2/UQczGxh2GE+PIw+t9pY+82sizbQns
s6PrQd7yWqz4UQrZuMoq44lDGyk9GebVJ9N/vfW5QWtkunqda/3UP9pt5EDY
jddGQ/Xg9D7mTMfzJ/l5BSsn3ZLp+22KzW9KZbp+2Up48uJZGOk7nP7gU2sb
8TvkbOAtoUPa7F3PJ8fHEBfuavXTeW3krbcuyyKMARkmsZZFK54T8fadumlR
bWTf7ieKOnp1EHe5x/ZQ7EtyKfx3x9ETbYQX+PfAlO91kLDp/qs3/fFkzLxh
D25ObSeT9nrN8I+mgYrChTQDyxfkTfjm4K1Vsjlv6blW5y8dQsyrN4RYppPK
zToXCq61kRlzBg/k7q6DgjtbB6z+1BBcLZKDODfeSSFvGHuA1H0nKsGLSsf4
N5DRSgMDrbZS+Cl48Wja0xqSI9yoUjbQQuKz5ZfErBDDwt7A9W6FZUTDr3dk
/gY2CTae7bl2kQj6sg7p27OqiWV77/i7dhwi6HfbVf1BADkrX8ecWl9CBPU3
9m0bziNLNy8Y4XtMACt/TGcK9pURl7KtN2KceSTdc9EL1Zd8SKifs/dGaiGZ
f+md2l17AYk4k8lne/Pg57XCmubjJaTcL9YsaKWAeGQ1Jc8y4UGG3IDHKP0f
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
W+vTEiQ+1+pAbumakkOp3H9rllWz1mPFBjhBu/T4wlHuv3XszanSxJuNUOy8
NaFfm/tvnfTk/XVDxWawjRv1sZ/D+bcmZ9xybrjSAqfGG3VtvsuBftWdNeJx
fBhtnpojV1MHTYbXVgYEyvrx77jx51X44LV/6i3/kfWQeo8RFneOAw/EOf//
eeB/JkZFCJbUg246bfCNBwfK8lrU9vzP/zMMD13lXg+fTe0evHPhwK9mDW72
GD4Y7Axbe0mGv3pDc4+lOMh+7zwHjpwCHxzyHMLSPtfDkcfNRfcjWaAz+uCz
03958NQx7MW0gy2wMPdRtZqIBcZJmRefBfLBJ3yMx6W/jXB+/shdZ2W4te30
9LkPhwvgImHtLA+th59/92c9j2qBeYE03n9LebAgsEtLdJwNrVdTw4q9msij
tbm5zhoC4m/qGlPSyQS54X2qNS1N5OKdMOtN10Wkbe4Hbc1H9eD9ivPyI62Z
lJdMaz2mJSYGj2G/fQYN0EdDXw39NPTR0FdDPw19NPTV0E9DHw19NfTTULej
jkf9jroddTzqd+THyJeRJyNvUKZ4RCXFH5A3LKJ4BPIHxEHERcRDxEHERcRD
xEHERcRDrCesL6wrrCesL6wrrCesL6wrrCesL6wrrCesL6wrrCesL6wrxsWP
EQtzOf/W3HGDT8ZubIVA14wJSTbcf+u1ng0uHw43wXF5l9SwIu6/dfZ2dru6
jLecVveOcldlkj3JxLD8Jo+svlLDP+7GgpOPba7IBbBI7KMeudVOAjJFVzQv
R4a3VinN3ic2McmyUJWvij8FJMio9YazcSOs6W7Z/jCbSWK8htv4HhaSoWOP
utmusjmuyW37NJ1FrHw0Iu1kc1jRTq+i5QwNfry59bp9O5Ose3XM/j5DRIYd
UWp9yamG6U7Og90nmWSuqveCMVwR0f6sdtfatBokJocEPreY5BUEm2T8FBG/
NL+jtneqYK3doJZ/CpPc2rdZFNYvImfbVbULhJWAvi36uOjfom+LPi76t+jb
oo+L/i36tujjon+LvhL6TOgvoX5DPYc6DvUb6jnUcchrkeciv/1J8dp9FM8V
Uvx2gOK1yHO1KX6LcxrnNs5rnNM4t3Fe45zGuY3zGuc0zm2c1zincW7jvL5G
zek6am67UPMa8Q7xD3EP8Q7xD3EP8Q7xD3HPfO+FtRZHOMTq+O7+93t5xIl7
wmCXbC7Aq24buS42Ocsbtc5UwCeTVpg292UwoCD4/KcFRhyS76tvcXK+gOz8
XGGwgkODpPQd0TVHOYQ1LeKM9S4BiWGmt88YVwvCinmWnc84xPl98ffHtwWE
b7j62Zpl1RBWIIjQjmSTHw8u5p87IiS3PrrpRehUw9nlsea/Y9kkru72/e2y
13tOrlof0FsFlw5KkrJeskn1DLbrHNnrntudfPcXVoG2e3fuoWw2qRPdGF/n
KSTeFlX9y25VQdcfJS+FEjapsanO9JG9fi++Q3HQuQrMXn4S5GezyDPDlL1/
5onIInZ4Uu6TKtjBJCsPpLHI62LygCub85+Gvy0Y8bka1D2KU049ZhHf2Imt
wd+F5OeuD5YvBTUQNKNjjjSERUr2N8t1PRIS7oHvdyLH0MCEyhuUqPwBcwfM
G9qp/GEdlTtg3pBK5Q8JVO6AeQPmD7ZU7oB5A+YPmDug34r+K/qu6Lei/4q+
K/pZ6G+hr4V+B/of6Hug34H+B/oe6Heg/4G+B+pA1IWoB1EHoi5EPYg6EHUh
6kHUgagLUQ+iDkRdiHoQdSDqQtSDyRSv/UDx3GCK3yKvRZ6L/BZ5LfJc5LfI
D5AvIE/A/sF+wj761d2zYus4HsE1XdPVa9RhBqRrlh25ZP2/r/9vHaB5hK1o
oMGj4pIUubM8gqu2YOzPU7a1cDsgaHFdPI/gWrQo8qX622qwYBwZcs/ikizr
6RZbX/KJ/cIH8TO7q2Buyu+oDx+5JOe+88f3L/jk0g/TDxGyPpp2/YBUKZdL
3owj3GnJfJKeuCp8ZF8VnDzz/PeufC4pnbOj0C+RT7SnhC08O1AFs97wNqa8
5RD/u658P29ZvzNvP5sYUw15dhVPvK5ySFH1ZM9uHQFJGdqmYx9fC9O/WHDi
HTjktXf4mIpWPhnpOVimnEAHrplXn9sEDok6GbZN5xafBNPfXfB/UgdJcy40
BF5oI95pG24V7nlBaG3W6qve1gHPenUYd0UbKTSDHHPjDPKx2s2Jn1kPmBNg
boB5AfqwbyhfFv1Y9GHRl62j/Fj049CfQ19uIuXHoT/HoHw59OOCKX+umvLl
0I9zpvy5OMqX86Z8h27Kh1hO+Q/oO6AP0Uf5D+g7oA9xkfIfXCnfgUn5EOg/
oO/gS/kQ6D+g74A+BPoPqMdQn6EuQz2G+gx1Geox1Geoy5DHIK9BPoM8BnkN
8hmcHzhPcI7g/MB5gnME5wfOE5wjOD9wnuAceU/VPVB9gPWfS9U99oE/Vf9v
qbqfSvVBBlX/36i6P0H1gQ5V/6298p8vpfMIrgtnnRrat6oaDuvWHLzqwSO4
Lv2dem52Ri04VvlWB03jEVznGH4IHj+LAcwH0zszP3EJrub3di5PC6gHcJo8
r38EGxIzZ7q1K8j0X+PJS0KF/51n+385Lua6mOdijou5Lua5mONirot5Lua4
mOtinutP5bjPqFwX81zMJzCvwJwC8wnMKzCnwHwC8wrMKdCPRn8afWn0o9Gf
Rl8a/Wj0p9GXRj8a/Wn0pdFHQ18N/TT00dBXQz8NfTT01f75aZSua6F0Huo7
5N/Ix5GHP6b4N/LxPxQPR/6NfPwfD6f4zU2K7yDPQX6DfAd5DvIb5DvIc5Df
IN9BnoP8BvkO8hzEa8RvxG3Ea8RvxG3Ea8RvxG3Ea8RvxG2/3wneS+9z/q03
tHy4efIyPjt+9Nbbg1w4t/qJjX0MHzZ5nooY9qcSXn2/ciDxCxe0Ruj9rTjA
B81XS0xvqNZAqNNp8YMbXDi7pWPqxwV8cBv2UMKfRYP9bOaWgDVcWKOxa50G
hwf5D14KjBYwQJHaZ5BI7TuYTO03wH0GuO/gC7XfAPcZ4L4DdWq/AeadmH9i
7om5GuZsmK9hroY5G+ZrmKthzob5GuYlmJ9gboJ5CeYnmJtgXoL5CeYmmJdg
foK5CeYlmJ9gboJ5CeYnmJugX4z+MfrG6Bejf4y+MfrF6B+jb4x+x0jK/0Df
A/0OL8r/QN8D9Sfq0eGUDkX9iXpUh9KhqD9Rj16kdCjqT1tKj6IORR6PvB75
/CuKxyOvRz6PPB55PfJ55PHI65HPIy4jTiM+Y31jvWOdY31jvWOdY31jvWOd
Y31jvWOdnzTcMSHjN+/f+nFpAymLKgf/hTv3CIfz/639SiwdYUEZXJsnGtGi
yP+3bvQpvJAi/gHKvkyOW/FwsljzikeS/A9i/lf529oVPwG/xn/H1xNvnSmV
/WX5qzSGccaM/kGWHv8mWCJ7XU7jZN6GKH5+9UQ75nbjBqK6aJxBvWEb4Pfh
z+H34/fhz+H389Yy+jOfFJJmq49jPgbzCevQzxi5VXyoqJzk7qVQSSL9/yyO
SmGTGT78PtNsIQjaj+56nVYOixasuVSmIoSyp3sG7JI50Npx6+Toom+wSbSo
ZEK+ENpUTlfdWcgByymXdj62qYSjplnzh/6K4f2DPY91LVrAxlTJYq36D9hd
MDzFO08Co75sYsYkNEHkIdNVxQ7fwZ9BF20e9r//R/DNo9kVjRBbfHqllmz+
mV7yvb7lkRQe3hx5n5ZIhx65kPkBByvAddJis60npJAaYn104Zc6CKz04l/q
q4H1fqsTV+ziwd5JuV/VY3lgF5jb6dhWC0VddKf2SiE8S9aNXGXLgi+vPoxP
aK6C3dtmsjwn84F248yVT248WDp1k5KxXi0sGso8ejNRBGfNi6LNrZgwMsV2
ZrtLHUhVzUSeJSL4+WOko9K4ZtjdOeJ6IrsBGnZMCFR2ZIPuxjXuwTL9f95p
xyeDxgZgfaEXzXdhQ4LjnJzvV/gQnx5rYbu6CSbNujLu+C8etOiMKTt3kQ2O
CzdXuPMYkNlll/L6LxuWrinnb6vgQ2mBntxXXgN4vXrvGTNBADsGAytHxLHg
+dj+bw1dTZDg+lGeryiCJa6H+1btbgT/9PPGJiGN8JYVen2puRDc1iUeWu3R
CjEiiw8Bg/Ww8qnQuGKzAIbtK8jclsiC/CNbn8172QQhu785fNQXwWPrUMe+
+Y2wVf2Nx0r31n/r7VU9jHdjBdA77wuP8Y4JJ47HHl63jwO/n769UrqUA7Ud
Q1d1/DkQrfBx39dMDtgWBUjTf7dCA3/85ntzG4Cj2BW6YbMIRn30SN81rxlc
Rpzs4ZxrgPn2mayNI8RgcZdms9tSphe7eudr5zaAwYddpY+eiUG/7dSmxTJ9
uuXMxGV7WXQQuedvnKYnhCkF7YLDt1mA9Yr1i3WLzwOfDz4XfB74fPC54PXg
9eF14fXg9eF1nY8cEzqKyHhi6S5G3AMBuMbMmcHd0Qjx8wS6nhImKOaf+WYw
XAhrf8mlZHnWQ6KCxVG5iSw4M/E/m579Qsh3IYXOZxjAfiKppnUxIf1p9rpn
b/ng/C7bJZU0g+nVXwfe7WyEm2e3NQRN58GZx/Tk4lIOvOEwnoqFzeD6X+eT
Xc4COHjwWO67ztZ/9YT1hXWF9YT1hXWF9YT1hXUVmHjZyCiBDUvUzn7/28AF
5TzFOR6TW0HoT6YNTeXAJ/vfx44c4cFLU/uvFzY3wXFNW3v9Kxz4XD5Hr6ad
Bxl7fZ3G+NXD5GWbR96tbSb3itmVTUp8Errf1md2EQuYsVO9VMtaSeNhtdfW
3iJS1zGr1tCeDpE3vacEGzNJ4YRfY/UKRWReZ7nL+9Ia+K/Jc8XxCUwyduoU
hwfNItLv+uVOWUoNOFB9HkT1/R6q37EfsD+wL95Q/XCJ6g9Xqi+wH7A/sC+w
H7A/sC+MqPtyjbpPY6n7g/dFQN2nV9T9wfuC9wnvz9qruX61R9gk/JOnXONW
PvEaGfncZV0jIC4jTiM+I34hniGOIX4hniGOtVE4JUfhFuIV4poxhXNnKHzD
Osa6xnrGOsa6xnrGOsa6xnrGOsa6xnouj0s77+fJJbgaJ9708opqBKc/V6be
k/Hs3q5vkZeXC8m6rOF61pXVYDF1peeLMDZ5Yzv4fMaQgKyxU/W/e7gW2nRD
+857sknQQ40r54mAnG9qvnf8Dw0qTsx+NMaaTWIPL1NL8hOQMlqP4vFbDCgl
r+98XsIm8eby/50Pl+naR6rG92V/py41z4TUfMO5hv2G/Yd9h/2G/Yd9h8/P
hnqex6jnaNbIZZ6T6WFFXTmTz1F8khCz2HbrzmqIum+21PkCl9zb78a6s5FP
Pq2vSTCQ6Vaaedbyo0u4xMlss0vLHx5JuHPNXjyMAc5K3sq1PA7JfnBeuTKe
R3o3ZQ8tsq2HzdTcZVJzGOfvMWruWlFzOIuav4i/iMeIw1oU/rpSeLyawmHE
39EUHiMOYz9jf2NfK1HXaU5ddyJ1vXidD6nrxuvdTl0nnbpuvN6P1HXupK4b
r/dAhO/+4B9sEBRb0RZs5oJSxEzuVRXmPz6B/AJ5BfIG5BHIH5A3II9A/nCZ
4h93KT7iTPEQnDc4f3DuIH4hniGOIX4hniGOIX4hniGOYd1jH2D9Y91jH2D9
Y91jH2D9Y91jH2D9Y91jH2D986n76E7dV7yfolnyGvHc4SRIZe8X29BckiDt
HxL/+An4Nf47vq7ecCr0YOijfPnlbQrb17QT+HjjROunWvgAjW8Da0NIjLl3
/mzzdmK2Rvr4OL8W8kpAdURtNOn+tNokdGk7mZ4gGjZOiQZ7DAI2WHpGk0bX
mogd9u1k4ZbfN7Nv1kKi0jNd1YQEosw7xFJWbScPKm9/mVdCg1KFlCmp/DRC
SgxWrkhrI+uMny4ve80A/Nwafo4NP7+Gn1vDz7Hh59fwc2v4OTb8/JoHbfD1
9jWfyJhok2aPOjHZmKlTZPGTCcmSJ42Z6Xkk47LiGP29EpIZ5KgfoMkEjznX
onZ3FZE5FwuMmJPE5InvholHGllAV6i8MDn6K3n54HxeiEhABs0HxItduGD9
ZbS53c+vxNB9IHw58EjGYrUXmtMFYHrs+xXTlq+y+3DZfvs6Hnlfdt+jb7wA
3MyvDL/omUOm+V7t2vVMQhyGqSmW3miFqaVrXt7f+omMFRXV7ZwoIa837zh0
OZwJb9N/d+U1ZRHVu7q5UWukZOXNvidee5uBabHHtLadkIV6Wu56yyXkr+bP
igM7mBBjNT6s8+Jn0jZHo+SvvYio3K+cEiZmwzjp1nmec76Q9RUKgx0RPFJv
n9Q7SUkAe1Lu0be4ZRHNzaVBRlukpPOYdsYik2ZIG2vvzxHmkNHhtecqX0iI
eIrN3oUy/thxu1l/k3M2GTHOO6ewT0KK4qaE3nVrAcuHFyzKUj8Rn5Fu/dKj
YvIzimY0L5wFrUVNP71MPhHzkIsOt/zEZG/Tk2m7LrFgg/SWyjXdQrImxTGX
niEgfaM3jn4oz4O8Oz2eW6Z/IGlShWJjQynROUZ/aJfWDAWhwZODx+SSyLW3
105zkxB49ei0sQkT/M8+H6CNe0+0rJO2Hn4oJZzVTOVFejLc+Ppx69i6HHIg
aK/JqcMS8jhcc2DrfCb4vi9Zn6JAiIVg2xUzLSG5JH/jwrpnXCCq+8Zn/80k
txqMvTxeScmhYWqeB7iNcK55u2OIzwdyrQ8yvd5JiM2ph1L/o63gttRCkpvx
huxJcSq5v6CNaFyne6v8qodZJa8cl37KIiEamXQeW0KO+gafmlbTAj9sbo4f
Keu7pV/+TlLaJyJ3yYTrk2U4v590s8sSs0mP5hTPxFAhKV18cZStJRc+Tsi+
9iHnHSkrVCt65i4lOWdFnJsjm8E36INiXtgHMq/cIJIzXkwyWh99X+jAhhC5
tw2aT7PI9clvw4quiojmtJ5AlSkcaHmwnXUpr4KctQkr2B7LJ95flnopG/JA
zuhhy9+cKvJGY2JZ/ggeMWCWH8o/yYerX+lTjOuqiLL+uUmJfUyyf8V9jYEY
EWi8mXZj9oZKsn7VrkXMp2ziZ5xVpvNeCG+8c5eOvfWDTP5+bmbhaz5xiF2i
XHqYB70n0lZ8HvONFCrq5D1OE5AZGZ30xEAu4HmXeP4lnnuZZJZ78J56GQl/
mG2tsYtDhKPN3rt5CMHn8+95k86Uwtw35n+X6Qjh9PRJKvP+cGBhjdep9IDv
8KxzWseRhxIIb6vOW761GSAiQlt+RQlsLF35e/8HEfDGjt6TO4cNF7cxslJ2
0skNmtBJoMkmknLzPr1WAWz/Mu+WTwadiN46mjWZNBG1vfc+Pt8nhtvvdT9O
PVEDVXu31vvZ8GBobC9zK53377wee+r8Hjy3p5k63wfP+8FzfhJPDRve96cS
xKcrpujL+NQ84dfEdC4XKosYau7FtVD6wOZPvIEI1D00fBJLmDJe+3/ndOC5
HSLqvI6CcUsmZU4pg7aguqvSs0JQWntsUogDBxQfns05vrsWPu9O/72ciOGO
7rk7FU+boGd3p7KFQg3sLKxJzqkQwU3er7hcGT7wbMWTnqvXgLLO4XtOvhL4
0Kv3WjWhAVYlNkwdu68ODgULKuNnScDx75Jxr5MYUBk0wTw8mwbSiIag7lMS
sC1Pl0S/qvt3LgCeE4DnA+C5AHhOAJ4PgOcC4DkBeD5AmAZ7KjOnDCK4Hqcm
xEtgxEHV04lxTaCy5b8wBaVaiJl64ICzmRQWRNpHW56hQ1zWzO76DTXgdqBt
eHGbBHpEL/fLh8v+HrWF9YtvVoNQ+RunMVICHi6aj9NjGyDX3fbH2qM1oGZ0
Y1WkrxRcW+peJhfRYHfE8u/DDBlw0vSCru1PCQTfu5GhJZtrVr7q28xtacDl
zJlZaSWFsIQQJ70FtH+fZ8bPN+PnmvHzzPj5Zvxcs86DEVknmD/A8Haeyblm
KQw8GnY4IYwBdtsMZm5f10xwddx5RHPDAZnO5Z7488e9nqg9XNxecamBTN2V
2WtvInv+VF1inWJ95h73uZnAbIARjhGsUzJ9fP7E4NwKmS7GczDxXEw8D7Ps
6qsthvW1UNhk2UNfJvt6+X/qU+7w/p2niedr4rma80nDae14OlSuX/djUi0H
wk8k5f5/RF13XI3v+1cko5KGFhUhitCwdSGbCi2iUonIiggVQkUkIZokVCpp
aCi6W1KpVKc67c4eTcQnGfk+vX7n6vfX8+ruOM/dPd7X+xquN8uNB3HdG76f
0myD/eeHmtIteVDt9y7VSIUFZqI+fYWivn1Won592KcP+/Zhv771xT/VHi5u
hNSo05W/vgjg9LbwfSXpjNE+gNgXEPsBfuBqNw+rNoHJyZT9s3r4EGMUFurp
y4QdOlcmCDhtcPztcaHYNCEct99WtmNTK4jJfs4q7WgB6fESEZcqBNBdts9y
7/oOuCm6/5dEeNAjwoF210kDKxM7yB11yyP9bg0kXkOuSmVQONr/GvthYx/s
pGAzvyWUvy01VucaWLJAVen26RPU+mteWTJmwphOmHz85cOc4k5wfbiqjy/N
h2pR317s44v9ew/KOVyPXt4OcXuDmif/5sKxW0M9f5RYwPP7E3bjLAOqLD2V
ZthwQEOS7zbhGGu0byn2McX+pVFw0bv0cjvs/c+mr66DD36WL8c4l3RA/FK3
T9PU24Fk2mz7byzlLy77Oq1seysMLjSRTUxmwgo9I48fs/lw7sCiBN+AFnja
FP7NezETfIrCli9M4YGB+d0h5Q3tkLN9idKWRAYsvbvk5wIdHjyaFJvR098J
P6tfsRNmMYHtIKbpGEe9d4eP1ql5LSAnMT6r1qgJQCeixD+vG5KFl8on19WD
7PXz1ac5dEhf9PHFuMpu2H3YBuSa6kHncs0J3j06TFH3kjBr64YX29V2fm2v
h3e6cSmpl+gQ2KMw3fK/bnh8b9c7A4o//zWy3ixn2wyn7ax95Pd2Q43ln8YD
3g2j/Tuwnwf28Sj5JKV1Y3MzaP4IcJ2r1g2u2oEGZ4oagciUPDZIboIE3U+X
8q92A8Nqk/M/9wZYMxCn2tjVDDsLm00jrgnBd7+2VQTlj0xXUXs6UsfEWxk8
Of52FyTQb8Q9et8Efx/coBfdbATaNrMJQ+xuuCKc7GRc3wADi6TWbt3ZCP92
aG86LU/h4didN7KUG+AfSzXjk2IjVKrNF4tf1wMFlncmLN1fD50F/HV3vjSA
9vWUChmVHsiccL/oo30DROds0b13qR6af97yjU/qAbKkXtI3nQZzOprbt3jR
wSVh6yrr7d3wVHm+lkcxfbR/AfYzwD4Gp9cXvwmUo4PWlw+u2j5dcLQ16/6D
a61g19/l3v65Ea4f8pBoc+qGqbrrV3D+0kGiemVRXHYDPNoivm8ong/BgjnG
c6JZgHwC+QXyCuQTY0X8YpGIVyCfQH6BvAL5BPIL5BWo34N6Pqjjg/oTqEeB
OhR43/D+4b3D+4n3Fe8p9q/HfvbYxx7712M/e+xjT7vyvTK8jOKz9o2bg3XZ
cOntFpNZ1Dj+jL/Hceyvjf22sc+2c3CVp7EMCwJYt01oy3gQfjqnf8ajNvBc
45i2VoMFzK9nx3WP4cJqsa9xw7xOOHF8bfzaz0z4y/fvXylH8ZXTVRcWHmsB
rQ/pU/mnOmGdpMsDtQtCuCUfVW8T0wg/XO5a3jHohHl71jr1XhdCnb/eOj5p
hCOqP3ul/usAjupPhcd3heDcGbBsbyd1/uwtF5T7d8BU6cDkD3VCuKEqjM3d
2jjaXw/77WGfPeyvh/32sM+e3q3I89fNGBC674GZb5oA2tbJKcXva4IZZRvK
DQc7IWfdricF2kL4al+d+sKUDrk31hYa+jDggfHY+hf/UXi++lf51uQWuLYt
9e3Yie1wX+N11WKGEPrNV7tsGqLDLJWZRkXf2+AcOTG3XKkLeu637i6bTgd1
27WW1R1tUPd7zpZW0y54E/RwTY9xI4QbTNVS9GqFZLJkdiN1zjMvVdADVOjQ
fppr66/WATSaif3H+ULIXNvtWhDTPNq3C/t4Yf8u7NuFfbywf1fT2m+fp0e3
wVCEWGx6khD8+5mCMRYUvnjJ7ar+2wKnW5eZV+wUwgKrFRLRtm2j/cKwfxj2
DXPTSVEqWt8OFzfNqzlPrSdnSnmYrXk7jH3zp3zsXAp35+x21j8ipP6Ongz9
omYIsHyW407d13UT07LfES7kqpqYfRvHhhlWSvmLtjaBY4GbcdRYAZx9Fb5F
dRcTHu3+HWPlSOHbG6cHLaU8aE590n+IxQLk68jfkbcjX0f+jrwdeTnydOTn
yD+QjyAPQd0X1IFB/Re0Z2jf0K6hfkyJSE8GdWTQLqKdRPuIdgvtGNovb5Hd
ihHZMX2R/UK7hXYM7RfaLbRjaL8YlTZhUZR9fnFg91/uNj5IpCYtCpvSBN3F
9rFlFJ7o0r44Rx3gU/br067Ucjp4JczobzBnQdT42ATdc3zw/TR0OOYaHX4o
gepBFSbM1U23euYgALFI1rv3HvTRPrzYlxf78WIfXuzLi/14h05q5FilssC5
bjh77loeLHAKctxNff6lxCB7oRcLYrjG+4f5PIhIkp6SrN4MCrtcZVVvscCQ
o3b9shoX5jrJzLkQ2zHajxL7U2JfyjlNc86uOMQA440XVu9T5cN64ZeG9oJ2
qPubvu7+HOo8Tt5pZhPHha9WuT5+11mj/S5H+1+K+l7mnU2XH+/XCRsHzyeQ
csr/eTzvU8ANFuUvfB1a5cuAfwUrl1X+4EHiZgUTrf/aAfteVYj6YJmK+l+V
2+ndrZFoJ1KywLnaxSVZq+hPzNeyAPvmYB8d7J+DfXOwjw72zxE87s7h7Ggh
Fy//61i9XEBypJdt2GrCAOzLg316sD8PLfSb3VuHFlK55OCQPfDJIsWOh/Qw
JrhVuMzo/tpOaC7c787U558KlP893NMMHOVsPYclnaT6albe4RAh2RFs8SMq
sBGCz3SNfaPLIHnmxf7bS4VkutaxEO1aGkwQxaEwLoXxKIw3YfwJ404Yn8J4
FcapwrY6iheu55KFy5YmZQ2UEdavYdajaXzAeBPGnzDuhDweeT3yeeTxyOuR
z4/6CSK/Af0F1GFCXSbUYyp1vFaUSb0nMPhOt8HqTkhcvOzKMZ9OOPku83Xd
aj64+32/eyiCCX+e5O+4dbAFzH4IJ4Zt4YPnqd/iN98zQEedVrXzUNuoLhTq
RKE+FOpCoU4U6kMh30X+i7wX+S7yX+S992R1vIN4nNFnYFeg0SMKby5UsGUs
/uOMPuONY20HlJtgS+gJhToJ7ujzuvUs1eEk+mj/euxnj33s65ul9Z+KccDS
zWK1/jAHPkYUFP6RaYWitAyFgWwOaFZ5JE9mcGBsqZj1yWXNYNBo8EC3jwW+
WlNL13/gQLJD0VRGZMdoP33sr4999bGfPvbXx776+D6a6P2lovfi+/D9+F58
H74f33tuWXaNYQtlxxd6t927zIYncioBw4MsoIv6dGPf7khRv+7Zhw7R3A8y
oTQ9KH1uKQvEhpeeYRixAftaYp9L7G+JfS2xzyX2t5QcHvP9nGQnoV/mTtYF
Hnklladh+ZsBc4s3BP6XxCCNyxUqVLdwiVTjR3FlDSaFO16LXTayyPS2iuqd
R3jEvKH41KajrYB98bBPHvbHw754o33yRP3xin5crp21ikFydV/Vn1khINp/
7ygF7m+BR9b3V0zbwyAHjodnGOpR99qwrEVKpxF45WtuPVzHINkP529JyRWS
51dUFTkfaLDkktWJgkYmad99VkY7nU9CNKM2fZFoAt2CgyFnZ7HIuOM3ulr+
8cnrxmr2tIYGOCi+LeLLYRZ5tPl1idlGAdlV9uTzhSgaZCWymhSuM8kV7rIp
vmpC4lEtcdU2tg48jmsvWnCaTcTHh67bU8An73s0/8Qq1AHGkTGujPFkjCNj
XBnjyRgXxjgxxocxvozxZowzY3wZ480YZ8Y4MsaVMZ6M8TKMn2HcDPUdUe8R
dR7Rn0f/Hv169OdH/XuRX4/+PPr36NejriTqTKK+JMYXMN6AcYbnIrveKbLz
40T2XUdk19HOW4jsO9p1tPNXRfYd7TraebTvqOOCui6o54L2G+052nG032jP
0Y6j/UZ7jnYc7xveP7x3qJ+Behqoo4H3+azofuO9xn7T2H8a+05bKZVMmnuW
SZbanQg0n8ghVQwlcX/q/v+9Oew19xGLcLyaB04v5ZGz7m5Hqg1aAftZY39r
7GsdfGu126bxLFLxzeRQ8GI2SWZ6/Be9mPKb/qp27tbjkAVyb8V2P+eQYPZH
/b3RrYD9arF/LfatxX612L8W+9b2ifrVuon612Lf2tTcSa3S1SxSrWXtV6/H
J32XwlVkp9Ch/8uTxMRyFpk6blrVlmo+sZ++JkPieD2sS/GAhXEsksH8ETxn
iYCsLG/NmixPg+WbdzETJTnEyGahVIIEj5yf+Ocu9yId1s3xMokCDvm4u/V7
0Goesa/08fjc3gDdRis1Pp/hkMg9vxytT/LIpyKXnlOr68FDP6rHgPo7NZ7u
U/kWzSPzuHterHlUB51c11+bjzPJOUeNr+U6QmKh3avp/KIOuA/7zk3xZRJf
jxWPTywSkjOqmwzmrquDU0Pnlr14wCQ8l29HPxkIyTMYqMhoq4Uko6u8CQlM
cp29az1jmZC8VE17IH2+Fp4tXbV4ZR6T2L/7OPXVKiG5wxoLRvK1kCxt+bHV
jEmctxZtm0nxqDrWY25LaQ2kbR+zVj+RRd5tfVXkfE1AFJ68m9G9tRawTx/2
7cN+fYY6Mpf2dDJJtfmZP8+nCUlo2phWa+tamDvk8z1NmkUOpFb/tGsUEDth
YLy4RB30cC3d1VZQ62/DUZsWIiABVRMs86vq4MNm4fOSdSyydtYZ/63SAmKm
86BZY1EDeEgmhJP1LBIVP/Om3WU+0XwrXBsVQAfMV2H+CvNWmK/C/BXmrTAv
hXkqzE9hHgvzWpjPQt1u1PFG/W7MY2FeC/NZmMfCvBbmszDuHyfKA2D8H+P+
mAfA+D/68+jfo1+P/jz69+jXoz+P/j369ejPo3+Pfj3qtKFuG+q1od+Ofjz6
7+i3ox+P/jv67ejHo/+OvB/9AOT/yPvRD0D+j7pWqHOF+lboh6Bfgv4I+iHo
l6A/grogqBOC+iCIO4hDiD+IO4hDd0T4g7ojqEOC+iOIg4iLiIdsEQ4Oi3Dx
nAgPsf8+9uPHPvzYfx/78WMf/lI5rS2pw9Q8jpzctG0JlyT+KXFtnkeHQ3sC
4zXGcMn3CQp7Cj5wSZ9V+MOBznrwrI+euVHIIQ8Cdr+INeQRvka3hpktDY59
TpPMLeEQWz+NKzODeMRsYcz3pzZ1gPiFeIY4hviFeIY4hviFeIY4pi7CrzMi
PNMW4Zj4pYvts1OodXfW1B++zydJZ/q/6g/VgsQ+/YlzMtlk1kOjt+EhfFJ+
0XjqBH4t/Mk7FTLrHZs0f9irpB/MJ2MbHcta6muhfkuVx4xiNgmZPMH0420+
ab45Ri2pqBawPy/268U+vdifF/v1Yp/eCxfOyY6PZRN3qf27vEL5hAwf+bto
bh08CTvceGAHm2Ryrz/sTeSTCYH71Ddq0OCTf/QP22YWEVzZeGjbMz6JUSg7
JzNUDxPPmVxs28wiW47yhxq8+GQ8qZhK86MD9hfGfsPYZxj7C2O/Yewz/KHb
Yk1tA5scztyYMPsQnxw3ynH8uaIOVCv+ZvJ+sEnuZfEW/Sl8kqOxJ6uJOicd
WmFjFMZT9sW64uH3pyP/b/ThpBzpBmh4rL1vajOb3PN47DiTwSVCiw7W8cdN
YCGX0xNJ8dsgpqDN1JtHkpo+9N617AB/282h5A+T5PhXcSXTqXPlKVfC29kB
E5YXHfa4xSRG6y7JevO5JLbOPLOXdMClx/mBvc7d5BM3cglryjvCztqa5q1L
8XBRfh3z7Zhnx/w65tsxzx5rGd7XHCogJ5o7Q454ExItfS/6twpnNE85WZS3
xHwl5ikxbxkkyldiPhLzk5iXxHzkZ1F+crMoLykjymtinjNblN9E3XfUgUf9
9z5RPrVAlF+dJMqr3hPFH6+K4pEYh8T4o5YoHtkrikNi/FFDFI/EOCTGGTHu
iPFGjEtinBLjk6h/iXqYqIOJ8UGMF2KcEOODGC/EOCHGBzFeiHFC1ONEfU7U
5UQ9TtTnRF1OjG9ivBPjnBjfxHgnxjlRpw1121CvDXXaULcN9drQr9MW+XnS
Iv9OTeTXoZ+H/h36h+gvop+IOk+o+4R6T6jzhLpPqPd0oPKei2Ytj7w4b6Ta
S9mHL/tmf2YZ0yHDo7Ekh88jh48cWCNXxSa9UilRrKx6ONkp7ZPeyCMqBpnO
E5ZxyIHcxOMn7GjgvjWk4FIujwx+HnzddI9DHnY761zbUwcdIj8Q/cJ7In8Q
/UD0C1NF/mCYyA9Ev3C3yB9Efw/9P/T70D9EfxH9xG1CpSyLHC7Bp5+Oq6vR
11o4dk3JxzabS/DJKJUyi/lVC6GhhwoPZHEJPhXn536cNK4O1PnS1w5lUvZJ
9Cw0V2vwkK4D1EVAnQTUR0BdBNRJQH0EE9kMLVYKl0R8i94mpL5nhZWP2hqd
OggeP23d+Z1corMyYnBSJZfI2+6TCzhDgwtxNeHLuzhk2GWhrlwrl9w4tNfg
U0c9KG+16cmZxyG+iSGTbSK5ZHDVhX1+d5oAdR1Q5wH1HVDXAXUeUN8B54Hz
wvngPHBeOB+cB84L54PzwHnhfLB+COuJsI4I64ewngjriLAeCOuDsC7IQVRX
tF9UZ6Quqi/CuiKsM3IT1Rdh/RDWE2EdEdbNYB0N1s9EieoqpEV1FnNE9RVY
V4F1Ft9F9RVYV4F1Fq6i+gqsn8B6CqyjwPoJrKfAOgqsw8C6DKzH2MeqY7fQ
BFCttCiBr1kGCn2eTps2sEfrQrBOBOtDMK+MeWbML2NeGfPMmF/GvDLmmTG/
jPljzCdjHhnzzZh/xrwz6oijrjjqiWNeGfPMmF/GvDLmmTG/jHllzDNjfhnz
yphnxvwy5m8wn4N5HNRFRp1k1EdGXWTUSUZ9ZMwPYb4I80QYZ8e4O8bbUS8T
9TNRN/PaMb+jtr18omhVbqfmyyB1Mds1h4pbYNkxrT3f9ghI1L1tZbbWTPK9
7ff9B62NcF0QwAFPAXlXrSFxgcMkx04tM7rqVw830rrs9N0FREDWxnqZs8hH
j88nnCi7jfqdL0R6njEiHU+M02HcDuN1GKfDuB3G6zBOh3E7jNchT0XeinwV
eSryVuSryFORtyJfvSfiqchbW0R8FfWlUG8KdaZQXwr1plBnCnkh8kTkh8gL
kSciP0ReiDwR+SHyQuSJyA9RHwv1slAnC/WxUC8LdbKQNyOPRv6MvBl5NPJn
5M3Io5E/I29GHo38GfvjY7987JOP/fGxXz72yfedMOmFlBsHfuf+uH8olQdW
CRUxsstosDnaTAaAAwXuu6+ESvFA+YW86/zHjbAw0V/ix1/u6HN1xE6PKvVq
4PwoMmVUc0efpy9drhXKUvu+YuODznDu6NPuVYrqeRkamDz3YY114I4+a4I3
eKyVbIDGNfcnOqtzR5++JusUz/6i8HN8eNP7l1x48uLkoqcWPJjSrMx5P1w1
+jP+HsfHieqt1UT111h3/VhUb43118aiumust8b6a6y7xrpqrLPG+mqsq8Y6
a6yvxvpsrNfGOu0YWfU8Tec+oqt8bvNhw8j8qQf753+YUg9XYt+8ENvVR9xl
FOn51HzaZayVuZ718HuC7HKDNX1k5/nLAbOp+ey/3fedTdlHZ6POt1ydXqKo
aH7I/VQ6Ecsm/SrdzaB3hF6hLdFDWPzQsIYbmeTKcV0zk1MdgPWsWN+Kda1Y
z4r1rVjX+mzVu0cHrXqInvmC7OT0DKKkdPTrN6t26EwKGJczrwvaFeelbKCX
gn9S+I/F/kx4JqoTnS+qG70rqhfFOtG1orpRrBd13MQ++qC9B/b4fJHybKkE
RZqBftcdOqyI+ZnX2NwNaks/L+4pKocNO333pxS3jdb5Yd0f1vthPRDWB2Fd
0BjT/6sH+i6qD5ojqgvCeqBhUX0QEdUFYX0P1vtgnQ/WCWHdENYLYZ0Q1g1h
vdBqO9rijdJC2HJip3FJaAN8NS3eNTuPAbNE9UDuovqgI6K6IKwH2i+qD8K6
oDBRPRDWB90V1QXlvGzcb0zrhuren7MdbzXA2JUDaVGadFA90fNUieIDuXGZ
DQ/HN0CqeluF8bEGkCyeZPSHmifd++KtJ9718OB9xP0Iap5Mw3TDSTmU/X18
48AejUbgHvtP8qESHVDXHHXOUd/8kyhfWyfK32LeFvO1mL/FvC3mazF/i3lb
zNdi/hbztuzIRc9mrhSQLf95b84IbyZNgSevHAxgAOaVMc+M+WWM52J8F+O6
GM/F+C7GdTGei/FdjOv6ieK5yaL4LsZ1MZ6L8V2M62LcFuO4GL91EsV5Me6L
8V7UYUVdVtRj3SDSYZ0g0mX9IdJjxTgvxn0x3usoivNqi+K+GO/FOC/GfTHe
i3FejPtivBfjvBj3xXjvUlGcAuMWGK94sHxn8Z27PKK68fd+djWDsORl7n7z
6gCMg2BcBOMhqKuEOkuor4S6Sj9FOkuor8SM2ZubJ8+DJVWBu4TjKVwPM5+5
/xQNziwx2Xu6kwvZczKz/Cm7ZH/evHppSiM86dmjc2EMD1InFeirUHZnmuxZ
C9fJ1XAuL+o9Q44HeX2VJwJyueDiPH/Ga/ka+Pvy8tAeLR4cnOB8VuocFyaL
Jy3cpFk7qheF+lGoG4V6UagfhbpRaBfRTqJ9RLuIdhLt442djMH1n7nADe4u
lzLmwb/WdX9Vt1VBZn+0m3EKl+L9v3XbDvNgzt357Cu0SvBud0g8mk/ZU033
j7coO7bmllFLsFQV/ClIo3VS61CwbLlM3zwedKYM7Ku+VjWqZ4P6Nqhrg3o2
qG+DujaoZ4P6Nqhrg+/D9+N78X34fnwv2i20Y2i/0G6hHUP7hXYL7Rjar4I1
tGlSNh+JUtGzP4JgAUnVeP289SUbUv5W5BWfKSYBKXPk3BZ1kQDrR1qb3jMh
Ms7BLPxPKfml52xj9UJA5mbtz00KZcO3M1vcmYIyMrB/nPI2E8qPLByqqp/G
hy+GAbtWaxWTav7U6P0UDlX+PNNx/hkLdi6vvVKfWEL0vb+0WkvzyMDliW1i
kTzwm7n4ufe3LHIn8GGQZEgXWb/OqWlrJBOmzDtz/P2/GtJsJ1NdbUX5o3cN
tBKoc3zn9EvumEu1ZMykVRZrLjPJwCa3M8sthPDR+OtpJ89G4rygPXb+q3bS
qhfWpzihC7DuGeugsf4Z9URRXxR1RaeFm0g90qqDmE2mq332dsGgQqLg69lO
8ExetsD6YxWkTz213KaXD9Nedz0v57Eh7euar8n/aGA+fq9+sWw3zLuSEJCb
3DqqO1gi0iFE/cEvT9WXGHrUwpxZ36ZsYnXD9ewlSzVVWyCkzzYv+9xneC45
dd34qd0Q/mfg68CODvBy+1zAbqBBq4TXsn7rHmBOuuj0ZVYjcPpUPV68r4Pk
ztT+/qU9oL62Pro7mQ5qXrvsZNXayIJDSUYWhE5OzV6/pkSvC7D+HuvxsQ4/
5/tgwQYfBgQvtrn/8igPZJweGLDCOkfrXbD+5aWo7gXrXbD+BetesN4F61+w
7gV1xVBnDPXFUFcMdcZQXwztItpJtI9NonMgIzoXSqLzgOcAz8V30XkwnJBn
kLWcukfM2K1LpFlwX+OZ7bhHbXDQd73VJlkeaGzbLR3WwYDETbGa2eWdo3Wr
WMeK9atYt4p1rFi/inWrWMeK9at4f0bvk+ge4f3B+4T3CO8P3ie8R6iPiHqJ
qJOIfin6qeifol+KfuoPkX+Kfuk1kZ96VOSfol8aIPJTS0X+Kd5bvMd4f/He
4j3G+4u6rajjivqtqNuKOq6o34pxSQdRnPKrKD6JcUmMU2J8EuOSGKfE+CTG
JTFOifFJ1JNGfWnUlUY9adSXRl1pzEthngrzU5iXwjwV5qcwL4V5KsxPYV4K
81SYn3oqwhHElZ8iPMkQ4QjiCuIJ4kiqCFe0RXgSdUqz6nw4n6hNl/tWTvEN
5/CEiwdX0gHrALAuAOsBsA4A6wKwHiBdVAeAdQFYDyBhsWFHc0QPeL3e2bUy
shYejiuTjoprHMUpxC3EK8QpxC3EK8QpxC3EK8QpxC3Eqyki/TlvkR6dqUiH
DvXnUI/uskiHDvkK8hfkLchXkL8gb0G+gvwFeQvyFeQvyFuQryB/Qd7Soywf
dupAH/lTrMQcPxhGyldZzPOTrQfUq64V6VejbjXq0aI+LerSPpZTurkgmkvo
Sct/24SVkg7X3OvbhTzwNBk3QymN4nUBZ6W+zS8m4o75C50ofvMkKsXjWlwP
2R31IFdwNpOUL1pya8m/Vpgy+5Bzalg38TuksuLa17dkUkz5PY/8TtC2O3+o
YX4vSRDTzVgZlE6OuChVRfQ1Q+SKVrH1v7qJMHDvWp9rWUTCiZf883YHmG4S
O1vt1QRjDRQ8hZZ8yPy+9XTLPBakLbOQMj7HgB0NvO81EnxQWPJFXr29HTTS
d1rPV+kE/crFL5fN58LWMYp3nmxlQUaT9O+7Zi1k3hG7YPsbfHLbfpaf6Rom
mGZZbvze204YJ5aEu5kLyekpdXt11jWDssUk7XEzmcDwNd4bqjbSR3wm0VVn
j/6Mv8fxgrjF9lL5TELXUVnQdo9Ngp4oexZTOI3zw/niPHF+OF+cJ/57/D78
npKKwjGWSkxy/6kcseNwSe80m/U9lF0QqB1t/RvIIsqZZtn7ZnNIi6JKo3II
Y3S9cP1w3fBz+O/w87gub0TrhOuD64LrhOuD88B54XwG9tEP565th3F3Xxq8
PsSFqU/m3HQpZkHI4XCNZaebySfxgA8LWvikT/yy7TkNJtTCullfDrYRS/1r
J18d5RPLkgNndt1hwLWHnV/e+LYSyfYn3lM8+WR23IaSX60MaE1hXDf4r53w
Dh5Z00D5l9Hu5bZFu5ohR+3i6g0rGNA0T4o81qNMyclXRhOqWKC490i2cVEH
ub7KJrPyo4DIy56JnWPdAg/Xd8a/VGGNPouz5JvGGrLBMW7FcY4Vk0Ra13cO
KHLIbunkLR/YTNC8NSZbRY9FHs6bOMdLmU321GtuMJ3Fgls3Wphf/jBIXbnX
a78kClcbZo/tDWLC8m96tE3lDLI51WBg3EouyXKVN+2RZ47O761ovudF88Tv
xffg90eJ5uEkmhfOp/HpkgUSsSyCz8Npk9Z2aLNG1/27aB9w/XF+OF+cJ84P
54vz1PvHKVYpZpIr2yUlt3/nEPu7F8dMPMqAz5MD/vXasgk+bwWabHW4zwDc
vxrcT9E+4v7hfuI+4v7hfuI+4vnA84LnBPcP9xP3EeeH88V57uG9fZqrUEKi
l7k9ef6XR7L064fhNRfcNquvjbxaQkwrJy9pfscje3SLJKp6uLDv/jLNvr1v
ie2/cWbN74TEJ8ql7wNhQaffx+EDx1pI2BPf9q0zBGTp16413vYMWHCwdnaL
NJOoGC38d7KBQ8LMcon3dibg+/D9+F58H74f3ysm0j1FHdQNIv3TfaJ54Lxw
PjgPnBfOpy20UsFHXY7gM9jl5N9///qhxfnNbtcxcsTkvytZLf7viNdnH86v
yn7An/H3OL66NtT+gDA839G2XV3hUh/prZfj+h6hwbBNYP+KpJvkxCxP0yq3
PnI7IuJtcSMN9ux2nHh3ezjRWhi3Mn1PH0kwC6kpMa6HNzdtnNpXReR/E5/V
OuIPOvT+OFxC+YNLDNWCdajveZR6q8n6YB85u6i11XxcPTR2TuIrVuWTi4Pn
agzrBSTfTBgztZYNt99vnjajK5eoTHGtZfsKifFzGYaKJBuGldtV1x3OJU/E
bS42pgqJ/d7PmscrWBA873TEUbEcsvP3MpqeXBfpvrpLLs6cBY7rXzge/ZdF
vhWlnt5M+XH2K2W+vaD8hK/ekQ93G1bCRmZw0N0TAhi6WKg7/jj13vSpS6cl
llP77+KU4SiELC3BuJxDLHgzvUNqQU45GEtUGLqZCsFS4V/2Hl8WaES6WPW3
VoL/8hvtFe098GzuZNljQXTYf1R/9flPFSDZuuhSysQeMLamvVcob4UG+9fP
wvU/wux4VvzteiEsb7ESSv1igvZ92X+smTR48dRnhgTF9zvmepa/GeDALTvd
7xbLaKATu9X6uyIPlL/FXEieyoVdc0OXefQ2QPuCKdqR9gJQeZ04r4T6uxh3
x99vze0k3mOWZPkcFJAafw/NJ09b4Na7xyu6utpI/mpfF/1jPHK83uqsfBJl
x0TxNYy3YZxN3VMqmf2eskMtDxTnlvGJ36mSlJifdJgznnk3pZJBtkjY8e65
8Yiyp3LN7N4OWO8l/a7NiEVu/lvTseqBgLpnkbPay+sgV2wgP2USi+x2GhOp
vFFABu+XrOT0UPxZdH/wPuE9Or5uzZYrs1lk4dGDceU3OeTLGm0LSX8GLK8z
fBH5k00cV9vE0F7zyP4j7PELJBpgZ6PBk5XB1Lha8Av1RTxy1LjDq+tkE3CO
iZvpnmaRhudTWl5t5JIVNkOxH450wKGFpTOGdnHg1e3BcU0lPEgNeh6fsJYG
/3Zm5M3ks+FU2t/cEgseJA5ZeIeQRvA13dzzwoUF1z/MWW2cxIHb1U+sM+UY
cFPlwXyatZAM6JUlh6a8I2/WzvupuJQNy1WY1l7vBKA2rE2Muj9B3OZjaXNl
2bC9Vl/SRYsPN/7a0hZ5tYCfJsvbIoMJz7elR7tTfux1K3WN25ebgc02lH89
hwVDUqy711WF4M+01zht0QpBdqsti8vaIMYm6dc3Az5Eglnbd3ozLL5Z01fd
zAQFP6dP5gVsYjCg+thlgOIFm+xrXSl8fnU/ctv3Ri7xWzBx6fw+Djm/6If/
KkY9RL+a9t+xnVziU5sxdeIpDtEx7p53J6EJule6xTVM4xB2Mkdjyi02+Wg4
Q6+R1QGFfkOvgwa5YND/M2P2XC5c0m8I9XelwVfFMWEW97iQfmrF3aQiDowP
+a26ILwRLkveCbr+gw2ayr2HWPpsMEl72W89gQFOInxZI8IbxBnEF8QbxBnE
EcQVxBPEEcQVxBPEI8QnxKVdIly4K8IJxAfEBcQJxIedF5UzhOZC6C9Xm/97
bhnkeB8/FfOE4lE1S8UlG4QwXTlxh2z0RxhzbVd96hfKvlc+X7LsMJfkWriV
aB1hkus7xF7XGDGgojKOR/PmE5aWufzcfyzi7uL2n9OMBrh/ZvGcTmk+Ke2+
vehFGotM6tys6ddNB6wbwzoyrB9bkZoh9TeBS+5N6ptzT4xF/ErGNuxw6AC7
tGcJOybyRp9aMscVq2SrYKnTh5enxvFGn6dmrbj51q8Kxovt2hz5KplkBjw4
em6KHKFV2iRqDfQDnmM813ie2xJOzKnQLyLBJuVr+0v4pLvk/b/4fs7o+cbz
juccdetRxx7163EdcV1xPXEdcV1xPY8+oxf4rqsF87X3VNLoPBibMim4PIUD
Pp97pbLEayEo2va2xGo+jLv/N1Z5OwdMGnLt8+d8hhOfaKbjn/PBQSH1RPh0
DizOekc/v7YONqvdqzjm0AV2X9+bmezqhKt3o6MyJn6GGSsntkvX8yE6cfFF
G8rPrdO67Hp3Bh1SDs1weFvNhtfv6y5b7+KBcbxVY5ZGMxwrMnh4Z0IX9M/Q
WJXv0QoLOgyYBS102FXPcQj9woeDtV/27wthQs64MVZSds3w8rhm68FuIehG
VX25mtgKJ+VcfrkkNMPOjIUeijFdwDfRfGF/swkUIzsn55xtgk/GbxyPVfBB
3IHs7wlmgtDqhmL81iZIzxxoyNPugqodrQs98lvhzRIxRsUNOvSVhPtONxOA
w+lN34/oMkfxBfEGcQZxBHEF8QRxB3EI8QfxBfEGcQbXBdcJ14cdNfgnxL4V
vNnmF2Zv5kGJ0thNe8+w4N4ct1+PzjOJMPh7wz0nPvlSaRbGWt4Ciy/c/6/v
Swc5J5ermVLOJd75vTJjIpmgtvHPcO0Ag2SbuHd4ZvLJE48pMrfcWiDnbOBE
Gw8mcfhid95oq4AEtf2OW1bcCE3ea5nJJR3EPbDa7f0WHklV8o/UkGaO2lG0
q2hP0Y6iXUV7iufMTXTu8Lzhucd7gOcfzx+eRzyHm0TnbJHo3O0XnTc8l3hO
8Xw+LPtAc2lgkpsVyp1mVXzS/nbLi7RoOqyK9382cQ6TONWvcLxqwCNmb5+1
8ys7AHHkkwhXTovwBHEEcWWyCE8QjxCfEJcQRxBXEE8u/Vxrc/Eck5j4RsUn
yvCI0hu3lIOXOwD5GfI15GnIn5BPIY/Cc4DnAs8DngM8F3gecL9x/3Hfcb9x
/3Hf8dzgOcLzw46e7T23jUW2lZ+RmVTLIWt2mrXaJnRAp5I0T6yYRfqCPcMJ
h0N2zgyZdSK1A9Auop1E+4h2Ee0k2ke0r2hv0c4mXK73W/CaTRyent4S+J1N
FAcLM8czOgDtKNrVUXv636kq3mw2mUVzzw314ZBTDn3upJ5a567DcrM3sckD
NQXeBEcOsah9YRRe1QHh5z0DTXTZ4PPwpNtkaS7E27oe81/WDnB+nLyxKhuS
ZW0mOWhywfjsh53mC9oBeTPyaOTPyJuRRyN/Rr6L/Bd5L/Jd5L/IexEHQYSL
iIcJIrxD/NMR4R7iHeIf4h7i5kIRjiJ+It4h/iHuId4h/iHukecRRqU7BJA6
3Jt8YRYdjGXmLOo2ZwLyXeS/yHuRHyNfRp6M+1Ek2h930b7gfuD+4L4gH0V+
irwU+SjyUzcRL0VeizwX+W2qxb/U2WZc0k02hV8+xCKyVXbxe090APJX5LPI
Y/F843nHc47nu0N03vGcIw9DXoZ8DPkc8jvkdcjnkN8hr0uuPDVNLZANRRE7
Ar0LObD614EGe4V2+Pdhd+2zB2yIdGo+bJDFATnXOxlLldtHP4f/Dj+Pn8N/
h59Hvwj9JPSP0L9Cfwv9rAki/8pO5G+hn4V+EfpJ6B8hriHOIb6h34J+DPov
6Le8FfkxP0X+C/pFM0R+EvpH6Behn4T+EeI44jriOeJ+qMgOtInwH/0N9D/Q
70C/Bf0Y9F/Qb0E/Bv0XxAvED8QNxAvED8SN4/tnytwScuHF19SkyMk8MHPz
HSg/Vg2/OWLTbjZxQbI/MeKLIQ807zs81NxWBV68mS1fxHkwRPuUk6DAg9mN
dya/oVXCOUVmzU65iPyjzW+i+0/1kQ/Suw7Z5FH+bej06IUUX3e339Sr5dpH
7pMLxrq9NBgQBOqN+AULdNX20ZaE56/vvXt1xC+Y3NA89tjZPvL5skTPyeob
JOn0O6P4SBogf0U+izwW4+AYF8d4uGEq68yRC/nk6gkjL/NmAZHd9+5jaiUb
tlyxZoS+KYdJD9uq1G2EsLWNedXOgzVaz4T1TVjXtLoyhz29thSUfrTULqXG
hxY2yp4OYIJF9q97Ew1p0FfGVB+Jz8sM1dTZjuPC4z1DV01mtpPQkNTvlW08
MlTlscBEjAmTstfVbWvlE63Wk4UXppcTDfUxPgOOHAjZISsecpVDHLNdxhQ6
VJDUzISFVi/5gPUWWH+BdRe+3QeD0vKYpPF0bf1qAZ+4BUQ8W3mJDiGxodsf
qfWQSbNuJqvKviW+NGWbTV/b4ZPhl4lB67qJw4VHCtu03hN975uaL+0Y8CD0
9DmXLQKie8Fo0ur3BeRwXsraJ0c58Llh0dNJFE66ht9wXD5ESNa8OqaJBQd+
2H+Y6CffTWLG3Q7o+vee6Bo/XW/yjAFndVcFs/cLyPSwiYwh0wLCUKzfXmXD
AfWVi1gShSx4kzv4aKY9FwIsyMJih3bYv7IxaO4BDoSGNgaGfmcDd23Zi4vj
2wHPDZ4jPD94bvAc4fnBPD3m7TFf3+Zf1zj1rhCmqo/X2f7nIyyML1RK3cYa
rcPAugysx8A6DKzLwHoMPPd4D/D847nHe4Dnfzhqoc+caflEcv8c8dQx3aQy
xer7rEIGbGM2TjjVWEAMk6o+Zo8VkIpHGvN/vOUA7gfuj4FoX3A/cH9wX3Dd
cR8WiNYf9wn3DfcL9wP3B/eFbzRQWna/gvwWt3B5MJtD3A4G/v32gw9LV/nP
mzCtnLQrTq2KXEnZH9+kccVqfMBziecUzyeuL643rjPaY7TPaJfxnuC9wfuC
/hj6Z+iX4b3Fe4z3F3k/+gHI//E+4/3Ge10h8q8URP4W+ln2299XvTLmk7Gb
QxLp2W1k1RqbWp8E6l6I7m206B7j/V32SXYT7Tcb7CRmfCN7OOB3VMxhl2T7
6DnGc43n+Zn65rmVCn1E09PJfXjzc/Jh2b741SkNIE8PkJEq7CXcRaxISc8k
MuFKe+xeU4q/OE3Xn36ol8jWTHyWa55Ggp79vUDnNcE+sFTq0e4hw0qvAmQm
ZRLNaU5LLn1vhy2eAzvoMT2kdo/M+Np9bwi/ei3jolYbbAm3PLQtsoc4u3ur
/Tr3hngvXcH5tLwN5r8VyzYw7SLRGjGnPO9mk5UxHinVf5ijuIY4h/hmli9B
b1MVkKK7y40CjzFJGWeGm1YUHRB3EIcQfxadiLQ5fYkLzifXd72JYwEoaicd
39A+ev8RDxAHSozz800D0sg/xhGGhUMv8XZrqNk3rhlwvXD9SkTrxhOtl4Jo
/SRF64brhet3W7RuA0HWCe7KmSTqxjaLNTd6yLGPKrwFl9oA1wvXD9cN1wvX
D9cN1wvXD9ftU8fYvrVSArKTnzm1vLSMvIrYlZ+tR/Ge+xMsmldxya2Vrv9p
KpWTS2PvGNxW5cOQjb1bTx2H+IqLlYSyygl/3tcuTzc+LNhDn3n0XDoxuzJu
Acuol2zKdXWZ97YZ4mc/Cz3JziQPTO0rxjr2EH2/mWubprTDmevzp4fqZpI9
Bp1fG/x6iMyxjO8C/zbY/0pGNjyhlxjL/LAMuxObLy2/cHaLZBOopOX47abG
xW46zHeeco/k1XceOybeBPsdPi98/aKXVLw0iU6XiSXfu8UkFX/TwXMlS2Pj
nl5y9JphSNztZDLRrLBozaZmWBHz4OZpTg+56momEfwpg5hWxc1cJ9sKr1Zt
njyi/3Xgo/fh9umx+bv05dgj+l9zk4TX/jb3EtZw/8oW6r2JQy3X5CTp4Lfk
SAM9tZcwunxWtVDvVV8y71BkMR0mFbmayrv1EoPF47cdsE0iH66mHgweaIL0
lM8a0xR7if36G6X77dPJ3d8H1i4zbYFmlkTcS6ce8m1bUVDg/GxSJCx8fH+o
DZYtrlVxc+omgTRvo5RvecQ3fUCvQY8B5i0bvsXa9pCt+SXfK9bmEAWf2bzM
Se3wjrvTdb1bD0n09d6gysomhr0XpjhWt4FZJI2p1hyQf+T2nNsHKX9ud0RI
+XVrIVhOHP+wWa+U6B9L3ykryyb3jea11CgLYW5xZdbNhdfzB5pOOJQW8klQ
4IcSOMWF2hUaz+uLi8j1+B6TGB0+sYxelzaP4tcdRz6+jGj1zXfPM3iXViIk
+2v/EKMhFrC2Nxu8XHAlX7PnpOyIrvi5v08V9ixiwnjDTQlR4QUkL2RAWzBD
SO60uFlfc2bD3vQZVxxk8skQGHwJ2dFFXM8u/tfRyARbt9Ue8Qyf/C6FqAnb
yrvJaZvBwkv5nRC6fb38srd5JEPnzN+MKd2kbf+UeKO3DJhSpOkVwvDK7zGY
HN1r10P6uvQajz5uB5Pdf9yVOt8S9cRHzNiIbmLM0OQ+zumEwZ/1Wiv0LuYr
FClnV9b2kP1tBsz+mlZo6Ldp/FJwPr8nNELcZkEvKV3heKVhRwvc/cC7eG5L
DpmvwHHdI9lDXu7Z9fjvpg74cXfSDi3Kfl9z37VIY18Pobt30z+ptMOPQdax
xWGe+TO6p8Ydde8l8tI+UremNsM4jQdysQ2ZZLu2eNGZiB7CM1W4W6TbBotW
Pi8uuXouv1x2Dc8zpZc0meRcq+iig84MF78HsWfz5XK/FTq095KEAK/CsD+N
oPYriCdofEOsGgJv/vjcQ/4GfVuWYtsKcgGbNGPGviFRweol3YM9RHNP97+O
ty1wWMz6+fFKj/xuN07s4gkUb5WUY8qqNMKptgzp/coe+R7FX8WydPpIyywH
F7K3Ae6EzT44bmUGERx31TKZTp33q9ND/bRaQHEGu6UxOJ1kZHpfy19G3bMg
OUHQ62Z4+DN6k9yRM/n5j4taJmzvIxuixfSuPqmHoUy7NmXbNDJj2+5XR12o
79FdOTNR2ARbX3sx9h6qJdruhwfYF7nkl4ze1x+yPBjo3qHxzvUT0V+1rfvZ
bz459HHLOeFkDhSrtfgJx5aTJYyra1ScBcTf/0z3kwI2bG2cNHbyQCl5cnPz
DD3KHypcYzDISGLDz3d+kRtfFZOhpr7lXEvq80WatKtLKP4wMNG4lbQSay+e
W5ACgzQa0YNv9PNhOb/wpQq7kWj6LDBd0MwiQx3bxdIW80Fzf+iFYcMa8tfX
gOUjYJHlNrPufLsqgL/1xfMEoRUEXtGePNzOJE8umOkqK3XBXulLjGm3XpIs
nyE1bfEPhH1AbXaIfz9I3l71NE+HQQyq0lnLxNtIqb2czIIqiie77rwz+0UT
GQqNl954pIM05V7X1NglBBfzJRphyYXkd7GgeGJfNYmSy165910fvL3Z9HBG
9hloc1mrY3PlOhiPPxxz6V8/dKju+zDrUw0wH9v6Ti7nQHnZ3M/CBh68vxD6
pMWzDuI09me8qOiCvuu0tydy2+Hp6sY7C6WY5O+e98f+RNFJ6KYT+QsdBJAp
LHAKO1VP9tNmrTyjW082Xtu0WzW8Bxpdh35YJpcDU02s9OnPWuDovParmtAH
Umoxdu+uNYDDE0v1ik4GOMxRKrnxUwD1cgFz08Wb4cz+5aVH3LmgLS13vZRa
/5q1GZ+vk2b4WPTiDe0i5TfXqPiEdrVB2P24HO60BjjPmJomG9IDVnoKR1Yn
0yBxjqbPqeS3pC5hxcPoT2/IhFuG9j55/eCdlNvk7N4BtgkeVbOLKN4sfzG4
ppELTOcTt+IOM4CEto9hOXNh5qLXS2yNmRAa5XPVd3cN7L80WGa+/SP194h7
33Lug8abFSF/Itjw/pqe18izevOi1/LfO+FMsV6x3z6Kx7G4g/MjuCB31Ctv
lWQrOBwYOF+rz4Sp0/M+bzQXgK+3z2XzE3Ro1i6ym5vKhLKe5DEe3xqAu9v6
+pCpAOLHH9KfJskDF5/IvQab2NBwP95Su2Pk/18vnhyygguDNakuL99z4N4H
cX/fr3SwMOs8+aybB7kqF3Jmr2iG7ujfETHHWTAxo7Z3lz91HjP7P47fwQKX
va6/sszo4GUcq9BhzoNZpddY+w6z4b7dyk2fPJtgi3fWITVCh8lzdvqek6Xs
zfTzn5++6YKaua8bmh8JIUjDoszaohlmwfZ9j9htYLhYvrHgoAAstBYWWMgz
Icw0t1TLnQ77t/VN6JRgwZebL3+5VnXAkYcRUw5QPOlIYoP4L4l24lA+zD/w
sY28SDu+sO6JAG5pXtS2ui4Ato/t+imGnTBg+Da2+lMLDD1ew1H5xILxy78t
rIhrganrrf55GvHg21764pXvuCQ2Jo4ueZtNDh3YtS5zYgscidqtXvKOBwcv
/PzE8W+B9b4f6PP1qXkE90cFb35GxH9YxIgLIshlpe2K+wf74aR79OY0aISZ
Nz096358hPQpK1VPHOqF8r39V3Qye2DeL5b81R314Ff+4UZvCg2Uyh0TwwOY
xCOz8m14QC1xdLoZULpdCGP2GGiceCYgrzQvO2m4M8n+04XemqsbwOvJ4KGo
e4VEOmlQd6Yhn7y9PbhGPIwLV+XyTO0p+xXst3NwxH6Ntyj5M2K/zjie937r
/IbU1ygWbz7dQ26fPhwQ3t4Gc7/2PlrGryGup/etM73LJRNqFTs/Uv7YwYql
iXkU7plK3v0zgnsdGjFuI7i3qu7f4lX8UhLwLG/u5yoBWTCFRLApuzl/4hj9
mcNFpM/K+oZng4DYL/r1em80G2p8pp98GdhILn3c+mvKdxbx1TrkdYLCsSHG
edcRHHui4SxzicIx2wTGiREcu82fsMXwWQUxN1K/knyTRS4FTBivtFwIrSc0
1Q8y0on0PgUTu8M1ZMxgcdpGeh+4Hv5YuvNkE8m+sqPXIq6DVI73ty6k1q0u
mx43glcxUoYLJlN4pcpbqDGCV61Z7144LEkk/91xNVFbl0fus7aExpf2w0Hx
ozKhZ6ph1qJ0ed5mNphuvXG/8oAAHF5Fq8x8UE/wKXVCyWfylR4onVZyzYLC
n+xfs6tiKPwpcknNH8EfgbPNIa+AOiAW9pyLYzsgJK+j5HZGF7RH6WgJp7wj
ZffPh6avySasupx14cn9wJX33DeCG3k6u6NGcKP/vCJ7BDdmzdDbQy/pgJiz
92+FveJAfZLHNs9B6p7tylki610N/5rs50QVfoC6smmbLoX3wZG+DWdH8AKf
ZwfSxipQuBH2zstK9Q8D3Aq12QudBDAYHrqwMZ8OR8Iv7Ku0ZsIEh9zrmyMb
4MjuybqWTwXQe+yv2gg+bOOP2TeCD7/N66JG8CFh5+y/n0J4UKfOOHD7ZxNs
zw/JeP2FBbe3c5kjOGC+OLhmBAe8Jc9PyaZwYG7ipOFTdc1w3/MNg53XBts6
jfzXXBNC49Vmub+uQsiftXQm06QZ9AKE7l4P2uF9TnnFyH3/2ehUOnLfPS9H
s0fu+1lNciZKq4ngM3eJtcO2qd3wrG3+vJF7LTtTf8/Ivd5ISv1H7vXOYms5
v9kcsPtl5yo3vR1AVj707zwO2OzX1Bi5v7Sn/9pH7m+IrX7NyP39u0Kw/uqP
AlB/mHKidEkWzPy4MzshrB+ktmReTafub4Itu49G3V/ZQZ9Px6n7u1pMMupV
cg9MTa484GNVD1q13kl/GmlwcdzUH2HU/c0NPyE1cn9znJdrfaTOoXbbsNUm
53xyc0b6y9WCTjI8WVbh5MVuCHzgd30jNX4u4bDjKmr8/Lvf50bGU+10HMc0
vyHWpmx5+Zxm8vPrkfkZi3phyrdd228lRpG8mY8c3Q+UEN9LQcc3P+iHAgWv
nunOifBsX9v9zPxa0DTw1vTJ6IPFZxSyNnqnkcvxPRtzKH699fFh9uNT/RCi
6PxvXmosocV7zI/IyCVbPpqo1lf1gy/tqIfq+kI41TgjutaqAebsTCwe19YL
QUO+ZZc4pRSOVXLtdZlw/OOHNz+cu8DG6Nbvy9S4ef7EFw7U+EPdTO2R8XPu
Bx7r2lVAssz1azRvHsQ63T8fWcGFOz/7wq2mVkLTRevMM3O74C57WNdXhgmH
xh4LEmZUUudH7D+PlT2gerQmWe5qC/jPH5+XcrCGeKx2+mF5u4ls493riTjY
A2ZnFht2qaSTRzrPqjLPZBG3moLg5k/98O/Y4ufjF9fCZ6N4g9BIBgxcqDH8
MCiENPXtb+em0iE5cS7vrTQfdOofJb0uYUFmZIGxw+JGyLfNj1FhC8F9SvzV
FscOaPxsc3Nk3D/1Z/HI+CSNGfXN1DhPMMMu4GodmLEiHG93UM+Hj96lzu6F
czsOL9j+uw1WeHZofG7hwbod9uvVFZjwuKO9OyalA6YPKcqfzxRAt3z2I9O0
FmBMPjw1ckUWiU9YsDb2TxrRk5UwJZX9QNMd3nWQwgFQcP45ggMaHLP1Izig
7rVnT+hTJlSuCdjx5VMHCHvenvOo5cJF88MqpopM+FkgPv7UEy4cWJTieGAD
A/ZFFftXxDfDtanSf/c6CKH9+NX7zg7toHkw6uvHbBqE9C7dtqmIA2fZ5dee
b+BBW9I7mV2zmoh4mEfmcf9Ssos/bou4Si+Indx4fSc1nmIuN3CMGi96NuvE
yPhFk/iIC51cSB1slL6XzoA39JuaxlYMoAk7CoIfMMDzGfnstJQPHY3TBKfH
tMOjWewPI+NSQr23I+PJh9tmn6HGp8sYar9e3AJmp1S79t3ngPvht077sjkU
PxC8Ts+LhfirCx93vkgFNv13/HxhPxzeTrPbPqGJuKUce6zYxiVd9xr3bqbs
0RdrDf24W4UkUeqEqTgvmTiuEDvj86Ifxu5+uvwZNX7Zp334DzeZWNBW3xsZ
Pxy85vWaTCbc8nVw3xDLBd65482XtDrhlZD9qPs7C85PDaxzkePAM9mulqaF
DMipvKlcotQIxccjKm9sa4U2+7+G4wq7YMZLa/Niajz5i9XbAGq8MeTt85Hx
Ycn8m+xwGpn19ajfHZlWohX3fPWM7d2gFnY/1e56J3n6OHbFqRw+iUn+/SVw
cTuM5zncjJvOIMJPQQqBzULip6eWnxRNg7PHW+9TLiBRy9PQ/m+rkOzRD5Yt
rK2DwPN6jrTTn8BoUOPeyxVv4ILE7EQj7X44lHb4EZ0aD+4/ej6ZGq/dtPrw
yPgF7XWDhdp84K08oWth1QzmfTanJJVZsEB5sc6DcxzoVXxvpRXBgsayttBk
FQact/339kXH/z/j1WosHltw4d/X9y4TdRpgfuHMPIZ6PfTOvVrtf6EHnMqE
F5YI28mHh/8sIwMY5FK2YcWJHzzYlVWaok+NH5hj9HVk/Pfi2T+OU+PM/Blr
eq+ziNfVh4obGDxydnGJmKZ6M9z9YxZ5oYxNlGotJ3yayCNeSSomPsZNIHl9
3Fs7Cl9YyxXn+lB4U/V+dvB/FM7ErG9KHsEjxfGbF4/gk+wJBdYI/nw67J2y
I6gFtKymGtz63AB6pqsua//rgqgGV4nYr8VEu6uDrypWRAplWZN9tvZD2sn2
RUfOM8i8qPXicw63EZV3kgdPXeDDxAOXBwz+cAg+dQuXtDH76TDP9McUQ+rn
91L1wyPjRTMSdo6MnzbdNsHFjQ//9jr3vr9aCUodLd4tkRwIyMx/PDLerMx3
yqfGvU1yPjZT48wrg5pFW9vJ2CuKlYHDDUQ2dyvUrOkCK9oBqx/KPPLa6brH
3Qw2qbhoMdNhexN8yc2I6ZPiE8+lV+foL2QR8wTtqHMXm2HQSqZIieKp3e3v
048kc8m7me9jJxu3wLhLrV+vnMsjP3ttYt5aFZAs/ZoNtkH90Lw4YYrmiy5g
/uc58yW9CkJDpW+MlWdA84nPh0bGMzq+bx0ZH7eP/U2cGr+zoKyn+xWfPL7t
3TTDmkHOXOk7dFGyDZQuukScXMMlcZU77vdx2OSbvWXH5ugWSPp40+78p6eQ
Eye1ZZtSLKzo8HrZ96Mfvg7Vv54nwwHzmfqz/9C5kO1nZPhIugnMHH++dLfq
Adh4YraSUxWcuxLvtKS9Gd6wEppGxs8cvTprZFy+PvLhYmpcL2qGamWmkCRo
tT0rP8IgeVObdHfspcFku6+f113kk8q9in+er2cRO07sju1RdFhv8qBmZPxn
nOy3kfEJyipHRsbHx8/5djLsDWFH+EWszkwjsxbkvSqq7YfE7W8ryyj/qnTb
kSnlDhwI3DBPTKaJDk8lXzn5Nz8hd411Nk5b1UcSQ7Qk5Dn1MP3yquMNdU9J
j1l60dCSPhIyXH7mtFwDWIca5r5uKCQXDxR+KE/rIjpvcksG5ZjwWrtazf9K
MUkxseSfLRcSg+y47YfNWaCb6dIzZ10xabJxtaVtZpDmA7ZtkprdEL3mm0nE
FEL65seujlvYTcysmJYhp0bqtAMbR8YnegiVR8Zz70TeGhk/qrJGRmZ9EbGb
5fch7T8+OfpSuac8kwPGPT78OR45RPJ1HMM6tZv4doEludQJuc3fpGQ3ZpMb
lo/yzXd3k9vfPXlbKH81OF/h1EjcY2GuzOcR/s/bPS9khP9rZ/01eR5RS1w2
hJV1arUSfUvm7XNR3VAXpak0dWcFWSCld3taAJ88l997XjaJA/1rLkeYR+eR
mGWfxSXMGsgsi+/y8r96YTljSWnrjGzCl+4tUg1pJi3z3TyPLemFae3R83sN
/GDiI4ONJ4NiAT4Gmur96ge1cS/m3rQNJ1mVH3qSYvJJT80B/6dF/eDZmnU4
9NULuLRY8s/7k5Uwt4JJiG4/9N/2mOtVUEkkVw5nXSxoI7Nluq+nJnXD/Nc6
ahf1ask28aZ+3lAzsVoZdCr8ezcE0VYnxv8oJOf7h+4+k6onfRniLBOZPkgO
bYm5OaUAfkdL9hW/b4TVs+RuTHveC/Jt8xx8Wz7BhkXXLA00GJBlustrfkEX
SIa0fxwoq4AJGy+vSFs40k8z/5T8RD68//2v9z/FOkjr1q+lvePD/mGfFfPO
Uf43J5MxNroK7LWt53Y8F4LvywT1sjgmlBiZPHheXw/XS5KTd3h3w4+nj36+
Mm2GMrVNAWvrq2D9y1VjprG6oGiFbOuGvZ3w4YPkO9UyGujYhXUf8OiB23NP
Hz/9sAE0q727bZ5Tdlx9wODztA7SHqsQyzsihJlydwTOXnQSsMfyhtKnZiII
+1pkV98Fz8+dDXymVE9Ck4elYl/SSGNQwUY70gNlvWKu88eVkUidGCtp5Rri
NPGw/x6nPvh1L2738ppgaNlKZx7MD4Peh+NuP/7TD8beJhPPV7wkW2ZaBwVd
TiHfy6vFJvIpfydAYjBqTBmk/ppcR+PVQ/22sh9saj2tHVhbh2zr4PeYdpfL
l5lw2enydJquEGj2un4NlJ2t9Jca7NkhgIt/E1W+vWBCrEygUWdbM9RVXorg
9/NhteqspugmBnhJHF8rsYxJ1n61PtYvaCDazwIfesYJIGL/o90j41MDXk4b
GWcWc6JGxpMsj55hkirCf7DD0TG6goToObR6Hu6D+8qql1zOFkDCRL2f73YW
wVBSWMCfQ/2Qb5/XNVGODnb1rjGl+9sh8HfGTam/QkhZ2RN06B0NEtY8yWj4
R4P2paVXdhT0wJOxZ5cX6rcBY8WeSU8oXrFoXdjGstvUfQxYrZC4pR3GMdYo
1DwTwMOlf/7Hw3fHUx2+76dQGUlUEqJIGRUyGtwpIxlllCiJaFCRVEKkJDJT
ZhHZe+/x2HuvYzt7OEZGoajvOZ/f7/P563m9bl7nnPfzfp7rvq7nfu5ro+DZ
OLATcnSPBeNAJbj/ww4LClArbp7ZvXMUAi+9MSnowUCj36Pa3ZN0kL8p/jMl
cADePKo6YPt4CGR+d7/BM307qPPTXT8G4fjfqbaT7VMIKzVyMVmkFwWWuDb5
2DM2vfl8DTNeJ6+/msSIN8Z4DzHj2nFunm6MffKmPEiBuW8qPNcvM/dLhHF3
bDVfPtx0frTHwDYTHmQ8EKRNzoP38vLf3bsnYOa+Bd81iTHY67Mngp2XBqkP
xjMlm3GwxdzfUE2CAI7KlYX8rng4SRb+5LiAg4GCh4Kf9kyB3laLSNFnJCis
mQ2b856CV3jxVqVnNGjkbWb5FzYEmxwDCphxz/jtiBmvO76ZnRnX/M0rEmSN
hS2rpTyDn6hw9dDz2OCYYfDv3RJDiR2H/PCuqtxlGjgcvsG1X3QYTOtKKrtO
jYGBpgpJ1JYGvhvbH13GjIER56/2tvEhmL7CKZXARgG/7xwOwTwE2BraMcnk
vTHYV8ZMPvz6R/41Ju/VmLI7ExrUi/72f7/mWVaNKBdfFIn5zgH2QLbR29+j
ENldkitB7IWnFmeILdF0mBX3r3QyJoKYSvATgj0W0tvjjDNc8MDeQLrA1Nd9
fLEmTH39bJ4uydTXD7/flbYzwwF7GoZ361EqfLyUYxocjYH+cZ6gtTU8JOpj
a9VyyCC6prH5sOMw6JWRZtf6J+Cob/Vo1mYy5P9Q/FjThQNWy/ysRxZTMFlA
plwOI0Ls4vV/5/vxwK+bX0/aaAUHzcDQnQsDIHlFzPWE7yz4NDUvat/vR0UB
ITG0n1j0WWO/l5kpDdZ+bwlNZPBnbsXBvr8M/gwZUd5M/nyER/LFStc3eCT/
gt+xyhcI18NxTn/m4fEnJedSRp5Z2vedHi82DIdSBPbkKZDgs8njy+90KEBs
mxucj8LC1pZTBfbF4/B++fZJ4ywiFM2QP7JsJYFgdR0SGx6G8ItNZc5CBPB+
2f8yro8IqxeNYPOWSSh8H+rGFYCF5rGvnUcY8/b0zrW3I88IEKnxiTz4Kxml
uP/d6uOWja7tNqlQZOiFW1ddzX/HlqAHxz81dwVVoFK7hi61rHkYO/XzZtLX
SdQT6lDxc4CEPp+NlerKw8G+JOdbL65j0cE4z62a0jQUZlrOel5pCHRFjzaM
6eIRRSTV43QUFQ0JxCbRrvfBTBTPlg17AlLw7UiRaqQgvgw7DJaB7zjumseD
DB6+5/wDywwGDz//19uXycPHDidZLkwPA3fihYnzT2rhxYkps9DDs9BGet+3
7wUVBiyO2D93H4F9r5wVxVWwoP+u73W7BxnebwrlGpMhgGj3d5qN9zDMJbOV
LoiNQ6+Tie9bpTEQpJ8UtTekgVCXwZHHnqkoqnLmONUsHdVai7oj+jzszrjF
w36wEooDP6p++VMGMmqV4n0J8+A+f09aSBKPOuWwFk8kSMj75LnsjqdTIJMY
o2SjREAcW/6FXZYhInPDwyFdr6Ygl7u5/MorIioPkdPnxJHRKyejMbXVXlCX
k5Chh5PQJmmruHOjJKT1bN2iZLYXAkoDK86l4NA9g/PqNYY0JHhgZxoroQdi
HS6x8XzBo39E9+mlYCrKzzkeMXahF5o/jXEx+fwsLimNyfM9OF8YMnk+36Ez
xcz6QYdKdIqqcxsk3Wvcu8uOAgIPaiaZ50WTkgElzPMiudWaCuZ5UfG2ZweY
uEB5iNvBxIkzyjt9mfhAaf/lcOExAa267ZIeu4xHezBKqm4JOHhraXPG9icR
Df0RNYreTUbdzpFyuwv6oWHzjQ56NhnFZ3jkrRYRkZyA6O3YxV4I0nk6yoy7
VnHmMONmITLizDjrAR61Xn8CGs/lejBSQ0E6BWEhy/G9UN14WV3Mm4jO7xW2
3jVBRrftpf+ZM+Znct5Kq34Vj94tsAkGplMQ706R0nWbAZjq0Zdg6gVuhZId
TL2Ql7bJjKkjxu3e/VnQo8FTucg0B+9OOPH1Je/jw3hQYim+Zs1JBQ7lX31v
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
GLNNM/sxz5Ljlpn9mB+S29beHsCC876f4080iLCG3fSWdTsevmzHRsivYoHX
bSqPK60JRIfrTNmjaKAUcU1N1gwPznjiaJ8tGTQTHjyeyCFB86sXHpdHOiDy
R7he7UANyri9udyCn4quhn80yEsmQjl3/YGDJ4jQUVMya1FJhKHzcic/Mvj8
Ofvzj60jGXn5jI/qn+0EmL2j25X6YwyOnAg/6jCdhyy1RI47Gc6i9M3vz/ee
G4Eu47K6qiP5SN6MjfOU4ixytq9z+IpG4BXPgKlKaQmCcoETf1LpyMdPyt47
fgo+0wYCb9RWIe+s57/yThLQAwqn5awRDUp5Jv5+OZiBROqe/LsTQENeplrR
sXIE+LxHB2MdVoEyEioDEtVpiMt3/JzudUae0Na/2rdSjtKuTB/q5qej7f6s
OvgiLLCcSXhd4Z75fxWddzyV7xvHpZLQIisa9s4silyiJKGdKCE0pEhGaClS
ycgKITNJZCSr3JnZX+c4i2OcvVFEi/qd37/P6z7PdV7XfV+fz+f9Oq/nPIh9
rPKp0iwfiUcrdZT+mgBbTfciGd4HtEXRTCqzho8i5op/nHg8Ca3lbsp3mp+j
Yu0P8mwhL/uXRzfbp4zB+T6ae7/YG4TJqifn+wuQh0FL53kYBzL33fsv8u/R
zUMNw97bBajOvvJbKmscvFpz1qo/fYcO1BjljxIF6MDyH605gWToGPi3trqg
Dp01PdRUmCNAJ1Z/CvbVGINDoq/W6axLRc25og8C702h3KNjBUbtJGCG/FKv
u12Emg//dnzvMoUMp69fykobgeJvE7HRwRVI5NSW5WkKU8g5sNAz4PwocPXr
Hj8TlKEag+JYt4NTyParVNDBjBHoDV7S3VBTi75XHtsoMyFA0hY1zUn6ZMiP
2tL/ar4aqVodLateP4XCl9NObfYbBSzuj6l0QBIyMIn7WDk6hbZ5n+owW0kE
bLmcGs03H3Vs/2KZ+2YKkT1dPK+ziRDun/RIauY1ctryaWVB2BTqoPjVL/9C
gntjDjLDzVVIMB62pt16Cq06yJuqLhqBoXqVR56NlUjlanCors8U2vyw4Kfy
6hFwXGd8vMSpAy3cvPpxZzYHUV6uS+nD0mGiFn/ebbAX2fyKI/lWsdHCuuXb
rl5nQHS7i6zipg7kot7+Wd+Li1axBs5vJ9BAc2/Iv2vmn5HX0sVDibd4qCFw
UuncHSqceiQW3h9PRk1qyY1yWymobWuvVcQPNmRFbTvRcGcSrfBhH1v+ZAxx
373IQQI2XPKpk/21NAR65lKq22tZQMz1SK9iMED6vSMK8MZAv3VHtX2RAAxu
/Lz1+jUBNr/eHjd6cAj4Lqy9lT0CePDoEL2qjgBvl4eRF08OwusLZgWl9wUw
eyB50KOXBPu35NYJWikoclqi/5AeCcUbH5D8EsgBmV2Ms6+1RyAg5fbwjdds
YOpv/5Yu/P6bd0rUOrNJoJsVbV7pyoMqlS0yBaGj0PvusWWoLhHM9vyb/LWG
B1+ldz7eumYcWNo6ItsfESE29mvq1Uw+XOksqC62JwD51c9rLY7C+hqk6RPq
fOiujiPHlxBh+kPCSqtLBNhoPBN6I50PnScvzVmEEeFEFeNUlC4BDmw8MPfP
VgAtC5v/6FjjAJ34rfFujACO1wu/N4sK4C+1qY85igP/6rsb1E7gweVbyrcK
NwH4Zmd0pBTjYMW24xlvfuHguc/hjq4U4XrMlov3WofBjC9Tav8UD51SZ9zy
QwXQWBWns7x/GI6O+ESWGeEgpICpsjpXAMaFRb1nT+Lg1rHHX+zrhfVPdjGl
hf00w8+n+/sJ85KJQXa6xzDMTLW7hr0SgNS0upo/HwdGidvD9anDMB5WFJH1
VADBz49cPL+EA8y571QNiWFo6pj3MEkXgM774LrhVDyk+e6XdDbBgm1caNvE
CwEYKWcYV2kTAOc6jz0TPwmrMXJtxiUckGo0bN3PHQG1fndbyTvjsHqj1F6/
VUK/vphaa9cgPA+rxVrLD4zBukMbhrTW8iBru9SIviIJspYp7n8j5NTaZrnC
9G4eRDgo3tdNIEDfGrfInVvHQMFA+6JFPA9WW/odz15PgFmPU7EiemTY4SdJ
3PeeB0sN4prXowhg/kfFTGrHKNTlSdc6knnQM4g+32cQwPZeqvGjPSPwuCO3
YZ8IH9gVNy63HCKC67J4GR+hXj7c1/DRL5sJZSccjMLWkcGpna4v9Z4Gt+62
qf1hsWAsZrqUEE4Ci8VVSi/kafAY5rGmOmw4esVaINwUUM55QU8IpsJ5Vt+G
qjk2sHUzB3Zpk+C1fFZw1CgFRHWId/Zoc6BvrbE1S3QEbPW9o2NcKLDT77ZD
dDUHCuPsFUrPCM8x7diY2Y9JAM3pzM9aXJA2gpoSZyI0DCyvaddiQnD6SY71
ZwbENUVEn9QiQUzuv4QVi3S4uKc2QO4LE1RvmDUrPCRBt/d8zsa1dFD493Sx
NIAFdcqmAz3qI3D5toa6WOwkGDnzilAPA9L77HviHtHA9IHZSqtoCuzGEYz6
51ngqEveo7YwDqF6Z0rBigXYnHDrSzfoEFND3k7NJEHQoTs+9vZU9GLzSFzE
Pi7SSldtzy3HgqDIA3c0SOjTvXfn7nRz0QXdnqq1E1iIbBbN57VTkKHJ6myd
Wi76rNogQdLGwsC28mVRvlzQPvjnkuK2SVD69fDm0cvC+dwsffc3lgMJpZuP
bcVNwqlYW+VlYyQYSPsZYi9GQ+b1l72SjOhoRnZxNteIBmmndUq6AugoXn6U
WtzBRps179P3CPNle9nd+Dd1NGSr2BCHO8NBfHfruXffMXDj2DCf9ZOGQi0D
E3VNOMjqcPCV0GYMuBRMPmXm0NDajz3ZxxM4aHDP6+cTjhg4LFzhaMxECrsU
oeovA/25c/zyiDYRunlq3p87mWj086q8rSJMtNi+7vncJA6kquW35U0ykIF3
P+LFsdCq4I8vNBeEdfUe1zspMNHJJHpR2jEWyj4mG/HqBwb2UsXfuT9hIK+u
LRtDelno8i87iqkhFsa2DEUJwjgQtDFjR63cAJRuTDV94kwX5vPUndNDLHTq
xU2OdRID5Tyb2HLgJwaccnESO4UcGGqh5I6OMdAZu2QfgggWVB+KWY3EspBa
FS7PFc9A7Xq7PWjC+2dK0aZfzXDQSqtwCTkcFUW5rXvF8sDC6X4ZtyghtyaN
iqwSK6Sjk7jdfw01sSDVgsmdesNG2SfsB7yc6MjdV3rr/q3D4JxUZxs+LoDI
x2+3Xqf0w179PK/iBCI0dialmTG5KNxh/YiSJQV5+dGL/vzEAv75sujsLTwk
VjGxdtnCJJLLkl2azcDCd9ULS2UZXORrYev6xoGKCkfpFwm9Q/DITtJfopiD
zlX1PBy8RUWD1olnaqTxAN31BOdbLBTvLkN+8YeCrkS/0np2YgLMh2+u/ZnI
AqWt23a2XWGC/if+bI7IIBgnHoMYYm+Le29MT8YTOmpv2xCl5sqFtHuc/Jk1
7S3BBzw31reyUaqxQf2RICY4/17trNNWg6pvsxK0Y9jI8RP+lXUqE16NbTeY
zv3QcnVbq9ymDi4aGcqqWP6bBoeJhX1YlQ8tjQyX5pt/eWiXrnv2/9+jIRmV
VXFnoATxip6crOrhoSdd7MK0G1QIlT+vKNtbh9R2EE6/juOhbRv5123fUWGt
nvVgc0N1i8bLP2d39PDRAG6FypeWSah+pJysf74AjQxjnePT+ehOWsSCiSEF
WtfoR3t4VaOeQx3ac6f5yNdVg+QTQQHpwyFRfjIVLboclR1fPARozZfm+aW8
caheglA/9xyk/NA3aKueALVfevei9sgE7DFxXf3fydctX3BUbg1GgPauVh50
x5ChxMDjxanvpS1/dwQfO64/hYr1EsaZTqMgL2I0xkh5jmrzhtYuLgqQrWEe
c2w9Gezsbkb5p5Siyf2y/iHdAvTkQnFm1X9k+Pm3dpZVXo0Uv3Qc7E8UoNVY
14daj8dAdOcDosvV4ha87ey/s9en0L5rcXp9G4S6qnZY8Iufijp2FB+VsJ1C
I9tryqUYIyBpIN1ryy9CXU/Eo7+snUKkK7VVmKpRaAl+fNLiTUGLR5ljnk/l
FDoYMGFoyP///1IqqDcGFrS8eqls5jo+hTxrM3Z0LhLg7kzRaa7MM4S9Hvnu
ybsp9F1yvNN9Uqi388rLq2UK0GKaTIPynSlkXbDZUELIWw53yFePJue1WB79
b7+K+DQyMt/n56tIAPY62bpgk7yWte7i+9/pTiM7k+kIphseih+Vf5UvTkCq
nmzZmqUpxFceCZ5wIkCs1VvuxuJcZB3dtXhqYAq9lg++721FhIdu+/5hdr1C
kr/6Vr3NmkKLgfPn9wl9JEKFl/s38glqUT5ZRjs1jU6trGyREvr+8av6Me2l
2cj1X+cbbbtpdMTCxSbkIw4uNOMUrYIHUAcp2a8wioZ2VFFCnddz4Slrbrx3
eTvyfuhEfqzORkGTOsrG6Uz4GxR+UyKzD/HxfIkRexbSsnR3zOIywTg1hu1r
+xkNs5gHlinwEEc1+L2fNA3c3/tlLV3sRHiW7CkzAy4yLbC39FxOB9VTvuaU
qF50j//q3SoDDtroLa51kkGH5KSvLpc/taJac87vYC0eqmbauKYwqSAakKiy
H9eJ7Mbunq9U5KL2fJgKkaWD65ZS0udfLYgqqz6boc5Hi1vc8jXvUUBpw6qs
fk4Tcn1T7hHbxEdqPv0Oz3dPgsvs0tbozQ3oj8BrMXi3AMmrz5CYj8ZhHzZz
4KtlM7rNoPr4DPBRotxvctnsBESmF2ubT35AYf0UO1yQAIUGuZyN6RyDveD3
J+b7e6QX9kDjvyoBSlE+/GcNmQw6i5mml0pq0ULvVG/XggCdqby70qR9FA7a
mAzwJ+qRmOSy9EgyH+XsCmy9JJgA13lrR49v75Hp6qOmk08FqC2wsNzv6hhk
95bu3jCBR929MY3bAqloS9WbgFPRHLDb9vbWSlEs6l1MqjU0YyLM66jafztY
cE475cjNM3jUIyaf8zOFjlYVf5YYm2NBuKr7GuPtveiFzY2h/jw2MlHcXvIq
Rejnw1pBRSVEdKLGbXukLRXJUt2fN+/kQE/p0ov8rB641ng67wLigGDuH9/U
hg5tp9Z+1r7eBwURqzePNfOhTW5EsAY3BiyVD/sy0DCYMAruBRnyQYdOXy53
ngy3K9aYWz0bBq8sTunoNQGcOn8TL8rEQ9zQxbvSEVg4PLFFX+mwAEw3v3BV
CCTCSuUlMcErLFwOfT7d/0mYb710H5ltwMObmXKu1//fRzLpJVgaEYDk+rX1
XWvxUMRzeppoj4GWg3GGgQsCeDrtN31pFR7494rDxqhk2BphruUVxQIvBY2T
Ecto0LQygOIrTobNVTrRnfI8SNJRHSedHIECxUbTdolRKNb6scbThgfh6fN3
VtaPwBzpQcPdyRFIekI/efwrD8rKJJ/9oBFgddFK6hm1Efi6H/OQasAH8TZt
ylwyAabX/PLx9iHBvNTfAukrfFCWb4mh7ibAtfg20/OVRLiud+mWGZsPe2iJ
vIEHOEh2/fwi4ysBKKZ2DdKKArCMy21kOgrzfYv3swnh5xpVoefBP+F9pFzi
up/jQWv9pR91L/Hg5RshzXIRAP5xdon8Mxz8nrc8nSkl5CBuavlQABYpdL54
fECJB162Pu/YQt8YtZU8Y+jJBk2Qnrl8dBR4YVH7OlIoMC9/lfPuKhsump9T
yzoyBruf9rzsI1BgX+buDJM7HLD52Haws44Iswv2jbOXKZBJnlo7PsABNpax
7vMLInx7bBypJcyf8z3DBENlLhwp86m8eJcIu/w/1l+Qm4Sl57YJZZe58Lzw
R9N7TyL4bf+tEH6IApFGRLMD3hxo9Ex2qs8bAX35tHdKdpNg8EuWxH3Chb7k
I2WRSQQ4ZcAWKbk6AWemrqwNH+LCudYPJi/DCKC0s34q4+QYSBZk4wu0eXCB
rr6pPI0IzAfHxRLLyLDnBeW1ZBYPur9l1mmeJ8DBj58O38wfAfMHe26/b+IC
wntdM1AZg5Lw+eXl/+Fh/LOemrqQY2fEhkIyDWmgZJSgc+8uA/Y3nF+n/5MB
F+xCjq5/OQI2y8yx2Bk61NxSzV3twIQDvME/Ee6j8H6ZTJJEGB1kWPbvDdex
4KWnjdky4xF4IxCTiFSkg8Fw4SQzggWXEjekeGNJIKoFHr+OUOH6Gs26JGMO
mFvcPOKdTIQ+v4Gc4T9UeOBhlfX6MxsWT3/8W3dG6C+EEJH7V8iw30IlqlFR
OOdMVQdOMQ2O775y4B2ZCUc6buw9PkqH92+NLmm/IUGDXInfzcdMGLvGFfU+
zICArtmiZGcSSA6c3t9wkQEYgyKRRT8mLCls/mMVQYKpX0+7Dn2kQosoZ/nU
NyYom+1d02UkzEVfs6VFvo+hj3H7J8XtWKggvJOvSaZC0wdX2yGJSfSfQ8WW
hiIuOnlu9YbEAAIcn7xo66pAQYMeNRl6JC4SmH8/97dmGHYcbzj+S5YDzuK7
Gi/HUkELKVXuukCEii0Te5s72BDzsEte7wcVNArr5SLdiPDC33TBzIYDOhFq
8V/tKODCrfuHMxgVnt82P7VsBhjIbVcPEfZ1Gyf2Lb14AuSPSe48qiz0rZE1
R7fkshBm5/YHFH0y2CRaXZWooSLqwrWcjYUclKthoepzEQd/HynHmgjXo8Lm
ALNcDqqKELuAX8LCvsvmjnMbqIgTF4GfzuGigv0JFkX3MJC26OCufJyKygPe
Wlbf4iJxYg7F3goDxj6j5kNpVPRHeejS6jNcdF38tJ3hzyHwaH3U/9qFBe1b
2tc/PEiF3heaYWZ6E3Dvlqio6woGqo++vXhfmLtPm8ZfOnZsGB72+bdjPBmo
0iw1IIzHQhu6BLZZzljgIu31kiV0tC1Zr9M5h438ZgfavOcxcOH2a7KTOR2V
uJ6q8xPjIMytU7bFORh4HXDGZ28wHc2rz8hKEtioKHnR/kU+BlL09aJd9Wgo
oFs+QFOdg9Q+JNlob8QDfksUvquWibxbiO/mPjLR73GmJe4rBj5ZWXxIPsxE
gRfNt9kqsZCB/fM9Z1dgwetovfWLV3RhbivWPiHHQqybu0Xe3yGB4/N9calY
JspqfXr6y+wEojcE47WSqDC+Blngm9iIu3VXr9tNOpoNKghYksOC5IPvlXq7
2GhlxduEgk0MNOj1IZnzDQNi7+bOWV1jo/tx9UfmGHSk+MkuRH0AA1FNunF1
F5jI6/Nszz93BiqrKNKbyyfBnX6U5ihDh+1LyjsWlZiQ02L5We3QOAxa89uu
Zwrgn6fVh8UvOBiVDzitgx+GmKtp5rHhAsgrHd5/4RYe1O7+0/LEDoP0F/kb
9elcVH7x8TrMNQqS0+gqEvs6DJ+oeiM2Olw0Fu0r7l9ARWOWJtl9TAyYa/w3
FCTLgH//RTY/tKPD2b2579UyJ4GHGz80Ms2E5OYL5aNrWfDi1ECf6+pBkA86
ysooZsLCHyORGm0WiCvX+i+THgInGc/ufC8mqIsnWp6zYMEOk+jg+C0Y0H+z
cFT15ABsyXql7LyMA1E+lTtOjtBhIj0Pn0gZBOmzjPCnMnzYMFq7/47/BAxl
Wa1qa+sDLX//uuaPHOisfysXI+yLjY0VqfP8ABTr/j2Pf82HgGeZnT6FY9C3
qfagBiJA24VHr9KEOq+ReEIyUpcKCWcj4tVv4oDjvpwsL9Q3z2/pksczmRDh
3DhjWTcBKmzXrgdlDECqXUW7ROmwfp99WzZpHHZdSJf1fcQFhboV0x+ukyAW
jm00ujMGoQyFluFnXDjIIyL58RGItNBdcWgzGfrX8xMX0riQEf/1zmVbMmDZ
pipXi8hwWN3S8sVuDsReOX5k17lJIKoWPgrIpENQh1v39Ww67P9Nx1b9mYSN
Hm/6DQaoMPnuqddvTTqwWnV1IoNpMFmU7dh1lQbV61N43nVM8HP4qhNlMg6z
5itEx4ij8PRq4NpoER44/jG6cY89At02VcFrnzNBcjhwWvYsHQJ6A37EryOD
6NvLrXV5DJj/JcasjxbWvaz1lfp0HOoTqnAm3hPgcyqgKTacDQ/LDhMcNSfh
3ZYYuwcHKehnCHmOtIqDbukffbhtahQK99tvOXOICwNiHs2DjiOQOPqTmDA3
Doe1z+/u/UpDmXNx3gV8Flq5JHZJ5jURkuQ9WKvcefDzxMfpc+MkYBlWfX0R
Ogr6xwx1+DU0dEO1sJy7k4O+zKozd7dj4ZbYEOb3KA1Z2GskPOewkYHi+2Zi
5TB4utxbkbzAQhcMivK0yujox2vFqUdLOIh63xreeYKNZjJ2v+h/QEdH616u
nKEOw8eZGPcnDxjo93/XXl90ZiGiqcGQdAoOxNer2GrkMtATlZc31vGZ6FpS
U/3hHjxUsDBOmIcs9PT19kjNSwyEVd+2blwUB+tyrX64ZbHQoyPB2lXiDPRw
hdntKm08HLrUtN5h11M0Iu32WFp/Gh3YoTLr6YwHmfD+490zOSihpS7mrJB3
VNeryg7aEEDhlJvSTVoJMtC4fqupV8hTpgoXb5gSofRG14KoSwW6fmXH7cnU
KXT9Rs75SE0SjKfeEdfZ0o6sJRLrsVY81LQyab2dkItPuGofvPT1E/JcO3Sb
v4qPIpSehMR8oMBQTnLTmfpWNGD2S7UtlYuOyfcYFXyggWZQpmXowGeU/PH0
2qetPNRZ4RwuKUmFFZ+YrE6rTrROueLs+DMmAq8q5VfibPhbnCATo9+GTKP9
qwjVbHRRPGLj/3/Hsn7wstP9YwMq1JUKW1IVoIlzief6RsbhOPdmcnxwI7r2
/opuVCEfnVG+jG8tnATsWATj7MQAOnFEsaWzh4mUyOJum8xZsLDhW1GZ7RBK
grnnb06xkPZGrbHvV5gw4dbmrpOHRc/DbD/et2egEkF+VOVXFvxT3fQj5iIW
Nfs4T9jLUtC2PHbEhJwwt641Vvq3pg/tPJnqKFpIR3cOzVn/Ps0BNUpijNzW
IeSedfGTVCUNKYbEL22v5YBcr1xq267/YPYgtr3Xgg289b+ktDMY8J6buNm3
CwfO6Z0zRUZceLsj/2nJFwpUuLYbJiYNwcGsNJHuVh5IrHUPypmbgNUN6flo
Nx4uFDrZb3rIh/RTZzfx+klQeW6bZEEJAYoNvoZs7+WBKEZsfaaQx58VOd3w
Y+Ng3uptW/5RHmws3urBGRiHeYsjz/Dyw/CstH9FSysXtvpHFO7yp0CXraqs
+qYh8CxyPvB5jwAk9hj+Nx0wAhU/Fdfiw3AgcSbp5KUAAeisHFy2WxkPzMF3
m8xxeHhf8V+xmzBXi7YYJ3iJEEAsJ6ve9j0O7innvOrm8OFihchM8i0iRH7J
UKgT8stluzXz33r5kLDcsdLhBwlu2L7tHBUnoTNrm7X9cGR05hXLedyIB7gX
3dVSmgQInnNQwjXRwTNplatWAQtS5hfw58qwsP1Zo2SSAQvevMoN61JgArXc
4J6r/QiM6R1glQl1wi/JvMRhYRx+XwprPe85Ao5u5y6W9dMgtAWttk5lwY2A
97fuC/WjtfU207aCAx5qVsdX5ZOB9ypuvagtCcounF99LokPjP5OuVVv8NBS
2jBHEurcOQuFLvltfCD4n0idmsVD/nzPQKaQX/6eZoyt9OJDRqBDsyATD3P2
J/YUe5PgMk7vODmHD4li0bn/2eCh6pdKfkEeERiEwE+/iXxYyLtS2ybcJ93I
ba3eIyRwv70UckSbD7hsbEvVIgHCaVc2qDwcBfcjclPKPTzI62sWOTpGgIf7
etrTF4iQceiqwlFRPhw39hxKTiEBZdPC/XXeRHChXnt14xofPHqk+Ct3E+HK
kpLT+l4C3Hkr0rYHx4dd3E3ULioeDHVMC7UNCTD2fd5Fc4cAYrbtu4SJxcGU
zDWTYBIB1lmKnL0YxIP4lpfHghlkkKN+v9iYSoBlL3V9Rl2Fvpl8AiNziQT3
j5YfJuwkwQG1b2tlzXgw+CN+/25hP4Pulz5dV0yBBuUHrWHF4/AyKClF5wcL
jtx+dELfnQpqZpnT6W+Y8DnDLekicRI0sZNfzG5TwPZIcW/JAhsiVA6QD74d
hfHgd/7XP4yBT3G8OSNWyEfc0wsrBkcg4kqg043uCSijJWt5YDiQbyn1oVl3
FEJ0fAsUDCbA8ekhw00nuFC7MX8+kSbsz7n6k95J42Devk/impCDEs/6Ru/L
JEIr2+t4mGAMDt5Lneg7wINa7fQO7EECXErRsHYuGoNRcBbMHuXAuuXH38Xr
TsDOo/648nMM+F48ZrP1GgXuBby2d/KnQaJlblC4HxvMJ+30t/jQoGLuyH7R
J0QQ9e6Xrh5nwbKtkKGOaGAe4meXf5MEnupdu1yOsaCG/CNmjwIdDgyfxgf5
jMDO+uGy80YsaCv+FrhUQoFbX0O18tmToJg09LI8hwpXGyd2mTSxwGIhQixK
fgymnvtFBt2mwnofYsjBu2wIsjvje6BjBJ55ETRbhPVqfo46ec6w4K3HGWtL
MxJ0Se3M3XGGBsjBKu+HOxtsh0XHJfqJcDuy9ru5JB0mg2xWXIsXzpXy9kYT
2THIWIy06+8cRzvcLLMprlykcLhTpNplBE47VPY8bqQDs/Xn1cfBwj66C0q/
OrNgEL1zKQhkw29uwsj9ZAp4/65RDz48BlHxL/69qmbA6Y7kK7YsBmgrrm2K
Mx+Blamn3f+sp0PE7oi0l4UMcD4cXq9VNAGMhoIt61oY4PC7+WTaJgZwNePM
ux+T4ZTaS45uHQWy0yKMzgpzTdLqqMM7/9EA14b9lzBBBQei+oKDOw3iMFNF
4tvpcL+5t/ltCAVZGScmhfkw0c/wWv9gEyrAu9KXy85Q0CcFi6oPelwkpvVT
u02fAJaW975I4Snor35F+AobLqraPCW5/DAOjOL36+CDaOh+76iIZwwHMUnB
1z3NsNCmYzxPF1DRgSDrVbi3bETv0ogbJRHBylnqfH0aDd3utw1AE2w08iVl
fSEFBz2J4Rfys9iQfwXr5Xl+BBh6HSEdwv1rX1yjJhbMAvLHmIWHajRIz5fL
vFlKBsUQOUJtLAsY1++OtH+lga1F1kuiUHdsMPUGFnJ0RKnZtO/rWyYKuFf0
cSqRDBMsf5hbSUfUuqSvr4R1d7YzdI9aDIOMn9TKrGIGEiTbSa9pYaGtrb9j
5Rcw8HjDfJtKNgPdXr9FWV+ahRhytRp9Zni433VAViOBinyMnKZvaHBRKv7T
v9aDWAgc8pn+M0RFO7wub8hYxkUMEWf9vFVYeIY933djIw2t3mi4/ucYB1Fj
JN5IdWLg5hOZDe9daUhFIXYwtF54fQ9qNrgv5EHzUGfbVipyKDnzpUiFi5Ye
Nokzn2Ggd/xg+Y8ZKnqWsiFHl8pB7mNxaX2ABcM9+IPNm2kIgz8k6vmSg6Ts
FWvqBViwW5z99OqJUMf/ieXcaZyErpeYTSmyo7BNimmzaysPIpQFrm6Z42AS
cXt8ROgrntcn/4V1c+HfdPfYBZ8JIDY//m9FGQHoeGrLsngObE4wjn0YSwFN
+lXf5T4kuHLbJkjWjwPFxF9DOtJU2BzZdVfrBhFWVx9rLTrPRE8eP/Zb509H
Pl+jUkafksGrwMhgUxoDJekNL78pRkVKUVG39fOpcPNo3GTtRib6sl/VukaC
hfIOWolkeQyD+7EMw9NXmcidMe4RyWMiiXbpmFBfLBjcX3g4PUlHcs8SHohd
YaO5Z9IDh75jQHH+tIWLEgP9bTu74akFG4WI2P1QnsXADPvG2sBTDGRwtk5w
TMjFJaPy+akzGPC3jslyy6OjDnkjo8hM4fksWUO5p4mFps3P0wuoNNTsEJFH
GmGhuojKKBtlEoSRE2o/CHnZdzRzl5waGwUN+p8otMPBIGdQorSDjkLXhP4g
f2GhTc4xoxNeeLilH7d9IJ0Pfc8UNgWmEoW66n+/9QAB5PdiJe6q8UFaf/6x
ngsJBFttHo2VEMEtTTHgGosFsScrm6TIo/DAfvvwIeHcrijZ6OsdxwOShHju
LyIZjjZlS/jeIkC0WoeL7BkemJuK2cp9GgOsbHnktB4BRs1/fck358Cq+wXh
H7+Ng+eJvsyynePwdk234Vw+Dyaux71cwxmF2jhMhbIGEYiZWhpWjSzUu2s4
5sNKGhpo3blRXpIMkNpr7+LHQoWbiYz0WuHc+KskrDcggs/XWmFkY6PAvp0q
t3bSEVa6uHc3BwN+x379992Ag94fL5v3+UtDBgisp5owQEt2S9t8noOMHJ40
LuuioZke9F0/AQMWVnhly20c9CT6pch2aRoqCkspLozCw35SNG+rcL9LO9ut
V8YykW/olOlB4Tw+mOY/Or6NhbIZFwq9nJjIfLpJIf43Bp43dcI2YX6VNi7l
KcswUfzHXYrn/mJAu4C/Q/MBE33rvf2YTWEi0+93ZFh6WPC9f5wReJuBXitc
fLLCjokSB70PnntDAq0o6wSJm0z0WVJBQeoCEz0u+zC35gEO9tU0J0onMNFi
prfUEVEmSllm5Nn/ScgXnoEbt+wVwIZLu/79NSFAUnKd4mnAAc0Sso1FBKA8
/eNLO5sAqX17E86P4cDwxAmMXzkH2VluUIyQpKEq5qMKwpxwTnfEhoXOs1Gl
sW7xGxcKWvr71OGvipATu2JXha/iInyHuo1SNAWZPPL82OxJgPUva+quCPcF
pTTu/X6WjopGlQZwB0lgf/fRZcciNnI0uc11H6EhydTy1LW/cPBENHQRH8VG
Simnro0doCHgv9EfjiWCATOqpu0mHYqrrjQNKDOAfGegMnzZJOz4wv8ir8oC
n9fa+v5hTBjVmvEUqGNAYlNIX2kWE8RWVnjnHGfCqswbd5xscRCH2xbS1cSB
PqPxz7Gf8XCmtVutQpMKe2nRc7tC2KglLlKys4GMpFP1v5/soYB48B0JtxoO
Kt8j9yOfTUV1sWGZL04Ng1tr5cpHvlykFbfZ2PQ6FQkaOfNRRzHwcYl18Wkq
B/U9OFz6ROgbQ7TmxZBDGJALH7HHVHJQphmPELCPhqzNP859XoaFyiabuWcz
DODP7ohReUyDcG+eAn7LJOS5LcrZXWBBh7iB7oAfE64/+yPJkxqCe7xZwxVn
WWCt+vyz4R0GOMXd9hm4iAPtqW95B3xZsDvBQuNrNROGvQ1PxA/3gzk9eNoo
6kXLIY+K3kXHaVSc07ym5yUOOodEpS6Ud6H6jnFd1ToOWjhZnPk6jg6/R92M
PnUI9VsholnOiQeOKvHnj5EmoXzjsIf4Ngz0lyoZTdH5oPiS3F7kKNTneBpj
r79Qh25MKO8r5cN0q2DmzRXhddf4Od7wBJyEF9vNtdhg0WXeNl88CSmvSvqt
JKjIuPndT2dvDlqzYsDsvywifCyzrs19JPTBhgO2TcvZ6KBMeI3IHjyUSikY
M8UYiKP5ylJnFQt9ujiQRwsngkD1eHmhGQv9WP5Hdj+Xgd5fLtvp4j4MFIdz
D1USWOhNY8Ofxg4Gyq5Ukyp0xUK/yy0ZSi4bOQRyPdu0acjreUzSRw8iTDwz
zJqnMaCywWZGchMLqEMhLNWpYSBLvkoPd2AIJ8QeRmlMyOlO+4zfLOTuo/nl
qpuYEJVtVJliyYTewMEP7bkEkEr5T6v6WTMqcs+auRfIR8sfZn6zUKJAqLlj
2LKaj6h29h3t7CQHTevELzb8Rwer+m6HVodG9Ffyxh6ZbC66nfRWED1DAzeT
adxkZjfKULyfHXmciWwMVHA2a9jQt+wK5kdPO5rd5FTiw2QhvmTMvW0DTNDK
vVTXVzsGixf0u+elqBBEUhItWWBBrng39rrrKEp27bl3y4eN5Ladvjx2hQqm
GeeOmR6hw6JiUfHfPxR4sotGOChBh6bYzB9zOky4VQO9lA2TYC97FTN+SJh/
BwMNHj/goujAvKGMb2Oos2v62/J0IS8trTGvsBoH7ITN0tkgJsT7yL7hNdJg
lUjBA6/DY0hlv6vjtNDvvANBtDOdApbHkqsLFybQ67+/D+wS+n7jsd/1XkLO
rbqGXfZeg4o+Xr2/q2w/A41rHuP6jgnzcVqBtpwGHdkTdg26KNKQDyGpbkCH
BmeWb+Mc285ATZ9Vfh0V5qB1EptM3HLJkMrCXFMTzmeHzU3fVHEmKpObWLqq
TQHjz8+v048w0aPnqh29dCpaf6nvSHXmJDhvDOnEsVuQaH3aqOwTDhJdVxQy
rceAeF/TXfrEJhS0lV0gskuYk03GHBsv0kEh3FHr+K96FNG3StVbjIe8QzRl
Ur1oUB5Yd0JnOw2RLTnqJqlspDebenH5TSJUXL81JjvBhD0z8Fn2/893fDMu
H6kgwKrchnvSRXw4K6buNNk8ADVUQmhJwRhQb6mc+WPFgtBDd5M88UxwusBI
X1wzAMcI3JpT0iywqhhtTV5gwoxqxOSq2AGQm3ANeaLRDXEipQ5hulz4ELG5
eDeWBq2HRmxuXBuBDbeDlfIaeVBAWR4ScooE7C+vRPujSNC0acU1/ZNsKGp6
vTtWmwbXyxcdDqUToWPwyJV9BhyIPKG62ukkFTrUPrwu1iWDhXd63CMzLvw4
8+ysbdoYdNfNL1BcR+GWgweSFM61CaVfrb6ZCsM5kia791MRJ0j8rfgDNvpR
/7CY7DQKlxPcYjJ+TyCnhoemd38xEb4go3JCyI1/NZ+f1ZinIXENc711cWw0
c8zsQJcMHnzKyWzzW1RkkLSzfNkKFqroxa5Y9WwCAronZ3cX0RD23MpQljAf
pW+Z7DU2p8ChwsXqGaFuHJUJDP1WQUfjr79tePdtEizPzoxyE3iwIt4mqF3I
UUoTsZ/Mm0gQf9DH6bMODxqyz2tl2AvzzKpvkw8bydBrv2zQ15yBWGX+fbvL
acghvSTQ4aSQT/Ze5pBNslucomWvaFyYRi4sumvw0jBsIlnE+Rt8geney9Sr
I1zQfUqWujFHBeW83Ybj7Z/R/hI1z9ydHHR1yVv67F0GnJBfSN6G+4Q0upsY
zcp8xK/ZsDlcOBdP9+nV3ltRjHSsuxalFaaRqarRXpFcPDzxkT5bbFaOTP4q
hj3rmEIhjz1lE62IkHE55OWIYTWqfvyJ+eXyFDKR+jk3RiDBcPelC3LONej9
iqun1PdMobRZTOa3rBHg7Qh+89bmAwp5bqEupylA3OdN789OjcP/AIT0+rw=

    "]],
  Axes->True,
  BoxRatios->{1, 1, 0.4},
  Method->{"RotationControl" -> "Globe"},
  PlotRange->
   NCache[{{0, Pi}, {0, Pi}, {-0.9999912420492627, 0.9999989963365273}}, {{
     0, 3.141592653589793}, {0, 3.141592653589793}, {-0.9999912420492627, 
     0.9999989963365273}}],
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02], 
    Scaled[0.02]}]], "Output",
 CellTags->"Cell 9.82"]
}, Open  ]],

Cell[TextData[{
 "\tAnother way to display information about a surface is to make a contour \
plot.  The function ",
 StyleBox["ContourPlot",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " takes the same arguments as ",
 StyleBox["Plot3D",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ", and displays 10 contours in grayscale, with lighter colours indicating \
higher areas of the surface, as in Cell ",
 ButtonBox["9.83",
  BaseStyle->"Hyperlink",
  ButtonData:>"Cell 9.83"],
 "."
}], "Text",
 CellChangeTimes->{
  3.4464209957496557`*^9, 3.446515688516418*^9, {3.448631506419915*^9, 
   3.448631536309025*^9}},
 CellTags->"i:49"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ContourPlot", "[", 
  RowBox[{
   RowBox[{"Sin", "[", 
    RowBox[{"x", " ", "y"}], " ", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "Pi"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"y", ",", "0", ",", "Pi"}], "}"}], ",", 
   RowBox[{"PlotPoints", "\[Rule]", "25"}]}], "]"}]], "Input",
 ShowCellTags->True,
 CellChangeTimes->{{3.4464188089066687`*^9, 3.446418843991783*^9}, {
   3.446419113787368*^9, 3.446419123947007*^9}, 3.448643780778927*^9},
 CellTags->"Cell 9.83"],

Cell[BoxData[
 GraphicsBox[GraphicsComplexBox[CompressedData["
1:eJyM3Xe8XkXVN/zkpCMCAiIqVZqVoggIt+zLLoiCNFFBbsGCDRAp3qIg5aGK
3ihiAQRFmqCEIhJQCJ1Q5BBCbyEEAgRIo7e8vEm+s9/5Xe7nvOef6/M7s/fs
mbXWrFlrzZqZVXfZY+uvDwwbNux/1xk27P/9zb+v/+B9G219xcSmxoMFL/++
j2/78qp3R/nUgjcd3Oja0+dML/gtC55/vODZR245bcutn4r3Zxc8edUPHPjj
u+cW3Cyo75mCzzlg0zfeOu75gt+6oP4XCz7s3s1OWGPjlwuet+B7rxb83xtt
964ffXt+wd9Y8P1hPfjEzcd/+Zs3Dy94YXsGCh774t//dOwjIwpe2N+RBe99
xqWPX/rqqIL/sqC9Ywqeut0V6z765rEFL6TnuIJrukxs/vPvYMH4UZdPLRg/
YPyA8aN+f3bB+AHjB4wfMH7A+AHjB4wfMH7A+FG3Z6Bg/Kj7O7Jg/IDxA8aP
mp7jel3j4D/zof2t+TEY/BgMfgwGPwaDH4PBj8Hgx2DwYzD4MRj8GAx+DAY/
BoMfg8GPweDHYPBjMPgxGPwYDH4MBj8Ggx+DwY9+PfSfx0HLh/zFDxg/YPyA
8aN+f3bB+AHjB4wfMH7A+AHjB4wfMH7A+FG3Z6Bg/Kj7O7Jg/IDxA8aPmo7j
el3zwH/WQ4N9dK/L2996fEyN8TE1xsfUGB9TY3xMjfExNcbH1BgfU2N8TI3x
MTXGx9QYH1NjfEyN8TE1xsfUGB9TY3xMjfExNcbH1Bgf/fPwf54HBvvkPukO
5y9+wPhRvz+7YPyA8QPGDxg/YPyA8QPGDxg/YPyo2zNQMH7U/RxZMH7A+AHj
R03PcQXjR867qfdT76TcJ93h/MWP+v3ZBeMHjB8wfsD4AeMHjB8wfsD4AeNH
3Z6BgvGj7u/IgvEDxg8YP2p6jut12aH/2Q4a7NP7qXdS7pPucP7iB4wfMH7A
+AHjB4wfMH7A+AHjB4wfdXsGCsaPur8jC8YPGD9g/KjpOa7X5Qf8Zzu0tYNy
Hs55IPVQjoPkQ/7W88fsmD9mx/wxO+aP2TF/zI75Y3bMH7Nj/pgd88fsmD9m
x/wxO+aP2TF/zI75Y3bMH7Nj/uj3w/6zHzDYZ/fkvJt6P/VOyn3SHc5f/IDx
A8YPGD9g/IDxA8YPGD/qdgwUjB91f0cWjB8wfsD4UdNzXMH4kX5X2v1pd6bd
k/Nu6v3UOyn3SXc4f/EDxg8YP2D8gPEDxg8YP+r2DBSMH3V/RxaMHzB+wPhR
03NcwfiRfm/6XWn3p92Zdk/Ou6n3U++k3Cfd4fzFDxg/YPyA8QPGDxg/6vYM
FIwfdX9HFowfMH7A+FHTc1zB+JFxh/R70+9Kuz/tzrR7ct5NvZ96J+U+6Q7n
L37A+AHjB4wfMH7U7RkoGD/q/o4sGD9g/IDxo6bnuILxI+M+GXdIvzf9rrT7
0+5Muyfn3dT7qXdS7pPucP7iB4wfMH7A+FG3Z6Bg/Kj7O7Jg/IDxA8aPmp7j
CsaPjLtl3CfjDun3pt+Vdn/anWn35Lybej/1Tsp90h3OX/yA8QPGj7o9AwXj
R93fkQXjB4wfMH7U9BxXMH5k3DPjbhn3ybhD+r3pd6Xdn3Zn2j0576beT72T
cp90h/MXP2D8qNszUDB+1P0dWTB+wPgB40dNz3EF40fGnTPumXG3jPtk3CH9
3vS70u5PuzPtnpx3U++n3km5T7rD+YsfdXsGCsaPur8jC8YPGD9g/KjpOa5g
/Mi4f8adM+6ZcbeM+2TcIf3e9LvS7k+7M+2enHdT76feSblPusP5ix8wftT9
HVkwfsD4AeNHTc9xBdf+YLvuknH/jDtn3DPjbhn3ybhD+r3pd6Xdn3Zn2j05
76beT72Tcp90r9vT/tb+4ECv9gcHerU/ONCr/cGBXu0PDvRqf3Cg8CPXvXLd
JeP+GXfOuGfG3TLuk3GH9HvT70q7P+3OtHty3k29n3on5T7pDucvfsD4AeMH
jB81PccVXMfb23XHXPfKdZeM+2fcOeOeGXfLuE/GHdLvTb8r7f60O9PuyXk3
9X7qnZT7pHvd3/a3jreP7NXx9pG9Ot4+slfH2/vX4fEj1x1z3SvXXTLun3Hn
jHtm3C3jPhl3SL83/a60+9PuTLsn593U+6l3Uu6T7nD+4geMHzU9xxWMH7nu
nuu+ue6Y61657pJx/4w7Z9wz424Z98m4Q/q96Xel3Z92Z9o9Oe+m3k+9k3Kf
dIfzFz9qeo4rGD8y7yHX3XPdN9cdc90r110y7p9x54x7Ztwt4z4Zd0i/N/2u
tPvT7ky7J+fd1Pupd1Luk+5w/uJHVx4QfmTeQ66757pvrjvmuleuu2TcP+PO
GffMuFvGfTLukH5v+l1p96fdmXZPzrup91PvpNwn3Wt6tr93b/LSF87bj56c
1iy5zE/2v/aQ0QV/4on5f7j3F2MK/vEVB185+4SxBQ9/8OlJO37K+J7RbHjR
95/6/jYDBX/vmGeWOnznEQWf+rX91j/xOyML9n343V+dPOrrX3mtOXQBXWc2
N4757umf2mRYD/Y92PfgrUZet99Sa7/U7LSA7rOaf55/02Ubf/KVgtUPqx/e
dwE9n13kn8xppi2g3wsFqx9WP6x+eCH/5pVf9cPqh9UPqx9Wb9YD56/6Yfzr
6me2K+shHzD5gNUPo2vSLfsJkw+YfMC+D/s+7PtdcpB8SzqTV1h7YO2BtQfW
Hlh7YHKacphyA5N3mLzD2gtrL6y9sPbC2ts17nKc5K/2wdoHax+sfbD2wfRA
jvOkQ34Xzl/tgbUH1p4uPZZ6JvmQ/c7v5q/vd+nJlMPkc9I1+5XfwV+YPHbp
5RyHOQ5SzpKvSVfyBmsPrD2weSXnhdQDOQ5TzlOu4PzVPlj7YO3rmidTL6ae
Sj2R4zDplO3KX+2Dta9r3k49nXoz9VbqhZSj5GPSLduZv2lH5LyU80jq9dSr
KdcpV8nHpNtCe3B847fOzxnf5HO1HTm+jIOFdtmUgucssAPvL3KoHFauPcph
5eimHFaufcph5eQ/cdpvymHl9IlyWDn6K4eVd41rdrz+wvqXdn72Vzl5UD+c
9qRyWHnXvMOv0F9Y/+Ca/9OD39NL/9Svf3Bt97fjQrnxkDjtXeWw8i67g5+k
/7lOkPTIuHXOkxlHzXnN99ELRi8YvWD0gms/Z0axT5XD7JYuOzTXbZNeuY6Y
9Mt1rbSbcp0l7RjtQT8YvWD2aWJ2Iv80/ZfM00h6ZN5A0ifXsdOOznXVtGOV
o4f26j9cry+1/lLm+aTfk3kn6cdkHkT6Hbkun36Bcv0Zig/Z7izPvLH0CzOP
Kf26zKtJPy3zPNKvynlWOez9rnGUctU1zvQ//cvM10r/NfO20o/NPKL0S9MO
Uw57nz5RLj4CK8+4T9Kvjpv262WYHshxl3op86ky7pD5VemvZ75V+u9p1yuH
vU8fKxdfgpVnnDjpn3HLtEMzjpZ2X11//7yWejz1Vvr/mR+V8YjMl8r4hHL6
uS5vsfJcV0r65zpH+jUZd0+/IuPAaddnXDLt6Joe/XZT2g05L2Z55j9l3C3z
oTIeo9x8WOvhFivPddP0m3MdL/3YXFdKPzLXOdKPy7h7+lHK0XsoOzTtsrQz
Mj6T+U0ZT6rXkeeVcvNx4szLyDhL5glkHCTXrTNukeuoGUfIdb3043OdKf3o
ofyctPPT7k27LePOdZ7KnCHpCHsv42aZ95JxrMzDyDhT5gVkXCjXqTNOk+um
GScZyi9MPyn9hIyn6Sf5zPhenfczp0/uMv6X+UMZD8w8oowLZl5Lxu0yzyLj
bMq7/OL0G9NPyvifdqRf0KX3uvQkemW8MvN7Mn6Z+T4Zz8y8n4xr+j/95/91
3GegxF2U1+tJA51xhPS706/MeCa+pV/VNU93zevonfHZzNfJeG3m72T8NvN5
Mp6rnH6r+9fG5ZTnum3G7XIdMeNmdZ5Kfxwr4zgZ90i/fig7M+2gjD9nPk7G
ozM/J+PTma+T8Wrl9J1y+hCu4zltXkLGbXOdPOOkuW6bcco6L6g/Tphxs4wz
ZRwl7fi027vsfPzIeHvm42T8PfNzMh6vnHxnfD7j4Un3Lj75zbh+5o1kXD3z
GDKOnevqGUeu84f647YZ18w4YMa5hvJb06/K9YfM18n1iMzfyfWJzOfJ9Yqh
9E6XnsK/5G/m9+T6R+b55DpI5p3kuoNy/Boqjp5x54zTZhwy4wgZN+iKM+Bf
rs9kfk+u12S+T67fKO+ad3MeyPWdzPfJ9Z7M/8n1n8wHyvWgzAvKdaFcZ4Gt
xwy1zpHlmS+Uz2ccOfNasrzOx+mPm2VcKNe3Mn8o17synyjXv5Qbj0PZUVme
+US5fpb5RbmelvlGub6W+UfKu35zHS35DNffv7upv3d30VMwecq8sZQb5eYf
cmJ+gtEPRi9Y+3I9yrxc2yPTm9r+mB7rf9NjvW96yPX0EtfjR5AP2Pdh7YW1
F0ZPWHtg7YHJc8Y1YfSD0Q/WnjrPfl7fegFc82N2rOe1++cz3p37uzNenXHS
3I+c8dPcH1vbqdP76J7r1LmfMPuR8Yzc/5Zyk3RK/z33ayVfkq5dcp98NJ66
xkXKXfLduMtxk3LZNe5TbvUz7cnMd89xlnKeeQGZn53jMsdFzmd1/u/4vnzW
HNcpJ6kn008wj+knrN2wdsC1Hz8t9rVMi30V0yKvf1rklU+LvOb2ffNmbYfP
KPHPrnZoZ7Yj6+2iQ7Y725F0yn4l3bKfS58ydcbUyWN6ByzgxwvN5vvt+obn
Hhhb8Olz7jnloktG9WbuccS4t1/4UnPf9TtdfeO1owv2Przxx27/4s/+NKK3
w0o/3+oTN73S7Pm2HX7yx7+NLFh9sPrgkd/deoP9jh/oXXPTr36zx/TXSn2w
+uB/H3fL0rscNbz3239tMWuLA4b1vA97H/brvfz1Puw7WW8+B+tHtjvbAaN3
F92y3+gFoz+sPhhfku5w/qofVj+s/i65SL5mu/M7+et7MDlMOct+Zzuzni45
Tz4kHbv6vTDO9VCz+GFvXfKc9e3Debj0W/lHdzrx/Vf0Rpdy7VD+w/VX3v6O
LcaU8r+94U//M3OHsQVrz8Lx/kjhG+z7C8fzY+X9Ty3Q28+XfsLK0UH7Lvzt
qEdHnfliaT+sHN21V7n+wMo973vK7/jb8TOPf2erD7R/1U+94X3rTny59A9W
7nntUa69sO/Dp9y5zPUHrTCi9/Nnl9r7S3e9WsYhrNw40z7l6A8r97z2Kf/2
sGP//N2lBnovn7rcpYfOnl/0BqycHvB95doHK/e87ytf/11LHPSFkcN7fumj
rv/7vv9rH6zc876vvKsfXf3uqrerHf7vt4tPXXztolsXnX1fuXGV81bKRcpB
l9z4nnLjATY+s9z79AA5ozeME+NeeeqJrnHUNe60X7nxBhtvWe594085/QAr
97z+ph5Vr/4OpZe69Jj+demNrn509dv//Q71f/31f/3NecFz+juUXu3Sw6kH
u+jexSft6pqXuuaRrnlH+1LuU867xoX2Jd1gdF4Yx7y38PkrC/zNBwtdlOuX
cvXA9BA+0BMwPZHzs3LtT7plXCztEOWe55/rD/9cf2H9gT0v7qb/+bxy9OXf
az+/jbwo97xy9OHvex9GL/4/eilHb36u52HzQK7z0uvWG9OO5/97H6bvcx29
6z181U79gLUr/QPtpP8z76Gr3+QGTjn0/aR7Fx/Im3J+d8op7Hv4hM9wyoHv
KedX5rjO9UPva1/a3Z73fsZxPU+OyWmOA+1Vzi9OP0S8xfiA1ZPrOt6HPWe8
ZX25zuB9esf79JR26V+O+y494Dvpb2U7YXzIdcUuuvh/1pfrWp7TP+/rHzrR
c3DqQf1TTg7Srsj1He/rf8pdrpOqL+cF81nmdZJTcZ6041JOc9zlurn3F8bX
Tmn85v/hsxfQ+86C0dX39AMWl0y5g5Un32DlSSc497doj/Z5HqZn6F12K71I
L8HK6THlcNrtOT+LS+qvcli5/qa/Dtf73B9q6PvPLZDTJ0p/2OWwcv1/04Jx
8lzB4vUZ94BznGS+cZfdpX+pR9I+YDeqz/s5D6SfkPNizlP6nfNg+onmUc/n
PJ1+bH0uyiNN2gmw8rRDYPRKXOcztXad+tJOgtETpmeyPPNnuuxe4yb9v/T3
YP4BnHae9qbeTz8n80m6/ISMc2kPnHGmtGu1L+fZ9Mcyf6LLz8q4mu/Dvp92
MEzeYXzK8swf6PJrU2/Ti8q1N/2QWg4f7tMbnqc34NQr+pv+WtqFddyxxcpz
PT39N+W+67c+P2dGGdf0o//n+YHoVue1TivjPOMiXeMk5TTlRLuT7tZNkk/0
PTmv87hnFD2nf/qbeir1UuqVHNdwl1ygD3mW10OvX7LADn6ytC/nK+3XPu2H
k3/ep789rz+JvU+elNd6ssWZp5Jy3zUOhtI79Jf5Mu3OofSG8Z3zKzt1KD2s
vRkfz/1Anje+8DH9MP3L+Hj6aRmvzv0a9X6FR4qc40vaOTkOhrJ7Us7yeXJG
jut89X47MOUOVn+XXHbZjSmX8FBya/zJB0i9mXq1yy7t4nPyjbzyG4aat/g9
6Yek3kw/YCg7uWscsAtzvTHjdjlPZr5qxvHSDxnKTk67IHHmX2ZcMP2aLr2B
X7k+mfOjfg1lJ+Jr2lmJM18x56m0N3JeSz8s9+2nX5J+RWLvpx1tXKRdm5hc
+j87QL/0I+NUaXd2+b3pF3b5eewO/Uk/W75Ljcf1+e//+Vy4Uzrr0U56Ubtg
445eg+mZPFeR3qrt+UcKznP/PI8Onq/9lemd84K8Ie2F0w5VX8bt6v2HjxU7
RT21/zitqfd7PVLsEnSDtTvtTlj9+b75yPuJyXnKvfFF35NHcovPsPpyPsnz
ZY0Tz+d8kOefGheeT38pz+ek/8hBnc/+SFPPK9Ob9HfyPMS6H1OKnBlPxrVx
UPtLU/v8oTrf9+E+uzDHYX1e4GN9+/fwGx2TbkmXbFeeG08uh5LDLjlKOUg+
57mQ6s9xknKddlHaNfwC8xh65X5S47xLL+W47/IrvJ/7CbOdSZdsNzqxc3Nd
Cd3Y1alncl0L38lpxh2MG35C6rFcZyMnxmXaEzk/Zz59xqXS/1Ze73OYUr7b
Nc4yLxEdu/RU6pF6naFfL3TNM7XemdHU8ZNH+uKsxqt2sYv0q9639EgZB+mH
sxPSv0g/nD3leeMox3XaIUlH40d/cl5dyIdJce7TYOzXmNzkuhf+5j6tel/S
lKKPtCv39ea+VPLA7/Q92Pdg38t9zvLQc99vvQ9/Tt++8/rcg3l9+1J8T966
9uV5IXlObZ7HkPdm0BPkEM59KeiU7c56uuiODnmueu5HT7rlOcZ5fmPub02+
JZ3yu11ylXxPOUs5wJc8pzf322U/8hzf3DdVl0/qk4vkc/INpsezXXmecO6r
y/U+ee/1uSzj4/yo8XFe1PjY1zA+9iWMj/0442M/zvjYVzA+9s2Oj32Z42Pf
3/imjqNNKvElmLzB5Buu6T2pqfd/TWrqvJZJTb2/a1JT82dSU/NnUqEPjD5w
vU9jUuy7mBT7KibFfqpJsZ9qUuynmhT7EiY1db7+lKbO159S6AmjF4xecK23
pjT1eJwS+26mxH6rKbHfakrsm5kS51ZMCbtqSpwzMKXYSeZR4wM2T8PeQ5f8
JU8wear14Jymnm/mFYw+MPrA6AOjD5x6OvmWv7lvQ/vhWv9OK+2v93XMK7g+
v21anBs2Lc5nm1bkPuUo2wXX+nZGaV99LsS8gmt93Pr/aZfAqReSr0mnbFf+
al9tH8xp6nlrXsHsen6I8dilp1LOkm9Jp2xX/vJTblgwrmYXfaKcPoHpE5g+
gbW/S6+m3shxknKXdBQPXjjO5zb1+S5zmvo8lzmlP7D+wPoD13bwnNKfrnkh
9V6O8xw3KbcpF+Knf17Q7mea+nyReU19nsi80n9Y/2H9h/Ufrvf9z2vqfeXz
ih+mPTkPpp5PvZZ6Isep+LU4Bv2mnH6D0QNGDxg9YPSA0QNGD5i+0B76AmZX
5Lyf81rq8dSLsHrRgb5Ujh4wesDoAaMHjB4wesDmw9zvBqfdl3ZOzuM5b+U8
QI7IuXYoz1/9h/Uf1n9Y/2H9h+lb3087Nu22tEtyHiY3yadsN5y/+gPrD6w/
cO6zI5+w8QqnXZ52aNpZaVfQs/RujsuUy+RT9jN/xdXUT/5g4xFOvyLt6LQT
6bHUGzluUo6SD7B2aLfxA2s/TJ9633zS5RelH5B2rnm6XieZ16cHUw/kuEi5
go0P9ZsflOsPrD9dfl36MWmnm1dzHks9nnosxzWc+2jzl/73PP0P6y9sfHnf
+ILTb00/Lf0Qdl69r2JO37yd81bqbTj3HeMb7Dm/+g/rP2y8eV//4fTL0w/l
NxkX7MC0w9IuyXkZNg/lOIPxKfsF56/xWa+Pju/zm+H0E9MuTrsy7ay0M3Ke
Tb2XeiTlNPmmH3X+wvg+vx9OP5cfBKedn3Zy2o3sl9TTML2Q4womV543vup8
h/F9cYv0O9JuTzsWTrsu51F6OfUcbNznuIDzV3/ghfPrzbH+MbPPb0q/A2Y/
5TwP5zyTejr1WNI9273e5NvO/eGwceVXXP6eBfL3bFkfkRdiHUBehPUb62ve
h30n9ymSI+sr8mqsa/i1zpX7THNfq/WO3Bft/7DvwdoL5z5u34G1H1Zf7lvW
7vxFx6RD1gujS7Y7vwvnLz4mX7r4lHTRbnpFu2Dfyf35mc+Z+Z7y5ug1WP2w
+mH8XHOBffl0sQNg7YfxY9iCcTKn2HUw/sLovVAPz2vIAzrin1/to3dSD3lP
Pfpvnsh5wzhOPmW7YOsYKUfZ7y46aE/SAUbH/790JxfJ5y6+63cXXTKPQT/0
M9dBUk5TrtDJ/IS+Kccpd8nnLr77v3qtd9Z5zJPL+o1xMdS48Ty5ICfkwPv5
m3ZO2gm5zux5/a7PR3qs2OH4bj4iN+pHZ//3nPfyfCrypF3Zjq5+WH/PuG99
Lugjfeczme/qcym9N6N57yf2/NhXzhtT+JX3HGScyL2o8iWU1+fsj49z4Mc3
9blf48s6KmydFLYuCtd5VOPjnufxZd0SznOu6vtX27i9dfv6PtZJ5fw2uL6P
dVJT38c6qanv5ZjU1PccTIr1xsFY557U1PexTmrq+1gnFXrV7Wn90voc5Umx
/pj3nk+Ke7cnxbrvpKZr3bamz9S+dSX5KeS1XseZ2xc393x9P/qUpr4ffUo5
5w6u77GYEnG9u5v6XLspTX3Of5tfUbenjVPU96VP6Vunz3Pj/Ob6FTqRr1yX
UU7elKNHxuE9jz7K0QfW/4zzeR89sr0136b3rbv5f33v1rTS/lzHqeuZW8q1
P+Pqnq/vnZnW5L0g5DrXxbNdcH0febvupby+f7xd11DOv6Cnc17zfd9B51yP
U67eXI+r35/dt+6lHD3zXO285zvPBc57p3N9LuUQxpdcr1Ou3lyvq8/B7D/3
vq6/P86inL6q1wfH9Pn5ntf/9KtrvT6ub32v1vN39633pRwnH+CueyPq9/vj
hvU9XW1cDX0y7uR59Mk4jnL0yjiI8voe9jmFPum3d82D6AOT/1xPVF7fy9eu
JyrvuidGeX3PSBsXr+9ta+PK6J1x2fres/64Zd2//jifcvTPuFmtV9o4Tn2v
fRvX8Ty7mF+VdkbOk+hbl0/vW79Ubn7IdR/l6J/rJMrRP9ch6nvx+uP4td7v
j4vX98z1x43r/rVxVvTPOGXux899P+iLHzA7N/PG0g7JeTfnLdj8leuEyvEj
192U40euUynHj1wHqu8h7F9Hqdvbvy5R3+vXH7dXLn6b+8jQG39g9Kz9iMG+
9dnajr67b7027QJYu3IdWrnfXKf1f/zIdU/l+JHrhMrxI9fh6nsf+9ex6v70
r/eiL37A6YehX9rBtZ82tW89WLlxk+vDytE314uV60euHyv3m+vI/o++ue6q
HH1zXbO+N7N/XVA5/SqukH5r+mXpR6BXfa/R3BKvMk/C9Hre2+l99M48EeXo
nevVytE716+V63euZyv3m+va/i+OJi5lfMP0q/6a72Dzm/rYE11xgvSD029D
z1wfV46euV6uHD1z/Vw5euZ6unL0zPV15fShuB565L0ynjf/5LpNTY9xfesi
XXGVjBukn0s+897btJtg9Mz1eeXomev1ytEz1++Vo2eu5yvPcz7pP7helx1e
9uvkvT71PdJj+tb1lONHrpvV9B3Xty7VFdfKuE3GGfAj8wmUk/fML1COP5lv
oBx/Mv8g5xk4z3H1/3r/14iyDlrfizZQ9iXkurZy/Ml1YeX4k+us//c44WBf
/kIdF7u7L5+hfn92xz3XrR8G40fmOyjHj8x/UI4fmQ+hXD6E9QbjB85zfckd
jE7qr+VmRPnNvIo6ztWfh6Ac/3IdX7n5oD43pF3XY3/X54y063IZ98XPOg7c
n+dbn88/ty9fQzn+Zf5G+hVwriOhd8p15uXUfmN/3kq9f6c/z8P/zbf1uTIt
Ru/63JV23TTj5hkHFr/JPOn6/oK5ffkiytEz80eUGw+ZT5LrenUco9Xb9Gzd
nv68p9oP788LUm5+rvflthi963N7RvWde1DvMx7fF0fPdZd6nWJ2Xx56ff/D
3L78lYwjwOyAvHe2jvv058HV3+vPG1Nu/q3PO24xetb7TEf2nXth3RD96n3Z
4/vWHWDymfed1es8s/vyaTKuBZPXzK9RLh9F+9gnsHLrj+zYtNsyb7JuT38e
onLzr+/hD4wf9fnOI/rOSdE+9SrHj/pcjpkdcdFxRR7/8z6CcX12vf5nnmgd
V+zPu8x10np9ucXKPU9OlZMv2Dqo5+t9uxPLPEDOjH95jsaFcvTLPMjMa+UX
smfJHX0nD8r/Pef/5Az2nu/D+pt5a/U5xnNLu4xXWH8z7xKd9Sv/D6MLOqJL
fgdWnt/NezpyfsIH72c/854QcuH5pFveL1Lrk4mxnj6hj86Z94VPfv2fn5J5
Turxf8/5blceWeZ11OcDTIjzaSaUPC95BfV6yGBT65nJhS6ZF+D5ofI+6vF+
d8nLse8ev+B6/N/dt0+ffMB1XsXdJW9HOfmE2ZUwvuS5oOQE3VNurP+xx/EZ
PeQt1ecmtfcyii/jn3Hve8rJYz6f+VjKtS/zjtld+ud94xD2fOZvKTcu+SmZ
R0gP8COVd/kxmfeND/iCn/Rf5sWjd2L6M+fpnMfJf75vnJFX45I8+z+7sj6v
Ykyf/q33q7T3OuY46MoLzbib9/En/RLl+GkckS/PwzlOjcMcd/irfCg/FH+V
q78+/+Devn1AXXz3HOy5rjhFvof/noO77KzMkyYf3k87JO2UzFNOPZR5xcYB
uuW4yrh/rgugs/fxvStulvtkyIP2kF/1Ke/yAzIPnj7y/lB2K3orN0+lXobp
NXKeei3PvYZzXGScNu9jz7xm36cPPa+8y6/MfQ7o6/2h/Cj0Tb3dpadz3Y3e
zrh9Yu3Uz+xXlnfFJXKfil/vD+Vne075rivM+8YP/jW29+WB9/5805VH983T
5lF0ynkUPRJ7PtcxYOX0c9c6Bz2fca8cN+rLcZZxstzHhP7eHyrug/7pBybO
+8lrf3ywzJNpF7KDch29yy7JdXZ2Su5fyfvDU++m3k69AQ8VZ0TfjEskVt9z
33tq5c1OG927bvx6t++2YWtv5z4Zzyuv9/tMiPOg2nO+FurB25pff2PplXb/
UWs3dtmV6JnYvMMOGWreSj8j41rKM25DjrIcTj88zwXNfXbkMPOxYeOta501
9/lm3rj/5zhNPWge0K6cL/I5eirtKu3OvMH02/Je8i66Jl3qPP5WzrrkUHwt
170TJ59g8n/U5TPuWumYkb2Jx3/7lQ/8blT59X/P0dNrvOesb79rmVHl1//r
81LHN3V85qzGr//T/37rfOSzGvqpPkfv6iL/9qvV4+/qOE/35tJ/49F4r+/d
nRxxscmFz/La+Dn0HPvOOIUz3wu2PmTetl/EvAVnfhPsl51o/wY7CM78HZhf
qx/saZj+4K+xe3OfFX/L+BAnNI5g7c/18ZyX8/4xcUb15XpvjlvPi2/C4lue
F0+u4xAzSz/ZH+YV8am8rzLXjzI+n34Z+4fcH7PFZz7xofva9RH64sWXtvrZ
rs+M6R1799/O2+Y9rV5WTg7rc9jafWtwxrvhq1b7926fe6yd7+p9J+34q+NO
48o8l3E+/IMzrul9/fUd7+mvdumndvm/59ARXdSLrubZd168+J0f22V0+fV/
zy3k34VlHBlXOY5g4924NZ5y3MKe857xlXoC1g7jj52UfORvGj+Zx5NyiV4Z
l8s4HDsi9YJx36UX8tyP3GebeijzaFJv5Lms+GZ+Ifdw7vNNvZl6iNybz+h5
865xZ/9UnjtLntRj3Od8Qn5zHtBu8x15z3WNeh5qz5Wkh7r0VJ7jkHoR37v0
Yp7jQS7RmVzjM/k2TtB17ac/uNeBf53fsCM++++T7psyrdXHvqOd2p16//xd
7tv8hh2HFbrlvo3arhjXlwdIXryXerK212aUfPXazp/R0D8w/urv9HNeHn7N
W4cVu+lthx6wxj1rDC/tJzfaSa7oo7Sf2DHkP9db8x4/dqHv5D0O6Q8YF/xz
dKdXjL/cl556wX5IcpRyxr6t4/Qz++73si5DL9K/aefQs37TjvKcetJOw0d8
M78Y7+YT4xM9yfPcqUdesPb2rTzje/KPfOU8TT/gA73hfXyD8SH/772sx2/q
Kc95P/Vq6h3yRy7ME+LAcK2f7i1yg+/KyUm5R2rRvlrf4wfTh/SN+Szvecz7
8Pg5nid/9It4ZH1uZnt+C6xcP7wPk69cF8j1/bSn0s9Wzj/xXNpN5n3Y9+Ba
D7bn5WYcQ3l9v9iEcp68dhgnsPgL3HVOCOw8cHTkn8PqhzMu7Fc96A+jD4w+
sPPJ/ZpvYPyDtRsdfA/2PZi+WDiuH+trZ9bj+7UcPtz3f5hdBOMvjP5w0rle
T5nb1OcQzW3qc3vmlvph/IST7kmXi9f41tarPP9Ss9eC7zxT7FDl2gPjN6x9
sPbB2gfrP5x8JQ+w8QJrH2x9BdZeWHth7YW1t77nYkKZj8g7rH2w9sHaB2sf
rH2w9sE5jnPcZbvyV/tg7YO1D9Y+WPvgHKfJp6RLtiN/tQfWHlh7uuQg6Z79
zO/kL/vglwfvPXXvteYXfQCTy5Sz5GvSMfsBf2Gf61ddfXBk78Dl//WrW04e
VuwT2HjwvPHbJecpV8nHpKPxB/se7HuZF5XjPsdVynHKDWy8wcYbrH1wzls5
z6QeynGe4yp/tQfWnswTS72bei71CLzFAnq+0CTf4aRLtit/U++nnk09Ro5T
zuDkQ9LBvGhc5DyW807q+QcW/D7XN67glMuUg7RTct7MecQ4SbmG+Qt+c540
7/Hj1pyy++82X/LVgnNc5rjRL8//ef4bBjZ+U/vLTn/6lZn7fHDEKw1/wy9/
pOv/X/nFL17aYfcx5Vc96vW70J98tDn4c4+u/YaZLzZnLuDnsyXORU6WXUCX
58uveItx4z31iH8Y1/ySbK//s19zXY6/q736ww7nv/l/9gtmx+e6Mz9NfJl/
J57rOe1jB3X5DTC/I/0IOO1+/UHv9FPSL9Ce9Asyj9H6GD8t/bAuP48eyfyh
9OvyPpTMnxE34Meln5b3n/guPxLd+IV5n0meE5j57unf5jmCua6W9454PtdB
+cnpxw7lp8L4kuuzyvUj/cY8DzHbleuM6tNP79f8uLrEQbvW1XLdzTkp4qji
gHC9b2lykT+/5A/2Poz/8gjRF1avdpBHmLzA3lNv/qof1l8Y3Wq5bL+bv+Lg
MLmGxd9g/IfJNYw/ic1zSVf0h7UH9r3E5jn1K08+JN2MZ1j8EPZ9GD1g9EhM
P2qfclh58t14g8U3Ye2D6S0Y/RLTz/qjHFau/crNUx9f0O7nyrgzDukLWPth
7YfRG9YfWHth8enxC+T6hb5xm+Mwf7UP1j5Y+2DtS8we0F7lsPJtH/va38cd
NKK30iVnTHzz91/qo1O2K3+1DzYvwtqb+fzwSm+aduwzew/0jtrtr2N6R77S
J1fJp6TLUO3wf7/snheWu+Bz3/7ja31ym3KQdM9+Gb8wfZaYnZrjOOWsi49J
Nxj/HvvQzrs/uFubr5z5y+xi7VWufYnrvNh5feO4a1znOOmSOxjfyUH+Gu+e
N95h/avzmCf36eWh9EyOY9i4SDrDnvOrvbD2wvw4mDyqj/6Ch5rnct4Zah7o
0qNJ5+wHnL+Zx5Tzbtc8k3obpjfVm3wfiq6ZZzXUvN81Lw81D8L0CD52jbuU
Uxifvc9vgtmBQ9klaUfA5kFylXpLe+GUw/zVPngoO65LDw6ld+CkS7Zjwo9P
XW3+SwO9bY999/R3/+TlRn7BxGbd92z361cb5YectsqwJ54eXp7L/8Peh/nH
MD911jZrfmrZMSPL83Dm7fm/97Qrv5P1DNWOoxfMZ081/Oj3L6DjnMav/3su
61G/31zf9Fv850Xxkq51NTjXAfHv/AXzwOPFryS3/KW8f8y4q8+7aPd1w76f
+ave55/memdtz7Z6SXwCJmcL9U17Lki9ztXOI/IsYP3/0YLx9XxZHxfHoa8e
nbb6ScO+/mKJC4r/8F/N++II9f6v1k7g38Or/uETry1x9YieeJHnxTfExXY8
e84/d377a6W/5HThvD63Ua4d2S75DvIxMj8FFo9TH/6z1zIPW1xWvgd6kW96
NPfx0zPkFSYvsO/legE6op/vk5e8Hwf2vXr/1riCfQ8mlymn5GzmtVfe8+I/
BnpbfXn4ZrPWa89tyH0PuR8rz39Je4ecWl887P2HfnfkpiN6f5/V/GP62cN7
sP7m/qU8v4Q9gL/eJ++w+as+J2Ve37hXTp7oU//P/UJ5/of/G0//HDfmf9+6
eds+OMe9+SjPQUq7Lc9tyf08yac89wUdybd4svbCxqf4LfrV5/y0ejHlkhzl
fpmM35Eb8u572gfjpziw+dg8or3K6RPl7APjJOcB8X3v8w/MR/SC540Pz2s/
jN/i09oPa7/685zi3Ieceir1SI5z7fM9fo3vZV4teinPffSwuEaeGwCTk9z3
DyvPcxP8+r/2sHO7vpPtyO/U9xH196PGF/Z9N/cxeI4csD9y35V6c59C7rfP
/fS5Xx7WD3TKfXPoQM/mPkt6kN7FZ3JObo0D39VO82jqxczjzLxI64zZz9T7
2W/zDjk2jsmx9irXH+XkWjk7JOdVWPv5Idqf4xruojPMrkq7AfZ9eg49ldPD
qQdhdhq9nXYPex4276Seh7vkCmZHZh4wzK6i99j9yvE758HUkzA/TL+7xhnM
rs15P+cNmLzQw6mn7Seq7xt6tsn8UXrUvKoe8up53/e87yvPfQzoyQ4mP5mH
jH/8HPRmR6tffeoXX9Iv8Q985r+TY+Oy5BUtGlfWncmJdV/tqM9FmN1o93YL
/IAni17yXu7HozflZ6MbnPmYyUf2B7myroZu4gXv+NA9N57zrbG9vx815dCD
Pz+6/Po/OqALOqEbOqIrOqEbOqHb2OM233Odo1+ft9f52tT567yudw558eAz
1hzbO7j395sPP25078RHPv6uUT8Y3dv4gW+t9e5Pj+09NmXeJj9ZYnRv9tOX
LHv+OWOLfKMjuqIzuqFj0s13vn/gVeeOGNf6JynXC8fZlUWO4Pr8mCub777z
yAdWHzW2960T1thrsYtG9zb4/OhLl3xxdO/kvc789cpXjukN+9Ehv3npydft
1M3eM2H9f4/t7XDPB7Y97N3DSv/1U7/9H534AcZ9riOzz/MeJ3YAOcl90Mr1
P+vrinuyg5WrTzm/iB2n/crZ73DGBdWf5erjR8P2R8DsRXqcvQhnnL0+B2Re
n5+UcVz0zXgJrNzz2gtrb7bPPKp9MH+iK+6PvsrRF1aeeQrK5SfJ0zJ+i/20
aP8UrD+w/sDoD4tTwOIGMPrD5nntkY/EfpM3Yp1DPg+s/bD2w9oPaz+s/bD2
w/gF60+Wi9Pgp3L9hZXnvrQ676DF7C/Py1eC0QdGH7jEqRZh9IHRB0afLLe+
hz5d64B5bpD+wuKW5kv5tTD7DNZ/7+s/rNzz6KEcPWD0gNED1l/15blL9J/n
6VtYueczTq+94iDaq1x7Ye2FtTfLyaX2q1/7Ye3N/ig3P2T7lYuHwM45yHLr
MPoL66/n9TfXYzOOmudn5/5p9Zs/8nxzWLnn0UM5eihHD+XooZy8wvIFszzj
g8Y5engePZJe3qff87xr2PwF0/9ZnnEz5eiV9NRe49f7zs/K+ye1S/ypPj+5
xcrF9dBPOfrlemqeV+159PI8/ZrnTyc9YfVmufrQUzl65jlDuW5an0s+t7TP
+IGV53qu79Knnjcusr91/QN95erXLuX6m+cr+T5/gt+tvzB+8m/0T336l+tC
uT/N8/Q9rDzXf/P8a1h5ns+sXH+VZ5xCv2Hxt/o8ora/+p/nH+d5Ct7PvBH8
qenXYuXq579kHja/vN4f1t5v7XvGG5znRmq/8lz3Qe/sj/KMQ+B/fS5di3Pd
MdeVct3Huilc32c5Me4XnFjW1WBxP1jcDubXwvX9cBPjPriJZZ0Dru9/mxjn
m2b7BqN9g9G+wfjeYHxvML43WO5zoad9D85zIO03dg9P3Z6pZb+ye7zotzx/
GOafw8abcVO3f3ac59ree0BO6rhYex+efpp/8lxico6/sPHC79BPdGCf0jv8
lNznAaNLfW/Cw8Uuxff6PqkJxY5LuVDODsLX+n6km5t6n23LZ/TI9Wjx7xwX
voduKZe+V+frt3Lke/X7rRyhZ54zza8gPzB7q76PZ2Kc4zuh+B05brRXue/S
a+yb+r6aiXHu74Tix6QcaX+eE13ftzIxzgWeUPy++jzjfj3j+dyfZd42Dur7
NObGOGv1VJ6Dk3oFveryVq95Xz9TD3m/Lm/HufbX5RP71q/wJfWa+vN87dxP
kfNhfb9Bq4d9r+ZDq2fQM/kEi3Oa53wPTj3IfqjPjWj1Hvooz3rJHX/TuMo8
L+f41edxTCnxTXH/+nymGaXcviP9dO6FdYTHF+irNg+N/vX+QvmbV+yKok8X
rQ+IL7PD6EvrNeLN+qOf4t7WLY1z9HD/Gf91Ib3vK/vO1KMcn/k72mddTn/x
OdfF8c372ud9cWZxbP1kb1vfsk6k/7Dn0Qn/YfHwfA9Gd/aj9aNsF4zP+IbP
6KI8z/X2PLqgG/mFUy7JIfkmR/hOjtBVee4L87xxn+tN+UtPeM738TPzBnKd
qz5HocXolOtu9fk7Y/rGtXr1K9fj63PzJ5X+1v55e94fOtPjydf0Y5SzE+r7
Zrvj8J4bKu6ET+QGNo6t+1mX6Fr30E7l2W+YvkeHPB+3K46X7RSHNU/U++Em
NPV+uAlFr8B1XG1CU8eVJkQcpb0PATbO4Xp/3YSm3h/Xts88WevFm0v74Hr/
4tXFjoHrONLVxW6BtR9md8B13OTqpo4ntOXaU59PfXWxE2Dlnq/Po7465P/q
Up553srxGSbf7NjaHxps6vzByU0dz5sc9/IONvW6zuTiB8D45XtdcXLPs3fg
2l8djLjs5MJPuPZnB5vc14G/sPXthfGR20v/2fH6yw/QX3ku+gvrn/fd18NP
yH167C9Y/fyq2t+f2tTrLg81dTz5ocJv9g793HVOGj1LX5I/dppy66P0NKzc
89pZ32vZ9rPmz+zCn1xvzX03GTdUbvzkvoWMwyjXfpgcGhfsLXYy+VTetQ8r
4+C5XgxrH1yf1z+vjKv6Hsl2HJIrcur7uR5c36c92NT3TrbjlFwrT7kmh/X5
XhOKHOJ3fa9oK5ddejv1Aowe/HvyK7+N/MI5T+W8kHoH/brmtZxH0Ov/rqfm
FrlJOcl5kh7umpfwi95LPUfOku9dcpDz8lDznu8bp6k3jVvlOW7r86kGin0n
n6/kLS3CaScMNe8a1znOusZd2h1d83LXPJ52Stc83TWv04upt7r0WNpBXfN8
l11gHjOvpR2V5wiknZD7yofSW8YpnOOUv1Sfczep6OGF+ubG4h+Zh3LeyXmm
a15Czy69b70F/eR/8Q/FvzJfkJ+EDs4r5Q85V0c/xBfk7y2Uz3ll35b4AH8J
tg4jPiCulPEC/gk/zHe0M78Ly491bo9687sZp9AO/rjn0aG+h+Cx0s9yDl/E
RZIOWY4u+qnf2U/+KXrnd/nfGRfynvXVjFPD8hEyTg1rX8aV4fpe+wl980J9
z/iEPr1d33vdxlXh+p7rCX16r76HeUKfXqvv+Z3Qp4fqe2snxLm+E+KclzbO
WJ9f2e4/QM+M68PomXF4GD0z7p3+XmJ6Bz2U1+svbT6icvTJuG99vsqovrgt
jD4weyHXcWD0yXUNGH1yHSL9qcTiBJnHkHkO6KGcPsx1Ilh7ct0j854Si2PS
x7mOBNfn7Dxa9FDmg5o3yj6gmBeUs09z33vmaTgnOfM4Ms8DvZSTl9yPmvN8
5hEk9v36nuP23mLP5z4o48/76JHzoOfrc3ravKbMc+LPDZUnxW5VXt8L1/p/
aaelf5fY9zOPJPNM6nvA2/fzHm3luQ/O+PU99E67J/3LrnV/80xNj8l954Zk
XqC4o3id580Xnud3pN2f/mhi9Q+V54VfmaeUWH3q977x4Xn8yfxj7+NP3iOW
cfPM41CeeR6ZB2I8KMePjOtkfjB/nJ/albfKHs68zcTqyzzPzAPF/8yrTKw+
8pDnqGSeoueNV8/nOXDGp+fxM+/9y3WYzGNSnnlOmQeF/xl3ZKfhD0x/Zb60
eIb/d+VZi1vkObfeHyoPGb/z3Frv42dX3i7+5rmz3s+838yjxe88N9b7mYeb
ean4n3mYidWXeZuZ10l+Mk8xcd5n633y5Xn8ZRf5P76Rw648f9/Jc5S9P1Se
vefy3GP/HyoPnXzkOcbeHypvm3zkOcTeHyqPmnwohzOfX33l3ILI3897HvRr
qH0hxn2eJ+39ofZh4F+eP+39ofZBaHfm+ee51epTDg+1j8BzXfXgR+bdew5/
8x7yXG/0PDs+z8nLfULqZbekXZHzkufxK/WO8qH2xeBXnt/t/aH2peBX7rtI
rD50yfubc1+D583//s8+61o3NP9kfDX3YWX8N/cF5b4oz6N36umcx9WHvrkv
J88fyXEOD7XvB/1zn0ti9aF/ngOVecCeZz/Dyn0ff7wP5/4E7+NfxtPFTfAv
/Rp6jl+Ufk6ei9m1z854yn1uiX2PvHgf/3NeTbvM8/if+6wSez/3ZeW+LfzO
fUyJ1Wf+7srTZ98rl0+f+5ydg5d57Jnnzh5UDue9tHnuuPYqh/lz3ieP+bzv
kz/1i1M694s8ep/88XvJH0x+cl9prqd4np+iPP0s8pH7KNMOg9PuIg9d+/Ty
3rvaX2/3mXTtQ2HP5b6MPCdffbX/37+vI/d9kDflcO5Pyfq9T57ynHrP576E
3LdAnjKvIPc5owP5yHPOMo4Ei+PkucBd+5Dpr7xPQX3kzfPkSf3p98Hez324
uU+XPsv7GlIOYOOwa98XPuQ+pbz3QX31uZX9+5xyH5TnuurJfTT1ecjtPqJ8
T/3k0fuw56zTOWeDfIgj4m/uW884F4z/eT5m7vvOOIzv4Z/n6b0cV3nvR5bD
Q+3bw98uPYBOeZ9G0jG/X+977+ZbnrNifsr1YHF+ceU8l4Aeybgt/ijHvzwv
P/fZez734ec+feM37wvJeVJ51zyaejDL63MUB/rOS7UeaH9ZrofnuY0ZV81z
EZQPda4Cec/3laOPcucYWe9NOzT3hcLak/tscx8uO6DLDkHftEPqOHT7fecY
WbdFT3H/PLcCzrh/nmuR6yTqI7/5fL0fbk7ffS3qQ3/Py2+2Tp37sjNPPfcp
d/kB6cf5XvoZaeeR/8yLz/rVh3/el7eS555mXnSet9t1zmjes9i1rz79nNy3
nn6s+tAj93Unzvq9r/+e1+/MGxeHJ6/Or2FH1+s1zzTyROR35TnIxmmdH9me
38l/oL/zXG18sm5m3tCufA5eeYH/NLPJ73R9V7523rOd+2NT/+Q58uhAbsRD
yJV8Df/3nP/jA5z377BDyed/3pdwWznnd2Fe+j0ljigOa16z74cedX6RvB/7
KowjesH36AV0sT6DLvJu9As2j1svwBd5POYhWH+c+6T/6J50g/l36JD15HnO
sHX0Os59V8O+gO1j0Q/90m7zKJznknsfZv+Yl5XnvJz7vs3TeY5onl+X7Us6
o0O+B7Mn1KM87a7cd4+OeQ5r0iH36ZJTcql9cOZ7kUNyZr8LnHa6+sg5ue+S
2zyn0XgnZ543z+R5donzPiTlmXcj/8v3jTvj0DhQjg553l3ivL9IuXPNLvvz
CTv9Y1b7PDppN4xv9blnw/ruyc79SUO1M/d35b4+7fBc7mcaig/ahY4L55nx
jf36C+PIf43zzf9a9vfWeQJXlnw2+ZDa4/k8p63rXDfvZ33KtYe+R3/zWs7z
5JU8oUuR50Xj27yJL+ZF40a5+cg8aZyVeXfR99gJzvuUFwjnvfbK7f9zfh8s
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
1eeHnVXWm53zZtyj53K/PPewnX48srfFt97/l72OGFV+/d9z9MT5r+65/G4D
o8qv/2uXdmY7sp3apVz7nL/mvDT85XcZB8al9STjyHorbP0J/5Vrr/UF7evK
69Ze5b4vnu97XfsifF85O4q9rD3sT9/vyjMu97svKqfXyfdWz/16uWPufH0e
/NU1N79y9Pyyr0W8ldySS1gcgr5TTq7JuflFfeaZrrxs7VMuv40eyDx1mB4x
P5X8j0Vx4a59ftqlnHwZx4fdvPzGf3p4TA+d/Pq/57ynntyvSF90+a0we7nL
jxW/psf4TV3nBJX7rBaVi/NrJzkjd+nHZJwfrs85ua3EBVY6Z9+df/m2MT3z
g/EoTmBc1Pst2vPy8BFfyYX1VXR0XgIsTkjulFtXMq91nSOY5wyaJ41bz3Wd
W5jnGrKb6cl7Tvn6UctMbvPZ+Q3kvORHfvDPL4zdYljRl8YtetFj9EDXOYJ5
zqD5+RtLXDlq9jdet/devn3t4+cNK3rPOm+u+9fnWowPPLGpz8u5uvj31vky
L6M+x2NSwfW69MPl+/QnTF+SO3K5MK54a/HX1UculcsDMO5ynR/9/FrfhrXP
Om/mBWQeQOahZN6J95Sjf+aL13SfXbDv0ZN5r4FxbjwZh7D++U7mmfiOcnkS
MPrV+d5TSjszDyjzQjIPhH4z/i5e41tbr/L8S2Vdk/5SLs6iXP/Yc/w749E8
C9N/1r/5S8r5XzA/1PPmfXqTfqMn6SPl9Bmc545aLxd3gK0vWl+1Hon/6k29
iM7qk19e54O39wIrN//gY50vPLvEB8iD+UAc07hUblwqNy6tO8DObzKP5DlG
znMq564s0u/0D7sItv4Fm5dh9KNfvA/X59RMjvOXBuN8nsEil5nfRr+oH1Z/
5qHIY/D/+l7nyUU/iPOgq/EPGx/4ajzY5ywOvMWC+eWFIv/KxReU659xatwZ
p8adPAJ6hh9ID7Dn5AMrJ2+wcv00nswL5Ny8YBzAysmj+Z38oje60A8w+mR8
m12lH+We0EV2KTvM8+ilX+hFnugDmB1L37Bb6SPP44+4i3bkd2Hfzf2S7P60
87Nd9f3zI8t3tQOdcv86zC4xL8Hl/pvjNt9znaPbeBO7jL/L3oLFWegDuNxv
8sjH3zXqB208gD/OTzJfwfpp3MEZVyen7Dh6kdx0yRX6kCv1qFc96u1qB2xd
Dr/Mp8ZHl59LnyoXX/E+rLw+167FC/XcdcXeZNfV8YjBps5zubX463mPBXkU
xxO/M+7ZNda95W+bX/KcrTxXjF5OPY1PsO/JLzdfkpe8h8a6ErpZh4D5a7nP
qus5mJ2R8Xi43h8/o9jRdX7ArXG+/OSC0Vv+KMy+o3fk33c9B3vOe/5PLur5
eErB7OQuvwDWfnZq2un1udQPF7vac+bNep9na9ean/K8v/o8wX4/qD43sbUr
0m4nv8rJq+fYE7Dvw+gl74X+FcdkF9b5eP12BjtafCLz/eh545i85zlXOQ+a
98yD6CgORJ+LbyoXx2RPqMf3u+69gPP87Pw1n5JLdPN/z/m/5/Qv15XhXEc2
3urzGiYX7Nd8w4/P+zbs9/f/rvc85z3ntbKrxb/zXgvY/Gy+kr/HL0If8w26
sEvISZefg370Xt7LQJ91+V34Wo/7FtPj5DrzuukDv/wFfjgsbsE+kodAX3g/
9xHU9/c90pcHT58Y9379XzvVk/tM2AnmAXYWTN+gG/0Jl/uwFo2njBuyC6y7
5bocPYG//Im0u81H3ofFd7U71zHZLdY/cl2YnWqeoy/hmn8T4z6EiUXvwfU+
xYlNnuNKH6U/aB6q6xss8w6+mXfwVXwg/UF2nPph9cPGJ/lkp+T+IuX4Zb5U
H/+xbv/U4geaH+X5k99638D0kudLjvll/Dx2HrrSz+wxdFaOzurTfvJP3uh/
40G7yBFs/iAX2qNe7VGveYg9mXmy5m39pNf4k/wW8633zaP0mH5qr/il95V7
P891IT/sbn6M9pCHch/mon0E5lVyzW+S5wHTa9YN2CfWDcStjWv6J89JM17p
F+0Vx85zqdCD/ZHnlpX91YvmnVzX0W900G/6Cd/wM8/F0z+/eS6heRLOc5f0
M/16381zPX0XznMe631rbZ4gOpV9vovokufY0It+81wtcmTdhRzlOUH8D3IB
y7/O865gdgG/tOyfWdS+XAdkP3k/1zXZU8axeZMeg41v/gf5MR5yv7D4pv3a
+m++h+mren/VlKKH6VF6mjzW+5/uL5i/of3yn7WPfwX7nvmXniAf9ESet1Hf
J3xbWQdY2L5bCn3Fl2H95h/R+/U5gY8U+9E8Aec5A+iPL+Qr92fD9kfX9122
+6vVJw5e329we6F/nh8Pe56eQG/zdq6D1OdvPtx3j41+65dxTF+iO1zu6VuE
tce4Yufzk/LcP/O4+Q42jy/sz7RiL4qH8dvyHMm0g/MeLP2s4+LtPVTGv/kP
Fr+xHlLLc38cnv4WT8pzRvi1eU4pP5P/lefElnXzRc/lObnkCs5zJPEDznMN
2TV5fyW65zmmns98psyHynbVfnCL6T/2i3FmnjEe6S/+FztJf/HL+M/7VOkr
cWL2rf7KU0Af9pp+kN/MOxMXJo+Zh2m888vRkX2VeYDkED34MfS97/nNvEjz
Fb+G/5v5eNrBD6j3B91a7B76GK7jpGf15Wnx1+lb+tp79DW80F64qRE3h8UD
tJuegc2X8tvk/6Bz0p29m/cumZfUZ9yaf9HHczC7R//Eu3PeJAfWn5TD+Jbr
VzA5Y5flujJ/gHyzD9kB/B2Y/SvuLN7A75X/gc6Z92U9puRLLrIftSPPcTfO
yJ1xxm+W54W+5B0fjAdY/8y7eU922lW1/zin6HF2C7pkvWUfyKL4A/mH894r
8zC5Uz8/mB3Afq3tkzZvRbxXvNT/+TOZp+F5fPR87vfPe9DQtfgpi+hufMD6
l3zI/eKw+JHnxTnptzxnFf/zu9qV7eRPmgfJWe5Hhq1bmcfynDPjERbvKPmr
i+aZPP8LNu+Yh/TLvJH3FPDP/F9cETbfo4P28xu1n10Gs5e1n3xmXgmMjuZX
7efPaC+cebr0O70tjiu/gZ0onguTa3YAf4adkOf6slfpRXlq/En6lz3FrmQX
pl+j/eYT8lLs6kXzIvuDHMDoMGzRX30/1SmFrjA7iX7yft7/QU/yi2B+Ub1/
sL1fCKbn0o6v8wmH9eo8m3aezPUu77EfYPMpPcDOFvfELxi/9AO96VnjV7vz
njP2BYx/7FD1wfgl38g4NT/D5u+af+NL/iP7AC77omJdB9aOrnMy0C/nZfMw
fnWdW5H6N88dVt51zgf9muegw/Rp7quE6U/6wzjJcybpN3rdfJn71o2PPAfd
eDBvGufkP+VS/3O9S738BfqMvoNzXKhHvfhMPmu79cnijxjnsO+PGLbWA/84
sT3H5pY9z57z8ImPFbtSfPa26R894KcnXV/yCn/zhXV/ePj0a0r8/dbec78Z
+/erynywza/ufHqpx69oRu05eP2rZ/XfT33WD8Yd869V2/up9//JmiccufZV
JW7WHPTikZdueWXRV9eucsqh+x18RVl322Hfc/b84tUTm032nzH4l92mFjum
nEe1+86fO/y820p7djr6gnuP/Ex7P/WYObucsuXVg8WPGbvXRstcd0h7v/S2
98zYfMMDbm2uX3r6yW8/6a4ShxJXf/U3qz806fL7Cn0uuOon6/14zbtL/X86
eJMdjtz4nlL/Wh/d46MfGX9Pqf/Qi75z7HXr3t2c8JX9rnpi5eml3eWcrgXt
m9r885CVDz5631mlvNzntt66S+6z/0PN73749FMnn93eL83+XftfB396070e
aib+4eb7H9xtsNT7hzWHv/zkajeVfujXXQeNumOvNR8vz522oP1PNDuu/80Z
t39gdqwnzG0Wtv/xwr9PL77i2OevfLx5YP2/LfupW0aV9Yk5t+659JO3j+m7
72/H80bd9cQejzfvufi1rTb768OFjrcftvsRK+z4ZMHo9dbDbzz4miWfbj58
yjZT3nxve381ebn8y+PXeWq7p5tXz93vsvnz+++vfmb7Df/3w3OfKnJy9vDN
lvzM1W1e51ZP/WHLjR5vv3fmBnecfsWz7X2BRzy2yX23rdDeT/3cTv+z9EOj
5zSXLuBPe980+k3c9IOPfHX63Obd3/vkD59dsj1XgN7Z7dphB1+67bzy/XWO
PXq5s5ad10we/eIFm5zbfz/1VleN/+B7nmjvSV1z3ulvXPcD88r4ePv+K3zj
HdPmlvbtPmnTLS/51LxmnaXXW3y/k6Y3ef/0nkv99uOXrvZs6e8vfn/ge7fe
7tlmzYuP3/POf7Xn0KDvfbPOOWersc82ly+Qp4lFzt/19kPv/esxzxVc8hY3
OfnB4378fGnvD9/9xItnvuP55ohLl7xuqwntPTC3r7vXST/77GXlPXrinOmX
rP/dNV9s/nLg5k9u//y/S/k2F/5u5G4b3FXwiWcc9fnHB58pWL3vPvWSt+3y
/RfbuPXlM2/9ze9eLPRe8o/Dz5t75IvNbvfftfWWF7bnIqHPEV/d8c5dfvZi
M2yd3233nRvbc41OWDB+/ln4+OUF42NqwZ7b+pEf/fMNp71c/v/OPe5+6R/f
e7nZ9/IvrfnEOq+W/2vf6g/cts45H365efTJ30+ePKo9H2vNp689da3D2nOa
Pn3NUZ/Z/6r2XCX8XmHFa3/ykU++3Jz1xR/94PCPXlLq1Z4vrPXfX7r7yFeb
t39jrfft80x7Ttdl+3x3p9OOG1biC+uv9tbzP/tSG7848bj3Pj7jnva+5cKn
T+18yFG7z2+GfXD+g0us8XIpf9v/WW/uCjPbc7+eW2zq6GeWa/MVtn/hzhdf
m9/6pcbpmZu/csQqT7T51C8scfz2hzw3rHfns2ds9Lvj23Pc/rLHWzZedcOW
T7PfOG/mWz/axqPO/9ovX/r4/e29juR3h6+tdcewR4b13rXN/Xd99U3tuS6f
mH/x+SNntPjSI75/x7ePbO9bNg5X2eiIbZd/4fV54prlbjr5gudKOfl+7auz
Nnh+dvu9Cz+/2j2njxjorb3/1Zfs9b+DZRzTP+etMPey5acP9A4ff9pyFz18
ZynffOmt/rj2/k8WjD4/vX/6lO++eURvwrfWP3ON+54r5X5PmfyTK6dPG+jd
/Nwa9996b3suEv31yPwfXbHBgwO9B697311zD7iljMtdJz9zxuLnzo511LnN
Gbs339z0+RG9w87a7JWP7v5MKX9g74fGPvngC/H8QO++G0fdetCsEb3vNKes
dcdge27Ukcvv8eAVL7f3LY9bbOUVn1j6qYIP/ea/L3v5b88UTO9sNXHexo+M
GdV7+svDbvvee9v7lfHp2Xf8+cHfv31Ub6Pdr9r5xfOHl34WP3O1rx+20Ssj
ezdcc+8a12/XzhMfP3ern7/5V+39yUvt9Nrnjz3xuYKP3+zen31gu3Z/lv7d
0vzyym+OHN27e+15Dy/9u4HCZ/3c7U17/Xtw7Ojelbv9fY/J49pzfhYfHL//
BiOeKnp6/tcunvWm89v7kMnXFSv++vRN3zGmd9LBa97y+w+0cQTjZMWPjzx+
+CZjelO+cP3vljl/WMm/3eDOtW5Z9obhBX9v/Gq7rfyGcQXj58x3vOfAG1YZ
23vtoFcHNrz0maI3Lrvw6P/53IvtvS/rrLD3slsfMqzsG9j+jtfGr/jn4QWf
vcJPfrHrvNEFn/rTxc9/dX67z2CLDQ786HFvebF58Z+j/vLW3Sc2Kw18a88/
j3u5+dhWn73y2B9d1oz4zKa/nzTs1eam5z85q/n2P5tH/nnbLmNfea1Zep2P
jT3ihEua0dcsv8H4+Y81Hz/1jpcv/fFg84sv7fOlg+e+1Cz14EXfOuoTtzSn
bnzRR1598HX5+uk665573GDz4fde+7nlp4zsXXz6ui/+86xbmk/88GOv3Dhp
VO/heXf+9rSP/bvZabVb9nr6d1ObccccPukDt93VHL7XxDMve709bz9ypaN2
/u+7mn03/f3Oy101onfMDt/YZNUl7irPeW/P9z/+xbm/fKa5fsOf7/z4iKnN
kl888R1ve/vr+uZN11386NZTmyPW2XGtpQ+bXn5/dPp1vxz15dnNbht8b/83
rjG9edOs4+bc9ORzzZjzHvn5H/4xvfRLP//nzPmvznv6db9tyqffcvhFjzUX
3rTsYZ8/YHZzzH+tdMDnXvcXT1vh63vNmjOqd+FXnh250mpPNVecdcWcG0eP
7e1z91aPPvrmp8p3fNd76rnvkTuXHjFzZO+Pf/jOrYtdOLu5fMwGF818aHTv
F/9nhaMO//7s5sHHV9t33aXG9r52wtwrH/377OaupV4d/fnLBnoPzL/252uc
Ord5evt19/v3DaN61/90hd//8Qdzm1GHTd76H7NH945Y98uLbXbG3EIXdNrw
6Xd99pS1Xm5mT1v+h6s++Ewzfr/fHrz2Ja/r9buW+PLODz/TXP3OM39z5Bkj
ehevs+L44/d5pvn3Ds+tOP6akb2dH7pgnwm/e6a5f7UfbvuuGaN6b5p03gkH
Xf1Ms+TFkzfbcolxvbUf3e68z93wTKEjut5/7IOvPjv1hWaPh+++6Mbrn2u+
/NUtL3rbM681Z5yx0e+//6vnmttfW+LcgV8P6x316+Evr3fec01zwLbbrvCX
4b25jxz22sZXPdccs8HFN//h9f6uduan//LmKc815+3xzXNWvHNEb/53/rjK
46/XT47Jte/47mHPjThkzuv9efM7py576ekvNF+7Zr0tz71vZO+bb9ngG4u/
8EKRe+OAHJNrckgu0Q0djxl3/5cOuXRYb8qYs6Yevvbr8/u6m53885uG9/54
xv7v2Hujl8s4Mq7IJTm96ktnLb/YR9rfn/9w+ntX2Hh+s+oNDzwyZ9VXmz9O
/D9rvuf0Yb1vrT7s8uErvNrcOOtXmy47aXjv81OWO/OszV4t49I4RVd0Vo96
37fTLudu9I729837nzP9z2cP613+qW0OXrmZ37zlq/v8Yt2Zo3qnn3393rt+
Yn5zz5Kr37zriDG9K760ylkn7zS/+fn4m57+7KixvX8+9Z3TNttsfkNuyBE+
4iu6oJN+6JfvasdOBy9z+pTFx/YePvnAv/YuHtbb/LKr/3LLK2N7vx35t5+v
eeKwIhfkBJ3RHV3Q6dVdV/nQ8rNG9dYY8+azr7pseO/kYy7/0GfuHN079ovr
HfHQ74f3LtvoM4sPW3Zs70fv23jDg163I7d++pM3fXqxcb073nDBbRf+fXgZ
Z8YdOSSXP/zrNgfuc/PI3uLzP7vRZ/4+0Dt19cn/c9Wjo3s3XnftzN0vGih6
kF6kx+g148y4I9fknNyS40M3fuz7W17S/m679WK7jZgxsrfS/od//Ol7RvTu
O+QLp61/7ajenrd//iuL/W1E0bv0MD1D7xjXxrlxYZzol376ju++uumuW7/n
gvaXXqfn6UV6kp6it+gReoXckUN8w0f90k96mZ6mN+lRepBeJMfkmhyQC3zD
x1X//c2Xv7ncuN4FK+9y4YdfG130Oj1PL9PTxoVxQo7JNTkjd7/dsbli65Ht
7wvT733kqte/N/GNX7zyb4uNLXqVnjUOjAtySm6fvP89v1j+9XZ+6Wfr3fHR
/0896n3w0Ut2Wust7e9WP5+8+Yc2Gt67/vLfjVmp91rzpd5nVz9p19G940a/
/8J//OG15r1/Xfz6r682rOfXc97znPd++c3Juzx5wtje+PEbrf3AFeOb1zab
cNb3Dhjdu2b5L2z7vRVub6467ddLrv4/Y3prn/Po5k9sMqXZ4r3r/WPVc8b0
xk3828h9l5zSzF5rx+V+8KFhvbcePfjVsz92f7PzFic8vNamw3pbfv32Fz67
yf3N7Ueucumlr9e/5Cl/n/XK2BnNCb88YurHThzbe+/Ga/360NfxP86+fvGD
jx7T++xD39368nfObN7/oaX3+9/fjOndcvKwTbZ++8zmgu+8+YKvfXigt8US
05tPLD2rmbHJ/1w5eaXX9dT5N/zqJ8fNaV4895gffPi1F5uVtzn4kcdufrbZ
4ZuPXzdw5NjexI8f8te/Xz6vxJP3Wfzo59/63mfL+vtG8184eI3Vnm+mrrjh
MjvuPabX9D47/NL1nyt+/advfqp3/+9faH79wb/845Yjni/rCr7ju6veesrX
Tv3c63b82sse+8y9zzevHPj9HW+d3q5jfOaOU49cbtV2X5t9B4f+ZJnf3fxw
ez/2DV/96pi19m3jiCMPfttFn1r+1WaLF+/95aSvj+6NffqGf22+YktndEdn
dEcXdGJPPzrrC6ffseOw3sXbzrnhkBXb+6St07625avfuu/6Yb2HX7rt6B3u
aO/FXe22VV9+20fae3q1f9Ju51+563nDC1/waeaPdtnl2P3H9O7/5JTxazUD
vZH7b7/SNYe2dr/+rX/bvWeeNjjQ+/L226y74/7tPZH4tffbrtj80okDhU6+
e+nVm7/69ve152yjM7prV7mfd7l7N1l+4/b+X/3ST3zDx+IfvH2j86bt3dIF
ndANHfEFn9jth7z01Lu/96dRpT8377HDK+u+tR1Xxhl5O36J3nq7njC6t/iy
T3xph3c8H+fAjO2966EDXn7TcaN7a479dPOVtcaW/aToOe70dbb832XH9OY9
scbLk49+Xa8tc+qd/zqwHbfGsXFrHBt3xqFxZxwaF8YJufRdfMZ3fFXOb/vn
NavsfO/v23Yq1w/90m79oJfoKXqEXqFH6JVn1n/zKbse+Wjxv+gBemHHs/df
/L3vbu8vJWcFL/J3f7rvz06/7pKWb8rPm7DnkZ/5Rfv7wC8vnrXFIWML3z33
xlv+9avBseOK3Iw798/nPf7ROwtfX/v0+z541Xsfb656fnDWktu195eS24t+
MXK79T/6VNlHv/Hqq2464+uzS57aF9/58sx1/jK36CV6yve/seLgFV/f7nU7
9YU7P7PuWe29pfKHPrnvp19YcnBYqdd39ONLi315xqU7DvS2/8qeS17+kbZd
+qFfxstRex8zeNpRbb2+I367xF3PL3PXMW2/0WFh/HN84Zc43BX7vO3In/2h
7UfSFZ67/JNTV5vc/hovZ9x1wY5nHTqj+ez9+y1z3l0zmqc/8vNTfnXVmN47
J56781vPn9H8dNQaK0yZOaY39fJ37fbhGTc0W+728T+eeODY3sbv+ewSpx13
W3PQDZd987CPjC368+hVj39273PvKHGTbX4y6vBnT7q9WWaV8y497Nb2nm7y
PuPIzbaafPnMEke7YuUNr/7WlFnN/JO2HbvcG9r7SsUFz75o0jHXjJvb3PKB
dW8fuLO9nxRd/mu9vbfa9uJXyv89N2VBfP++Eg9Ur+/M3G3bN27/cHs+PPr8
+Gdf3WKn3QZ6x67eu2O19dp76Z47d5/3/HWJmbEuPbP0c4W3XPvu/TcZXuii
Xt+ZfMDMB2efPKXQYZe1L/3uH59t9dWI85b655TnXy3znu9qx5l7nvjdPd44
ruiH6Zf+eanXDmr5iu/3P3bl+ge+Mqa3/ReWGr3ujDZue+Q9lzz2kVP770P9
9QY7n/fi6HG9nx78vj2mfbnV09qlner1nWcn7HbycT9u4zElH3BROxf/7/uf
v/gNw3vjtt7pRzd98OLm5Bv+tuRWqw309nv0qNnHXHNR86Nj37jOyR8a0btq
zuL7fO6Avzdv3+O47e99fZ75yeo/e+Z7X7ywuWTTTW9ae9dRva3e8tdzT/38
Bc1nNt3pvEv3Hd17+g3v/PHZu5zfrHbBcw+ddOSY3kVf2PbucUee11x/0Ub/
9e/FZzXf+8BFY8/+7Q3Nvx7f5fFTjp/TrLnm3Vdc953rmsnz9xy9xlvmNrse
sulrb5xybbPSXf94+LXd5jVXrrHNjl//8DXNZv/47m1XvvZqs9KPvz9j8ZVv
ar643Ac/tvZ7h/U2+vgFhx+7zA3N8OagTXf/r+G9t73v2yct/YPrmxtPP3GJ
Fbcd3tt//DfHPb/d9c0v/3Lf+Td/YKB37V7z/vKPta5rVj145T+N++FAb8/d
vznup3dd2/zhL389Ybn3jeitPOyO+fNeuqYZsd28K7/9uxG9sy/4wvoTD7mm
OXnUf/3qE18Z0ztgv4OX2nGTm5r1b7hvh7kHjO0d+8dTn35ozg3N/vvs+/VP
D85r9npgg0tv/OTtzbo7zjlorVOebd556pJrbbf/bc25K1540gfe8VrzzgfO
+8Z3p93eLP3p+z70+3cN6+03+ZKvbvK1Kc1bf3Tu2qtsM6x384dXPHTa+6c0
c+4b9ZGHlx7em3D57APu+extzYaf+OqfdjpnZG/qlMM/eP7zdzRnbz/rlyee
97rcnnjof78w547mq7++f/NNLryv/PaumbXhMj97urn41EPnH/Tre5s9PvWV
tb7xr2ebxRa7Zubp2zzQHHXgb685/sLnm2PXPeeDS998b/P0V+Z944wJjzbL
DTx219ZHTmt+uNqsDU8fP6c56rbxG7508rTmyPve+eRtq89tXnj1I1859d3T
mmmH7Hbgd2a+2Lywyr4/f/+208p7pZ51Nn770Qc/2zx5zCZ77rHMo0WP0Wv0
GL3225OeHP290+Y0PznoyjnrPvFEc8Kfhx+wxE5je8N3+8SRJ276RJEbcqRf
+nnRaZuu3pvc/v5q/Rv3vfaQ4b1tPrXr7kutPbuZ+eQ1/33aCcN7v/jCgYtd
sfzsZoUZm990yzdG9pqPnnrEp78wq2mWf27r2/YZ2Zv5rS+de9JHZjWfumXn
vx34/dG9Td419ZmvrDqr+eKqs5Zd6czRvf+HruuOy/F7/89+nrZEdqUhDZUZ
GedokVAZJVpWdrIiSspMhTLSomwq2olEWwvtSYRKe+/xe76+rnP/vj6vz1/P
637uc9/3Ode5rvf1Puu65o56pk4pb0F5NwrztCz+E2ecGX96ahu6csZPWfEI
Dz+cF5G1PrOF6DXoOeg16DnIFeQMcgU5gxxALneX7Am2Lh5BlvqBP1y3dSDx
+yvWdPD12VjeYsruK+2op747aO8MJva4Hr48GPH76bF57clZLKybf/StvEk7
ink1EvzKio3XrUxodgzg47O6x9riSDaesuOKnbQ5//7tLy1axzl4PWo+erq2
He3xG6v/8ygPHx/4uM3YpZ3YIdgl6Dno/b1el8B+ZRqOLft8pTutEw376V/8
6UjD94po3zbyy1++l2s1V5OJteVslzXc6ERS/prWZeZ8nrp9QZ9ASicyu9r5
dEcQCwfffxNPc+tE04bsbQfs+HzmxPvzoz2daL/rrmDdzVy8UfH8w+0nO4ld
gZ2BXoOeg96BHk4ZmLtZfwINS3oamiTEdqPOgnNxQQvo2PxqXcrSqm4UYf5D
+LIRA+9qCZ7Z1N2NXjq/+Wi5jYGPTpRX+FHdjThnn2XLaTOxbqKRg9vCHmI3
YEdnS24pKrePoo9Tzwi5XutFsyyzvd0E+Pxn3Yl3s/170Z4WW5G5kxlYNyPU
fvf9XqSrZ1Ngo87EV9NvR/vF9hI7ArsqlGvfhm8y8dTZ76ac9RtAGzt9d/wy
GUF1uj7T3i4aQl1V9ueYfHmLWZacjJIbQqVfJZL0Nel4T5zkY9EZQ8j1R+gp
gXwuXvBY/sSt90No5Z3nTU3lXNw4vUN/VtIQwVHAVcAlwCnQM9A7+C7UI1qW
fdZWifoFHAZcBlwDnANcA5wDPQG9AT0BvYF+gn4DuYKcod0ghyfFirrzd3Dx
rM7rhiFiNPzNYUyU2xYetjnZqRLdPYrAz4HfAz8BfgP8BPgNwF3AYcARwBXA
EcAV0CPQK+h30APoF+gn8Usuad9vMfHDckfnhNN0LBJzLWvwBJ9nLKs8pbiO
jr+0dj1ab8/F/j++5xcp8r8/58ygLh8Py42aGJE8OvHT4LfBr4GfA78Gfg5w
AnAD9Bz0HvQc9B70FPRWdoJU8dyz1G+sj2SUpQUbS4hcWSG1kIFTjZatf7qc
gxs75qRvEGdg5R7dWTWvuLh5fEvbsecMXP3oV866Ch72CyjrKfRm4OcrWF4V
ozwcEhAZ43OMQXgG8A7ww+CXwQ+DXwacA9wDXAGcATsFuwU7A7sDuwI7g36A
fjGVwm+nabOwzIo3AbwFTOwmaXhd/TAbS+7WW83ezMSsg0b1Fi/4/OtXhvM0
DybhRcCTwE+D3wY/DX4b/A74IfA74IcAtwHHAScBNwEnATehnlDvPYt/PtW2
pn6BpwFvAz8AfgH8APgFwF3AYehn6HeQA8gFeB/wQPCb4EfBb4IfBT8Dfgf0
HuwA9Aj0CuQMch/sC7oQnMHDXqtuI4fnHMIzgXcCTwPeBn4a/Db4EfArgJOA
m4CTgJuAK4AzYJdgp6DnoPdH1kvuTIuhfkvt6KtmFfJwsO/pGRMzuYTXAM8B
3gA8Avwu+GHAMcA1wAHABbArsDOwK7AzkBPIDeoB9Xqgv3b2lnU8nBG5LvPa
3m5UpWosKrmXh0/3B6lZbOxGDS5t/TVzOdhX/cksaYdetF5p9Xuljzw8N7Tq
kW/wIEqU6JvC0+LgV4sM9w6XjKAp/rZeSSpcXPjubo3yrWEkMVrZGDWDhQ85
rnc9wqDj/iDRPcNLWFhc6xazvZWG5ViJdTJCTNysuihNaJROfuF/5TdcR4Hl
XLzOZqghZgwTuw502oRr8/CRjJ0vdDhM8l74DrwXvlM37/r8UhkOPnXBqyWM
xyLtgHZBvaEdUA6eg3ZAu6AeUC+QG8gR5AZyBDmB3KDe0A7rYUU/T1k21l0U
ZVl8ogTVtbho12hysfz+ZS5xe+qRt6hPR/EmLtZP8rz3Q68ela1UmKGdysYX
HwdtqxFqQIYHT9gPxLLx94ElcdJTGpB9Nk4bG8jAxRUeSwuPtiBJg/5pPwcZ
eGTGbsuOymZk1aHfvsqXho8cG0i3Gd+ObForWmUcaPiatlAOS7MdnWmSN/gc
OIxszvFqBeQ70YpprEXKiIsjfugvt9vdgyo/P7Is02DjaYeCrA1u9JF5jpMn
JPO4lYOo3MOQNzGGOmcTnHr5nLgBDx/eWeP+6CX1XvgO1APqBfWAeiVeNpRy
Vmfjc/JVhy7w/Sm0C9oJ7YJ2ghxBriAnkBvICeQG7YB2wXfguzAOh3H5S93p
SmgJD7sduMNW1qD6CfoN+gn6DeQGcoTn4D0HpNcZCkoUomHTujTFWkqOf+ef
BrmCHEGuqz6+FIwwpH5hHuv01XfjL0mVkPmzF+PtZUpsG8g86JWC3pvRovVI
vEy0Z+gSdR4Z5osZ/TaXqo62o4IpfqV1tjRyDhL+h3IkX+6fclapS3dvUvjn
d+Eavvt3/maoB8xbiG5ct81AmNpHs+r3+kY9SvAQbNwqXI8+Bh6IWOLDxUxR
RTkZPl8DecH8YmTLsUfe0slknin/9/7ll2R+S3fu/XGpqvFkH9d/9zPHknl6
zZVSSWZJMdQ+p9/7m6PJfFrtdpHbe9OiyLzRxt/7nSOpfT7S0hMVZSLJ+SYb
QQmRXXX5ZB/tlzF1Vo7Tc5FfSrLxld1tJK4MrA9UrS8W/TXpE9kHOPB7v3Eu
mX9b15xWsrY0m7Qv6vf+4yxUxbLOXJFGxQODedDVbfSJjsx8Ut+2j6OBOndz
SX3Vl96f478zh9oX5Dr5lxbOJucEq37Xtwrd2v36XmXEd3IuDPYXeQlV7WZa
lFD5p61jjG+HlZL20F6JmYerlJP2MFODL9idKiHtSbmdL5bWX4RE1A9u2Okw
St4P9Vc+5B57/mIZ2b8L+74XaHtu/ZbUROqptlk7Qu3ZP/NF911vE0y6+pXk
Lc0wThkUzqHiuWRpRzQaoS9k3zjsp4Z6/G+7f5B92/9td+1f8dNqyP+wfw/2
OcN8Z9rv9v4g5+K+X15rkHr7J9m/qndDTDj3Rw2aVjcxXUOj/x/x2mCf/nW5
ef5PavOJnikYHY175E/li4Z93DCvTc4l/t5HW4+2LY+eoxBI5Q0O/73f9gsp
p/lbvlX/yP/cNmdWyi6+3OE9UN4siva90rH2H/meoV5/7/NW/71PvZ08D/LJ
+90fLQQ3GMEy7cOZzQQ3sPE3rQ1PqP3kY538Xh3IayTnFP53/3cWsTPoP9hX
nzc/K+Ypvx/guySuz+/99VTcOtgHD/WC8lBvaAfgxyL/V6Wa4m1Ef9MUjK+t
PdNG1iEqVEK+b5zaTvDkwu7EjuSMVhTq5yYvizhkXvxLdsRJZQcO2QdK8h30
X9gqHd+Gvl3/oOfSzSXlQT5xv+7fExWn5uPnO0+6MjTaiuzchnbt/JZO7Hak
WEXL8UUpsVvAx1dVzQZW3e1IruFdTF03lVcQ5s/3lOqXhp3pIOcDH/IeunLE
Owle2r99bNTU244EImuq6+XY5Hlo/56kXMvOAx2k/YmSNtnTDTrQnriFFhs3
Unkxof8V4y61rX7dQdr/rfTUqyB6J9qTH71tuQAP/73+kK/5XlN3UgfxC0Zu
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
1gszPRrIOAHG5XB/QWBaVA1qJfdB32Bc774pXWVKWjs1TvtjnzDuhXEavA94
o+pXqWefbbj4ftgxxZf7qLgWwJv+5hlwrXThWVDfTOp8IcgbeAr4VShv7hCx
YMZiap8eyBv89MXvFxfKnGTggdANm1w0KPlnZSfSm85x8ci6Fvtrr5h4se7C
AxU7uNhS4zTj4AcqTiC8d6bsDcMVG7n4tILyqhApHrmfzgnPf5bMxTaH7bbH
rqDG+cCbgI+WGXGFHTMpnkj2nf7hZXeQ4Tl6OsWz4L7rdlMbBo06Dxmyv628
nUntv22YefL1QWFqHyq0T2kwW2qOEw9P4rVXre2i8mKDni/xUunL2MHD5YU6
lznjueS+18ImnbACHm7PVY4KWU3tH1y4r4H1aHoysaPzcerJZ2yb0Jhzl75+
usXEUhfYfknr2lDqsRPfJ7vxed+J1CvftTvQCeuAtOr7dPxDpsLdQaYDic96
HRaQzME7zFs5zmf5fNi9hXeIX859xCv4mytVDp5jrl2gJHqPhbe+D0/64EzH
QzK9XiYXmTjD4OjeJacY5LtQD/gfysFz8B6Iy9T1y2FFymc2aQe0a064j/ew
VBM6uULMcSiRg8vkvgbtGW5EN5tuC9PKqXpDO0AuIKcIz5VLXiQMovHSWgrT
Dnch9nShO1OTB9GlZccfXtrfRf6HcvA/lHv42vL+5fVcLFU5Zk5Z+wiCX/j/
hylb5dg4Fl66LEu8+lkpWtJdKaioycKVkbu5606XIjPZlheaHVzcN/fu2zlF
1L5c2KcL6zyw7mPosd9V/BcN52Sb3t44rgpxvx8f8uHz8qQ93LV3eJXItHu0
SfUCHadV5+53mlhJzV94JlkHtZQjxrRbfqxeOl7x7rDOT7sKlLZ7zk/OdBY+
7L/44YBiE5pg9jGTZcbBYv63JQzuNiGXPNulgl1cTHtVnRcb1fCPOArayfeP
DtTzcWj6se9Xj3SigavF5d9jOXhc9i+3bxupPMVLCw338j53I5nmPvVH91n4
0dXlrJ+OvUjp7avD71dTeVSsRUxck+5SeYpgHc22xLR7Z18v0m2TnDOXzcRD
WUKvdjv2E94GPE6tIGvzFVcqzvMZbaUph/vpWNXfcrvWwBBSlV4a/2ssnxdv
qT2G8qk8yZdXPVsarUjFDQMcvDvpU7+AGQ8/rm/1Dfs6QsZ55xY22ccL0XDm
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
rg1tnz1DPXsmHafrep95f7UNncNVFlP543C32SvOHdZvRibHDydctWCS/PKf
LE3y1vL9VXWnmjTzYB1SO7I0do46D3+Z1NxpuaUOfdvRgy7p8v3f7zwhdWTd
+b/9XoemPf2S/lWUWm+FvCZO/r9erP7KJXyjf8DYc3sXF7+dpTP0NJqDrZSf
/woo5JB1y1S5D7vX1nPwSlrV2q1vuNhrtaHeIr4dmXp5N8d95eH3r5d/G9zO
9+MiS/zzDTnkF/4HOYJcQY4gV5AjyNXwW/g+EykePnlnT9xsTw5mHu01XcrH
G6ErSeqHn/EwyAnkBnIFOYNcQc4gR5AryBHkCnIEucrbKd+p539XInzhmR10
Gk7jqZzaN0WA2Bsr86NyFl+e4UVHPh5Ne4eknyVc+/yNh+OCr3llt75DT5sz
b98J4eHZC84Eqk9NRs+Yba7plTy8NXzHx81d75BL8rTU27/Y2Izh7XUrn4eT
D628cX4RDS/MPCEzuoyDC0RaCpptmdjToX/FpaFPSGjG4c3zf7Fw/Bz1JuuJ
VB4PyOvh2pBVoe7Fxld1rzQbPKHyqMK56gdxDG66CA/vf73ZrdugFR1+1SXO
CebzumzZ5/0+zeR9EPcAeD7w2OSxcaObPFj43sdnH3Jo7YTXwv2iiFnrnMby
8Hma+53rGe1owedUIcFwLl5pHiv+YrAN2Tzu/3h8JwPLs3R0Lw13oG273E8X
f2RiE0UzidYQKs4FxL3QiDlacPAXBz+JnVr7wJM6Bw/n4mcG3tLI1+OSuJof
nsnWjB3iYGOT06vHZ3eibrv5vdV83A0qv+/worsDzZNblGPZP4QMfO563PXs
RLG/8/AMIxinZHlkp/fbjaAvAxoXFjO6kY9owOnhXTT88fMth7GG3eje581q
n+PoeJy00Ernl1ScGIgb02651CVEgPGPcQ9cuzTna0ZVsHDft+bcgo/dKP1T
+gvX/Sx89klx4qHOLnRdfc+EjhI21hcQHxn2peIgQFyEZp1dl6wlOeR92VOm
+SV4srHstdMr46d0o3lqlXkxC4ZRvOGKYpkaKs4SxF1KYp/Y2541TParp3s+
Cvn2ioaDL0Uz2f+JU2M/eZGSPp8/GwfMuSHdi6wmn224m0XHtt22a81E+5BJ
lpekpjkdr17v9Oj8rF4yTob3iYYqLfm6j4G37H7+LFyrF936tkfQ/g0T+5yQ
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
zo3/F9cA4hz00fKOZCe0ofLy1X6MM/xx5Rfuw0PhrajV+Ml7R1EqPhbEOfY8
dv3bpZ4OROKE/ImD/L/xvDrIOuqzFN81txJ7UNnnGX0SJmycu+9abXV5D3m+
5ti60733+Px9V+DJ5Wv414dGg1a9pJP1Bpgv1mkamf9Sg7IriANY17Lj8Pke
BikPcemgPrAOA+syV1Yqxac0sbDFiADtvToVtwLiWLC/XWoUEWBjBZWne5Uk
2ORcKsS1nmGcqrzuVxuCeRNYV4Z1ZuCjEEcT1vGg/DT5gDLfIBoe9j+Apu/n
4oeSxW+q+Xz/nNdj+T3jufjKM9GR3kg61lxltXz/US5+t5Gd1mxDx3u6N3C3
yXGx06Qapfl3GfiVoOoMFwMO1p0eXHLoEYO8H9a5YN2rdcqaIutOHjaSm1mi
JcUlcfPBD5wde3C69osutEsoYPVTOy7el/5sVDK3i8ShmfojdcyxGBpZ3wD9
hziWv1Iq/dM/0sn9bu6kw3U1XJz6pv9VkwIPH/N5/fLlzQ6U169fLXqSh5sP
HfG/9byDzE9B3Ou/8yjANaz7wz4AOP/7du/wN5Xzb8m8vC9jq9baeW+oOLFb
PNWezHtN5nnVXSWvb3VIIPO2W3GlhmNzPLk2OzFBZ9zu92QeJPBF27fQa3Hk
+q2IZHunYCZZBxSRP50ZtymWXAf0142JzE8n86gz3xf8KEQx5Fr3tOZK57g0
sm62ZUhC3XJ5NLk2uSLDfhqTSq1LrdHxdDePItcOdgk7bd6nkHnEd+tpEYvP
R5LraTKCA44tydQ6xXy880dlHpGHvb9hxKW8HCKPrgPhN5YNZZHrU7O3GuWv
KyL1va5zs01e+ROpn7F08fXhjx9IfebL3bLw3JNH4o7/N65mMfn+66qih87m
pVR8cat5fX6visl57PMTD1YnD34m93s7TTckbK4m8XkdfDu8O5O+k3PsErSu
YacDzeTc9IBswjqGaTOVz2XhBlyws4lcv08JPb3kegsC+39tqHA0aGUbldfj
9Y7RW7rUdelA94O6C9T+jrKrxcJiZm3k2ixgzE+nHe2kvy9+fMOcx+sg16Fb
8geE9neS/pCeH520R7mDim9/3HPKAmNKTiC3Fy/X1xfIFCP56CWhFu2dJO4x
+HVYz5PpUw55E9VF9HX2Oem78ZrU9ePGjh3LMrvJuSc4BwVyBrn3PPr8+lXe
ZxSvJh18ayo1bodxPJwDg3NhcA4MzoVBv0A/KXJDpiee+I68VvbRL+zsQ5xV
pUd0G2vQ6MQO8wmT+omdgt1mK0een77tLRoTfOjRROMBYregNwun09UUmhOR
pFFHlM9VSo/hft6rugEvvTx0VD5EIjx7CBnuePF9u3YeEpHb9kn7A6V3UJ6r
phYYWl+C1AVXdQ2mDiFbx4Wl18tL0NO7Ync2lFHnwuCcGOAG6CWXXivELHiF
LryYNPVgFmVHcH9ofeGEpU45iKOvuyz8KV/Pv8wVXTwmByloT5gTpTpK9B7K
94nv3DXTtxjdPjTNLv3iCJrelm5xebAI7WqL1KHvHiV2AOWfDm5hGH//gm47
F4s8TBlBVsF7nBsvf0HpUVe010+l4vjDvAjwl9vT7po0GI8Se7nuPDHxpgcV
VxDKw7mWSUIBFWGrRxHgJODC04/BTzvpCSj8Xm/kamca3h0ZRSsdfYkcDH6J
W7n8O47A9YM+zzuLv2ehczfGhG5ZQcN7C3L2chWzkHh/mgOd7ydBvz8tNvt4
p4pG+LLeDqGucP77/w2n4drbrG+o/lo8kl0w/ky5Mx2rWl1hS5yIR3o6ehsj
ff/dTuD66eGjL10mdaH8KR+K1m+l9i3YWWfd9/lF/1c/QOIRt6sXf10Rh2Zk
m2975MIfDyhlXVo+LQ5J6T5nBT1n/KufgGtTdbEnV2Ri0eqAI11n3JhY9eHU
wua6GHTS5Uu6RRqVlwN4IfCNhqFX1zqj/h2H4Lr6/I/Se93tSDRU9OODI8x/
9UtwbZDYuOLH+BjUYNqdhi+w8LuEiCD1gmgkFCdcKV1O+QUo7/Ko5Jmo5CeE
l8k+Yrmy/tWvwXWW77TeDLloNJTYPpx2mY3n5I5VMSiNQs+d5OcIN1N+Bso/
bygMljn2AfmHdtxwf/LvuA3XNera585KtaEodsbVDWFsLOzerP1uuBWtvL5x
e0MZ+1/9KslT3Rryokw/CrXGLXzRcZWDFZ5HsLZ2RqKiHRW3MI1L/B6Ut/Wa
a53Ym4skBFQ9ZZM5uKKrUv7zr1w0izG/bV0eh8RZh3lz2B9h9Yn5MPY9lSd7
rVa2UVwnB88uKHxxgiaAx/4w6t8/9t/9PFzTRaLdjZwi0dgJnu7RN/nXRmef
rZWLRMzHamtKxvL+1Q/B9YX8zlk1Yh3oVfh03qRILk7PP1lk58fAhWyBC2XF
XDwh2nLyEZt/+lW4zor+4HlMtgld6f2exCrhYb3HpRMteE1I8dXXmAMt/+5H
SfxLBemsXrU2tJTzZuqHMj4fHY1TfyjXhuwG3+hnNlDxWSfMMXGrVxhBJ3M9
Jg0coZP5LcBJ1rmQDEFFOr5Tv/navcARMt9C1kEFr9xsuFhI8K7e4+ubn5ML
UYhhSJ4Wv95TXXQPmEoXIrZ1ueq0pzw8UbQ+v1qbKj+8IMJ4Q2YtkjmdPDMj
n4eZ/nFu4sW1BF+bbvst9ytuQPGhJzJc33KxpOCz8U+bGsjzD62+iOWf6kTy
1rMbtd7z8Ms3m0yGPTuR4Vjvj3kveVhQXVxluV8n4d3ebt/LmRY9yL1NI2EJ
f5zgL1394tISatx0ZMuUYO61PiT8tDhdX4eNT58S3Pj6dB9yUnlceHALG6cF
VyUc2N5HeLZOctnVFV9G0E7rOVyxrTy8SeGI08yiETRw12DLxDM8nOw+PSsp
jIovybas9lxbPoz2OVZNy+Vfg7whn9Kk/g2vl82mYXq3r9GtpM9kPi/00Zuu
ENMRcg165qA3vMxHnYFVNB88WPGSS+ZL2pOX9aEILo7Q8b5aGcfANZFDj3Of
c3FjRkpFfzwDn9quMdXzMo+UN7UOejnbjofFN3h+j1Jg4Lqs7swzG/j+QveA
5XINJp66L/fBN14fGe/ryWs+z+7uRQ8yK8MeLGTh5RkaZ0u02FioNdw6WY1F
yfGPXG+M13dcy6bGnxEnGw9+5evRpdKe4XnzqefgPdHPr6rnpXeT8aCK/+sa
87ButFd4+Pj4LRz88ENT+yLvbvQs66wa4zhVT6g35GNqVQinZTtx8bHYV5eK
7BuJHoBegZ6BXsB9kBvIschDlm1VwsXckuWJm65zsdwl1znuPwvQWpuKN44y
AiRe9eTGzd4R5jx86VXN3QW1nURPQE9Bb0Fv4H7iePekwA8cbCH6PDH5Pg8H
tQzWxkfw8L4HVepv+OPM4+HDqxQf8AiOXc+XtfC24uGrum9bHcS45Dl4D+BA
ptLBDPkSDh57I0nv6CUeWefek2h4VMiEi/M/N6+dMplH2gXtBP2qHOM0QaCC
j2czJuc2H+OSdXSoF9QT2lVpvXXn5nQe7nyu/LyulkfOt8P/UA7+h3J5N9RY
pyfnEHnI3Uiq8ef7BUGnRYe7Hxeha0+GO0xDORjyngCfeZT02D6ivIjE8eJF
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
u3YcXCSjr04lHDuyUEIHZZYoN65SjO/4cfP5jRI6KcNaS3uWjI6+G6Z1on8D
qUjXrVjbM4zlI4sG/9qXGvae2U1tiTqT9r74yOK4C892T9a2iGJxsf/hbn1g
cTjE5Rg+4OY/grSP34nyQJv15VE15HifnpM/zUxg9beeqx0iivolkOAvfv5y
3SYSYVxtFDj0Jznue2A4f0ITQf0u8mEuF8iHuucpLK+lHdi2YPazeNL76NPg
tD915PE16fV9Ub9Yfa3xpbGfyPVfpL9S+Mam2S1kWH9V57joTMJXW1A60rSF
/K++NZPlnfV97J47HsxkdaGoE/V10hkze1wd8T+muiJsXR6rD1hofzhuuUoe
2TRh5rkgXinpP3zsm8mBf0jF37x3KTHz4+Wk7f1DHOftXr+svvRfPCCPKHVy
9L4XX0NIU/i3mK9/2H5MPu4bWf30D7Mz6qbZjajN5epfx12P9MsmnF9VGLpw
SresCnK2/S8r4cokVt+a5D8yMv2kgNVfwl98ppt3yT2misUh4Ef799rfYdtL
DpcS/D7y3PWvLp84v+zksg86fSIrSVr6A/OmG5lk+vOql3nx1WwfR5gb+Ix4
XE30KuxsbAVZDDcBddWos0beFffhnyXKF261160lX7RnWpHtHA4r9mP3pulv
g3xqyPoc7+tdA8TsPuIOgrB1DsPKaphdHe475e6kd9VMz0Lv6nS3H527lMfq
2zD+tbvDokhcHaF7Ta6v3MVn9+HvFbq/2ZJdUkdkgrcnoi4J2H3sb4HtzXoq
rmf0H1t0YlNP7XryTn9s3trcbFbPdqZ67wq/Ed/J8kGeh62UFPJOs3yvw7bv
LE+P+Zi3tJecuNzMxp+c/eegz61m0nR1UNan0BhWXyGMuO283TGJXYOeG4xz
3ocFtLK8fsiaJVckdq3s/VpHa8cuXNPK3i8JvZ12wK+VvJkbvO7ndwEtv96n
pvB5M+N/c6UnsyK9msndjT1SraoU8veidq72gWayqDQyaX7yZ1ZvEO4e1zmy
MYFdfzLwKTYhGez6yetPZz8oVbFr+Lef2z5UrStrIzWqr3nP9OvYffBboB3v
mW07OVsff817u+luclJU1P8ZTWljv2f1UAv99Hqs5uQ85P5XTc14/R9ihtcG
u3bRoYPrhCvlZJ9ul6iHAikdYeafp/S5ldFToo611DSslYw1fH0mIk1ClXUl
QdaucgJcleYju6wkR+Xk/PEA79RfUrpCKHy07aCcGIyb7N9N4We/Mp5e+HiQ
nAw55nFiiUSJ3lcvHPG2j5zE5RocPHwjkMk19GnAL/eLOKC3X/MTu391nc6V
vrvr2DX258qUu+1GBPAo9kewd8ijUfFcHOOY/8etnbJ49CaZc4z/Qcby69Bb
2qLoD9kveNRw9N3uEcMCmB4I6zc+0jqhnF1jPN/3YySzfvFp3w0Fo4Z8FtOu
b9+Wpiiu/2y0KbvK6se5uJbD2uCBQd5cHGTR+StTzVu4uEC3cYbWU+P59KrZ
yD0uua8Y3YE+UEc/hZ82RLe+mt3v6nqrU65Cn+FaeuhiZ/pAxPJNkB9q47VM
k+MU75ul/s7snT/TY3d2RVqEGlaQB3udxs3yFlK1SCnJGVvD7iNeFepqd26y
r5Ae7/9k+EvzBnYf+tNq3/ry0T5C6jRe92f9eSHLh0AeNJQEL3r3g4tDtzfu
tqKTsmKetO6q7NVLll+wCfU2KamvZNejU/7ceHpFwOLtkDfTjMyiwyu4+Pi6
Hvtj5QPEdGbKXc+PDRJqJ2vZc1ZFxPz/ppWlk1OkIrqk8ftB33YK+2WxplF3
xfWf9R3dN0f6sXi1s1VIVVhUObsWPJ79ZKmsjl2jTw59c5eO7MrcpfDLHceu
7TKTL6FHNJSr2mWJaW/eDpVmFTE1rncrjMjj8H+XXk4u61Loy/iq4pv8+vRb
Meza+GspTfcsYNf/83sKSIddHcYkyqR0d+3k/b0O8WgQb95C948S+ubayVPx
b3j0y0rHh2YzFP6e+xKdFQr5jech33KXLQnPLVHYRR068B4q/PYhHju2hg9W
0KnNJs+dv0R0hWDYOf1+iuvZfsUf1WuY3ruX0v7Z2p9C2r27/ZoHVMrOddMh
lU83FHbfxwv5gW1FQmb3TVrtGKJbLWW48MBN0otaHODTXUa77vcI2va1mPkp
Yw/0OtciL+fief/oo6NKjIr6ukim3zLfzbaaZx3B9POa5ys/vTgezuwBK8vh
qTP9wwjwr5L/9ufFEuRHn/ztt/v8j0+yyfYjLZYbsxLZX/z/8oV5vUydE0mL
09shCQNz2HvwXivrQPnTUV+Je5GmZJF+CZmbsTfvZP+v5K6aQP/pohKm/5Km
Xi0wzihhflK+yDR3xfQyNg/Mq8UhY/bM9p9Jzy/Bf2LulTMcRuAygi/Bp3jf
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
Nb/5oVgSmMTiBAPGfA0z/7/4kcpo9yp3Mc1+Kv/o05xIBiV3bnFR0P2iexdL
+iiuOyYZ96jOE9PdK0KtS18kknxzI1evBDGd0fv62rb3iSwOtORvHiGVFEW6
HV38q5S0dAu7NUv/FylxeTjDLrSCtKWaqTsO/UnyLs+KG8OvIOXtQ2amLkxl
68C6sA6sC3lWi9Mv007OySZqvG2rE1UKicVt0Yg9XzLJ3QGWvhX5ivsqpr9s
b2Wx37Hn/v2OPffvd3gOdAM6At2AjkAvQwx2GEzzKSJdZh+wMg+vIp4ZL5zI
gkLSZmr1yo5UkV8z/KVdJUWMzkB32BcWL/u3L9gn7Av2CfuCfUJ8a7HqOZNo
rQriQ0Nbo335tLL6ZFE7UQWjY8wTdAy6Bh2DrgeM5Yc8OJL9/1sXrrEurBPr
wjrBB+ALxgf/+AJ8AL4AH4AvwAfgC/AB+AJ8AL4AH4AvwAfgi7pLssjB2vHs
ff/TIz+I13aziaor6sgIz+cz169MYzgD/4uDppHxHx6URI1uIDP2KfmtPJrN
8nfZ5Y1C30HZrM8WeeTt8tHeW540kZ2Bvt9XL69i8cSFo9/uMvHjcGozHxQW
fu/K4TRjPtYzX1c+38edI84V54hzPWoaRyptKxkeJ/K8VoP2RBg6cf1hwClc
+jdfVEIa/5Q/bfdCyPgecgB8DzkAvoccAF+Dz8HX4HPko0oM13voxCrsrCW7
niWWtRDU+RjwMj8djmph9iVwP2EvAfcTOKCwu5LcF+cO28jhDAJ3EHZ79cCH
qSOtOZxC4BYCpxC4hfAT4TfCT4TfiHk8unQtacW5ZpJt9Wp1WTclWrne0pmY
NpOrcwLVjjTJaP9j1aFTbZu572K+Hfv+J49Pe6isHTJ6juI6rX5XWQ6PNh15
s2RrUiP7HepjDg+t19yoyj3H3vPvObznSsdfruqn6wniHN4tn79LrOrZuvf9
tePryeAv1sOWm0tYP0lf5QmqPw1k9NPbOY8lR2qZPU1vxGZc2VDL7FmsE+vG
OrFurBPrbpt6rF0XuYg+6pJT5HwziVwMWKRu0UXh5yys3PzeOZHMqrx2Rn+U
hHYeOaUueCMX33yelLNDeXEB2fxtu28rT0wTM2zLPrUUkVvWRgnGfcX0mzXf
53ZKEaOzSVodlzV1LyLvcpZb2xWKqX0t2V30q5CtO2hPnfytfSGprU7/6Kom
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
90+J2XjQQ6jLhR5qdzxnx+zriuuQEaT/azEbD3XJqFM+/Rd/vJQEH6ziGbUJ
WJ8S+pbQl4Q+JW//Asn3I1zfpuhn0JWtP6U0lj/BzuyrhP3F//E7PAe/G344
/GrYz/Cr4WfDr4afDb8afjZwHIDrANwG4DiALkAnwEHAvEBHoKuea8eGtF6W
k/HpX8+eTePkDuQQ6AByCHEJxCkQl0CcIvC+znX9zlK6SLl0+OwrXJ804i0M
z8Pq1Y4fSkq0a65J49auUlangnPBObVZWZ063cyjjVVZxkEvKgjqrWePiN/9
IbqC4QwBdwg4Q+hbgP0P3CHgGAHXCDhGqNsCjhFwjfxvK9c0KOwggxTDBI9P
PI7O/tEd6Ax0B74Cn4GvwGfADQKOEOpSgSME3CDIW+TJkTcX549+UOdXQVQ+
O0Sqv4hmdQioS+iTUOM98GguaUj2OXm7ewK5tOz7QUmkhJbN++qxPy2B5bmR
9w6dVVaVcjiH6NRXTxR65LE8NfLWqFtAHcOK+yaeifcKyKfFS7PkIUXE+OrM
+rzscpJeQH2CP5eSzIlzTvwIFdOkx10Oh24qJXsLlCe5xSv44kl3ncFLS1ld
AeoMTkbP+pqaVEwKCofFPe3M1XGgrgN5fuT9xU8n9lX91USWdyhKudurlqT4
9db72UlGsy0PH3TLryKf3uiPqi+QUrq0vNsjcTWZdNX0TNOJOmLgq7ZRV6uR
7Fpyw+Wln4hqeMVa9dNuJDfz6HOdkzy69cRU7/GH5QR0BrpbVp9zb8Syasav
8+NHbj/RWsrigMtfznSrEinRHxa+1caduL59xDEhD826XLU1yf3G8gpyzaj2
8uWxrK8bfd7o60afN+z6cwvXtYq6l7I+dvS13+c9dgmWiOmcARtn9I5qYPuC
fXL172E5q0pBt+1mVofVK+yWPPcpRmfqyZ8F5rELuzaQwquWflvUhVR1ZeWO
xqnNinPvv2rvNiG1b830kn9rIidiN8Y1Zyj84OC9TV5beLQ+fojQRVtMXy91
9Bygx2O/w3PQE9Ab+B2eq3A71jXMXWF/JA/P6NRXQgUao9o7TKpj9Uj2h19U
S/ZL6HD1DfMe6cro1rbfd+uW8qnXzPnmjssq2LyxDvwfv7MUlX8wnZRMVtif
LX5qK2J6G3o8qOPOkNrifGZfLh0UlDP7UT7r4y8w1R7/oOQz47+QqKOaodfj
Wf4CdbWos0W+B3XAeK/yyf56Na8E7C/+/+3g01M72n4QyLsugqV7Rxnz6On4
9ztGbawk+Iv/I++7u+PYzr3PfWLj6SstOH3WNJFd9x2vMfp2WAbje8gB8DX4
HHwLPgbfgQ8ht57seqXVqlrC5AzkDvgcfA96luT9StrSncNz6L+/4beqTgWB
v1dwU+3pTpU21s9jFXLizhMVHrMrjW+/i17TV8DoEHQJOX4vcfkIwVyFnfXD
J7b9DB716Pv9uETA/cX/EYdEXLKbRWXkWct4dp70pVnY720K+896Qrs8H+4v
/g9cQpyPzsyTLzZfU/CVcEaTscI+Ax+AL4BbBxw74JuViibMDP2YRVSntM3p
q9JMQtv3ervEJYsItrSuudTWRo4bZF9fH8t9H+ha8dnA6XnvWF2FR4t0dvmD
EHa+w7eM2FLiH0R2Tyto9tNT+FFpL1/1zSkhuumOF+0myWjtt9fTtqaUEAPx
+hj5UDFXL/IvHrDrk0W3stcN5M3tc/p0Ui3DYUP/2NIe23oOCW4ii4ZpbJcq
/LRHexd39esuJ/rPsy4bdJdQ92u1IQW3+XTn092jD5lJqV2wd5dPG4pJp469
nuXsl1LUrYGPI911OiQZF5N4pSGPZ7UWMb6YJT/xbUBkJfFeVj6C5suJ47g+
2lnry0nlofANUZ0EdFbDhA0L78Sz77JJjo1++6gxjX1n7Wi6idUSpyrS0PPl
/M1ebUSYrntB1yKe+T3w08e9zOi0a3cBGR84KESgsBulmd+6V2t+IqWac1vX
HuPRjeGTxsw9+onst3sq7mQlJzH5aUvMmhOIU+BCuzuNbWTEoZF6djMTye7O
UdenDpeTQFfVehf7DGJ7L+zukXZKtP+F8BazgmLSZ73Xx5dJQlqRZlBxWq2C
+BkN8XuRLqanLpzavrqunFSFh+490F6JHhi9vnJOpwrS/PZPuwVr5IQUyXra
ra0hSdd7Zy70yCbjTPe6Vbg0EvsOHqPUY2pIs6xGmP+ujZSd17u55Es0WSt/
2qO0TWE/7u1is/1HPJNXnR94m7ZE/2DxZewT9q33uT/HBy+Rcfgl/+TYJvWH
56tlclJWrJVM9gvop0S3uOfNUjrR/2hM4vk6lqcaabXrjoZNDasHntVbv6PK
4Cpie11jdr8pclZnXr3p7fPt04vIVvucLkkBCv/nXz2cbuaczV4XZLRk/MN+
e3aWsN/f0e36x9y/hNQcmtmaZihj8hTjSJt4314f4NOBomm3o0dy9SGID545
caV5pjuX592nP7rw0wJfVteDOh+LaZazfhnJaEHxuJB1Blz/+czvIVqFZ0rI
/wOmtEOc
   "], {{{}, 
     {RGBColor[0.3339767470406083, 0.12792858506538274`, 0.5864250367212188], 
      EdgeForm[None], GraphicsGroupBox[{PolygonBox[CompressedData["
1:eJxFnHd4VVXWxm9uGkgEAQ2k55JAIDe5WMAyIOg46qhgQ9BRrAiCSBFUdBR1
sAAJRboIVrCNgiAoOoMoOnZlGGkWUMdxrIhj/SyI3/vLevP4x3nOyr777LPL
qu9aJ6kLxpw6OplIJCbkJRLZuueWJBI5uj5olUg05iYS49T+t6xEYrboy0S/
IXq+Op6+VyJRK/patV+s9kbR3U2/qd+7a4zLixOJo3UNFz1c7Zepz3PZQa/Q
S69W/xGiG9S+VPSNogfmJBJLRN8gOqk+L2seo/SuRaLvc59s0cdq3GOK47cF
ar9K7b317CaNP3SfRGKsxrzV7Z+JzvhdW7Nj7Ekenzt/D9Cz7Sr1t35/tCqR
2KA5n9QxkTi0pebcKtY7T/3HlcYzO5Lx+4kd4xnWconad4o+UPQo0V+Ivl/j
3iP6J/W/ND/oC0W/qj5LRPdjjaYfVN+szjH/Pl0SiRdTOgvR72YSiY36/V+6
0lrLBblB36Tx5+p6Q/Tv1d63Xnukv9dp/qepz1K1/1VjHq72P2metVpfo9qm
6Rql9mnqM1b03/Vst8oY63E9O9Xn3lZ9erpPluiJXiPndaPoMaLvEX2T17tE
9PLCeMdHyXgPdDH77P4JjXOLealLTqyBtc1Kxp39hJ6rPgn3GafrWf3dQ+0N
OvNGXUtbaK46i8dK47d69V2fG/uZEv2M6K9Ed3c7dCYv9vrnZIzBWPfr/ZNN
/0nzn6n7NC7R28sTidJ22vOaRGKtzuCrNlqjzqRbTszvdY3zi+5zTHfNCXpT
Vsx7tttrcoIX4cMlngPz7JwTvLvZz84TvSEZ62b8z9W/j9oXmt7XfRgfvl7g
MXvpnqW/X0sGv73kNU7ROqZ6jbmae674eLPHyWkV76Itx+1vZ8fan0zGfbrp
Qeq/SmOWJONdzI/5cC6r9fcnaq/IC5ozGuP+tFeq/VHRH4u+ojh0wpFZMfYM
XS/rHMeq/9Pqc5D6TDXNec3zOTadu/izk377SPzZ4DWeoPZ26rPS48PTK0y3
y4/3MuYMr+V/Wt9p7gNPTvezrAt+hC/Rb5PMk8ga5825X1KbSJws3h6q9rPV
PkR9zxd9m/qOEH2e6D+o/VLRF4oeLLqr6WXqM1r0ENFnqX2Y7hfoOho50m+D
zf817vOQ2jp7zIXZ8a6zRddlxX2wae5nWw/cqz7t8+KsNktXbdK1VH2OUnvb
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
V94LPgiWCaaJT/mW+QqcljNf4BiH8eutz/vnR76QOhP0DPUiYB/kVrpZ9hfJ
vp4vv2FSTdga8prYZfw8xmGefNOEvwLWjH6jFod8Qb/8GOdsy0ut5RQsrs6y
Bp5KDvJ164fDLC+ZVOD54Pp8w3eg9cznngP6gW8+0pbrf6WjTmFTKrC7tPVk
u0xg0/tkAive3/qE70G7W5bBcrtblsHVeRd2dl5x5MOIEbjP8/cASx0jUMNP
vukC63kwAWhieWqXZrv2kvuc4sBEprgdGoyAWHdkdcgisn6GYxfeR/xC3ox3
kWMCr0eW8Vf5ZjRjnYP+gQarmmb/kLPo5r2FD8EgwCLAMw43nW3ZJP5F3snP
z/d7kS9yXcjNfPMPfciN73bMgq6Z7Pkc7PiC39DVYLPwALgavg781lRLaZyN
+K+rv1Mg5v+3+1DTw36XlMcZvm8M9ln3gVfBZWnnfLf7XdhWxuvmbyvAp/F3
8XVv6hS+Ij4jbfjz5IbAKaC7V0Qem/o59CF+61jXD+Db8j0Y/i3fZIDJj3e+
daDHGdkucojgNMzlQ88Hm/+hMerRtTH+uamwyduMy3E15TWTcacdmw6Gih+A
DzDffWgHN9rs/ty3mP6rMQt8ADC3LcY5+Z4GvY19YB/ZO+z7cdrnNZrPUsnN
AMWqV8re/LEy5sc8B+v3gdWB3Q+qjtqS97znzfVA8CNxH88Sd7eujv04S2u9
tDr4Z3c6Yi7iMXzp0amIfcdkIs663rHWfanQ4+A3xJV8k4z+Rn+gR/C/wDY7
24cBX6cd3YIuQZfha4NTgldSLwqmALawoCpiXWLe2VWRIxrfLt4Nfkl//DXy
OIwDj23xu9hb8Bi+iQOTObYisI4azX+kxzotE/llcBwwnNXW52PT8Q0JNTBD
umh+6dhP9nVL5xiT7+2wPdigZzXOFZWBJY2rjxi80XH4PJ/vYssc9VrI3Tvq
f5b0xgPq/+d28d0Wz4B9EU8214lDE3Od2z1qOsu6x7pZP3vFGTBP4llwR3iZ
d1LzBObVJRNroM/MmrDzxHvYerDWOcZbse3gVth3cM5LjHWOaBd5H/4Ge+9i
ncl3XbTRF1v6WlHsN/qJOjD0Ff7PXOe5sf/Eovg24Nj0QZ/dmYrnnsgENgKu
9ZX37C3vG/k9bDy5ANbLvIvtL7XynMkHZTtXwnta+V28fy/3QUfv5f0kb5x0
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
/2/MCOe26EdN3IO2lXWWO2Tz/wGjH+CA
         "]], PolygonBox[CompressedData["
1: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
j7MzGdcA1YI0+ELggthwH1Yd/rkHmj8U2wddYtc01bY74N+YcU1SbWrWHcDF
KeOUI8qVOazWPOvwJ/CnM75bMa3YPsf+QLl7pnqn3lBvqZqh2nF1ZFvUg/7X
i4j/1XmOmenAkyo96ytmFbuaETQraEbXrC4bZItqmmqbeph6mWa8E7zHzEr3
zgeIv3biL5V0b9MMoVniLuVguXuqeuuotGuXzhawfyvj2i+duqY9g2oW3aCZ
AXn5Sc9amkE0ixSl7Cv1WPXauen/96o8++qtpHuTZs4JyCpL+a+hmFXsHo88
C2pm1Ox4OelZWH+WO6D/T9KzpmZSzabvayZKuIaqlg6MPFtrhtcsf6netVQ0
HwBPityblbPK3YKUZ1PNyJqVH8y6FinHG/Hd2IxnJc3kXwB+PvIspJqh2tEv
8l9KM7BmYf2J9DfSH0d/nY8zrkU59LyPgAdEnt30B9Bf4CboN/f0DKZZTDOY
ZjH16IG85xxiILeHZ1zNurfVuTbqbC7wdzOuzYphxfKZyLOVZrDnItcc1Z6T
V5KLyD6d9V9FNX8h+3TSf0fNpJpN27J+W/WIRuT1Srk2Ssct4FZmPUvrzzcS
/jHwt/fwH/Mc8JIq2zqTN7iQ9J9Gfxv9WW5C3p1V/juox6vXj650bOpPvDbr
nqXeJZm5wM/U+S+hP+DTwHsi11rNpJpNd8AzO9d/sJ1Z/2H0l1EP3FRvm2W7
ZtR7wU9P+++mnFRu/hdtXkj+
         "]]}]}, 
     {RGBColor[0.4150982875335993, 0.2689770358936897, 0.7004511754010198], 
      EdgeForm[None], GraphicsGroupBox[{PolygonBox[CompressedData["
1:eJxNm3eYldW1xr+hSJsGzAwchiln+pwzc0bRmMQrzcSoKBBF0agxhqo0C0YR
FKSIDVR6E9AomtyoKKKxRI1YQRFESe7VWNGoNzdPFCtiue+Pd/nk/vE9e589
u6y99tprvWutPelR5500pV2SJJUdk6S9yqVlSfJwcZL8VY0lLUnSsVeSrM/p
b5kk2dItSarT6qs+b6r9pi5JsrF7kryk+jD1v6soSXarzyv6CuqSZGGHJGmp
TJKHypPkRfX5Rn2+qEiSC7XQnbVJsk3zvpbS31Re25gkk3okyQKV32qNMwqS
ZLD6ztX8Q/OT5MNOSTJL839SkiRb9XuXaHhJX71ouFZ9Dlb5kfrs7OW1TtXv
RzXvTs3/RM5tO4KG7zp7/j3qv1Z7XKP2q9Qnrb67RPvyrklyt2h4TOuc3JYk
21X/WPWR2tMRouE19dmlPYzumyRj9KU052fa4+tqf13t95e4vUFjOhUmyd/U
/rD6NGv+xwvc75lat8/KJslY9R2nb4j6DMv379O6eb/s9UzVl6jfBdpvX9H5
VYH70P+epiSZ0FP0quyvPY/U33ZpX5eofprqG/L0W/s5SPT9UfWbtNfR4vMo
fXPVvl1zbxDNc1R/IeqPiz9vxF5of1H10zR2qHixR/V+4sfoJvdvUP1WlWeK
not03uNak2R+b+1f5RTRO1nfXzRfS3OSvCw6W1UOEF1Zff9S/43a12L1OUT7
mqpytWSvo9o3qX2Zft+rslO56WcfHUs1l8ZWaO8DC1z/Tv2fEq9S4lVvfbM1
7i7NU6b2P+h3q/qcKvpP1vmV6veJonm86H22xDxE3nuWWObvCXqga3qz22+t
1qffc9V+m8pcleVuvmTnTY19psQyujjrPS9Sealksi7fMvaE+PFLrfdJO/OJ
+oka/7X2NF79tol/6zRHqqfr/P2s6POq9jU833KxpbfbmQ/53q6z/Fjzn5nx
vTgj47Fnxlpr1PadzvkpzfmcvlPEh53qv1LtI1R/UfXJovVHWneUzrNnyn3o
+6Xu3hU6/3trfe9PVvsO9f9C51qsfp+p7Jhx3xrxszDlPvT9Svsa293rXiZ+
zNC3RzIwqIvl530UjXh7l9b9VutO1pn2K/dZ5QpcvzPf5aFRf1h9ForuJ7mT
Vd7/+hbf7x36Nmn+Pl38d+SwQPJ0qtadnvX94R6ho14InYPueUzytDnfd6S7
ZHuj6pXad7Fo2KT6PzRPT/Gyh7779Pt28eIC0f65+jza2f3RA9AIrezj8dA5
6J6hVdYFq0RnXqn3dmfoFHTLXeJbeTfXO4q2wdIV60N3oWfh5RGS2Yc11/Oa
80GV94mGFsnEJpW/6Or6aSqXiZ7fI4PtzYtNvawHOumMbhENnTM+H2SCc+Fc
Od+HNOfKFt+d8krrv8OKrAPXNkiv6BxvVnlfL8/5O9E5pdR7Zr+3tJjmm1U+
oTk/EM8e05zFbaano3j1R7XnNOcDKs/r6voUlfP0HVpkPfRIre/oqgrfS+7n
8LjP0Hbgbmq9OeLNVK2xVPJ3uWgbL9pWq+8qfU367tV872kP7+p7L9+26OI8
ywh16C/Vnf28yPrjoqxt1m+y/vvu6POG9vd31beoXtfmOTtXxryhz8do7dmi
5zyd85W6k5slzx1E29Yi6/56fV3Eixqt3VHlbO1rv/rsaOe9ofOHRTk+9Pmr
Ka/B/B/ku4587hd9/5A8f521rflU383drB/Rk4fmrPO+jPnf1r1aovqbTaYF
WwU9o/q6js3al+87Az+ha1+MXVTm+j/zfJ/Q79yp03Vnv1L79dKHhxX6bDiX
7+dtw040m4aF6pMW33ao7bsK25AdYUd2dvNvbM0/CjwWepYV+m+0/0TynwcP
Ncfx2uMA0XmU+HyN5k3U5+yaJNkb8sHdQWawbdi1G0X/n3QGHfS32jbz8UnN
V6Hz66k1FmnsSn0Vqq9SWavyks7Wh531+xCtNbvGuhB9jM5sr7E91O+KOt8j
7hD6sL7Qd48+12hMV/2+VuVV+jqrforOZa3O6iZ9XUTfMaLnF6LvMu3pt2pL
yqxLbhMPbkUG9NVp3PzOnr+d1n1W/BisdafX2PbPqAGwmVc1mm99jemoUL28
l8/9vzV2nto7qr1rzjgDvDFT5b2lvkvDtc9uunez0Wm6T9fpb+NFz7Uq79DY
Vo0dr3Uy3BP1XZhn3cJd4o60qRxX5r/1ybcue6udZeem3palZ7T2f6nfsyq/
0zxjCozVsP9gFGT7dp3Ny+qzJWfd8mLKevI5rZXr7r2c1uZ6nWRpqmhdqvkv
kSzcq7Hvqv/LGrtD9U9Uf1P1P+U8z21p63n2wl3eqt971f6G/j5D81ysOaer
XKmzWKHvQ+1nbY3PYJ3K1X2EVyVTP5f8b9eYbaJpaI11BXxA36En0BdHaT8L
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
nnijgq3F5vKOm/wTPCfm8n9hP/kf
         "]], PolygonBox[CompressedData["
1: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

         "]]}]}, 
     {RGBColor[0.49621982802659015`, 0.4100254867219966, 0.8144773140808207], 
      EdgeForm[None], GraphicsGroupBox[{PolygonBox[CompressedData["
1:eJxFmgmU1NWVxv8oQqDpBbqBBrvo6qpeaqEaNdEIalQ0CmNMhrVZRhEUAXFL
YkQEFWMMqzoJOgKCu2A3q3oiJrIaF4hOCCqeaEzOkDiDRplRcUNHme/nd3Pm
nK7zXr16y313+e7yumHKVSOvPCpJkiFHJ4n+kmmVSfKOPnN6JElbTZIs6Jkk
U9RfrHZptyR5t2uSdCpLkg+rk+T9byTJ7HqPL2tJkr/mkuQujf9N7WJ9Rqq/
RO2VvZLkWu3xQ81bX5skee1bq0OPK3O/TOPX5ZOkl/qz1f6H1typtbcWk2St
aHlB856PMw/FuZdo3iG1kzNJsqZBv2nevMYkGVdKkns7JUlHSufX6Vydt19r
L9aeg7W2JZ0ks/qJTo2do898jW/QPq8PSJLlVUnyaezfRb8dUf+/tdcdWtNV
38frzFF50zA/bdoLQf/7/cU7nTVTfLpFczppbJpo66z+Y5p/jNpNOmum+hvV
rtNni87Zr3M3lifJCI3P654kKys8507179JnWrXpG67zNup7rybdTe2caq/f
q/ZlffaIzus156B+G6SzjuY8jR+l9hmd9YLmvqOznq7w+B80r7fO3Sm53KBP
onkbNH5Ec38uvr+jsWfF12u05x80ntfvdeJBX923i2R3ir6/pT0n6I7vaa8/
ac5romFRzndZiA60WPZL1G6q8P57NPciyWmP5DWjOUkeqbOst2h8qz63VZvW
/aED6MKB7r4nd5xVa5nCg+m15jl8OqHa8j29k/vfhIfaZ0i1v9Nv1F0u09wL
teeYWo8z/4Kc52f0+0jRdJlkOEptP/FrlvqT1U/0+1fosfYZ3Ww5j1F7eneP
99Q+P2q2vfxY7Snas7fWDFF7b7n7ozX3A8kvpzmvFHSW+mulc6PUfojuqn9I
bZPomKm5k7X2Pu21SfPvV7u63HRD883i5+c691bR019711a7zxn0c5pzRDr5
peacobGCzlik/Ytq75SNbIJvaitlJ2M0/j86d025+QWvvqfffq49HtTvZ4me
du3xbM76OFVrr+xkHbym1vOuF43X6Ky3ulo+14SMkM/0sIuZvZPk0pAX41Oj
P7zO398o8+/TY3xpi/e8ShizQv256i9XO0b0DJX+/F06OFh0t6s/RO1TaePX
Z9kk+ba+P6r+yWpP0adD/VPVntZoTPmO2rP1eVz9BdL3x6TvN3EX0bBF60/Q
+Fa1Pyj5Hr+TvF7Q99M0vkvtBRrfrvFROnNhD9MGDp5VMm9WiW/FvG3zJ5pT
oU8NOioe3i8bapH89olXPyuzPmDbsyWbXZLF9WpPkF2N0Vil1s3R9xc1Pldt
u9b+TXKq0ZnrxLe1+ozXp01jyzR/ls7Oi9adnFEwj5EZ/EyOtU7czR6tSfKJ
cHB/q3URGr4lPoxrtAwvl+4P0Fhzhfc8Sffeq/kbwAXtWdNH54n2SZr/e/12
odqdZaa5SvP/VfS/re8nCkPOyFknv6N2ctg+GDCjp33CLjmeQ+Xe58Qethf0
GB2+rp/xerDGvye+b9NYZd73Yw3zN4RPwZ8MEy8e1OfcaB+IPvZ0qnjYovW7
dd+r1S9vskwYR+fPjfno+hbNuVjjR0RnWV/5PdFWW27feGn4xwfiDPT2Fcn7
JOHiD9R2zfqcjWo72E+fsfrs6GHMBW/xh8iLu4P54P1YrUkqfM407dVdsnpT
d++p7y+3eu1b4ufRoudt0VCj7/sazatn1C4RDz7S+gtEzyXiyeZy73uw3HMH
aM8ne3i/2WoHio/7de/xktV08WKL7jtD7V7dfZ5s9R6d+c915hU2PqLOPhV/
io3Tx85X1/k3xtdoz7Px19LbpdrrL/A2WsaPFw2Lm+x788K0y7P2Jzfnrct7
Qge263OMvk/oLJ+jto8+H4sXMxusC38VbUsrjOcP6Q5Tdd4+9btpnyP1xuuM
9K1n2vh4pvpvSq9/XW0dAte4UyplfmzuYZ5Ml/1u1pweeWP5woh/0P8NIbOe
xACS23tq20XTo/285pO844puDZYJGH1r6BW6BC6MlYxGCyvGl9mOd1baltdq
jzk6a676oyXLZzQ+Su0s7fln7TNDfKpsMmZUqH2iYL19VXMWtdiOLtG9MynH
P0M0f2Sj9x/RaB18Js4iZmFP4pb1kn0i/vcsOM7CTtBdZI7s8cujs/btg/P2
bfBldckx0u4Kx2FgLth7KG8sB9PBnuPynjMqa7+LvLKSyfZW48k2tW1VHj89
dIxzkQ26NSL6f9Q+X4lfN4reATn7tZTar+rt3+oivruvxvusVLuqxnEjOAPm
wjt4DoZyZ7D54RrHFWtrPA5/ji34d3hzdtFY992iMQCsX6DPfPUvVjuzzHxd
G2u7FIxbp4uerurfDl7pjhnNOUf7bNX8bZLRm6LjooxxC/wiHibe3lFr/iJv
ZHSZ2tVZrz9PvO9SZ7sAEw+VHHckKdsHY9jV3cQK2uPf1H5WMj2dNedHGWPm
urxbMBR77NbLPgE+gr0rg29gDPoI1k3S+N4ax//o/Os1thfs9bc1ttl26f2v
1JZr/1sazJ9rmh0zEjsSExMnEi++FbErsR0YRKyNPqFLAwuma5Po3ZlznLE9
5/gDbD5b+vN6zrHiPnIO0bYc3ml9vc7dpvZwg301/hXf2rlgXqVznrsi5kP7
zqC/Qfu8UWPsSZf7jtxnQZmxA9yY3scYwndiB3zcAX029PNasP2A9HlPjXGD
85EFunee5LhdMj1T9rtCcl5W61zqzPDJyIE4BRnA/3tqPY856CB+F2yfV+k+
/vcMrdtca5p3Nzk+3SXffU/J47vEq5/o+1CdO1c4cHLGceRF4sMDGcchUwYJ
o7LODU5tcp4FbQc6WebkfsgdzAK7spJjvebfqflptfNlg31F0yr1x9WZ5vdF
z6pmr7ta5x9Xb9+0Qboxu+Q7fVAwZoFdVU2OuciFbpa8ns5Yf77WowGOQ+7P
2JawqdXS5yfT9vlLS7YLYgX8xaySad+a8m/MSYqOoYht8Ddt2usVnTUu43Wz
Y+30Vvcv17nX9/Nv+JtuWeP5axFXonPozxUZ+9dXtG4yOKk505rMV2SP3P8u
+tv1/XnxfGKdY+9PexjLwLSb1Gb0WaL+MZrzwxbz+Wq1pXrz+wTxcpj2qdM+
d2vuIyXLo1L3ekj33Kq134+4Hjw5LmIv9HNh0fgLDo8Vbb9MOdY/peT4kpjt
1Jx99Jgan7dCcmpF/9POQ/ALzWnLfF743BEl52Mj1Y4c4Djp2IHO+b7s4xiH
fb+OCdPGzx59jaG9Na+L+t8fYJyhD9aQS5FToce1kTPhQ68jPu/tmPuI7nNQ
+3+l9rslxzrnqF1b8NqnJKNv4r96OxZdG3lLu9qOgsfb1W4tOCepTVnH2XN9
Z8fJI3sbq4mhmEP8/BT6yp4p6yl9dHW6ZLRF9P9ad7pTZ28Rj4aL31ObjHsP
6e735q1/xPITROuNonmi2uVN9iHvas6ftP9i7ZlNuRaxord907PlHic/vkhr
btHayWoXEA9o3kK174mGon4/Cp8oPPmvXv7eOef+0Wr/JWVsWtFkXhLjYUvg
1hmBeyeKpz/V+BrNnSSaN2p+m+a/oP5z5HTQnnesSMw4usm4fZvoP73J2H6d
+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
IXSSuAs68RecfyT0cHXkbvhH3sfYByz9P7i8xXo=
         "]], 
        PolygonBox[CompressedData["
1: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
466t/sF5R5ortSzSoRx8TPdJW9egP4EvLnXtoxj8lfIh+2vTXJOoNunzy3kp
Zm5nbmqxaxvlHN0dCzi/xzm/9/nvVdb/N+naUz4kX2rmG5bhHKtcq5yr3Ksa
srrUOUi5aCrfGPDNxOOAX+hXYttWnMHHxP7n/Pd7+M2GRw301uGzs8DN6DgW
+YdzPx4EP6182s40diDv3ArvVU0zD3ypagjmVyHf+cyXxZ375d+qJRqx7+5c
1xiqNR6DZyn2L0S+fdjix5TvAuV05fY5Ja4FCjmPOs53LTSuZ7wJ+Z4GT2N+
V4Z97iLi5ZZC127KqcvR92XW3KLanvUvgVcj36s5rklUmzxR7Fr7EeR9Evwa
OXZ1mnXYBW4V2RdVc6v2PjfutVeoR0Ge+WWuNVWjzgX/Ke5Y/AidJqNLDeOt
aa7B/w2t9l18d6rHqMBerxS5FlRNsBd7fMt5XpHhMz0Iri9xb6Oa4EL0uz/u
2kY1+TDoPxF3rameqJ5xz0rnIvlYCXNT4r7LVTNU6SwLnTtUQ65E37uRZzj+
1Q0ZJqPPhYy/yXNN/zvka81/21lbpv4FPF01O/Q/R6YlyLY6sq/oDl0Dfjey
rXXHvQf+J9+mtF9yBnhJlWsr9XTq7crKXVupZ1LvNAOdD8bsk/LNFegzO9M1
v2p/9Wjq1ZQTlBuUM5Q7NjK/hPmdcWPVkKoldefo7tkPzansPbvCuXQ6a65m
fRb5tBXz2arRO7uHUS+jnnEzsp3Gf22Zz2E+D/woMq/Jdc+m3k09l3ov9aAN
KdfAqoVV43YCn1rg2uL/Pgu9+yPXvjrjBeCCAtcO8tEm5seq3811TzCxyDGh
2FDMbGPuLOSPMl3jdQN3KHFvp/++Be+D3q34yn7oLWP8HPYoz3YOUy77Xcq5
fRPzd4KXScaY92jvspRjXTG1POUeUL2gamzV2kXKnznu8buje6fItUbgfI9z
HmOJuaN5rgkXYd8fKvy2MAseP4JHJHx36k7S3TSdL5nvmlG146gurl313wzw
rirXamnQbAbv5Hsv1zWsatktxe5F1HNuBk9KuFeTT8u3VdOrtq9jzzj27o+7
1pAPv4t+E4o8J5vL9j2SvjtUY6rW3Jxwba47RneNamzV2tLx4i5+A9FbiGRq
Yv8w5r9jPAn9L0P/aRXO3Yopxdb3rGmf5x5Xva58Sr6l/w4zd4gvHXyA/yYy
/0mVe0PdSfuq/Magt4YG6NdDf0DcuVZ3hO4K2Ui20hvNoELf0bqrJdOgLvZx
+bp4fMfapVV+W2mWjuh+Vsq1k2qubuAbE85l8iH5UiLutx29gYyIXLMot8sn
5Bs1SdfqehPJhf+5SffmuhN1Nx7Pdy5RD/0c/j6+xL6omqy//I/17TKcA1bq
7Qj+A2P2P/WC1zL/Rsx30G3FjmHFsnJsNfx3Fvrt5jzGHcjHg1nfGHMPrl5c
NafqPdHcrVjlv3tbuyboCr6q0r2ScpZy1zrVZOBa1SyqTUpcy6yQDuwfk3It
qR5jNHh95LV649Fbz7bId5V6hEbwgrjfUvRGcGXKOUm5STmmmvXV8J+c4zvo
N5XOycrN0nlE0j2YejHlrEtY/1SRz042k+3q+L6I+c5+Hl7tC1wb6U7fWG6Z
JXs/5l9P+I1Pb316M9HbSXHkWJYNK7BH+xK/vazgPB8utU/LtyXjYPAfSz2n
nly9effIbyOqeVX7Huvks9AbzWnMDSt27aQ3GL3F9IncO+TxZcbt0/JtvXlM
BfeLPKcz0llJJsmmHqazaFU5VvSm9wy22AiNG2K2gWyhmke1j3L2ctYOrPTb
hM5UZ6uaQrWF9hxOuEZWrSyfqVYvEretnuO7IOlPWDX5EOZ6Jf0WpjtSd2Vd
3L253iBOxx5vVLnXV8+p3nNYiXtR9Sw9OJtzsNGcTN9xtyHrdZV+y5CPqjeJ
Jd3bqidWb9wx6VyqPdp7QYXf7lTT7GD+f6r6UVg=
         "]]}]}, 
     {RGBColor[0.5737615620550868, 0.5435373667026108, 0.9097253585406754], 
      EdgeForm[None], GraphicsGroupBox[{PolygonBox[CompressedData["
1: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
         "]], 
        PolygonBox[CompressedData["
1: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
1puWsF+Bznagu+ug2Q//SbXW3Rh8aq/6XWguLncPUgJuIzJPQP4l3FGYdU2Q
/uVzl0J/R8q9i2R6lLPnKH7BPwz/s4GHcr5HqXNINfddHbtXV883l/22dF73
3L8w5x5O+amA/VWx79Td4+C/Hf4b4De+1DVctVw9l3ov9RR3qlfMuJfvqf4D
2kzasGSQLEnkHVluH5Zvp1LmrRhULB7GdkPK7cPy5U3VrrU/oo9jOP+y6mXC
Mvw1ck6T/4rnS8hXV+Ve4yD0ncHP4k1LOrln3AS/oyPzUo5UrjxUaVrZcxW8
Hsj3S+vgl6j3TKTZSD1za972SeRavYDVlHbPqt71XvbvqL7XuDdUj9kIvKva
uVFverHOM4Nmh4HQ3yHfjgxLH4rtPZF5KSecz/5PdY5d5Wjl6tdj9/6q9+q1
2yHjWvDnEwN13Lc7sjyz4bEX+N3IsPqpLyscA4qFOXx7P3IOUy5Tz7dKvlDv
XlY5fwDwcnQ2t9wzyS7V+ti+If+5Engp/dW3Ze5Rvo5dg1WL9U24FpFzp3L2
fnS5D/xt4DYgwyVpz2jqbT/gTF9wpfl+XDWinvsXpxybLYjvnvXumdQ7Kac0
pp3Tldtl48fSnoFVezQDTItdg7R/TTMLvCrBv590z6LeZRhrd9IzqWbT77Dn
CwnH8PfAp6bsOzpzFfutkXt30ZzHfYci5zrliBHsd1W4Vo9iXwLvpdivf8L+
1lxnG8gWiulXItd00Y+BpgG4Km1YNfWKyDVR+UM8EsBfRvY95UP1WuqRxU8z
VBdkbdfFsTyddUCzot5T7H5Ds0FF2rJpJm+K3LOqd9WMtB5+g9O2zXLpTP0E
Z5YlndMj4FvxsdnYZ3VLZOItg1lHtqIe8O3Y4/CnOs8Wygk/Al+Wc22TT8o3
RyBTKHMOGgH/8VnbRjOzZmf5lHxLNCOBP0x7llRMzsr6jM6uZ386751Y695O
NagXtr0F/BdJ/8eh/zqGVnu20LdhwD9pZulgHzyUdo+sflEzmWazozhzTblr
nmrf26qZ5ab5Fnxc41iTPJqtprJvbm2dTAN+L3JsSWcNGc9omtVkgz7w+22t
Z2f11DcCX1fr2q399bXOOco96mmGQD8nbduJx3D08TB3jmvvHnARcHPOs7Ji
div46erhEq5hg9jPzeX7J84sT7tnUu2sgyajfhr5DiY9w2qWVc5R7lHN/IC3
XJPxWcWAZu+TY8eqelT1qvUp117lCOWK5yLPdveDP4y+e9Q7dqVD6bJf7Lfo
/Pi0ewL1BrKJbHNnjX1JOp0CvDL2LKX/OP4MfGvOvYfe2Kj5Nmdf038ET8Fv
fLVn/e+Y+cbim30izxbqJ/pGjgnFhnKmcmd7fGZz0jOXZq9V+f9rVINVi/Wf
jf670cx3EN0cn/F/GZpRNauekPIsJB4NyF8Se1bTDKFZsiz2f0/aa7Y4q961
WT2AeoEVaf/Xph55nvSZdezpP5g64JcrbC/1kG3xj6/T7h1ks/egfyX//516
6N3Av8i5l1WNVK3sxSotdT1Vb1qZ9n9x6oEuk62yjiXpT/+1XFzt2U85sRH4
zWr/VyQevaEviNzLKkdvg/6kyLODcphyn2wu2yuG1qG//wOTHRbz
         "]]}]}, 
     {RGBColor[0.6334046651839204, 0.6393672375606809, 0.9110850375887445], 
      EdgeForm[None], GraphicsGroupBox[{PolygonBox[CompressedData["
1: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
e+y5
         "]], PolygonBox[CompressedData["
1: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
SuSZQLOBZoaVyL4l6Xqp+tkS+v8BGJMYoA==
         "]]}]}, 
     {RGBColor[0.6930477683127539, 0.7351971084187512, 0.9124447166368136], 
      EdgeForm[None], GraphicsGroupBox[{PolygonBox[CompressedData["
1:eJxNmguc1eO6x/+lNFNTjZlqpmnWpbVmzfqvNWsmuhPlftsotlsJuSS5H3cq
uaXtloOQzdk7JElXQuUu9j6obWMf7Kg4IbkkDhUp5/ft9/b5+HxmPu+73v97
fd7n8nue5+15+oXHXNA6iqLNu0SR/qJ7c1G0tjKK7lM5rBBF31dH0dEqK7NR
dEb7KFrdEEUT4ig6TO3jVF6hvjPUfmOrKBrdNYoSVVE0Sb+H6duZKruno2ho
pet7q899ZVF0keoHq/5rYxT9uFsUNTRF0XbVf1L9N5Xna72yLlF0gcpHOnpd
xp6s+WuqPP55zX+l9rBU5V+1Rif1v1T9n4m9n/3U9rLWWqj6nRo7Q+1nqP/D
Ki/SPD01z/36tjAZRWM6RdH6jNbTPu9Q23nqv1bjz9Cc/9Kcj5b5TKeqfZj2
mu8mmqh8VWP6l0fRPqkoGpD3Wu8Xo2i4zjG2o78d2DmK/lv1Zfr2sb5N1Bop
0fYxnXOR+s1SuVTfHwk0PFXfx6l+rOq3a+209jBF5XLt5xDVn1V9a0sULdbc
L9VH0eNad4Hqt2sPbbTPZ1VX12h9g+n+lcr56vOU2v9Tfeo1/lXRIalyU41o
obWX69vnpShaovIe9Wlb5npPzZNXfbXqY1Q/RnRapfpQ1V/V2po62lPjaso8
xwD9fgI6qD5F82xv57qWi+aq/UnV71D7b+1c13GihWpfpPqdam9V5rrIG72s
ezld+ztL898uOh2qtafq2xzt9+pAn18bTK9tKu+PfXcDdPinNOfT6nuX5tyg
Oc7taLrsUma6DdT8UZlpIlaInlb/Z1S/W/0n6FyN3fy7Q848UaFyfr3n1HTR
KWqbpv1M0XqLOrqEZ9aIphfqUJ8UfAespymjBfUeP07/4+u9BvOzDvXa0Idv
rTVmZs60m6N9zcmZLk+qfrFk8HOte5PaZmv8OVp7czufAZpCz1k51+flfWbO
zj66hTPTd0JYi3W5Y/iG/Y4Pe6SdcYsDzdLi81v0+9pEFOXau36m2htUv1n1
TeqfyriezJhHLu1o3ump36NV/pa3PCAXm7S/9fp9k+o99F3XG21VWyX8JIJt
0xlv1Vnn5UyPRep7vn5/ovaJOZ8T+sBXx6n9LbWPVPuJupwT9P+m2pfpHGqK
/qb5y/X/E/3FJ21U/1b1Dqo/IJ45VZM8qPLpjPnr6pR1ATrhIc19jIgxXfsc
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
9lkKdfZGWQh1dEPLzvYm+z+7aa3/Bx9Dips=
         "]], PolygonBox[CompressedData["

1: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
If+0FbhZ3P8FlKP/FcgbmvbbUf6j3FQ9OtUnquEuA9+53L3n//XoyAVeg+ZQ
HevwOvI7xZ3Ly2fKd8rnyffpP4v8hHWUrovUg0H/KuYOs34sc9OS7vmp99dJ
/zfgq24pNE571t7X1/Zz7ud8L4H/HWn3atTjL8SW9yV9d5TTKLdRj1S9UvXc
jiHv9VLfBfVw1MuZVOFep/KxcWl/ggvhOUFvI+3ejXLkc4H/UeZeonyUfNWV
FdZFOYhyEfUwlb+eyPpBwBNr+8PqkT4H/FjctYruvO7+tFLX5rKhbNkzbV+o
mrtnwm9Y56Wec3vg8XHHSvlA+cJ1ab9dvZ/1ks2aqmz3eOolnEMIfyP4L8C/
UuFYrhpFtcpzle4VKcd+VnDUtNJZuk8v9VnpjHRWA9Pem3yOfM+MUt9F5ahT
9DZVc+XZp86Adlrcd1v2+hn6tTGf7TJ0Wgd8OOm7rXpUvc+foPmu9n2pN/Fe
kWOB5g4y7hh1L1R7fIm78AwyUnnuWQ2Pu2em3plyHOU6+s9H+YhoJkM7Pu2z
VYxQrFij/3zyHMOU66hmUizT3ALGv5S4dlbPYSfwO2nbTvTvKreP+u2ox6le
5wcF3pt6NOrVqGcnfymbzIS+Wdr/xeg+qfb6LxKuRM8=
         "]]}]}, 
     {RGBColor[0.7526908714415875, 0.8310269792768215, 0.9138043956848826], 
      EdgeForm[None], GraphicsGroupBox[{PolygonBox[CompressedData["
1:eJxNm3l81MX5xxcvwpGQbLIkkOyR3ex+N8sm4VBQURBQOTwQtVpvrdYiiODV
al+1P7VqtYJS76JVwGo96gWI9wG1RU7riYJiEVC0FQ9ALm1/n7ef6av9I5n5
zndmvs/MPPMcn+fZ5h9NPvq83WKx2Kg9Y7HdVa5KxGK9esdiR6k+t1csdneP
WOzX3WOxyopYbEGXWKxV7Rvq1E9t0/U3puTnUSrjjbFYjf4qNNeG6lhsfKX+
usVix+disWVVsdiHKhdqjjM1v7p/P9+PenvOZ2pisS0a067606pvVr1N9RWi
5xU9f63nZyOP+V06FntObd+ora/63Nzsb45LqY/at6q9Q+1PhXFl1ZdrnoV6
/krPT6r8sto0LFP7y+F5fnjfR+2bqk1bd637omIsdkhtLHaJys/Vfobau6n9
VJWn6W+sxq3Ox2INKt9X+Y7mPEvtb6vcXu/64JjXvaq39/Jo7evT+vu6ayx2
n/boEv31U58JWvR87dUw7dWNej9Tf/fr3eyWWGyA9vPLZv9Rn6m2e/TXX+MW
N8Vi/9a3ztP84/X8T9F5uupd9a0Xu7gesZ91pnmYDv2LatMEPbSdGtp76kBW
i64JmVhsqepn6Psfqb5e/f9V5ef3tM6eWu8qlS938Z5oe2KfarO/Fh2fqFyh
d1Xq00Mf3qiDnay51yY9rq/45A599xP1mafyY5UHaO6eWu/xu3l/oRuaT024
f3sn8aLoadQapmmffq1Dvlnrnq6yXNDei77fap7T9Tefc1I5U9+7VOMaVS7U
c2d9e6f6LhMPddEaR2jsNtG6e0Mstqvs8cxzYsn7vry793eH2heIpm0qrxE9
fTTPTZr3NNX7NZpG1pFW++lqP190dhOd17WZ9n5hvc163lvfyqncUhfuSTff
Feqs/TbWoLapKlMal9Zfb43NJFxPq/xA85+r8etVDm80r8KzIxp9ppwtPAQv
vafydzqcU8TDdxXN05wZ53WM1vkPzTNO5Skad3Jvr/9m/S3R/szTWhrUv07t
R6v/dNG0Su/GaT8PajRfwWvDGs0D3I9vK80r8MlLNb7z3LVt4osVqo9TvSYb
i72m+mydw5sJz7+f2r/QGexQv8/LXjt9DmBspb87RnNuLpq2k8WTlU2WUXeq
vavuxQyVR+hjy/VutOpn6n5coHVP1NhXtI5JKs/V30Sta1pX159R+33spfp1
0Xlv15iperdN5ZQa39VtmutStZ2i/g9X+Cwv0PNIzbO0yev6l3h8fld/61dq
31N7NUvPe6g8XOe0S/WrRVdO/DdS8/5IzN2u+pGqT1B9q+ieq7GnqH9Cf0+p
/3tq25+90d8y7lfONJ5WcBvvThYtGxN+Xqo+RyC7NHawaDhL67q4h/dttvbw
jNB+eNF9eoqeF/U3SO9fFI07NM+meCw2UO/u17fLmusF7cMWfbdR3/2RvjtE
fQboW4v0rRF6f5j65jRnueh6hebrxN7puzGVlZrvcLV3U59vNU9J85xd8B1l
TzZ08ppZ+3miYS/1H6T2LRr+ZZXnGSb6ztB3G+Le91rx3zEal9N8nXVuRwQa
zkMeaZ4bNE+2m79VoTtVK9q+0tgalUPUNrGH1/y8aB2o8hTRGWX93a1p3/VS
jWUH7+jzQsZ34wzt41F6rtM9nqx9+J3o/DBh2btGZU5zZNTvA7Uvirt+puar
1ZoP1JzjIssw6IO296pNE/yKzKhX+V0n73ez6l+qPlTrXKV5++d9R7mrQ3fz
OXAeyWrfgbt6+A681OIzfLHFe885sv/z9JzV81yV74q2nNrPr/C6qbPnL8Y9
3wkVXi/fY81jNPeKStNxZt50bhOP7Cx5z9n7MTqv9eo3UbRf3ezyAr3/KOG9
WqtyUYNlBDJufd4yc4PKsaKpu9pu1z7vq+f1+s6nGjtO862stK4cpucPtEdD
Ve6usjLsz8xq31H61HWYb36pPZtX7fvCvBs15gB4Uftfqz5Pqc+InHlhbZX5
oZfOaJjo+WFk2cGZrBA9t4ifRmvsaWo/UH3XaMzJ3c1fA8M5zu4V9KvaTmjx
2T2ksX1U7yn50CK+erXW61ommh/X86dqH9JhfVIKOuUnrV7bldIRL7VaJ0/U
d5+DBrU/q/IZ/Y1S/elWy0bq0Hq0yiP019zF5Tj9jdT4Nq19sertJeuNC/R3
zm7uc2Tof0x3zz8myAL243Kdw+U6x+VqH6Cxb2IPqP5Gq/tT5xzXZSzvsRc+
CvXr2f9m67lTNHaN3k1S/Qu9f63BdEADJe0DRMNK9Tldbb+IfKaz63yuXUuu
dyn5TJHXnOsVeu4lnrpS5YEV3s8rsC0bbceeo/pKyeeJKt/KWs+h734APWq/
U+2ruffa63GiaT+VT5as1+fTR2vYqnmrdVZDk5ZVJ6mtk87sH/rWO03WS2eF
fRtQ4fYrNW9/jV+q9r4l23L3BzsP2xm7gud1rV73r0TDGVpzD639t2p7XLbs
DzVXVrzzJrpLfz317mWdx57ik+8KnhtehA8LdaGP5jpY+vMzlROwq9OWTxeL
9mYZtuu0rqzKI8reE/ZmvOpnasxPVPbRvDU9xXPqc5no+YG+NVBtc0XPSdi8
6lPu6v7jg945qt666eWU235c9h3YWGdZtH/pv/Jgkt79RP3PVfmpaCrqW+P0
rY26W+PV3jVuGfImY/ew/YK8eU/zLkz4fnEfzo2sN9GfLzSYh+HlyWXPc57K
Xuyn5muRzH9H+/C5xv9U5zaiq2m4RHMu1burdCcXo7tE555ygkaXfEb4NTyv
KFqvHym+/VRzjNXYOVrvEM3fXzTsVvCZj6r3ufN3aL35EJtpeL1tnhH1rk8M
dc5pQng/ItRLvT0WvhxcZVmHrlki+j/Wty/q8HdGhm+NVJ91dbYh8TeGqP0Y
tU9qMp+fqL0aqfWsV/1G7f8o7cuxev+G3h9b8vlgN41U+1C+m/J868Ocx5e9
3gdSnntomP/QQAN0Lmux/n2kZFmILkAecv96B19yZU/LCmRGTm0t+H3a/9tL
1o+PttjOQE91L1pWjQ79Xwt+RIP2+7aMZTm6gjmY6z/0sHczVL9cfTaLnsm6
Ry/mrcseDvIYGwN9ge81LvhffXp7LGtZHPjhOMmBdTnbfh+pXKR5uoiGmsjy
6OgwFr8WeQRN+BL4FEvTvivf1zXn502+H5/pjjdp3NWS13V616xxZ1e5fjr8
qvIDjd1H9efETws07g7x77mV9oU6a87nVR6oufaqcB9s40069+9q7Nvc0mSf
6ATJv6Wi+Rz1W6Kyv+Z8Vv1f1ruv6l3HJ63Q+xfQQYH32ItD1barxuvFHvil
ziihb1ymsrbRfj7+NnZ7LvgF3HvoX6/67Jxth0atd5+8fYmBeftB+H74cbck
bTvvpfL+CvvOPM9I2n+qUbkm73cf4JM1WY4dXbbtz5xr9O7BjM8VfbtC331Q
Yx/V2EPL5tfRKv+m+/m65n9T5WN54wYrVD+87Ht3ZNlyBvsGWYPPkQo+184W
2/y7Wux30c6eP5I3zvCq5nk4b+xioeoP5o1dPF+wDEOWIfvezVmGHZu1vkdP
Paazfkv93hJt76q8UPvbRd84X+VXOvO3qm337lfyXINUPpi2fz9Za/x13n0O
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
B6TbAEY=
         "]], PolygonBox[CompressedData["
1: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
GWoDfKTEvl051yn2bmWpa2GKgRULj4Xf09mWYRb8xoGPzbaMs5W/Ju0LVCNs
CjwnYVlkU6rN/E/fQo6P7wKvzP4vDjlHGgLt9oh9k+4s3V2jkj7b1aC5E/gd
1riyjnNG5Y4PYM8Dq9umR9I/nvHjGT+O9k7CNSLlHsr5LmroGo5qOYoperP+
txOmVcygWtgHOkP0N8Ae7+M874i5tqYa3NT6FTFstmNkxcq1Kvyb3iRqAi9m
z9dm2QZkCzuxn/nYTy/O+FXY5xTFrxmOsQ5xN7wXd6xSRzYC/XCdnzzHhBvQ
f3rMsb5iDsUezZKuvWrNWntV7ttmdSti3phzRuWO4jECXm8xX4MMx4wnGJ8O
/fnQb0Kmw8h2tti1TN3JOaqdIM/qLJ8JnY03w5b9EHgM/a0u9l3VEv+2CjgV
sa5UY9NbRRvmbAb9Cr6thX8r8MbgVbGn5sCDkq4t6Q7UXbij2LH2YPh9W+wY
TbGaeJyfso3IVpQzzoP+0aTPus6czl7vlGOZztD3UXyHPIfzXINez/79u9Bv
R6rhq5Z/Iubas3LGk8A3p/x2ciNjhgB/F3X+qhrU59hCOO5a0KW0KHAn1rik
pmNExYpnwX+CtiVjVkT95qO3ksbswZmwYyjFUvJp+5Ouyas2r5g3Q7Rx1yJU
w2sl/4O8V9X0G4veWhYX+i1IbzZ6u3k4aVtRTeLP2kTctYVetEbAIwv9FqYc
VLmoYmzF2rrz3w37ztXdq5x+GPBB5N9dwzY5Gfq/pKwLvbno7eWBItcqlYMq
F1WNRLWSLrTiuGtk0o9qJvWRb0DKttUbHtcAz2DOLsD/xR4W0N+kzLmcYqp0
5Tr0X5znGOwy6OfEXWuUz5LvWhm1bhVD/oYsm6POBRRzV1Z+GHft9k+fF3GN
QrWKR5C5OvTzZc/MXZ01PxG2Tco2ZZMtmS8Hfv3yXVNpxdj9xc7tdMfvA26c
8tvQUdok+F8FzRrkX0x/D8bOjbu2qZhNsdvpYufaz9B/CvhkyrmhavC/AP9I
+xVe37KH9TlPR1K++0/z7SfgUynHonojOq3zG3dtSD5Xvnd23LV6+Vz53vRC
1770Jqm3yVlx1570Rqa3srfjroXLJ8o3Hix2bq2YVLFplZhrD9ORtzLw9Ihr
nZJRsjZkjQPy/Ya3SPcnOmyf55jlUvqXJqzbNYxZBrwk4dqudP5ewm9AegtS
DtZWviBuW9WdpbtLOa1yW/HsTH/VYseOqsmoNjM34thAZ2ILa91SYFtSDUu1
rEPlvhtG4N8PAr8I/dpqflNewfyPh+17lvOtBfz30X5irq8YUw/9hxs6VlEM
olhkfsS1MdmkbHNB3GurAY8nw655q/b9Kd+ygFdFXOtVTqXcqnOhdakagGoB
j+n9mP5l0DdN2YZkS5JhP/j3tJ/z/Aapt8jJEdPqm/o+jXsuxTjPwetgym9b
qvkeSvlNVv6mpd68gd+K+G1RNQPVDmbGXYvnWg9eB+6QsG9SjUG1BgU3TbIc
Uym22pZ0LVE2vj3pN3nFGroTnmb+Ldj/8XznJMpN0uKeWzGaYrXX4q5tq3Tx
KvCMuGvFiqGmq34KzY5M5xj9FTtV5JPP0poD3590rCUfLl+uHFm5smrWFyFv
R3SURTzcnv3egn5voeGm/3xz0NvDTfU9t2rUqlXfXN9rV81dtfet8C/J9huZ
3sqUAyoX1Btx3ajf8PUWJ5rDYdcAVAvQm+Ew+rNKHLvrDf/XiN+4FZvpzh8L
/Ztx10Ik0xvAA6OujevOOMHY0wnH9vqNw37Gn4k7ltwpH6Dae8q+oTd4O+Br
Y671yEdfF3MMrlhcb5LroV8Y9tuCfgNwPfQHyv02ophcsfnb5c5dFDPNKXeM
r1hfb3Br4s7plC+pRrwMXiHJkOUYVLGoaraKnxQTbWUtsbh9v2I2xW5689fb
v9481rCe/TG/VeqNdxrz94bm9QzbzFZoR8RcCzjIekYC14PfRVmOiRUbN4j7
rlWMqFixUcpntQ3ylqdcU1U8oBrvY8CHU/adepN6NeKcRLmJ3oQ+UTwec21G
d/RDwMsTPsvbOR9t9duHBn4bUM1CtYviiGvTimf0dqgcU7mmYoLJMb+pqN4v
HeUCD004V7wWfrUZ36++bXMQeAh8H/yK0v2blFMJ/6ZFb0/6Fil0jqpcVTlf
Jv1zi11b1Z39vWpBEb/9KGZT7JYZ91u93hDSI37DEj/9JuFH6M8rdi1ad+Qn
7NeqAutONW3VthXTK7bfDn171ndr1LDyrXqlfoOW/csn/C/m31AoXjlfOU/E
vxHQ/HrT1tv2vgK/hSoGVSyqNya9NWlP6wJ/XGBbVo1UtdLjRd57xaSzVD+K
+i5VTf0zzseJiGNL5bgJ7KVlRXyk31S0jPg3M/rtTCtoEsB9Gvq3DbIx2Vrz
qO9e/aZmIvxOMX5igX/j8kQj75H2SjHT7cqvU74b5KPH6K2lyLGDYgLFBt0S
XrtqqKql9oe+T55/86LfvoSijl31G4fuJX6zUn1Bcz7eyDUP1T6U8+fp9weN
bHu6o0YAty107Vx3rO7aaEPXrvYqxgWuXuLfOqnGlAH8S8Rr12+SMsF7pRz7
KsZSrHVuxe8L9JsI/TaisKF5KQdRLnJ1yrGZ1jAr7BqIaiEf0f9b3DYr25WP
TsVtg7JF5fDzws4BlAuopqLayqEC+y69KUzhvP4fDu+bcw==
         "]]}]}, 
     {RGBColor[0.8072676445581752, 0.861883131574638, 0.8940338232382912], 
      EdgeForm[None], GraphicsGroupBox[{PolygonBox[CompressedData["
1:eJxFnHec1NXVxkdQYHfZPsMuW6bulJ2d2TVGLLEhgoKADRABNWqiERUVRKxR
o4hGTeyor4HEFqPRxIYdBVFEECxYY6FaULFXNPo+X57rJ3/M5965c3+3nHvu
Kc85v0kdccIBx/eKRCK79YlEequcm4hEllZEIsvSkUg+Fon8pz4S2UPtbf0i
kXWqj1f9Gf2+QvWo2v7REIk8r/o4tT+bc/uynPuuD/0/0PeDVK5si0TO6nH7
nHgk8rba31T9GtXXqz5MfZ5Tnzfq3c68f9FvZc3zcFZra/BvtL+i/i+r/rLK
Wv3+tupDWVs+Enld9av13Hd1rg9R+1HaS6vqh28RiQxuiUSqVa9UPa0ypc/p
qn+qOfKqf6KyXBmJ9Ff9Rz27Rt9v1RyrVb6oz+mqvxDaWtRnuJ59scLrgU4v
RiORS1QfpLalqp+velH1DSrf0+f4iNfSEtZzldaa0HMPacwRLV7DuWpflfOe
VogmSzgTtTeq319Eh8fCvv4U9/5v0bMPq/9Tan9I5aVqr1P7rWr/P/Wfr/bd
1f9itdeo/Sa1X6G2p/rr3LfS+ajPtao/2jcSmVatvWi+9nDm7Inze17jtqp+
pcYoxlznfA8sag71m8X8FV5DvX7rXW06PLCl6K9zP6k1EvmtygXqt0Ttj6v8
VvSZq/pi6Kz6VapfojEeEh0ebPG4y7SuqwMNZ9e73ldrPlftl9d7/bP6+1na
34i6/QL1v0tzDNbY9+c9/7TWMF/O9HxK5ZX1pgXjQA/qcT37dIXX2aC97Fej
9QaafCDazVO5QeXUmHkI/uFs39dniubr6ufv1K8Oe2BtS1W/qcFjN4kWN6p+
TLvWLF4dHc4j1uP6GLVvr/WV1XeQyvGix6+4V5orqe/91B5XWZNze7XKvD6N
as+p3Fafguon5T0fc3Eu9WrfqLJWZbPmulntx7abx6iz3+fyvnc/lnzv/tpg
voGO0PNo9R9bFYlMbPD6HlT7dao/wFxay98azAtTqy0jkA9zEpYdSyRblqvP
LQ2e89G8x79ev7+q9ttVf0ntt+j7Kyrf0DpH6txuU/uByAS1L+b3Dp9DKtyj
3ur3gr5voXKCPk3iu5q473FVuMvIqv/WeT0zxCd99L1Od72v6LAltNVd66hz
+5sR3zPkCHfttSAP+b6n1nOkzuMb1ZdnLU+eVVlq9VzvqH9G6y0F3uD+fVvn
O7iX+hzV4u/s65gWr+lM0fNw9etT6Trr6av6hZq3rPqVGucprfncetN+tp69
utXfO7XP87XfPXQXu3RmySbdF5XH5tzO75/rzHaWkN9ZfabXRiJn67mT9dvh
qp+KPFE9Um15dZ3qB6n9ZNVLqvcWzd8TbX+vMY9R+5lqnxToC53XZrzGUlgn
vIDcYb/QKN7PfIP8ho+Qa4tFryNU/0rnv12zzwm5+4TaxyN71H6Z1jNIbSfo
+7mq91d9f9X/pHqP6seoXm413YeLTjPV3qD2A9X+ftr0e0Zrv1DtKdUPV/tV
Wv9vdZ/PEA23yLvtIe1jco15gTV9Lf7aFVkb8biHqP6u6nnNk9NnkNpe1/gf
q9+8hL8PUp/z1edEjZPQOCfq+wWV5lH48yGt4UZ9f1DfZ6vPKarfrnr/vPf3
hNZwH/yh+jyVE2u8Dr6fVu25tlN9vubbTWUs7X7Qg+cqNd5+qi9XvSSeGh7W
f2/Ce7lR48/VmBeHNRxd42fY25pOrVf0+Cypdp3XfWpfFGQEsqJCY/ygMV/U
b2PUb4ZouJtk1UjV/6D6WNWPUP0rPfeB+j+l/WZ0jkv0faLGHKX6d6rPVL1S
d61F9bc15ldNvvvImJkae43a39LzSzTXZfq+SvpoG/S+2u7QmBM1V6XmqtFc
d2j98yp9529V36javg9yGZq/rf3m89azb6ltSkHrVb91khsn6bnr1GdrjTlP
92GqvndpbU9q3nrNd5F++1L9LlL7L9Tepef2Vv3soPuxAZZq/K/rTT9ovkjP
7iE+Pk3f42XLkXs1xhJ9huvZ3hpnk/onAx9Ol6zZR8+c26i1VVumobOnV9q2
wK6YIlqdp9+XaO2r1Xdbtc/UXFVp66NrRMOtNOfJen61vj+f9jjIyD11V4vq
f73W+WvJjY9Ey/1l7H2ps75KtOqX0hiiZ3/Rs0qfR7p0/VXumbL+RL+iQ+do
L6PU/3mt/yX1313tg/V5Xf2HqJym/mN0Fs9XWO8tUP8L1P8n9V+Xs222Jmd9
yO/YP7Rht2DzYYsgEy6K216BBn9W/f6s7Z0n8rZv6H+J2h/MWp4szttmwnZa
onpK9zLZatsE2Uo78mdl2vbMzaLJqJJpODdum7IcdB3yt9TPeuG4iOmG7h4t
mi/WeaxARmjv32lf3+qzW43tpU9E04MrzS/w0kbxzuk1llm76dxur/Y9v63a
5wrPXVzjZ6h/lbZcWqu13aq1b6Fnhlb6Ax81acwzxAMXaE+vik8XVJvnuZt/
0jiHqT5X9RVZy5vqguUi/Im+m6k+I/T90n62fdAryMRjNWYvzZUteJ/IFfa9
fY1tnw/6WofMivrO/0O8eqs+Y9qsb66psg5CV6AzsM120m+/0meZaDYjb5ty
et52GfYZdt24GvMpsvJljb1ONJ3S33Yi9iI28+dqP6PWthD232yVB2iulNZ7
Q7X3fGretscpeevi64KueVjfr1f9IZUd6jtKn2Uas0/aZ3Wy2mvr3M7v3EV0
A/fxslq3xeBL6cqY7kpH0Wv6ndq/7Ov1sk5sWvTHc/1tux5WdH2e7sIPA9Wn
xv2uzdr2a9RdeavWtEK3bt9sHYb++kvRazhbc06N+562SWacojUnNffRHR6L
MVkLtGyuMT25owNqfE+R2fAHvIEcfb7asnRUve1LzvbouGXqSI15n+ZbKP4q
t1t2rq62/GSN/w1nijx/rdoy/Y12y4+J9O9ynzdVf1mfHdW+v8ptK62z0WfY
f8g17vPAtPXRE+LzrM73PzW2X5Hly2tsY0yTXHpB9Sb12djoOrbuxxn3P1Ll
PhnrlpT6Ht9ofYYuO0M8t6jGuqqovayr8fldXnCfzox1EToDfTE4472/krFO
vqXGPtcO3V5PfcLyDPsVmRBLmDadottpcfPCNNXrK21zYG/Up92/TuXuuq8X
VNsO/EnjnF1tHV1VaTsGnb2xwnqduxfVMzNUP7Hdti8+GL5Gk+i8WOf3aM73
BjnPPV1b4f7IrAuL7j9Fz07T5zz8Y93DpRpztPbyDOvSPter3pGwHruu2roM
2XCt6mnt/Yqs79mp6t9LfT8Qz0ytMt/AP8iFfuLhRap/pv4LY/ZT+G1i4I1L
NM88fX9Cnwy2gcZ8TvVzVK7Wb69jB6nvC2p7Xp8KPbMw1Heosj1B/5TaJ+lM
JwabY1EYk3mxXybX+dzH6fexLbYdkE3YDJxrncr6Ot/nbfT7L/RprfMdrwvt
fXR+l4rvyjrPrTpsE69I2s86sMU2xa+z3s+hyNes13pC1vbHDXXez42Nnp+7
NiLr9uFZ72lh2CNrnxfWv61+e1N7SKnsTvssLhZNPmywncG5dKss6/OFznKX
tGX8cYVgM6r/ARpnjta7IWr5OKrOts2vAk9DA+73pXrmHvXfAx5otA0K3aAh
7ceo39XttjX6qcwVzA/ltOUs8pYxTwo6DJ21pOhxbmh3H+ZlfeAqu7V4D18F
2wkbagh+T515LFtnuwjf6tEGnwm2/jE1/o12bGf2jj57JthO2FDY5jyLfX4o
ekr1ftibbZbB72nNx9SZN9gXWMrwFtuz0G1Sne1teJ71oBPvCHd4nZ49uM59
oO2VGfP6qITtI+qc3cOid1Wt+TMmXVKlPUTz9kHjDbbzr6+074fft61+S6u+
Nm7fqKPB/lGn2geqXlDZqk+d6i152wi0Y/9hX6BD0Vv48Pjy2yRsa2CjYm+g
w6ljJ2BT1AXbtTvv9byleV9O2Cf6V4fXkA5r2xi3XfNj1j7rFg2WV/ghyO9+
4oWH46Y3vlqb6NzaZptoUN57Wa/fq/J+dqHqi8Kz+DQRfb7RuPfHbSNjK+ND
PaIxHtbnija3fRPaL9f3idLl8zXWggb/hl2NLQSdsYeQT/s3WC9+Do7T4PN7
UeXKButxbClsqnu032fifu74km2yDQ1e32k1vm/ctW9ibgcPxBdlv+2yYX9T
Yx6FP7EpwN2GBB92bsBDwATmNBiTfDXmduo79bj9kbz9/evDs/iGLzeYx0+J
et3c8WHNPkvOcXKT7UDOcbWef1J9VuXtx2K7/VP7einh+/B23nt9Mez947zp
sDphf5Zn6YffDE2hJ7ywsME6ayuVHzVYb69JeF2faIzP8l7np/jgbT4TcIkP
Y36We7pV0ncpLz4p6Fz2pI/O5VD2rPohKg/Ou32Syo+C/YftB8aMbsLWelN3
bw7yQPO/kzbd16u8Kmo//Sn99mOF/WF84cvjfm4b0WFNhX0P/Iqugm3vZ+P2
L/FvN/vteY/zb7XPqLTdjLxaWWFcDz0LDzEvZw2fMA788K+46ZTUXHeG+pt5
+wF9ai3/J6u+qcY42EEt1rPdvewnVdfaNppbttzYN2G/eWONsZedE7bpHtd+
p3e7vaC2WMb3e4+C5Sh4AbLrsrhx9621nt9nPE9E9QsyXsMslVV1lo/7qF+h
YB+gJmMfF98DGf7rSrcjA1va7GMWdU6N2ssQld+pfVPcfnefnH2OUoNtJ9rw
ybHDJooWw1SfoPIofUarfmTe/DCqwVgkYw4LvBGrMm9g+/027z6/UTmgx/f6
WNV3rfI4PLunvg9SfZjKnfNew04q11a6HZ07Lu81j82bt9El8Gck43v+U9p2
PveBuw2vcw/RL+gW+iAHPktbDn3EHao3pg/G/VHaYz4iegyUPfasflsimoxR
v9017wEqv650Hbr1TdherlSfEbJTB6t9P3AIPfucnl0B7qr6M6o/kbMvje0B
P3QEfwX+Bl8E/8TXBZN+M2ob7J6Cbfx3sENVv1lnd3DScQJwtbUa86OY7yp0
oB/9Z5SsG7EDsAEaBojGA+zLwQPgEOgm8EFwws/a/aF+pM5nafCJ8I12S9pu
7iu9sEDrekyfKzXOrkWv8xL5QWnV56v+u5Ttcfrw/P0qH4gaP3ww6u/YfuCK
j6peEj0eilrXomcn1/o79SNq3Z9niRVtjhnpfNqLHvPwlP0dbFPsUnQdGD36
jpgSMS3kM3teFLMPO3mg52VMyvlhDY9EPS91/NG3o/a3JolOExp9H3fp8p6g
zQ9x8+MZovMBOrub1OfeLVzeHOq3NPo79wjM+NuY5cxyneMstT9bsC9yfqP9
uZO0r0r1maZyQtJYxOC8Y0Q/xeyz7NhlbPafosOygp9dqnJHPfMStC16vRMb
bReBbX8UeOMV8WqjxmyRfNoxadulF1hZo/0r+ARMGQy5qP1dXfA4g9R396Jp
MrhoXpgS+v8Yc521tei3e9Vnos4lV7au/Txh/5W14ftDg28CHU5vtiyCD/dt
Me4BX+J3Qwf8YPb9Y9j7K9pLJmZZfr7mekHlzKL9pFUV9pXQN6tD/d4G+034
T2A86A/wD+KEr1ZYR+9V8rMvtNm+wL9DP6B7wGPBVPv1WKe+qz4n9/iu5bvs
19GOnkX3VIZ6fdl+4IKEMSrmJ5aBX4huwzds0t5HNHmOXj3Ge19rs35Fz24p
mg9pti2ETTQqZjmGPBtcZ3n+62CzU2K3Y+fyLLY32CbPYWNg4w8P7cSsNgY6
3J2w/4gfCU6GzgZvhGewvbElns5bLhGfwXdlneDeyMx0zHIzp3Ue0PQ/TPqn
sMfnNO9TjfZ/kp2uJ1Qep72tUtveedtN2FXEWYi3vBbuLD4/OmePvOVoPGY7
4hzx1qHio6117scnjX3skTEu8mzUv21TdP0XKv+e8Fl/UTJmsLTR+oR5Xw1z
vZ22vXObdGusyzp+h5xldlvMcav5Wfsv/1CfKo1R0Wg9gq0Ezsbzc0MMB/9k
VZvtHOydss60Uv37ab3naE1Parz7Nf7Zqi+CVjnrmfaYY2bnqb1F9SfbjKlQ
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

         "]], PolygonBox[CompressedData["
1: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
IOtLZUxd+JfCnwb8d+6HrczdhTmykH1KPkKG3zi9dc+hfxr88+GfAq02Y7LB
l4DXAY5DH1bdNpVt76I1q2afoSfwNnhS9PaxP7cCz0PHLL1NjJ8PfC46vlrH
Z6QG36sGNk/U8humt+wT7LEZ3gfhyWL8RejQi7Un6GsKXBL1W5EFHgPuij4z
atrnk+/3MGOuTfGb8hBwd3jOpPhM6Wy9yJnYnmqfewLzD8MeXc7Kv5C528V8
9+5D55p6/9gvSZy92uyX1tizEvwg468ArwSfmO+7XWdcZ/3SAr/98lFfxj95
PeS3Vmu6Smcn37J/hae9zke+fY31fIPF4PXAf4NeF526otts7PUQ3/Jf4L/L
Xsz5Uop95jj7ZxFj8pPsszRj/tuZozv7YQ5v2JSQz5zOXg3m21TgO1h38ffI
HI6sBozvBX86/I2ADzJ+Jfqcoe8w8KFyw9ex5lUFfjP0dgyUvw/+NPK7NfIe
egr4RInvzlW6v6J+Q/SWtOX+eTdun1e+7z3I28f4aNy+tNakta2mry97Jwme
/zF3Wdx7Wd/oR9a/ER3nomscegNkfZpvXr1pett+Ab8MOCGfAftcFrdvOEL+
HLRWcfuWz2mP5dsnk2+2hL7Hmb8fNtvHfgpB/xJdtufadzkP+9ZgfXVYX/8k
zxFj/jW5vttj0KvI1hHHLsPYM1cx11h4Mus5BnoXeF6+fe8E/NV1/tC5OrKu
xx4/Ml/juHWJM//58J6EviXZPKeBc5FRkeM9sVl7ib4TfJ+12Pc18KFx302/
03cM2tFywx9js2+wXTH329B0+1jdsedu6LPhPw7PXuDkfL8d29gvHWJ+E/U2
ymeuhn57ys17Dfp+B56T8LdQzPkDY+fTinL8Jultqib/GHgPNn4b2y6hPYL8
xsivF/MdobtCY7LhbRL33ryQ+Zrl+07T3daN+TbA+998+zpNmO9FeKeX+Wwq
hvsauCr8B5M9Z3XgMDz/RV45PHdEHMMqlt2PPY4jaxP6TEGfEejTGH0KE44N
dSdFgD8JO7ZfSOvK2H2cya5pjvkV+x/W+YN3NfKO6u4otm/cE/2mM/d5epNq
2cd7ocRzam69AQGyTiKzO/rcTDsFnCQfGn32wpMMPB39bgf/AfxQzGdaZ7s2
MlcgK42+czK9J79j7j3F9kUrmX8e89dCxoFM86TCewadj2U45poH75GYde+P
Psex7y3gV4GPY/zl3F+Naa8Ar+S8TwUO054GnwP+EXAFbQz4CvApwPcm7H+q
7z7gWdy37bMds86S/8Fe6ghtFPxD4U+m9QD/GHwM8Mi4fXvdAetzvQatpQCd
LojZprJtCLwCfB34U3Xt48jX+Zm+G5J8R+iu2BRzLPMN+BZ9n5jhXqx3P+vt
HXPuQO9FBba5CbwVeA3wBuDr+Cb/YHyI89JavmuJYwH51PKtt0Nvz7frQNsB
/BOtBXBL2gZ9T3hqZdlnke+SxjcvqOK+RIl9GPkyehMr9P7T1wj8WfTLhrc6
9LbMPxS8BFo98KIs+zzyfXqgb/tMv4eF6JvDmEuqmKcj9Op8417o0pt2DvCW
fO8l3SG6S7YqHs/0njjN+G91Z9VyjLIIeD30mZm+42/mLqimPZThPVklZp9b
vneY+doAtyqxrd5l/Pmspzb4QcWi8Mwsss8v378AnvbQrirx2OdZX310rxs2
TTaULTVGY7VnPkCfZeyJAt01esPQdzl4oXJ34GvBB0Scq9Eb/QBvdRf21Hzo
WdzBa4EXwN8IfKF8nqjvTN2dioH7sb6bJSPDPoN8h1aM+Qx6K73PeT4TOhtb
WN984Dbw3J5hH+gYeF7UvNo/ucD1lfOQbVlzPeDL4Hm/rvvmAX+DPg3B+yCv
F/j3pc4NKob8AfhG1jMB+AtaPdbfHxt1hz5NPjr47RHDU2m54CvlE6N7Cuft
Lb7vndC/hjadlh+3Ty/ffhJ4Q/C7wWcCz6BFwLtFTJtIawB+J/O1ZL7PwLPj
zokpN3YJ+qcq1o+YNp6WpdiBvpN8u+YcjwnK9TE+uarXUD/uGFyxuHzineyF
FmXOvXZQjhH+KyPOxclHv4jv9zRjYtB/Vr4B+rPg5eA7lAOI+g3RW9Kevveh
fQc+CfnbsP9u3XW5pimmHYx9F4Lngi9Wzlf7HTwPfBn4t+B/8L4l+FZlytnJ
n0DeWt0PyvEBL4I/pPsO/uW6L5jzpkz7oDcq3wO9ZV2fkarwv0ZfC/Aq8KSA
f85+zkTWZfT9J+4crnK5yrEuL3aOULlC5WiPgKdx3w9n707ne7Yrck5Xud0a
0h96T+WIsVWx9gjf/g1aNt9/FX0D2D/jGLMw2XtsiO7WXM89FHs8luczobMh
H6VlmXNsyrXpzOvsXwD+Jvg6+L/Os08g30Bvwh7kFcUd+yknWixfDfonjF2L
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
wVeDr9HcBa5lqCYyKuScpnKbqkmrNr20wLUS1VxegLaUvu8yHGMq1pwbOhsL
Zrh2qhhVsapizjeg5cb82yLVpFWb/qLYc0nGsqhjUMWiPej7Gv5tyjewfzdB
3w78Zsix8XbaHvC/x7xW+RCt5LsUOjaUDyhf8NKY94pyesrtPVru2vuF9D2m
2nXMsN4wvWWDw65dyKdqW+o3XW+7YoIhwKujtpVyNMrVdI157yrnodzHf0KO
5TfQNsLbMHa29pDl3NfLIddC5B+qFrdNPmWqY+bV+c4x6n5tzx5aW+gcpHKR
jyqHzrc/N+67dhn75Tzgi2g/ZvsO0V2impdqX/Jx5Ov8LW5e3YG6C//NHtuW
7d8o6bdKqrmr9i4ZF+ssRJ07ks+r34o9FvVvfVQDVi1YOXvl7iWjtfyTqH1b
8ctXnhd17kE+t34b0xyeTdl+0/W26zdm+q2Z+loAl+a7FvGz7jPwYei3Pc2/
CbgE/F3mTMdWo+g7pd8TVPitO80ZH8f9Nwn+k2l+w0YUusYl/1Z9wxh7BHpG
umWMLfIYjVXO4QPg5yKeW79p0m+bBiinXNc6SJe9FX67quk3DdBCUf+WTTnk
W/l2R8rt+6um9B5z71T+JN2/0distyLu32qpZnd13DIkS3PcD5zLHC9n+zck
gWojUcceOqNTsd8PUecCVZNdqbtD/lGKx1SB/0Spf1umGm4puuwvtS+vGohq
IXm6w7Kdw7sq6prQX7Uh+nbBuy7q3KLuAN0FP0Wd21AN9ivGf1zk2ppkVFX+
KerckM6szu7QsGPVJ6AfRt6iqHNN0l93jX6Tpt+m7YXeCfha2gHgK7DPdOzz
TdSxl/aLYrWOcfO+if1rofvOqM++YsYdUf9GQr+VkIzr4v7NnX57J5/nn3z/
qhHrot+46bduT0T9Wzz9BkG/RdgS9dnUnbI56pqJaifKERYgb3/Ud4t85n26
H8tcC5UPurrMOQflHnRmD6D/DQmfTeVklJvZVuxai97IrcCTS5x7Uc75irBj
9r9id2Q8Cf2JYsOqIaiWoJqwasO688/wPd9hvrR072Ht5cXsrw513Pd2kXMK
yi3MBe9f7Ddbb7dqui9hj/55rmUqZ7ic/Vpa4t96KOd+jnIlFX7rlANVLvTL
Ev+W6nXoF0N/scS/fVKN5/ywYxbFLqpBTc53DkG5BNXEl+c756bcm3Luyr0n
8ux7KuexE/tmJvxbgD8ZP1e1QvR9N905IuWKupabpt/sfcx9tb/YuqiGtQ+4
T55jFeXglItTjUW1FtWAVAuanuffCkpmW/gfz3PuSjnO4/DnJfy2KIcUSjgn
rdy0YnTF6sqxKNcyRTkTxs8ucK3uF2LqQegTweYravsM6iwei7l2rRrZ1nzn
+JTr029oepe4RqBagX7D0xa8AeOfSbMPK99WORTlUhTTTwg5hlAsoRp+Yb7P
gM6CfiPUJe4akmpJ+o1uedh3ou5G+ahLCpxDVS5VOf505H1a4N/a6Dcp96jW
Fvdvh7SGqci+tdhrVQ5FuZQbKuwLKQevXHy/Yu8txcSKjfWbX/nqWkND5ppY
4N9e6jdGlci/r8S/nVLNqA/wLXHXivUb2skRx2iK1RRjLFftkfXcXccxgmIF
xVSKrZTjmhF2DKZYTDmwMWHXKFWrVE7tY9WKSvzbFtX4Vev/PywQvK0=
         "]]}]}, 
     {RGBColor[0.8608311992089401, 0.8797451497992119, 0.8700373987547974], 
      EdgeForm[None], GraphicsGroupBox[{PolygonBox[CompressedData["
1:eJxFnXec1EXSxgcWZZfdJSzssnFmZzOTVs6EiHcqGADTmTBhxAgqoKKipyLG
UzHca86KAQX1zFnPiHqeqEgQlaAYAEHQM6K+z5en/Nwf8+menv71r0N1ddVT
VT3pw0/c84SuiURiSkkiUURarrRHIjGiOJHobE8kUhWJxCfJRKIhk0gs65lI
jG9OJAplzvfRM+sqE4mD6xKJtUpTKl+o8m4qH6hnG/XsJu3+bbTq/Ent9su4
zhi1U1Th8rV678m1icQhyi9WGz+r3juq82mXRGJ/1ZujfFUqkejS23V66fvD
6UTiJdV9NZ9IXNzD73pcfX6qOpG4rCaRGKbfLiv1s+vVzkfqw2/9E4kHVG+5
8vupnc+iXwdHH5qVtuizso9Tvk9U+WZq64ZeicRx3RKJFco/qvxXavtl/f6R
+v2lxvu5yh9U+WKV79TiOjsqnaXv05W/X+lD+tyl/ANKa9T/R5V+pf7vpj7e
GXVWqu+r9Fmj/DUqW6vxTFH+Pn3u0Pd7lf6o/v2kz4fqW0ul+9mpsY+q87he
VnlXzfsipWvqE4ld1P7t8ezqdj/7lNb0fb37G7Vfrr4clHU/N1WfD+vptmiH
OSLfS3P8mca5u/LjVT6/n9ZM+VvV1vmFROJK9XmJ2hhalUicUud3n9g3kWjV
fE/R/A9T+aQ6/z6/1uU3qPzlCtd/s7vTSZE/qtPtH6n07Sq3P1Jz3F/0sJWe
26lDfdZ6jtbnS72rU2M5Tf1+S+MaXO18QvW+UB9eUn6l5me0yi9V/gbl1zX5
uTo9V9DYTlD52GL3qy369q3qrFOdbzRnh2lsd2t+Ntf87KE+vKXfmweoH3q2
r+pfqmerVK9M+TeTnqfdYq7Gaby7Kn+g8oOLXT5B+Un1rldQ2awK1/ldNL5G
z7+jslNz2ndqs0K/1Ss9XOuU1RzUaw+N7uHyS1TvUaV76NmE1mKu0kp9H6H+
nVnwPjhJzx1f6zr05xaN+RnNxZxG0a3SzzW376tecx/v98P1bKrd40oqbejr
NgeqfG/N06/9TW+/VXtO/im6yrR4j2ysd62pNl3tofo50cy7eveBYjKHlZhe
Zmt931PZ+/pMU9llUee57k7fi/ofKJ2rz35F7ts65c/o4ueow3NdK1yHdZpX
62eoD40t0Gd5kcv47SjVL9XcvaY27tXa7ipe91O19yVtfxvtb1PvZ/6t/izo
7ragB2hjfrQ5qcTt8/snebfzsdJNND9Pax7Wq83uaucrzfkFmt8z2rQPNMeT
lc7T/H2gz+Air+fxqn+QeMvcKD9EbZ+jtT9d+X7ie6+p3WVqv1hzu32Vn+fZ
yaV+5nX1YajmZ7LyvTVv0we4zRe0vvfp3aepfFO1f34/t/Ol6m+q9y5W/qpS
v3NutPlQnesv7e709MiztkurzQMfULutem6a+nWF3nWEfpupso3Sbu8llb+S
d/svK+0pWj1Y7byjNVqosf2u8tEJ87rXNYev6/dfa0030Az8brXyM4rN/9YE
D1yl9Gt9zi51/VNrXW+avl/Xy/x+d/WhQmMr1zp/W+dnqH+LylYqf5babGsx
b21tcXtX93KdF7Nup6PFz1G/WP25qYfpg/OFc+n6eNe/1f6aWp9r5wa/pp+c
d5SPKfL4GOdHera8xu3S5q19/Rvlb9DPWvNYeAVnysBi09fCoLcmjeffav8I
je8YfTbReMYUfA69qjr/pzbzZa4zWmt0oOqk9X0P1Vlf7b3KPn2gzvXhL6zF
LypPw7tU/2H9fojm4DelzwQN8/v6eHaE5qVabfcSfxqU9hn1YcFnBP0fqX7+
GvVZX9JfIl+r/r+uNvfVc1/HGTdLfU6WuXxYN9PI6KCTsWpvF/X1AOXT4rd/
Vd1jgudvpt/+A1/VHB4lfvmS+v+pyj/TZ3e1s7V+H6LPuGLX3TzqP1vnetRZ
qP01UunUlOvyDOfBNkr/XBtrVObvf9DONlG+ncbwq8Z+j+bqOe3nHfXcc+KT
3fV7iT73lPldz+izTO8rrvVvV2h+Mtq/t6vsBe2pPPxZ85BTWqTfN6r1Ow+O
fn+hdrescB3W5A29a2eV/avd87B11HlObf5ddQZr7/+qtThev61X+qg+W6sP
jygdXOf84FLzoyHK76p8VX/zUOQfyraJ8ucr/R1aYqzdtUYfdnHdoqh/Un/T
MTTcnLVcVZyzXMMeb1L5FPGlF9XPc5SeVeL5+Fxjf0J84Tj1d0mD5YQT+pu/
Xpj3u4ZrXV5Xe39RH15T2q3C74bP/7nO5WPg2wXP+TKtSVPBNAlt3qn3ndbP
+/IT9ekojaNRdDta+7deNPMAMlLG+Rmi649y7t/xeu/dyr+mPt7T4nXpqs94
rd2u+n1ijXn1Iq3TX/TstGK/c8vY40tVvn9v864ijS2tOesp+j2gt8uhY+oO
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
zF7wUvGrH8Daxa9WZ8yPVutMPkh7ah/9fn/SPJq68GzmoIue3VPfa9SPc9RW
Zd7628lBz4dWOQ920RyYOpghesDESusC99S6feThq3oZdz5d7x6q/m6vT7vm
/pWM8ZfVov0jNdfzVO9MjaOf3vup1nZmyhgD+AQ4xmT1ZS3ntvLPtBpHeZdx
6ZktmR+NZbMG86c9Vf6q+vaKPuVqY3LOZ/cSvXPfnm5/ULHnl/SihDFW2j4x
4Tm+IuaZ+QXbBV8dqna21p7fTum9WfOHPnrvx23u47XKn6p+fqH2N9H3JuWb
9WnravyXPoN7IIvzO/rhs61uf576PKnK7y6F54turke/CrkT+fMr0c5pqnN6
levsUmaaRBZF9j1d+d05h2tN2zf28XOnRTlyzZYh23yTdXlJi88K+jkkbBED
q7wv+rRYZixoXCm1max1m8heyGC3ijb2F22c3d/7EexnZeA/PWI/Pi/e2Cm+
VqX2l6d9LnBeLFf52Zq389Xvs9pcl2dmqJ190tbx+mY8puVaw2vASfLOz1Y6
KmXd+AS1XayxPKl56650gX67R3Ur1Ma8pOX4iaxXzvjrASnjGWBbCzW2B3PG
jw9WeV0vn2u/lFhWRE5cpzrXax5K1f+P4LUa+8ZqcwBnRKn5O7wdHf3ICuvp
j2qeHtHnac6tCvct39U0jjy6E9i93neqfluSM39FJ9lfn7kqf1XlX2jNT1F6
sfqw8UZaC9XroXUZnLWt6cFSy1xLVX8e+Em7eR/zCN6Orgm/hX5WS547iLE1
+mw/sJflozPV5snq9xk5n43k4TETtManQCt9bGfjWWxt/2r0uX2d5vjrZrez
Sulf+vgMh9c8qTmar3Hkc8aZTw2M+mXkKNFGAzIWYxENfq51n1DmeWfOoQvk
BfC7+Wr3JbX3mPb0yQU/OzFtObdG9UdqzjetMFYFPsOa16p8kdrplvPYOXPY
gyf2Mm0jW/xca5yQ/fVVtffYf/LOv630Ij17Lhhcyjwb/gXv+qGfz7Wti2xP
+K7WtsEpqnsO9ke12SXjOpyB34XdAR43ro+/k3+q1GcxbY7v52cfQj/V90t6
WYY5JtqlzS/r3OcBpa57btQHO/81cPJ+Guchoq8Lmn3WXRrtgKNTB+x9YsH6
IrjFrFrrWnOKzavBGcAbHtf8/qQ+HaZxPAMWqvyRyo/SZ43y+yl9QeUJ0fMx
ys/s7/VDz5lYZn2G/YB+s1EP2x0YK/oD491Wa7GNyh5MWKbH3jmiyHPDHDGf
YOPzw/5ybKd54rWi+dNz7u9a7entyt1WTbl5ITwRefuYTp9P56r+tKxtuq+q
vyO0l1aKvkcqnap+3Ka+zSny/uY96J67azwrNMY9lG7R6T1woOjz+SrjsA0h
0/Mu9LJRor3zVGdPff6Zt479IPxJv3+mz/RulrWRr5Hhb1R/JiO7gy33d79p
7wmlj1eZH54fMi+2GHDQPwdGulWjMfF/dnhPsnfRR57Km26+0+/Xl1jOZP7h
mfBLeD4Ybbq/cdrypM+N+ZrLh9XWeLX5SIf3/GlxpoAx/1ZlnHlXndUTS6xr
bam53qLcuvKVbcZhr1K6veZrsebtaM3ZCp1lLSpfqbRdv41QvkPp2Da/f1yb
5c2FauM4fdZpbx+u8p1VXpTynDP3i/X9Y+WXKP0/9XmB8ouUv1yfO5S/jHNf
7UxXG3eWGRfANvOx+n9D2hjq9Ur3bTNdjVJ6e9pY5m1p4w8fxPmKnRQbKfO1
L1iKxvIn9eGSNts0xyi/VbkxVjDgz1S+ROXLlW4ErqG521n9OUfPb9rDtqHN
y43PgiXn9HxP5ZekrV+yz8D00G/BvbFp/sReqLLO+Q34oPqwVul3Kvu2yjrz
ng3W8+4vWHdD99s1eAj8AMx9lfr0ufr2tdJv9Fmh/FqlN2kOlyn/hfKD1des
3vs31kvfl7NeSl9OGosvb7cesEB937nMdDo5aAPsknPle9FbZbNt7lVKr20w
j+nR4P5M6GfeVVvuvco+Pa7D+MqQJttUsK0cq/oj+xs/ug18AH8G9aEZHAaM
rqf7AAaAPwG+Bx/r2ZeU/6jdz9XFs9vGu7Kaz8c0R6/ovHhU6eVN7tu1QWsL
+plXlWrv1OjZ51PG48DlHs24nUP6mE/9o8l9aEm6bNtov6K3sZr3ygKrCPvF
1622Ja5SeomebdR7/673XqPPcOVLGjx+5uHIDtMUtAX2jpyJPI//wGZ63x2a
v6U50xz1sC+g84E1zVPZJWnLEqezhiV+Fh2AdFLk79H4F4guhildoro90auL
rFswd2Bxu2gtH9HYZ3cYE2NOwO44dzl/Cw2WLxgjdIssz/xj06wJPgw//z1t
HnZuznobex/dDaxmYZ35LT4MH9TZTwMb3qBq27kSPYwBgf8g46MbIpMvDP0L
PWxNiWV35PX7kBPr7COBLNatr+0Lv+Zc5wPV71lt2f8CtXNv1K/uYn+OeyMP
7ZXHPMDH4efIu2cUGxcGE0aeuiXk2B3Uzz59/Czt0Q/K8L/AVwMdYWu1t1W1
xwefhl9jX8MfZFLoaz+UeFzodWNjHvBpWV5nvAXM992kxzc+ZzxwRV/jSG1a
pyLlixptVymKsUMD+HCgi60Z4PrnNVqfQ49Dv+vaw35g4HGrU/aPaWnyO2/X
J9/NOiG628daz8XaQ5/o82M3n1HD+xj/+rDJa4Qe/1LomOia8DT2A3sBuxTr
gp3s/Sb37b0m6+W3hJ6O7RX7EP1nLOSx15N+G3nOauyI6J5P1xmnA6PDTooe
iU35bs39PfoMV/6VlMfcN29Mu6g+7Htl9m1CRkEP7ai2nvtd1mf2D0qfDv0R
PbJX3vugSn3+uLfx2+272sa2TV/vx13Uh137Wzdf02DecErGdLVLlO+ud51Y
7XN0Vn9joOCfB5TZbgH2ji0N+8lxauP1dttsXms3bdIWNMw4utXb9kfblMP3
vla9d1V/VbttdoOCn1wuOtlb/RzYaGwcPB1sHayC+vXIpRrjZSobq3Q4flla
34PbPDfMLbb165vd5y/rbZ/GVjNW/dwqdElsQ9gYwaWxM46tcT+PC1tlUfQZ
ezBn1KFg2JVeM9YL3wT8dcCNh3fY7rqp5vzldtd5qd37gD2LnxI6HNg6+PkI
9Xu8+rl1o7EHZA/wB2h2fL33C+mEwGTBZsdHnj3Fd2SwKZ3GD7s2WffirMHn
oW9v4/lzy/zcidEmvG148DfwWrBI5LaLNKf/BJNH9683b4d/4xsCPUPv2Dlf
jfaxG7NG2JSZy0Ghm7Pv6DPjAI+cUm1fmnsLnsv9lF4PP6+3rofcBJ9BJgST
RYd9RHV66ffe9ZZpPlB6MHxavKFE+R71xsfYh7RzbbTXK/L4N2FfxI42UvN8
q96/TaNtidAnOEYf9bdPvXWDfXKmx6X11uc4f+kH7+F9+PixD8bHXiiOcvYU
e6s48kPb7Fu5vdJH69w+Y+V56mDjwqYOdnJ8g+2f9BN7z6yUsZdLM5b7jg+d
oqTKc8naIRM9pf5/U2Lb3tw4jw6sdh7/Ouynt9YYMz8rdHpsNK1N5utr9J77
wlaCzQTf0wcrbP84t8Hnxjr1aXbOvmw3q7+flxgbAvd5WHUfCjlnUrsxlFOU
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
0OT/A4mFomE=
         "]], PolygonBox[CompressedData["
1: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
Gods8z4IfE3CtTmykWQrbc13rEk+jnwd1VSotkJv9tNR5xiUa1BNxyV5rklQ
bYJqXiYpVp7nWIRqIufJ3yh0blg5C+UubmPO0pBtiNvLbCPIVpDNtT/qO193
v2J8jYGHxVwbOIjfhgNfGvbdoRqco4y/CHxzyDFlxZZVY6Fai8P8lgS8Ieax
LRizXrnisPsUM1HsRDlA5QKVcxqa75pA1QZ2gmYo8Hlhw4rBKBazNubc4uP8
tg54CzJuDFwjtxX4K8a8HnJNg2ob/j9nHXIMeDvn7wt+mxpyDYVqKX5SPUOm
fST5SpPLzFtviN6SvYWuFdGYL8Enhp37/JD5lkVdY6paU+ngAHBe2N+SaipX
gPdMuLZIOTjl4hTjVqxbPqp8VdXoqFZHOYs6UecclHuQjyJfZWupaz3D6LCE
tQwsde2tauT2y1eF5rKQY1qKbfWP+Fv6TzaLcg3IsDDkmtM1wPNjzgXpG/ka
+Dflv0KugVIt1PBc79UsxdDBvy8zrDtId5Fq+lTbJ57rwEvCjiUrBqhYYMWI
bSPx/J3+Feh0T6Z9ZvnO7+Rad2dZzz8x25iyNd9XTDnqmjjVxiVzvotlq6tG
p4Ztdtnu3eB5fcgx/q7AmxizMN0xMcXG3ilzbfFz9L8LnJxnXqp5U+1bSqFt
YfEsgd+GhN9q1dhtBG5a4rtFNcc3ljimpNiSzsiPyH8oaltHNvNh4LSw51JM
U7FN1byo9kU+zYqEY9SKVcsHqFXomlvV3iomvTPhGJViVdLRcsUPoq6FUQ2Y
asH0ZurtVIxwBbr5Pu5aOsUMzst3zFixY72hh7hPl4N/lu4aENWCqKZEtSWq
uUln/E9Rv42qOfkZeEnUupfNMBf6zLhrk6TTLODV9M9N9xnTWVPNjWpvVFOz
j/mCuGulRVMOuC/97YDvY77zma+X7ud010iqVjI17NprxUDeRhdt6e9K31uc
h5kx2/Sy7d/W+xh1za9qf/VNz9NZjrpPb/IXRa7hVC2n3mC9xd+D9wXPgl8U
foNLXcujmtWDqh2Iu3ZYNSMpyh9DUznTOpPuQgWuJcnitypx21yyvVSjrFrl
1tqPDN+hukuT4861qoakPPCCXI9VDZZqsZ4vdS2c5jjHXMlR50Z0ZyVFXaOo
WkW9CXobVEOjWhrN8Sb0pTHnEmVDypaUTSvbVjVWs5C1AuerYaZzhJVKXMOj
Wh7VnKj2RDXrql0XTXHcOpau5WO1yfWdortFNRvdwq7BVS2ubErZljWhGZhh
n0i+kWoEVSuo34aAPyGfJsM19cm5tkFki+gM9AMeFLPvopq602H/j4D+V0A1
3HfEXNOh2g7ZMG3QVWfFKzNcs6nazX9yHBvSb6tirnlV7atqrBoB/0t/W/BM
8N9j3nPtvXycLvJvwu5TDa5qcZuGXVt/lv4UvR9hw/LJ5JtVjDn2tR6aCsDv
q2X4fwS2Z9smkG2g32bHXLOo2sVl4EuAN8adW3yP77NNmZvguszRVu9JjmHl
iJQreivmWjHlkGbEnNNXbl82zbBc5/SV25eP3w88vcz/K6EcmXJlY+KutVJN
9Ni4czjK5ahmR7U7yiEol6Catz3FzjEo16Aawz+LXZOu2vS5/FYR3hvor1fL
OSnlpsaVOhal38aXuqZQtYWKUW0ocE5cuXHVTG2BX4Uy89I3PzHqmgXVLmiP
nsp1zaFqDxUjH4z8v8b8vxeKCSwH3hZ37bVicorNKUagWIHu/Pv1HsWsa9Vw
qZZLNr1se+VMVhf4TdHbsok53s51zECxA8WMNsZs88r2VU3oK4pdxvxWqqZU
taXyIeVL6kzrbL8aty2uHOck4Nfj9h1VMzId+Lqwz4pqSM+PeU7NrZrGnqy9
esy1u4ohpMXs88v31x21pNQ1laqtVAz8KvqezHXtve7EldD/H/U+5KE=
         "]]}]}, 
     {RGBColor[0.9143947538597051, 0.8976071680237858, 0.8460409742713036], 
      EdgeForm[None], GraphicsGroupBox[{PolygonBox[CompressedData["
1:eJxNnXd4lGX29yfJZMZIqEJCQgoDIVnJZAJYsK4VsKBYABVBQOx19yeIUhRR
EVSK2FABAUUpdqXbFSzo2hvqrh0LzVVs667v+fD95vL9I9dzcs/93P0+/Zwn
c+qFx12Qn0gk/lKcSBTE890OicRXyUTitLxEYmXAK+JvRpGe/H9DwBtLE4kn
Aj4znUi8Xp5ILAv43ij/oWMi8WC826EmkbgzlUgsj/JTovGn2yUS06P9o5up
Lcp3LtRzhetsLFH7/D66pepeEm0Nr0ok1kc/NdloM35fGn9vxf8To87pUeeG
qNMi2m8Zf49Hm63qVb4xxnJoc/1G+VUVicR99LdTIjE02nwp2ugUbY4uVvnS
GMMlXdXOpozLXP5e9HF8zPnwApXf73Zuj3dbRfm50da8KJsff6Ni/LtEG63j
73/Feq+/320Xvx0QYzsj6i+L36fF7/vG/32aq/7rMc6Brs/4no45to463aL/
I+PdVoYvaKn3Tkmq/5YeA/3P8/o8FftyV8CXFqntNm7/6pzqj8poPak/IU9z
vdPzvSfevS3gYXEeqlsIrtlJ4xrguYztqja3RDv/KNC7tHNajK02xtYrxnZz
neabjj1J7pxIDI62+rJusTeN8fumzjHP2Peb4t0X47lLrEMi2t8UdVpnBbeK
54T4/Yr4ey/mdVr8PzTKR8SzbcztxijfGOXr4v2ZAa8tUdlNLv8o/r8h4P5F
6oPfusYcV8YZGBb97NGo32e6zjkl6u/mmMsQw/T7RkMiMSfmUpzR2X8y/q6K
OXxdKpg7MSme18Tf19HutSX6/8No57oSlVO2JPrtH7+/UR1rVqQ61D+3RHOk
/26xVhfGWp2/k+bD+PaPMT8W8PSAvwj4rlaJxB8xnp+j7t+i7O/x92yMs2eJ
/h8Vy5eKNdoe/x8UfV7YJpGYG3XPivGsjv2as7P2mrI5Lt+rRO3QxsQY35wY
3z6xPue3TyQuir0+M/rcx+3TV4+ALwh4RPS1IC14fjx3i/ILO+h3xjsj/g6L
s7esRDDz+Li9fqN8RYxvaMz11BjvIXEGDo6/LjG2yp211/z2U7zzc/ztFL89
G/VeiPLns+rzQvf7TLnqHRX1l6W1T+zRj8VqlzYnp9T+ZUmVgSPAD2uifmXA
96XVT1Er9dUQ828Tz8NjjN0bVefEgAfH2nQIuFfUXxRwVXO18XixznFVUn3V
Brw5+m0dYyuLPa2I/7fGHWkZzy+iTr9oKz/6H1Mj3AKe4i4Wx+87N9dd2xz1
mwf8r6i/Xzx3jb9lAdfGGtTE3wnxfq9o57MoGx/tnBS/X12he8R9LXY7/BUF
/HTs1x9lgZ/K1MeqYs3x1/h97wq9+0nM5faU+oIw7BvPuvi7NfrYp7nmxRry
breAV8azsblg2lkT/3cP+KU4V91jbLOi7k2Bex6Jtq+oEG65skLzBZcuiDW/
0/0yhnnxt1eFyua5vDraOT3aOSPa+Tmp9lnnheVqs3msw/dJjYMx7F6hPdyr
QHN9oFTzvyGlufycrzZ6uB1oBedhe7HG+XD8TagQ/gRHg8+rYxz/jeeAfPXH
70UFf85/Vsx3frnqUo/9Zt+nxxmZXa62OY9HRPmRzYWTGfsj7muC+30ixlOc
Vl3OLevNuh8d9UcE7v04ylcHLjq7SPD4GEPv5honbZ4RdT6P8iejzvlFgu8q
UNuPeP25B4d5H5fHGfsu6qSSGjvtMH7Gy5owjsOb685wXzgXnEXOHmvJ+Ti+
UO8wDtaH+fX2eHj2cjnnqpfP8A1tE4lt8fd0wCcVaXyMjXvEvnCOfs/oTPes
jPWJOz+IsWXUxhFuh3kc7rEdYpj5DY11mNM6cG9t/NYl7lrA3wc8pUZ3+Zto
5+eM8NnHgeM/j7+jo/ztGMejzQQ/F7+tiXfz4t3N8e4vOe3r1/HeZ/AVMd6l
WY2Z8b4cZ2BLlH8Q5bcHjdsl1vYJl3O3mAvneVyR5vJLntbnSK8R86YtzuRV
UWcw/EG+2njc7Tyfr764X7WxLrfF847oa3mMuV/Ufz6ts5/y+W+s0t39KsZ+
RdDjU6Bt8ewVe3Fo/I1J6Mn/ZVF/cKzj4QGPi/ITC1VOnf/GXL4u0763ZF+j
vFnUPzD6OzrgGVHnlSjvEfAfMcaD4nlE/FVEnT4p1R8bdVoXqn67KB9UqN8o
53fgcupHeXnAp8a47wu4Q8A10eZSl38e8NqAuwf8U8DPGb4x6j8fd/3LMtGX
w1KaS4dos5X/b16gssM8x/dif9vF/r4fz5VRpyzKN0Wbe0S9fp5XjeHRUd6i
UOvF3X8t4N0DviWp8exh+PmAd/PYXvWa3BTlx7n85oD/EfA+Xqu1bqd/wG/n
dNevq1GdvaP84aj/XpR/G/Nam1E7e7j9C2L992QvA94/4CMDHp8QX0F9eJjO
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
x7drXQffZr5/Qj5l4gcuMM5mH8kP9JPvzjTLcdBZvsWDD8pI290+9feV+tTo
uz89M/JRvN36XvQR2PjRz0B/PirVb9gI5thOsMhyD/I/Mv4tlvPJ9z6uVPbM
8W30PTlsX8hb9Eu9M+v1LrIFObHusG8wZwF/Zs5Sk0/SKfXKLQoeAM9Bf8j3
Cw3lW+mM54pq2SaxUWKzxO8KeyB+TyfVi28bFM/ONToz5LnHn/8rf/PuS7dJ
Ll/8Zm61ne7KrOYyMZ4rOkiOIScA/OnN5lGxsc63nfUrznaJfMfAV+CqJrsT
MUTwNuRTpwy+qLpGcsApXRVfRJ3b6/X7XL/3YVbtX1WtNZ1nO/F3pYoZ4LtA
yOULrV/me4N8+4N1XFev+ldW6xyiX0b/fL9hcOPrznsO/0xu+zuLFHONTnGB
bdXDS7TOo6zfYR+gNfhYQ88Lq+Tjhf77u0rrq4p0p/i2C980Qi/FWcDPATso
Nu572yo/JGtNGTEy+O/xrRr8GtkT9gafN/ya2BviPjgr+JNDW8m1yX4MC7hF
V7V5dJznqTnluiTnJXEVyKHEVuAbhw8bvmzflSuHJ7lw+ZZFN/v1YRPFFxFd
LfSKsaNPI58nZx2dFToEzjL/o6O6x3Ph/mA3geehbfogDzTfoCD+s53xC3gG
HVFVRn72/27QeAcYB71er7PUsUq+S+xF055Qjm8i39OjDH3gw/6eALpocuJz
pyZU63ti5E1D5h/ZTDIROeK4t/gJoLs7vV7wGfX6tuGtXmtskswLP4Sm7xvB
+7Ww/pU9vi8rf3q+J/lNqfJ2kqeUuC9099/vqvh6ZEr0Znzvh7V8sUF+y8R8
gNP43to/LEvg64rNCTvXyKz8UfHnxe5UVCb7zpNR/+tS9cVdGeP7Qtk3Li+y
bgJdBL6x6FXRqfJ9eO4Pdwa7FrY6bFtzjbeRNYiBw0ZIjAZ2Quyg2PKuM00B
P29u0Hg2NQj3pMrkk3KnaRm0cqppJTRovmkicsroKn03pCGruC5866EX26xT
wf+qXU5y8+lR96d6neGf47mp1nFydfrGa2WZfNU/Nz8Jn/m19RPwneSLwCaL
XmJyte777DrJgOhGkBMLcmonP57flmodWTP8vzg/nCN05OgBOOfnlehb1+hr
+K7cuZbx+WYIdmq+zUHcIfZBdErbrTPAt434Tuz46H3YR+Kr2RvaOKfkTzvk
OZZhH884NqhT8PxZ5fntldV3lfhe0vqs5HzONvowfKAZ+/9Vax4bPZdHGpRD
9auOwmvcIew1+K7gn0YccYca+W7vXSXfFXzDiGsmlwz2aPxJ0Ofhk4p+g/tK
m+A8zlUTPiaHN99XIi6B7wmCO5Ex4U0o4zxAU7AXzjBOx6cdGwf2NOgK/Cex
ppSvrVfMDd97QJeJHna68fm3DTp73zTIDvyYdSwrLMMijx+B/ijWs2VWPpvY
idGP8T0tvk3yY5ypQ6v0HYvmWdmQ0bmgS8PHle/d4o+63rIzepgp5lXg2S41
fwJPuMwyO7J2Oms/kqx0PEss74zKKL6eOHtybLCe+Pdi38aejS1gW638XPBH
/ingrVHn7ir5EGGHBQ/z3lbvRTPLrW80KLZplfUC4MJ/lopmEMNxt+8hemt0
usgpl+Tkd35pTrpW7JDkOhiXk81pfE76WPS1+A1OqtY9+SSrHDidXY4dHPsn
ORnI4YAvD36AxDlyxrA942+D30xT3oY93ddg64WQx8+uF092Vr30RpMsb16e
kz/EBL7zFvOsiPvfPJ5jM/rG4fSc8NUky8Xglmuso/jOeiV0EFOMc+A/+cbX
Hv52GLYdYgWgC+jBrrJuAZ3VUdYvVNcJP77bRd8WRj9FLnn8fLD38j4+7/va
T5v92WB9YH+vCX6MxNFjZ8a/EdssNtqFCcXU4xNFOfMgvnfH91AKZTdi34d4
rZBr8OfpYf0I+jT8x9Ch9XKb6EyID+Uuc3aIcy/zGNBTfmi9Jbll0NPjS0lO
KezbTflR4VGAiXfc17735NbAZk59+GP4ZGj/m1nBP1QqFwe0ljOAj9k+XpM3
sur3smrhFuKO8XVpsB4T3S/6pYusszjU34rJMw2aabnsGOtw8L0hJ+py+5mD
J/hGFPkuyFvOHeb+EguMTzm+wtAP6MjfK8VXr/LZ4LvLtPNG/D4op9iMk3P6
hkaj+Rl0WeiZOA/I4n+1DzxtD3f76JfQSeFLA33i+5fEl1xo+Q7Z7XzLj1us
S0GXhY9Qf+tVsHHwzVf8A1+uk45nonU1+A3yjXJ+A5/hJw/eIBZ7uunuQOtq
OAPpBvlFr+RbvqWKYUMf+kqd2llfJ50PeiL0rmf5DvJNgyNzskH2jefcOq3v
nDrR9xuN90Zb/kW+Hmt8iFw23jIacs2e5qFo/+icfEz75aRXRJeI7Mz3f7nX
fPPnUsvmyIb9fOZZ8945xUT1yYlnQ9aCb8PXu5v9vfmeKDzt1mrp1dB7cZaw
9RXZLoZ+DB0XuOHUnHz7RsRzaE5+CcPIFV+t+8F3V8613oB7hy5usnUO2Mov
93mbWqsYSL6j/oBzHrNn6NKvtq6MWHJ8gPEfPd77TjlyDvLOS/XK9zDXfg74
a/Syjqt5leSrWfXyj5vgM7PEdjN4YPhwdI/PGg9c4bO0wn4H6LteND5H94f9
9gbrAb6tFH8/sF6+WuN83t7Jio78WClfG3yzwSHgb/rCTldj2y6+ATt8VZLy
XXmgWjL4RY2St5G7S3PKF4J/BPqixfYPQV/Et1Bz/n4r+Yvus28GOSrwK0Ff
lKqSbHZlvfKfJOyDgm6Y3BasI/HN+I3jI4RfD77i4NVM9L03/k45yRfIrsgW
B3kvwCfEL15jukOOEXwx0Dcim2ELg0+aXi9ecEa9vl9Mm/CK8EEzLJPiz8Ya
IxPB5+DLAd9F/ij8Snb42/hsgBOIoQHnY5sZYNrH2cCGgy8VtpIRLic25Hi/
C50ir9Ra28TZu4m++0NNy8AzA3xmmBe8D/7lxEqc4HOCXLmP7WjY9Y6rlE9q
i5hj63r5x7Sql66X+EDw+bFuH9pNHDe+8fhd/T/ATnxd
         "]], 
        PolygonBox[CompressedData["
1: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
dyrpWvGgfAZ7h2MPtevap3+RMI/i9XXsdyb2u1s6yHfM2pl0DqNc5gH4a4Us
T5e4VlTNPQa4YeTaXTYt254E/fvzXCOpVqqIXAuoRlStqJpOtZ1i7nl85Uzo
P57rnsQJ5tVirvV1ZyPANaXYtbt6Bg1jjsmKzVvg8RP4m835Jzm/gfmHSedY
yrX0bQ5rGXwblOGe0XLOHy5yrSAb7wT+Y/CXwdvLhMZXikW8+RPBNcgYzo9m
3A28irEN+C7OXJ3nnEi50cAS9w4UswcAfw693fmOeYp9/Uvc61COcneJczTl
av/Dod5T0rWIfKx87UnlO1n2UfsSrtlUu13P/l7s353y21YO+lXKPRz1csTj
H+GvZ4X3KoYqlt6LzK/m2KfLt2+PHPsPo5P14P+/YveKpqLfSva+wPz6TPdE
mjCvrRqiwDVWZ/C9r57Yxe7BfJByTFJsSmf+Orovhoc8eGlam/dxmWOUYpV8
6lHgPtAfWOiaVbXrUM5n13UOsClhG5etq6ZSbTUt5besHox6MQ8VO1dUzqHc
48+qdwqc4ynXy4THdun+9iJrk8qdi+gNL5VtMGaq3oVGd+B32D8vzzmWcq0B
SffSJMNA4H+B45JC9/TU21NNrNpYNc16cP8zZV91EPyfAsc4k637R54X2D+r
zG/rAHc2o8w5j3If5YDKBdXzUe+nEhwzGrjmUO2hN6G38YB6WuCawvr9Je6h
qZcmng6l/Ob19s+CY7tibcKwYoRixWR0fDbLOIar95Fy7foN6x8B70nY9pUz
Ho8cExQbFOPOlvmN6a0pRh+Ct4XM5+c7xnZm72Ux1+LyOfsqzKN43cn8CPNv
Isuumv3byD0L9S7eQwe/A9+oyL0h1dSjVYuoPwbcFxwxvdcK41KPVr3aeeD/
qZZt9FTCNifbU050TLlR0r0D9SDTgf+kHkKhbXiXYlvMtq6e1LEK54jKFdUT
e0a9WdYbZDlmt0i6B6BegHpkP8BfJjjqg6sr33Zji604k5XhGqoJ63fDz8p8
98zUO9Me7b2YHGwfdvM984eynJOdqu+Yodihb1p7pdi9LuFYrl5ZhWuHd5mv
TrqmVm19kLEn6Z6UelN6U70j9xzUe5jAeFL1Mjpune0acmKxe0rqLWVAs0rK
PWT1ktWTbMveVjHHFtXkqs2V4yvXV43dkrUq7K9f6Jim2LYhZVtSj/Vj4Hfh
9+U8vym9rb3weAhexyLDANlLiWtv7XmvwjFdsf0D9rzL3syke8fy2fLdzaB5
Js85snLlaknXgvp2CXAtxoU898jVKx/M/tJ890jVK72n3LX21+B7V7mM6h/o
3ceZCdDvF3NuoG9bkW1bZN94jPnOyDFTsVM2N7HEPVD1QmcrfgsucW9cMUOx
YxE4nwV3PWTMBfdAzrfMcM77WOQelnpZy9mzUbFEMS3PPSf1nlSjq1ZXj+0f
ceeEyg31H4H+K+jG/FxN95hXcV9DE8719cafUy83ZtrqwS1UfIksi3rs6rVf
F/N/AepBVYVeMvJ/C+I5BZxV4bcpHypfOrPEvVT1bGYBN4iZd+U4ynWuqnRv
VT0Q9UJWJW2rijmKPUca2rfpjRxt6BxTueZe9mxj78/F7vXrPxn9N/NOwnel
GNgfeaexf0ieez7q/axM+L8Yxey+5e7pqbennpV6V6pxVesqxzmecA2nWu4r
6H0B3DrlXEb/Kei/hccj9551R8P0ftXjSXOO2R/4dJHPKmY8Gf//GhF4F982
A9cscu9Lb0xv7anIb081oWrDTnHXJjvZv4n9f9HId4+rG2sbU44d+s/mM+DT
9V27qyeq3ugEvi0u8H9C+m9IOa5yXdnMGeW6Ddw7Uw3XJuUcSLnQ0+h/MPir
FrlXop76ZOCfLncvRz5RvvE/5a5VRGNiyj1C9QrVc5nOfb0BvkXg28Idvg58
qsiyK8fZot5B3LKpplBtsTXpu9WdZcb8H5n+K1MPrx3w3Jj/26sNverKDeKG
VSOqVlRMVmyWjv6nq2L/V7CW+TtJ5xTKLeSDgnLnpHNdxVzF3hFxv03l2JdA
q22p/1vTm2lT6p68evPKcXex/8akeynKoaez//64aamHr17+w3H7JsUkxaY2
CdcOqvGuV7876V6QbKafcq8K92pUA6sW7hJzLqAeunrp6smrN68elXpVi5Ou
VaXj14CvYX1ymmuas5z/e2Td6z+cJcCPxu1L1TN7oZF7wuoNK4c6Cm+3xNyL
1n+OI8EfUvb16um8EbfPk+9Tjj5R8RSaL+U75in2qQZTLaYYr1ivHp96fYp5
WcCPlNm2vub8qQrHIMUi+fgxcfdw1MtRjhiPuaZXbS8aL7N3XdK9Cv0HtD7p
mKjYqB5hB+b/BRLcnUs=
         "]]}]}}, {{}, 
     TagBox[
      TooltipBox[
       {GrayLevel[0], Opacity[0.4], LineBox[CompressedData["
1:eJwV0Lsuw3EYh/HXYOlFtCmVSLXKyl0YjQY2mhB12hgkzm31BtyBhU3ikDrW
IWpiNWkF0dnH8OTJ+30P+f3/6YmZsemuiBhHMhnRGIgopiJOchGH6YiLfEQ3
n/I5zjA5GJEy21+IeNJ7xGI2osUl/uAF3s2YxRR+ZZWeiIy9fXUvl9Vf8k31
Bp7dvXb/BnVc4RIJvT7zb972ijVzq1i3X+YKWvI2hsy9qwtc1f92f9v+Fpry
e/cecIsG7lCVD5vP+p4X802seP8nL3Gbl3nPjVnMoSOruT9qr6Ye+f8u9Y/8
QH3EO3zMef+ypJ/jef4DVNZEog==
         "]], LineBox[CompressedData["
1:eJwV1GtM12UUwPFTW17ByjetMrxwUVOjNq1FvehmrXyhs00tRRS5qJlumbZa
WiGSmHhbDf5gZVtogpe2apkoNkvTFyVqTZcaSGuRlUKBmvqiz+/F1+9znt95
zjm/5/fHoYWLJi+8ISIW++f+jIhLoyIuoxs9GGfv3OiIsfzfPRFXcQUdQyPe
zoqowCpU4g979+VGTJN73noq3yuuHByxEq3qVHAbL+Z3h0e8xO9xb736oOWu
iEXDIn5zPtfZiWq8pvYkPujcIRzAt/gGu+Q28wJ19vGLfIbP4jTKxUfUPYzv
sNdeE+arV5MT8QKnuGtkRCdG6PW1vP1oxiRzXMcD5npY/BCWO5/Ht/ItmKBG
uXON8o66m+3cwvP13pQZsc2MDZgnTjlXizqccvYk0pNZxNWY551LxCPst93t
3blL/Cp38q9qj5HztHWZnivQYG+gvRwz1ulXr9du+SX6fcmlXIY8OW9xL2dX
6FWGufaKxMPlHdSvXHyIcz1bYq/VswX2Blg/ZX1A/bwh+o9xF/wMF6tZ5Ruu
c4/rsRYbsQEd7jTbjDkYYM7j8tP5BPczbzXWmTdDj9mYhX2ezzXDfi7hZi7l
63K73Os5cSe38z+8mT/Czc7eKGcDTuq3Vt2r1hutr/EQz/fKq7LfxqPF473T
Ms/fFz8r/iCZLTtitfx35K3BV/aK9W/iObyHi7hHzgX9fxH/za18kVNcizT1
uge5a3kZyazeuT8f4zTO0jcThWqtcVdV2CNuQo9zFe60IPnNqFkpv69v0A/9
8YqcJ8yebp2G3dbj9BuEbPFscRYXcg7/hG5zvKHeg3Le5JnYZT+fP+ULetb6
vn/pd1q/P/kMp/SqweNqjXL2rL1G6xnObOd8LuBhPIsz+Tj+1e8E/5j8vSW/
7eT3hun6XVGjQ7+UfjPE5/X62d5NcnvhUXWq9XyMe4v7INPZsfrfjjtQ69vU
4U7nCj2bgyIMdm6mOy3Aanear8YWe1uxRZ2tKJZXglK8rv/39o7iBzwv/oSf
423cbs7G5F3RgJ3YgUfU/dD8n5v9C3yGGrPcZqal3r1dzqrk/wDfcaF5p1rX
25vGx3g5t/AyvmTOj9Xr4Xq+zFO4zsyb8Lu6L3ufpViCi8nfurqd/KTc8Vgp
Lscp/A/2/ACQ
         "]], LineBox[CompressedData["
1:eJwV0klLVmEYBuDHzGWlbkVNEoLU9k5ZqPmlliZEWQ5lBS0qF2qZQ4OIuTAH
EPysRe00hRbtSjf+BP+Egtqqdhl0vYuLm/ec59zvmcoGBrue50TEKq0lEWcq
IzLnI/JKI1rkSVl5MaKKrxURGxSaay+PKJDr1mtcKYuoMHPN/PuqiE9nI2bk
R3l0LuIXGTPVZlpkjbzjWINst74kr8vLqUPWyzZZK1tlnVw2/+9CxDF/WdA/
zzd7XE29NNJME2vcoCN1c5NO7ulrS/uSSf1pTzbSnsWe2fPksqo7y47+u+k6
btOd7p11BnjIAx7ziCf6++V9euijl0269J/WfYovuj+zq3/UuVeM8JIX6X3z
hre8Zop3DOmfkJOMMWw9LrPeT6HeAvLZ1/td/56cT7Pm5tI+8oOcNr8kJ6wX
U5985rs+5cj1hxww7viC87d825/6/uj7IX/LIrPV/oMT/pscsuZWqEn/gXWt
nJXb5rf4D0YXXVY=
         "]], LineBox[CompressedData["
1:eJwV02tolnUYx/Fr5pRYHtI5LXNHl1a6KWtLAtHNlVKhYPqsPFQeQiSYmVbE
Ap1DPGBmL1yZBzBDJMhXkpERBW5FC5qlzj1zczPPznlY0Jvp+jwvvvs91/X/
XYf7f9/LW75mfnVaRCT8+Twv4sFTEaNoxZMRs1CJkvERS56JWIxycabz+3z1
9PzkiJH0dWeL0D0uYir/TfqauAptPEn0qdmifhv6iyK20iv4Y1LEDf4E70J8
LT6EJdnm0xdQjlmoQBNqciIW8L6K+UiIv5JfrGYm3UNn0C/oVvvNoK12GOH3
OfooPVAQUW3uiPyII+p/n2AXNKHfrmeeiLjKew1XcAPX8ZjaS/QyLuJx8T/0
NH8XHS3upGNombsoxTI7voU3kSV/wfl/tJ12YKn8G+ixz7P8t+jf9jiNNOeB
o3ZcVxzxl9x0eoqeKOR1h91oFq9Vt/PpiE+wA9+q6VF7GzdxC91os2uVHr3q
EvRfeg8H3dNg59+rG0SP0xZ9z+JHs+7y3MEZ8Xqzkvp8Zs4ufMebruaQHkl3
Wi+3Gz/JZ8hnyQ2jw/EIhmII2uW79FnofSWwAIf1aFRXbrcG+qFZnTzp4l/F
3zg/RSvFzbTG+VXnD6fuR3zc+XJ9VmIFxppzz5xengye2zyF4kL5u36Pp3fo
A7kmtcXiAbkRRTSNbtO/T222585J3Ye7aME5HPOMz/Nl8n2k93vmndVjHV2P
Av58rJzoPfru09DP/xAdgCnqZoqL6d7U94gp/FPRnXq/6MFJc2bzzUFV6r1h
oDkVvpd0Wuv72Zj6vvQchbflWmiD72yn/KfYhRf5Z+M5+dHOy+gYetizt9LG
1P8IbUMS08T5tAA5yEMujvBn2KnUvi/b7yXUeYal8ifkyjDU+Vz1Q+g8Ooy+
Yq8i97RdPNKdb3BHmXQjvS/3A31HfNKuDWhEnbhVPola1GET+vl/pr/gT75m
5OrfIV7l/va6o334EtXyl+x9GR18FzBBbrW7mEi7xJ3Y7Px9fT+24zh9srFb
XCJexPcuf614nngT3W63A2btx2+8H4inOVtrZq9+/wOHVeS6
         "]]},
       "0.8`"],
      Annotation[#, 0.8, "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       {GrayLevel[0], Opacity[0.4], LineBox[CompressedData["
1:eJwV0klszVEUx/HTlqrQroxR9On4XjWmGBatBTqoIWKHRBCtmZWmwVJZWFBL
iaUgURINicRUEqHRlS5IaFHDQtLXgSZo1Octvvndc+45v3vu/f8T+05sP54V
EeP4WhjRvyjiI74lIq6URFxfENG2JKJP7qY4OxUx3159WUQDRuZHVMsN0yZ1
zdiPC/YSiyOKsJvHXjX39e2h92iC1++iiCxxoTgyHlURQ5inv5XfgHlyrR+V
RtxQ/3KhGc3xBR3iWxiwvs2/yLqDvi+P+IC5fObgjZ6TPMorIyrQxeuPc78n
I3rt9an9iH784JV2ZrZ1DrLwgOdgpkZtIb9++oSO83hM/9IR+5/k03QYQxjl
Ncbrmnvli5/zmU6f0byKiKmYgjIeI3pbzbjYfFXoMeNrPHSnUXtRHDHBr1v8
KvMOyHFumf4q+SSdLC6nk2gFLdCT4w3fqX2LWrkNWKF+I21EHRpQj9nqp6n/
rPYTmuWaUK3+MD2CAziEg0ioH1P3Cz+xzLkX5derv5w5R3yJLqftNKk+hRrx
Jneupqfcean7LsOQ+6aRg071d/HVW7X4f77RVd6uR+41VvMpN2uJ2mLs5DUs
/48+5T1Bu+gP37jU/q7MN7I/zuc0vzOo41eLYjXb+K3ht0XtZpxVn5bP9l8O
0kHfsMD/nI+t9jfJNWKmb5N091l0B4+r+gZpE5pxJ/MG5mjHWnesQbdzajOz
8yxFMQ45p4zm0hS/KfQn/zz6Qu8v66SZK5HCUXMcQdJ91utL0QPecp31MfkW
fZXWvc5vM8dK87Xx7ZQ/Lz6HGeL/xTagag==
         "]], LineBox[CompressedData["
1:eJwV0klvjWEchvEbGzsas3Q6RWlxmoi0bAUxJWiqlBLaKoKensPWgtaaRAgL
VtioGJIOpvANNDHUsEFCIlb9Bn5dXLne//Pc753zvM8p9JTaB2YluY3jNckP
jK9PJvCzKZmuT35x1iXPG5JybVK9Mpnt+XJLMoc3NiYXVicb6pI2ayXz37VJ
UbZK9reOJ/qe4Sn2y1WK3sFnuSl8QZ/sd/6Gr6gUkosya+TLXDZ/sP4RnzBX
/r3uuzon+R7vlb21QpdsXXNykuu5lxv4FBe4nzt1DsrWmE+Yq7mHa/mtvvvO
/Y6vrEqGMIyb8kvsH5RbzId4KXfycj7My7iLt+jvk19o7jAv4AO8iEf0Xtf/
mMt6K7ghu2fmG3pvm9yEM77AS+xz1jf8Gq+w3f4muSr5Vt5qHrU+hnH803VH
95BvchXD2CHbJNuMBzIPMc8d7dI9n7vd2xG0ztyr7CV3vlnmkTs+bX+33Bm+
Zn/E2jHZnZ6P8nn9AyjhLM7hj3MW/Z9GMeX3/AcDUFz8
         "]], 
        LineBox[{7800, 9330, 7801, 8895, 7996, 10806, 8582, 9846, 11267, 
         11268, 9234, 11709, 8437, 10725, 8438, 10726, 8053, 10820, 8589, 
         9853, 11288, 11289, 9326, 9856, 9855, 9854, 8590, 10821, 7987, 10799,
          8575, 9840, 11247, 11248, 9225, 11699, 8424, 10709, 8425, 10710, 
         8049, 10813, 8587, 9849, 11286, 11287, 9317, 9852, 9851, 9850, 8588, 
         10814, 7977, 8881, 7791, 9215, 9374, 8683}], LineBox[CompressedData["

1:eJwV00dsDnAYx/FHNYIUB62SqD1K2xDhQBDBwUEQEtRBYhyM2KsRJEjMg1Vc
7HngItqG2n2LIhSNRM22atSqcXGwPu/h2+f//P6/Z/zfvm/XmYsmLmwSEWn+
HO4c0aZbRGsM6BGxq1PEPedD9FZiGvrTd9IrnA/SE70jylDSM+Jur4g7uCGf
nxXRvl/Ededid+X0BK7J57nLdHfVucjdVfqVJPK57so7RmzsG3HSrANmPDSr
Mgm9nu8tavEGdXhAfy3W4CX22++VuFWPF+I++Xlz9op3zDit58/ciFPiEnss
xVBUuLvIV8j3XN1J97dpt3CB/oxWjZvyBfbcov9mbMIJ3io7PkaVfT7yfcIH
HNRvnf4Nztt5t+Gf+X9RqVep3gd43iffIr+Pxfqn63VW3998Z8Q/4hNatf47
9GjkP6Luq3hYbJoXkYoUFPEv0+Mpb4rZxfJqtU9RqHYPduMSvSV/Bv2K8wje
y+IL+Wu1qfIyeQd5Bl+5c1sxIaaLtfQ6PJBnyu+Lq819p7a52kp5sd1m2L1E
DG/7gs/4ru64HY7hKL7y9qBtUP9D/QlaO7676h75jB4j14w85CC6RPTM9l0z
5xHPYjOWIEtNR4xyl9FdD+TxDleTK+7TvwWyefqgRt9a1KHUzH60V/o1yD/i
ExL0FHGw+nP6vnH/S14vDuIfS6+gL7BLI22VPQowxN1a2mBxuvmNPN8wUj46
uSO69okYZ8fxWK/PGPlK3hUotedATOSbhHb+15koow1DPm1a8r20rOTvjzYa
s2iz0YvWG9lolhOxxowcn/Mcv61VPusC7PaO8d43Ifld5pssDrBzvnd09oYp
8qlYrt9KrEAzdf8BKZ+5/A==
         "]]},
       "0.6`"],
      Annotation[#, 0.6, "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       {GrayLevel[0], Opacity[0.4], LineBox[CompressedData["
1:eJwV1ElIlWEUxvETQYNtKpssGxyarGzTInDRsGhUyzIaNwlFExltWzRQ0BwV
USk0KBEWkTaYmmBG8zwbRAYtmkCzNppB9LuL/32+8zznvO/7vfdy04qKF2zs
EhH9fTxMjTidGXEGbWkRZfQsOkZEPEqX44Gep6MiBo+LeEYvj4x4Qh/jvuw+
TZE9oJdk9+hd3JM10kGy2/Si7BZtSOSym3SgrJ5WyOpoLXZkRWxHjedDwyLO
yw7SG+pt/Gp6QH2Ov59eV2/lX6P71OX8vbR+dETp8Igf4yNKaPHEiE3IwU3Z
FX179F01d1Jex6tFFX83/wr/BL+GdwOV/CpeJarVa4ZG9HI/x/V8tcd3fMMz
3lPv16TvPd7gHd7iCf8VfY0XOGqfl3SX8+/Eb/O/cCexp/2OyJ/Ly+zRx7q9
0SYvV7fQn2jFS/4ra8/yPBszUGp2ZiLjh3e+YCZZXyfvL9rxBx14w2/Sl+c5
H7k4lbgDM1PMVtHN3vedni7qq+oy+Tx9BZiPnhMiPlinWU9XPQ16Bqn78hsT
56e36FK9FWaX0OVYhgGyH3pbzCaZbdaXqh6KEvfSy300mnnkTh4jXX8G0tCi
t9uYiHXmHurZaL1i9DfTD1mJXnkmUtRDMBjT1f0yIrp7r2p7XMc4v/scex7j
9cAofaPx0Z7N+IRafdkJz15f1F/xDbf5k/if+e3qP+jEe36hM8y19hZnbFK3
6Pkna6WTzSyVTaWd6m6+7790mnoDfw7t7h2T+D3oXPUO/uyx7t1zAZJli2gh
NvEX0yVI4a+gy3GYv5IWIYO/mq7COf5aug7Z/A10gHOupw2yqmy/A+Q6dz7y
kOS/opAuQgEWYgFq3d1/XQDA2Q==
         "]], 
        LineBox[{7521, 7649, 12008, 12009, 10865, 10867, 10866, 8581, 10810, 
         10811, 10807, 10809, 10808, 7730, 11938, 11939, 10822, 8591, 10823, 
         8426, 10845, 8628, 9624, 11027, 11028, 7644, 12007, 8663, 10863, 
         8664, 10864, 8574, 10803, 8576, 10800, 10802, 10801, 7718, 11936, 
         11937, 10815, 10817, 10816, 8402, 10841, 10842, 9617, 9772, 12053, 
         7507, 7638, 11073, 9771}], LineBox[CompressedData["
1:eJwN0U9Mz3Ecx/F3k5J/zUhmSv+IfiqHwoZsxRxUB8PBysGZ/ljzZ/Pn4k/N
xfw96JKD2WxqNAemjA3FXIxWuahUzK1a5cLj8Nzr835/Xu/X5/P5fnOPNx5s
SIqIQfSvj2gpjRgujKikQ/Qq7d0QcY3ewNzGiFbahnrUYZDvXFbE2LqIVHUP
/+OCiD55k3kRE/htr1Nv3LorOyLPupOOmx3gW1sc8Y2eNj+mt4+O0jey/jpz
Hj/U553zS9a9oognMr6aGdF/KeuP7G69Z8iWl4UZe+9kvLCfbD2NKVyS0y7j
Pp7yj8iZMT+N1+pe9GBav1DOsk0Rn+Wkm12OxerLMmbd5aGMV7xL9Zbgk7MS
NDUnooim0K0yrvOXyE9Tb9FfRItpen7Ed/PDGEKG/gH9Mt5amqmupqtpDV3D
/5NvDKM4qXcCu/mbaDMaUMLfSPP45/nmMIsy/Vv6e/nv0m3q27Sc3qEJ/hRv
XYhkVOjv5+1w/w/e+h6p+nv0u/knvLeffkQfjnjrYTziz8FO32sXkvzDBZjh
qTc7RevoNK105kr/vIo26OVt9i7aJOe5jFJMOrdaTpp/ki5nBWr4alGNK/xH
zWfaP6VuVzfTNhmteCujAvUyjiHbfA5y8U92izd1mblpJl9GwrcqoM0yk6wD
F6xXuedF+oW3Q+4DVCW8AQPyD+GM/LMol70dO5Bh/z85J4pL
         "]], 
        LineBox[CompressedData["
1:eJwV0EsrxGEYhvFHOezsKczfqahZ8QHYsRLNZqbM1CiLWRgfYWRLrLC3Qqxs
FFN2Ng4RkZTDKCwdViQ/i6u75+563nqfpFiemKmLiDzeUxF3fRE1PGG+M6Kl
O6IVi10RC8i1RdxiOx2xgzPeBc6Rbo9o5Dah5q3lnohx7iXqdce6KXkiG2Sp
N+LXm1Vz1X6FP4dT/rd+Xz/JO5A/5mn+l9wyr/PL3Fkc8T/0G/osf1N+mov8
N7lmXuLnuQUc8l/0K/ox/qp8NRf4NVkxl/kj3FHs8e/1DxhK3EY+otl/s3Zy
GOA997sBdxdX/y5KbjQsb3CNjJt2eDuFxM4g/gAqYERW
         "]]},
       "0.4`"],
      Annotation[#, 0.4, "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       {GrayLevel[0], Opacity[0.4], LineBox[CompressedData["
1:eJwV0ktIVVEYxfHPICiL0Cwyy2vlq8zMBlqT7EFBg9QSrEGDHjZOUXsISaNq
0qwgez9mBQUF1aRAMqhBLx1kCjUpswsFEeTrKvQ7gz/rfGuvvfY+596VR1qb
jmVFxBv8Wh4xXRZRsjZihvaWRjxORWQ891RE3C+JGC6KSJdHLFsVcbc44pH1
tOc7nm+juzCiwDwkNyL3mY7S37w/+m/omW1+YV+f/ud0wvxdbox+o0WyKUyb
R8yTNIMpjPEn9OR4rnDPXPpazys9Oautyy+g/2i5bBkWmcfNuTQPC5HlrjN6
lthfpSefftDzTs9669WoQvaKiA3rIi54r4fu/gBvfYd5iW99IDlX11feF+Tz
G/k1zm2iBeY9dCndm6jsT7lR/EAHrx118ifpKXTiBI6jWD7P2RnZKfTwLmOn
/DV6HVewUf9VWimf7T3mYg628p/wd8k/o9vNT+m25P7JXdz/o7nB/J7W0/3e
954zh73rEBbrGbDWj7/ys/wf6nyvzZjk7dBTLV8rV4NWHSVrIpqduQ9pHZv4
bfxSfrbfIkdHg/31aOQd0LFFx2G5Q7gp28Fvsf8oxnW08G/xO/mFyf9ER4oe
1HGJdxHtes7JnUUHXsq32d+vezfO887IVNo33/fsstZn36BcL/1Eu/TVWq/V
3+35NAat/QfnU4EZ
         "]], LineBox[CompressedData["
1:eJwV0L8rxGEcB/CPkQwmy7njTgp1EpMocbhVFAZSBkLOZjOwCHds/Bcyyc+y
GZRSRk7YmRRXyuuGV++e53k/z+fbN72wPlGoiYhF5pMRr5xlIz5bIp47Ir5k
WfY1R+y3Rrxb31t/yCe5mYl4lG/WxbaII47p6ozIcunsilNuuGbDnXN5wYHu
IePmdur/mVFgnQq/pM0uVbsUdCt6Of07ir61xI6zPXZJ6K9Vu8zpf+v3696y
pbvNkrMVlmnQL5vzyjRTDOjWuzfifJQcecaY9f1Dcphu7+fp1a/Vr6PJfqr6
vn/SKFdlUk66l6jOtE6508OgWT8p/7s9YsZ+xt6LN8qcePPB+T+6tUOz
         "]], 
        LineBox[CompressedData["
1:eJwV1ElsTlEYh/HXwhQsTIloVUtbUa2ipWYLG9oFKiFIEFNr7MrSPC1MRVlY
0FlbnUwLFhQJCZVYEVMsTBEsSDURit+3eL7/fZ/3nHvPd87NTVtXVryjV0Sk
+FmSEnEmLaI4N6JClqN2YkQ96pCTHpGNPON+TIj4jnP8WeRnRUzKjMhFDrJG
R5SOi+htTIY6HWMS8Gv5v8YnqUdiBJL5ZXw3P1w9DEMS8Iv4b/xA9QD0Rx9+
If+J76fui974ZW3z+Ld8qP9lRPTgK1/AP+O71T/RhTxuCpJGRVTiA/ceOVw2
BnPn8Zp7hQwuHX24CrzkXiCNS0UvrhzTcyJmoABDUyMGjbV+jFdvy47Yjs3Y
ii1I5UtkKTaiw3o3yTeJ/ZLX1avlNblGPubnO6dOmZnYYzToLU/MSbbP6jSk
YilXjNf8Tmu7aU4/z7sln4+xJ2hzPdf92uVoc1JQZE4hnppXZl6jXpe6Gz9x
3vMquR7n/8iYbcZ84edgLka5x1dZZcxfYx4b0+lZT1DB/ebucCXmvTNuInKR
ZN57+QFnjZskD3pWMv/R9Tnuj7kd5k5RH9KbLA/LPHmXnyqPqPNlAabhHj9D
zsR0zMYs3OcfWNNDHHXvXd6R3bjNr7e2i861yrtUjQvOulK9wl5t0KtyXcPX
4qJetXql3ka9Gtd1fD0q9WrVq/Q26dW5vsQ3oEqvPlHjmOc3crusvZpv4Bpx
nG/id/O1fBN3GSf4y/wevp5v5lpwkm/m9/INfCvXhnK+hd/HN/Ht3BWc4lv5
/Xwzf5W7htN8G3+Ab+WvJ9biP9yQZ/SeeY+eY7GzWYLP/luKb0QuWpxRK5px
2rekTbZjgb0txEIU4T8iProR
         "]], 
        LineBox[{7803, 9333, 7804, 8901, 7997, 8898, 7802, 9235, 8713, 8714, 
         8058, 8885, 7795, 9327, 7796, 8886, 7988, 8884, 7794, 9227, 8708}]},
       "0.2`"],
      Annotation[#, 0.2, "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       {GrayLevel[0], Opacity[0.4], 
        LineBox[{7522, 7650, 8896, 8897, 8583, 8900, 12112, 8899, 7740, 8887, 
         12113, 8888, 8439, 8709, 7515, 7645, 8883}], LineBox[CompressedData["

1:eJwV0s9LlFEUxvGTLRuIoMapxtJSmwoJtJ8UtEqoTU5lq1BwE22KiLK0zBa1
6w9oU9BMvxfmot8mCE0bQRcWRArRpswgjSBHa6zPLL487zn3Oc99733fmo5T
h04uiogCJtZGdG6J+L4hoplO0Td1Ef/qIxYwqe6psp6OuLEpor82YtzMzLqI
aTxTP8UTRMYcf43+nfURg2sifnj+wp9X98qpVk+qZ/m+0hIt6s3JH5Ix6/mt
uRx/gSZlVmIFivyZhoircjJ88+ql+nM0RRebWZAzKqfC86j5e3SENlnfikY0
yWjEdTmPnakPI2YS1RHbrI/xLzP3SW8Yq/UP62+351FapT5C07SVruJNyJri
/YYuvQvYy99DL6Mbl3ARtfzL+Uu8f3FL7yaay/dG7+I28sihgT/Nn/BdluCF
3nPs539NB/ESA3hVPiN/iq8SSRz0nmP6B/jf0ax6lLbQnby/nLeoblf/pm20
3f30le8Zn91PvZw/1uZR4v9Yvmu6j05gHFm0lPfDDlyT02bPARkzMqaR1c9u
5EPKd5s2s5Ieoz8xg+M4x3cWHeiXc0LOsJzz6k6c4akzV+H+Tlt7KO8R7qPA
/4D28lzBe/WQOu9MOXyQ04ou/143dvnPd2MPkpsj/gNlW4jU
         "]], 
        LineBox[CompressedData["
1:eJwVzzsrxmEYgPGblU1yKGdyHiRGDLJJKYOwUHgdXh/AqUyOE7Z3YUAhySB8
A+fBJEUxOZTN6vcOV1f3/b96nv9TNjzTm8yIiAR+SyOeayPe8Iql8oi8yoh8
rFZErKC/SIPDxogjXOvucYemkohzvnXORlVEVn1ENp70qXRrf+L7DZ9ytX7W
mZfmlPmKdznp3h2+ME84ZwGLmNau2e/bz/EBr/O4fpn3zP26qXSLEf2k/Zb9
EG/zFA/rx3nT3KkbwCD69O32C/bNvMgdPKBv43lzg64L3dpM/1+Yvt++ye69
LuIDZ96b8N5R+1zfx7iA/4ojPmsivlCif9FWaY9x57wWtOIRD+hx77f2Bzn6
UvwDar9GDA==
         "]]},
       "0"],
      Annotation[#, 0, "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       {GrayLevel[0], Opacity[0.4], LineBox[CompressedData["
1:eJwV0ktI1FEUx/EjlL1wExRo5WjljFOUSJDZylq0iSCksoJe4iKCDCO3paUS
LVr2ose4yYlILIKSgqCZqTaBWaRmhZsWPTZtivJRHxdffvec87u/e/93prL5
RGNrUUQ8xc/lEQtSEem1EQtpoSriWXnEfOvMmoiB1RHfEhGJdRFF1RGvzOeZ
FWMGnSsibvHdxCDvV97JlRF/8UJdQB5l9pYirX93VcRLZ/yxvmOdRY+crIw+
5Pgn5RTrz8Vb9TDeYJOMOtTYO2A2JGcO7cc9XJTzQMZ9DPGXVERs5H/Ht9h8
Qu81yvWbZrPk7KcV6r00QffRZbwlsn7wfkenXgca+LtpD86iC+eQ4l/KX0WT
GMRjjDo3Y96LG9jqHbfgOu8SPHHPGflZsz5M8Ofsy6MG61HABlTyl3n/Uozw
vsd29/lEP+MDPmIc9fxpvmqkcNh3Tenv5J+mzerf9AjdxvvPual0xEl1krbR
Nvd85Mxa1Mto5Fvkd/lCD8nZw9eEXTjPv5seMDuIXnW7OkMvyMnLaECLnKPm
CTm/6DE5V/iu4hIe8l+mp8zaZ99BfVudo9fkDMvYgeP+e62oTXob5HnGeJ7T
UXrarM4Zm806rM9gzOw/EWp78Q==
         "]], LineBox[CompressedData["
1:eJwVkL1LwlEUhl+pqUVCoQhM+1AqMyGiXKyWShwcHCxEQgpaglpqKI2CKEQb
KmhqKKL+ActocyuHqEWnQCPCCnWpiNp6HB5ez7nPOb977ZhbDi4ZJK3BrEXy
OaUpmIQrl1S1SRmyRj71Sh6rlOiSStQ56mfykYx3SvdkkTppl46giR0z7NzG
v+TM6mYnmYZryMAqcw3dkoO963gbzPmZeYAx5sfhGO8UTsCGt0PuwiLub5/0
B7f4Ke55zvdjnF2Qm2Qb/gJ5SB3G/8L9hiz+Fv4+/QjnB2SUNOJ76++hnsCv
4FbhBn8FP0Z/kPMRGAYDvok0gwu/0SG94Hu4t5OZNOR51zxv34MUeKmT5E+7
VOB3kP+ghflWGGCHG/qZG+XsrUd6h1eY5tsfZAC/TIaom3EtMIRbYd8dfT99
M73P+nshz30KcMbcP1bkUXE=
         "]], 
        LineBox[{7741, 9334, 7742, 9848, 9847, 9861, 9860, 7765, 9858, 9859, 
         9857, 11292, 7764, 9245, 9354}]},
       RowBox[{"-", "0.2`"}]],
      Annotation[#, -0.2, "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       {GrayLevel[0], Opacity[0.4], LineBox[CompressedData["
1:eJwV0UtIVFEYB/DPpZCPXLSr1MxyhqkIR01n5WMhuGk0JqQHTYYKoqtZiG+b
RenKtShIQRjo1jZFq3LAXSsXLt1ILSqoiB7+ZvHjO+c7/3PvOfc25KeykxUR
sULhQsRsU8RaQ8S7xoi3XDM/x/9kxD8KzRFF6xXWcucjDunV7+NjS8TrVMRR
fUTJ+MbFiF21ZL56OaLF3gSVsj/0Kz3np7puz77MjvEzuedMX7LGnv60979R
f5l/l/nGBpvMyM7S7xwT1pf0llmkyFNGnXVOnWdMdpxu+bx8Xu8xj3jCSHks
/0B9SE72Lp3yQ/K39DrpIEMXw/Ktappu2R5uyg/I1+jVUk0dZ/nMF7bdv6p8
Pvcf44xxwt4kGXsPGHLvPve/o55Y/6v+sd7uG7Zxz76s3n11UD2+Kuc/flD7
zetkv/Ip4YzyaV4525Yz56/7TiyQcpbb/k2WQUrefcV7X8i9pMOz3uv9ljsF
jRpWsw==
         "]], LineBox[{8071, 9117, 7651, 9629, 9628}], 
        LineBox[CompressedData["
1:eJwV0ktIVGEYxvHXS1iRE9iiRY7ljJUXpAginZEgitrUwmmRUTkStKhFdsOx
TUEtptoEQdCFNm7C0QhyUZRSGWhCmyLDli3LLvsw7HcWf57zvt/zPd97vnOa
Tw4WzlZFxCssbozIZiIyWNEa8VNdTWtRg/H2iL+NEfXbIlLo6IhYtzVibnPE
+6aIBs9jPC9aIv7Zu8Gedlm71F1Jz/MSKtmIcpryjmLW2hL/av1V+KKexzTy
MnLYbl9e3YOVPHV4ittyls00IeeztdSmiG7+efOcoBn1Mdqc9GV0YUDdou6n
WVqkTbLWyvoj4zdu6d3EHv5Ja1NIoxEvcY83hefO/cV/g7eMr86t0DGMYl9n
xF484l2PSf5l/ifJfeIb/xv6Fq9xiPcgRnjTmOOvd7/vrE3jO/9Cck7yjjjK
24cKbwY5s+XxCR/Ra/7aNt8TVahBNQ5Y65GbRw4X3UOr/hH+Pvxw7m79S/pt
+mt8n8O0rC7QYWeWMOXMbhTlXfNPDNCC9+vFKTnDvJcxhBF7S/Q0zxlMqO+q
n9E7sj7I2Y8ha9dllWhRTj8uyBrnneV9TGfooP+t01w7tkSc93wOM9Z2mv24
nAfmv49F3gX9KzKu4qHef7fKc6k=
         "]]},
       RowBox[{"-", "0.4`"}]],
      Annotation[#, -0.4, "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       {GrayLevel[0], Opacity[0.4], LineBox[CompressedData["
1:eJwV0slvzGEYwPFHlGtbiYR0melU9zbCRZQpamlLgi4a26FTB0uLxHLotDjg
IOhB68DBRdRB0AsRDSe9cHKtg+0f0CXSiVCfOXzz/J73eZ7vu8xU9J/vOrcs
Ij7jT2lEriIigY7qiL3Yh4nKiN9lEWW1EeUoxb9ERGMqogEp+ZI8IVYgiYJ6
QjPzTRELWC5P8javi9iMwYaIAaT1FiUjtoqF4ka+DdghL5a3iNuxDSs5CjgX
+XJYIU9xtvCl8VftLGe/3mqzGbFK3KL3nlozb638uPUa8US+z/y82TnMYtTa
XbTqvSq/hqT7JzCFBzxFeGPvX2p39N7GTHnES3ESL7DHnrvxSO8avMu/R1XE
Ie/ZgyvO2bY+YkSc1j/qe5czffC9U9xv9rG5T+Y+4oC8C504iMMc7WZumL+J
b+a+4yuOqR/FM/OV+GK+xN4/1X5gwVmXxKjzO4oZvX2Y1FuHdvfswLj7jeGI
t2jU24R6XHa+BrHV23XzdiGNW9b79L7nmLPnLIZ4RzCMbH4f585grTN0c/eg
k6dI7yoU4zlHidjGk+Udwivuh/YcUBtEuPMY32vr98VxnMz/X73JKfE0+rgz
OMNfw1eHWkzm7yP28o9zj2GGZ5o/qzaMQv4nnE8xgYt8F7DJuVdz5tQXccna
df4pM2/xH6X/e8E=
         "]], LineBox[CompressedData["
1:eJwV0klI1GEYx/FHDLQCZ2i5JGq2UpnVoXMFIUFYoBVWp2rGUdLs6HKpS4tr
EeRSo0KRnSqhS4c2CDK1wKXuZpfO2eqlzxy+fOd53t//meed/5Sfb6m5lBcR
z3GhNGJ0U8Ti1og3lRFv8RKv8SpXb46okunaHtGNTqTKIpLyCRShf1vEXXzf
EfFefgKJ8oj53RGfUbgzogAJ8x6VRJRhVj2De3pDyOI+rm6JeOzZLI/xFc73
/bfsuF99c5cd0IXDzm7wdVzDO+dfzKiW/cifMIlpTOEHjpjV73xJ9oN6Aj2e
7UaDe72oiFh2NukOGdkx2VCvdrf0xoiVnOJVfFTmkPsfxAG06lfq58nv43b1
Hm7jvVwrf0ruJE6gR79OP1/+LPepT3Mvn+FzuR3k6pHGA/12/RXyT+zVbL86
v0ET3/FeWuyf8h7SGHavEaxzn/U4JtMqW81r1Wvw0/kSms2a43FzZ/gZz/I3
HnQ2gIeefaq+7XOJGQ3Om9SZ3PPcyBf5Ky9iAfPqOe/6OP7Zexl/kdRPmpfA
H/WIfUeRxWWzh7nNXQbcaQiDqNXvkK/hYrtvwG/f8Sv3n7FTIQrwHwI+drk=

         "]]},
       RowBox[{"-", "0.6`"}]],
      Annotation[#, -0.6, "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       {GrayLevel[0], Opacity[0.4], LineBox[CompressedData["
1:eJwV0zdMllEUxvGDiwUltlhoihgxgIBttGBFMWhE4yCJRpTBAgYVUCMsgLHE
2HGwYYsOFkCdnCwQC0pi4iLGxcKscff3Dv8895z7vM899/3eL2dH3cbalIj4
i/SsiHOFEedxFqXTIrppNe2iO2jbjIhWjCqKKMiJOFgQcQgNWDozIiU74oB1
QV7EoHU+/UpH84/BEXtHMUyvlP+wdRMaUSgvlWe5c87mRgzkR3xC2fSIyjkR
q+kE+xMxFuMxDiW8X8z30/zr5JRjmYxnes9xxgxPaQ/u8nyU2Y8PuOfMlzJW
ye6V0+LZZpTop+m3u+sC65nFESPMvNzMw2mu+pX+Ovu9fH14hTd4jfeyRvJd
dOZKs1ygK+gu96jBTlQ78zPfKL7zzjyHdM9OxT+9LJqNS/qXMVqvzPmpSa76
AjLtZyTzyz4gs1FmPW2g32Rf57mGq1hk3lm8wTubLlHf0r+NO1gju5PexA0s
tp/Ht5q/WWYLjuG07N+yJ5njCd9jzE1+B6TxLqAL0aP/FFP4KmRPpt3qLsy3
Pw9r+Tu8m3J6hWbwbOFNp7O8449mqPGOH9FN6of0j7Mz7eepK9XH7W+Wtd36
g+x+VMnYpq71Gw/Qfcm3RL/z9fsGyjCMLwUd7nQZFWaoUK/HkP0+8zQ5a59n
arEX+1GX1LL2JDXdnfRoB+8GGQ9kDXpH9+lXOsYsheb9KfcH2uS2ooi3nRbT
et9olRm3Io1/iO83fiX/D9mnnHHCPU+ikf9tMht9RzfRG7QTN/GC5z+j2JN1

         "]], LineBox[CompressedData["
1:eJwV0tdvT2Ecx/GvxIxIUCQS61ctWrQxY5eIC01/JS0itrqiUjNxayS0NWoL
2kqMKyOxZ1olYidmRIIIwl9gU17n4n0+z/N9Pt/xnHNSZStKKlpERDeP+T0j
3mF9ZsTrVMSvgRG/8QersiJG9Yr4a72pf0Rp74j6QREltJbWYUtexGZ84PmI
ZXLKsU6tSvFqVGFj34gDagxULyc/Yr91Rb+ItWqF3sVmWEvX4D3/c/lP1XuG
lJwyNTPpBnkbcVjvQ0jLP0jn8ZfIe8D/EHP452KBeKn4fDqDlptjl/zd2Ika
LDFHhTrNPJPMcQePrB9jlhozcVvNW2hCSeJTK229T+/9OGV9El3MmObvSs/Y
n0Y+bx466DFZbrb7Zzj/bJbqPhGF9lvp7mQ2vOW9x/eG3qfv6F36EDN5H9BC
vrG02H4cHYMsvtFJfZrrDmdRNtj90Donoi3a4It4gTtPRI9s3xuz1ckSP4Um
NW5hCIYh7Wwo/ewsjxbZ59MpZj5BO9n3cnYcQ913GPaovQ978Ul8PJ2AFno1
5EZ0FzuCRvfIUaNlMjNtS9uhFdqgNQbwLJNTjqW4ybecHqM3nB+njUkcTdjB
X4P+4imz/Uvu65uEd55pP0D8VfJfey/NWGXe1Wjma5BXILbDN63BVPFC/BLr
K6/CegVW4gLvRRwV76huK/l7knv5h3vaL8QCLPbdi919Gqajyj9XiQy5f9TN
kv+bZtPLYpeSd+LdjhPLpePpRDW2mmc7tuFH8n35rrr/NVzBEfnX6Qvv+CXq
zFGPRXKL9E3jp7wtereX+03d7/iKlNzzYufQWc/hYiMxAhPkV+lZQKvp9+Q/
4bus12F5l2gtfaJnpbNaPf8DNq+wCA==
         "]]},
       RowBox[{"-", "0.8`"}]],
      Annotation[#, -0.8, "Tooltip"]& ], {}, {}, {}}}],
  AspectRatio->1,
  Frame->True,
  PlotRange->
   NCache[{{0, Pi}, {0, Pi}}, {{0, 3.141592653589793}, {
     0, 3.141592653589793}}],
  PlotRangeClipping->True,
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02]}]], "Output",
 CellTags->"Cell 9.83"]
}, Open  ]],

Cell[TextData[{
 "We have used an option in this plot, ",
 StyleBox["PlotPoints",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 Cell[BoxData[
  FormBox[
   RowBox[{" ", 
    RowBox[{"\[Rule]", " "}]}], TraditionalForm]]],
 StyleBox["25",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ", in order to increase the initial number of points where the function has \
been sampled to a 25-by-25 grid (the default is 15-by-15).  For functions \
with rapid variation, this helps reduce errors in placement of the contours. \
"
}], "Text"],

Cell[TextData[{
 "\tIn this relatively basic version of a contour plot, the ",
 StyleBox["z",
  FontSlant->"Italic"],
 "-values of each contour are evenly spaced, but the spacing is determined \
automatically. To set the ",
 StyleBox["z",
  FontSlant->"Italic"],
 "-values by hand, use the ",
 StyleBox["Contours",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " option, as in ",
 StyleBox["Contours",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Rule]", " "}], TraditionalForm]]],
 StyleBox["{-0.9,-0.5,0,0.5,0.9}. ",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 "This list gives the ",
 StyleBox["z",
  FontSlant->"Italic"],
 "-values where contours will be drawn. Alternatively, if one just wants to \
increase or decrease the number of contours, one can use ",
 StyleBox["Contours",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Rule]", " "}], TraditionalForm]]],
 StyleBox["30",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ", which will now draw 30 evenly spaced contours."
}], "Text",
 CellChangeTimes->{{3.446418626374799*^9, 3.446418642461792*^9}, {
  3.446418699471815*^9, 3.446418725139793*^9}, {3.446419148150206*^9, 
  3.446419236610854*^9}, {3.4464192784704447`*^9, 3.4464193437670794`*^9}, {
  3.446505733238728*^9, 3.4465057667013493`*^9}, {3.448631626256221*^9, 
  3.448631635112084*^9}}],

Cell[TextData[{
 "\t By default, labels for contours have been added to this plot as \
\"tooltips\".  By placing your mouse over a contour, the contour height is \
then displayed. (Tooltips are a method for displaying information when the \
mouse passes over an object. See the ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " documentation for more information.) Labels for the contours can be \
permanently added to the plot using the option ",
 StyleBox["ContourLabels",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " \[Rule] ",
 StyleBox["True",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 "."
}], "Text",
 CellChangeTimes->{{3.446418626374799*^9, 3.446418642461792*^9}, {
  3.446418699471815*^9, 3.446418725139793*^9}, {3.446419148150206*^9, 
  3.446419236610854*^9}, {3.4464192784704447`*^9, 3.4464193437670794`*^9}, {
  3.446505733238728*^9, 3.4465057914341393`*^9}, {3.4465900097422132`*^9, 
  3.446590016470771*^9}, {3.4465902547185926`*^9, 3.446590262623177*^9}, {
  3.4486437995310593`*^9, 3.448643847183455*^9}}],

Cell[TextData[Cell[BoxData[GridBox[{
   {
    RowBox[{
     StyleBox[
      RowBox[{
      "Table", "9.13", "  ", "Two", " ", "Ways", " ", "to", " ", "Plot", " ", 
       "Functions", " ", "of", " ", "Two", " ", "Variables"}],
      FontSize->9], "\[IndentingNewLine]"}]},
   {GridBox[{
      {
       RowBox[{
        StyleBox["Plot",
         FontWeight->"Bold"], 
        StyleBox["[",
         FontWeight->"Bold"], 
        StyleBox[
         RowBox[{
          StyleBox["f",
           FontSlant->"Italic"], 
          StyleBox[",",
           FontSlant->"Italic"], 
          RowBox[{"{", 
           StyleBox[
            RowBox[{"x", ",", "xmin", ",", "xmax"}],
            FontSlant->"Italic"], "}"}], ",", 
          RowBox[{"{", 
           StyleBox[
            RowBox[{"y", ",", "ymin", ",", "ymax"}],
            FontSlant->"Italic"], "}"}]}],
         FontFamily->"Times"], 
        StyleBox["]",
         FontWeight->"Bold"]}], 
       RowBox[{
        StyleBox[
         RowBox[{"Create", " ", "a", " ", "surface", " ", "plot", " ", 
          StyleBox[
           RowBox[{"of", 
            StyleBox["f",
             FontSlant->"Italic"]}]], 
          StyleBox[" ",
           FontSlant->"Italic"], "as", " ", "a", " ", "function", " ", "of", 
          " ", 
          StyleBox["x",
           FontSlant->"Italic"], 
          StyleBox[" ",
           FontSlant->"Italic"], "and", " ", 
          StyleBox["y",
           FontSlant->"Italic"], 
          StyleBox[" ",
           FontSlant->"Italic"], "in", " ", "the", " ", "ranges"}],
         FontFamily->"Times"], "\[IndentingNewLine]", 
        StyleBox[" ",
         FontFamily->"Times"], 
        StyleBox[
         RowBox[{
          RowBox[{
           StyleBox["xmin",
            FontSlant->"Italic"], 
           StyleBox[" ",
            FontSlant->"Italic"], "to", " ", 
           StyleBox["xmax",
            FontSlant->"Italic"], 
           StyleBox[" ",
            FontSlant->"Italic"], "and", " ", 
           StyleBox["ymin",
            FontSlant->"Italic"], 
           StyleBox[" ",
            FontSlant->"Italic"], "to", " ", 
           StyleBox["ymax",
            FontSlant->"Italic"]}], 
          StyleBox[",",
           FontSlant->"Italic"], 
          StyleBox[" ",
           FontSlant->"Italic"], "respectively"}],
         FontFamily->"Times"], "\[IndentingNewLine]"}]},
      {
       RowBox[{
        StyleBox["ContourPlot",
         FontWeight->"Bold"], 
        StyleBox["[",
         FontWeight->"Bold"], 
        StyleBox[
         RowBox[{
          StyleBox["f",
           FontSlant->"Italic"], 
          StyleBox[",",
           FontSlant->"Italic"], 
          RowBox[{"{", 
           StyleBox[
            RowBox[{"x", ",", "xmin", ",", "xmax"}],
            FontSlant->"Italic"], "}"}], ",", 
          RowBox[{"{", 
           StyleBox[
            RowBox[{"y", ",", "ymin", ",", "ymax"}],
            FontSlant->"Italic"], "}"}]}],
         FontFamily->"Times"], 
        StyleBox["]",
         FontWeight->"Bold"]}], 
       StyleBox[
        RowBox[{
        "Create", " ", "a", " ", "contour", " ", "plot", " ", "of", " ", 
         StyleBox["f",
          FontSlant->"Italic"], 
         StyleBox[" ",
          FontSlant->"Italic"], "as", " ", "a", " ", "function", " ", "of", 
         " ", 
         StyleBox["x",
          FontSlant->"Italic"], 
         StyleBox[" ",
          FontSlant->"Italic"], "and", " ", 
         StyleBox["y",
          FontSlant->"Italic"], " "}],
        FontFamily->"Times"]}
     },
     AllowScriptLevelChange->True,
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]}
  }]]]], "Text",
 CellFrame->True,
 Background->GrayLevel[0.849989]]
}, Closed]],

Cell[CellGroupData[{

Cell["9.6.7 Animations", "Subsubtitle",
 CellTags->{"i:56", "c:33"}],

Cell[TextData[{
 "\tThere are several ways to make animations. For instance, you can create a \
sequence of plots of ",
 Cell[BoxData[
  FormBox[
   RowBox[{"sin", " ", "k", " ", "x"}], TraditionalForm]]],
 " for different values of ",
 Cell[BoxData[
  FormBox["k", TraditionalForm]]],
 " using the ",
 StyleBox["Table ",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 "command shown in Cell ",
 ButtonBox["9.84",
  BaseStyle->"Hyperlink",
  ButtonData:>"Cell 9.84"],
 ". "
}], "Text",
 CellChangeTimes->{{3.446420876847906*^9, 3.446420893984315*^9}, {
  3.446505822043549*^9, 3.446505824483486*^9}, {3.4465157339851503`*^9, 
  3.446515739657148*^9}, {3.4465904672055473`*^9, 3.446590467664514*^9}, {
  3.5569959752252693`*^9, 3.5569959762678947`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"plottable", "=", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"Plot", "[", 
     RowBox[{
      RowBox[{"Sin", "[", 
       RowBox[{"k", " ", "x"}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"x", ",", "0", ",", "10"}], "}"}], ",", 
      RowBox[{"PlotRange", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "1"}], ",", "1"}], "}"}]}]}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"k", ",", ".2", ",", "2", ",", ".2"}], "}"}]}], "]"}]}]], "Input",\

 ShowCellTags->True,
 CellChangeTimes->{{3.446420906572982*^9, 3.446420911343514*^9}},
 CellTags->"Cell 9.84"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   GraphicsBox[{{}, {}, 
     {Hue[0.67, 0.6, 0.6], LineBox[CompressedData["
1:eJwV13s8FF0YB/CVUi6FUsLuzqwVwruiFIrzpFJUKqKQQokiIl6SEkKS3K+J
hJCUcikqhJJEySWJ5FZua2jJJeU971/z+f5z5swzZ57fMyxbF2O7BTQabRkf
jfb/9dYlWwG1E6G6BnYDjRWDdrrVTeSeQ+Qp9Pgez6JLajuaf10WQJLnUbw9
bVeB1EF0qyKMWESGoED9C9bJUieQk47HmSkiESXr3nAPk3JHTb8dYsaIHDTS
N83wkrqCFn/pUeASJehw3NUxDakYlPY21XWYqEWX0rpaNq7OQA8ehnxx4rSj
HxZDryeHC5E9akwccetFrddb2+8LlSPn/rW9hQ8G0crVdC0Nj2okxLqi0KU5
hh6EN8zJ19SiG2J1SmnWPGTZ+bY1taAB2X45WM7/7hcqUS7z7P7TiFxfXbF1
UZhFbNX18q5hzejRWRGT1QZ/UIXZpYJbA60o7YLj0LpDNKh96Bd70ekz8k+d
OzAxwgc++4pFBZ59QbSmb/Dcmx9k9T77kbxOJO9+0uug0iJI8rvvu0HhG+qb
jDcTfiEAWy/ke4lodyPD/tMXo1yXQOagbysc6UFGfRHKTKYQzO3ret52thcN
VdlefpMnDJq3T8VPnO5DHPFWxrZjS0FLqd5po2s/EkKTNh28ZXAAAhpZVt/R
Tq7FlKypGAz2RHNyjX+gtsoTfBYq4qAopuopqTWAiq5WHyUnxeFrr98RVYFB
dHKRx7eGhuXw6EmJ+KnPg+i424UikaQVEOnWXN8SPYRU7ZUb9thIQLn2s69q
MIzeL1cR9tBaCcWbeWla1DB69sD/pgr/KnhwdTp/efAIusCntP9d5yrwcp4P
+MTkIqEO713OhZJgbbh4cepdLuq/y4pJ9VkNG/d6pyGpURSjKLWwxFQKeIN/
1+hcHUURSSdrbEhpMB3/G6rcO4o8//U/58OWBmdebohn3yg6apxCxMtLwxG1
ljeV/aNIRajV852KNEh4+wgfGhhFted3KG7Skgb/cZT2L3cULTCXCxExlobD
xJPFUVOjyEOyx/BJgDR4r9C5piVMIYsYqwaRH9JwjOZdZbCOQvQCIRnHIWmQ
cT0meEmNQl2NT+xrudIQHVnl9EidQidEl/MFTUjD+OL+0JUaFHK+9nr9PJ8M
DOokKTVpUcj/smriOF0GxgOMetjbKJTjxHei1VgGZOc1aDKmFJrenjmTWiYD
jXp9Gkf/pZDPs9SA6pcyYL6XqNvlSSGaetLSwWoZcPhxLlHdi0KLiXCWep0M
HHxi3M3vTaFVM14G1Z9kQNdMn3HrIoXW5+1JHBiTgXLO8q33ruD9rJzQVGPT
occ+XVw1ikI/Q0crTeXpkKsE5bRoCnksGNzjvZYOsfo7MxuxfahO6ypVOrSO
+Eq7xlIotLbmqukWOhg/F865m0Ch7Is3286b0mF9F9t4JIVCvf16XpXBdKDN
iDzuvkchvdSGO0qhdBAXCf2Wk0uh24ct6qNu0GF14Su2630KHa1zlT0eS4cl
OeYDc3kUas+//Y4/nQ4xo5anBB9R6OOFv+SOMjqsif6641cxhSrFS2trJuiw
1mZAj6ikEKtux4TqNB2mgg3+1mJfvtLITPhNB0fvZ/XnqiikOzVwzmEBA06u
KMuurqZQaYckU1CMAYL1RUaWNRR6nOXhZqjMAJ3obWZH3lHojo6aTL0NA+Tq
u9fnteD7GQkF/D7BgNcJ2SvVWinUc6x3aK0DA+Ce1tpCbLZ/bGmQMwNmjuX1
P/lEoYzXM+ZwgQG7A3wLij5TKHNfZUJBDAPGVflvX+uk0Gvrm7SeeAaM1Q0n
832l0HdXdwexmwxgiTnVeWLLx8hrnkljwOnbCi9suih0t+3aJ/kHDDA8q8lT
7sb1tjFZlVTDAGEX3azEPgq9cVO59OYtA7SV9J/z91NoIGDR91/1DOhUfLrg
DLbi3SdFJs0M0DT6wNb5js/bkIzp0m68H25wcdMPCt071xd9eZYBpUZfZNqH
KJQX6CFu/w8TdMItW3aPUWhki5V/4Dom1HVp+idhq0xs56WvZ0KwnY7DAPY9
W4mWb1pMOO9X2OU3jveHChIs9JnwnlTwyf2J6zEzRhgdY4LSkvBTnyco1Jff
FuFky4TIYYFsmUlcP4cKvlA7JgjNhBBW2Hdaw3trHJlQrJlb0omdWsDJ2urF
hBc/OEktvyiUdMaJoxHJBNc6Suj2ND4vcgdTTWKY8LbN7nMLtlTHZjG3eCY8
+fL+m9AMhRIMhX8+uMWE+BTvJDfsWIV7RYr3mOD2z5ISzVkKNX+NlN+Zx4S4
9lkjB2yJuPPxdvlMeFbwiRGPHbXQ4PydYiZo2+w++RM7ovvHFnoVE8Jmf6el
/qbQh4T3edqvmXBoE2v+Dbbo/idM81omOIooxo5j3ygLosW9x88b2eoIcxS6
fnNNtWgHEwTjkquasd8ZL9XgdDHhOF/hjylsYaHJzD09TNDMytwu/YdC17yq
g0MGmOCyTyLnCHaw6fHd/JNMEOlcQm/DvrOv44jdNBNySp+encJ+bmDqXPOb
Cdww8S8r/+LvW2dnZOgCAqZul47twxbRrLjDXUSA/ibBZEdsBXWtwn2CBOw9
++dIEPYReeVPK8QIMH/ZRJRge5IZAx4rCLhuV8hqxI6SZsx+WkVAU/UmrQHs
mmWijGQGAc9XyeWsmMffx5KrnL8kAWp1oXyK2HML+MBajgDrsmiXzdjqUz9t
5ZTx+hz/68ew9447ugdxCEi+Y7/5LLbDcF/ggBq+3/bheV9s/36reEMNAu7d
Fmm/gX2rqzX7viYBKoZ1tcnYTz/vK122hYC5dvn3Odgfm97UnUUElPCYQ0XY
3PqtnR/1CHi6uUD6JfaSN6WjG/QJWGDTa12Hza5cT4s3IMB09cPnzdi6z++L
z+whgM1YxenEPly8hm25n4BYtdVFfdjn8lM2vDAhIJhZdGAY+8Y9SX3iEN5v
wQj/OHZ2RsQhPwsCBl+X1U1iV6UInuq1IiBJQzlnBvtrgr/3DhsCDvSqJc9h
z0T9Ds06QYBr6ceMv9gSYe63BB0IkLy/tGoemxPMfeDoSIBYfs+v/23gd7Ki
3pmAnuoD8L9PXOhqVHUj4BVlkfoH+5LH4d5IDwJytvxd8Rs70aVxgudFwLqy
zSlT2IWnDAXMfAh4HLZCl4f9/niV5FNfArbUBfK42ENWW9ZKBxAQeSuq7Af2
wsNF2j5BBCiqa6d+wyaMOXu+hhCg/MIntg1be0+WFYQRcPG8Rdp77IP6pMud
CLx+dlPlK2wXSLy8MIaAVdEDM6XY17SXR52Mx/sLTtR/iJ25ITT9TRIBjI7v
2XewKzgLi5RSCPg68oGMxZ6U/fVpNAPXp9XngCe2GMNlcH82ASkhSMgeW0ly
YPZxLgENebfbTLGthdsZno8JeLATitdhey8yUf1chM9fve8rOnbsfB1sLsH1
7Ts2tBj7Le/F8flyAo5yFnp8wedZoyMtJ7iegD1RVJgnthjHYfrhBwJ4hqLs
o9gjvpydbU0EXAsUGdmGncF+1qfYTsAj2TtSS7ElHJuJt98JqLy6tzcWf49j
z5Ocfw4SoF3iJPkv9rtlNi+kuQSs3+Dia4p95THXwpFHQIIRa1gce9aHf7cA
jYS7EsZqfrgfDGSedEviI+Gve/pCS+zWhtpEDj8Jf/7pEt6A/ZiMGDATICEj
Uqq4F/eb09X0oCwREs5HFZ/Xwv4svPHlLikSIl4GlpXh/vd6Q+JAhzQJQZZz
H0KxC63mRF3pJMxpu0gexo54WHk0kSAhecoIRnE/3WWyb25wDQlNFTILxLGf
JjlsClUnYUJIfuc63I/vVtUdJTaQkPJeIGkM9+uYEU5QgQYJhzpmyXzss7qT
zV80SbgM7DoVbMUePzcVRIKqW3oEHedBwtqbefW7SfCT6etuwfkxwdPPDNhL
QpJ7zZIA7H1lP5O19pEwf9IYVLEFTAyvZxqTUMV16L6C88fDZ+b0RXMSBL9/
HZajKGT8/pDiP/YknI7WlNMcodCDRH6y14GEDsk6s9ZhCgmeeCiZeJoE81LV
pHPYFdMCixc5k1BMeZvk4vxTlS3u73DH65c7RogO4n7pIZF+3Z+EA0LHN+bi
PHVAFUl6V0iIu+rnqY1dJegUNR1IQnlOeu0bnMfeKVV+J0JIaFWipfX0Umiw
xs16SwQJNkLn6cI9uP7SjYyRWyTYbfMyUMV571sRlrC7hIT0F6Gx1XjeGOqs
iJkpxfcvupqoiW32mxeR9Rw//9OUJ7nNOH83WoTwV5CgVr9GL7yJQm258t7P
XuPnWSYeubsR99f4ckvlZhK6d01LJeJ55vuZcaYwRcKCQPgVjOejA6FyMiVj
+H03he/oeonzIvuQpP1PEmqHAx5qYEf3vhCtmiTBLfVMU1c5hcD8Gu3CHAlH
Mhos177A+bud3TMkyILNb1afi3yC+7eMaeZbORb0T+Z1FeH5LqGPU2Epz4Ld
tMMtf/D815e35MuIAgt2Cf/h34HtA8/FRJVZwN1rKNKYTaH7dmwfEzUWZFe5
1nZlUkgof9y4Q4cFJnYCs59Scb5sv0EbNWMBz7rVdD2eR7c611iKh7BgRCxc
Ih7Pw7Ntg/rV11gQEHChMBHPy4XbRNQ9r7NA+BvX8aYHnqekDizpDGeBaIkf
K/kcfp/V7YXZcSwIFdfIjnLB9ZMaXQoZLOCLMlc6aI/P6yuJCudyFkxuPbdp
rRmeP+i2cu8mWWDan6XFwPO+9nplju0UCzq6zHNnVfH8YDCxaXqaBXkS6gc/
cXC+eAbtlptjwd4At903VPB6jffcfBbIgtYQX+NPBVzPIF6Fiqgs3GR06cYx
cV5SV6zCFGVhvv9Fuz7+35CryoozspSFjPKBd/t78P/OP5VKH8tkQWSbL40W
MopO8hY21iqxQXhZrUuZ9CiyffSTDAlnw86y49mXsrjIyd9kzjCSDe2GqzbY
ZHKRh0nhJ5FoNjQ0nWnRS+eiq5MeNyLi2CD2zcicP5WLHmjN/I6/xYaKmw/t
z8dx0czL+da7uWzIY5fkaQVyUcRHkbDqGjaoGjaZCdtyUVL6GYegWjaEGsk9
/XCMi9LdG7btqmNDihaoxVpxUfGqiNm6BjYsOU44yphzUYfFCoemFjZsHj09
T9/PRQq9Utt6ev/fb33JhA4XrSv0Zmb0syEoS/Z27mYu0g78MmP3gw1H1a1T
bbS4aI/CrfzBITbkx3YOvN3ARW6OJHN8nA2KtK85Ucpc5LPFb+Yxjw2X1NzN
9dZyUeDSnmb3STZcCL8iOy7PRQkP00Onp9mAmFZ8e2S56M7lhfals2zQXWwo
OU1wUe4BOz2fOTYcDJvVT2dwUaHsa4buXzbYMv0i9spwURlPfmZ+ng12qmO8
X6u56D9WJkR7
       "]]}},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->True,
    AxesOrigin->{0, 0},
    PlotRange->{{0, 10}, {-1, 1}},
    PlotRangeClipping->True,
    PlotRangePadding->{
      Scaled[0.02], Automatic}], ",", 
   GraphicsBox[{{}, {}, 
     {Hue[0.67, 0.6, 0.6], LineBox[CompressedData["
1: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
       "]]}},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->True,
    AxesOrigin->{0, 0},
    PlotRange->{{0, 10}, {-1, 1}},
    PlotRangeClipping->True,
    PlotRangePadding->{
      Scaled[0.02], Automatic}], ",", 
   GraphicsBox[{{}, {}, 
     {Hue[0.67, 0.6, 0.6], LineBox[CompressedData["
1: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
Ovw/dQOHiw==
       "]]}},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->True,
    AxesOrigin->{0, 0},
    PlotRange->{{0, 10}, {-1, 1}},
    PlotRangeClipping->True,
    PlotRangePadding->{
      Scaled[0.02], Automatic}], ",", 
   GraphicsBox[{{}, {}, 
     {Hue[0.67, 0.6, 0.6], LineBox[CompressedData["
1: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
9VMC/wMtq9/O
       "]]}},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->True,
    AxesOrigin->{0, 0},
    PlotRange->{{0, 10}, {-1, 1}},
    PlotRangeClipping->True,
    PlotRangePadding->{
      Scaled[0.02], Automatic}], ",", 
   GraphicsBox[{{}, {}, 
     {Hue[0.67, 0.6, 0.6], LineBox[CompressedData["
1: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

       "]]}},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->True,
    AxesOrigin->{0, 0},
    PlotRange->{{0, 10}, {-1, 1}},
    PlotRangeClipping->True,
    PlotRangePadding->{
      Scaled[0.02], Automatic}], ",", 
   GraphicsBox[{{}, {}, 
     {Hue[0.67, 0.6, 0.6], LineBox[CompressedData["
1:eJwVl3k8VG8bxkVJdiJmrDMjsrQvlPLcJSWpUEhpoyQJKSGU8CNbUZGlTaWk
kq2y5UGKkCIhZN/NzGPf4z3vPzOf7+c8c+a6r3s592HYOJud4eXh4SmmPv7/
/fCaDf/a06F6ZXudHpo4R+gV/1I2tlQ+h7wv86WXqTqh+a/5/srKnsjCsOKO
l+o19LAgXGmRcjB6ET6otVz1FnLc5nZhQikWdYb/eaa3/BH6NWN/b1DpFTr6
PkyjmZGCFje2q3GUslHg0nwDL6l8lFD2+OKA0jf0IPVSCqPlO0p5F9zouKoB
sSKezeVrNqN+yf4wo1MNKKYVT/13qhmpXTHSW3GvAS13NjVbe78ZPdkqlNAx
1YBMY14e3sDbgu58C7M78qUR6Z6/eq67tgVd6bg9tNv6Lwr8NLvR/lMreixU
7i9h0IpWHd/Fm2Xejs6iqli2awda6ub+m2vWhXiejuc0hnagobebCzac60Ix
C+Wbyp53oL+rO4bPXu9Cpd/sFF/VdqB9H63ao153oRWHZp+e2dKJ9pq5VIrw
daNee7U3zQu6EB93aNOxlG7kcMcn/2dEN1J4WJo0OdaDeMeetuBX3ahrv/S2
z0t6UZxlKc+7om4UMG743UOhF5XJL9UPH+1G7NSQB8939iLNl0klew73IEGZ
ENl/kb2InfvrZ5FSL/qkcLDm6Yo+5NSl3pGZ0oceqf9KPWDQj1qP/xEo/NaH
/vnpXSmz7EcH62+u+t7Zh1Lv9jE0HPqRTnmPZxe9H8XPXWu9f6sf8aUlii8L
6kf8mXsGNWr7UYw3Q8/9xAA6FbzptNLJASQ4/tPW/+oACs9cQlpcBpCPs2/w
7agBNBM4pBdwYwDZ2LTUvCwfQA5/n/S5Px1AWoYPz9drs1GJp/GdJR0DqHAp
LXazOAfJ+Ob+KDnORhvCS/MNNDnorGFYV94FNnrB79FpuouD3Ef2593zZqOw
qdrVDt4c9DQqw5kdy0YWLfe+xvVy0BL4s2fLLzbqTxYfnSngIktZE1F94CBB
RoBai84g+jRuuvUVHxeVbo1cfc1gECVOjjfLi3JR4OFH2gpmg8h0p+NdN1ku
4o3I2n30/CBaF1kmXKvFRdNz7LN1DwfRv9+Z+maHuGigyTzpB+8QCnLiqqx5
xEXJkzapTmJDyLRCq3DwBRfZS7lkicgPoUKlvd1R77ioc29I6d6NQ8hYaueb
cEpXU05+b8nZIbTd4uChdW1cVBGjpl5QMYRad3v92KNAUEjmhrUn/gwhrVi9
WwdUCDL8uX3zXNcQmqoLPbNZk6DixdZ7ts4PocQyaYNsHYLyrkScy1o7jC5U
PlQ+Z0bQ1TsPL1rqDaN7Ix9nbh0mSCcl2XPcaBg1rA4tiDlOUGZXcfCG08Po
SnPVkKUDQW8PTb1KjR5G4bToUwG+BDm68KcfeDaMLAevTZb+R5BG2NIc7rth
xIyNMxkKIejF55VlWt+G0bD94nWcewQ9WmfTnzQzjFL2hetFviTIer/z8G6B
EZQ6uNZ25DVBdAfv6W6pEZTwpVZ1cypB0QnRgstXjSAz/X4v5yyCbomXaySc
HEFrPhpNBpYQlK2t8H6/0wiCXdXGB8oJ6jzujGa9RlDMmWHN8UqCdN8uPWR5
fwRtOFBwteU3QXY1Z5oXJo6gxZorOhh/CLoz89E+PX0E9RY+KNnRRFDvHmsf
kcoR5MN8PqHUTpDUxZTFuY0jqGS50LamToJQDM8d+74RVH5MbfhKD0EO2Ex+
2cQIurRKV2qwj9Lb/fzF54WjKNHkzZPdbIIKRSbWXJQcRfM1fFE+XILYG/bk
KiqPIldVLjdykCB9f84PT91R5J/yt8x8lCCnZHREbc8o6rrLNlw0TlBcVWRn
jcUokkpKULk7QdCXyQ4nv9OjyE73iPX8JEGDSpumVruOokWL7nP3TBMkv/um
/9/ro8hPZfaP6wxBu50aRELDR9F2lqnC1VmCXKO0YnTiR9HXMd+PJ/5R+ci7
xuxOGkU1s7EvWXMEfev4+ebuh1HkzF/J/kLxqCBLe3vxKErf7xq4a54g5XVu
hdyqURTgO38pkeK9ViV7H7SMIrUPEu/bKb7iS6vdwxlFTz3t98xR/PTl+ZMT
06NowZfuNZMUf6/81P9cYAx58N49/5PiyTExN7NlY+iw8P2pQIpZCjbz86wx
1KMFjXIU79+ZGfx27RgSUZwXv03puXqeX+ooGkNNAvbxrZT+xDuHHwnsG0Pj
Aeu8xCn+mZ284sORMVR2f3OaIhXvbOtsuq39GErL8NITovxQEziwTeLKGPr7
ga5SO0WQ2eqEknz/MbSy/6jtdcrPaxYjpo6RY6hm/uU/fsrvVz4GTbTH1HmJ
0FHHMYJqnt+3K3kzhsKeZO5JGyGIp6Jv8HLOGLofMTH3a4ggzRFdL2bpGNqs
brTsNyHIgn5r0c/fY0hV8mtkJofqH/t1dM2hMRRuaJovStVL/e2A5/VzY0gh
Y+fl4G6CFn6sXRUoPI6mn6rHtHcQdGSRl36b2jhynJHauKaZoECt799vbRxH
f5XomSqNBKUdVDq8VX8cCeiKvp2oI0jg6WfH+8fH0aqxnfTNVQSt/yY9sdNx
HLUEP4l6+Z2g44Nnbwx7jqNtU/Kxo98Ieq8nHL0vahyJNa401CgiyKbxEOar
GEcTBw7nLUwjSDC+7cLFP+PIbN+HIp83BKUfcZJv6R5HoytvJNVS/cvXEOSZ
s2AC1ZQeX77iEUHP63PWX9SeQCauJ12Mggkyjtnd3rxzAokesv9X5E/Vk2VN
hLHZBFJVWXlX7hpBBnUcjtqFCVR7Y444uhLU/Vs5qfnpBNIb2ysTaUX1e9Rb
C+PUCfSnuyNS8CBBm8y3LMr5NIEOFT7bddqYoKCagzZR9RPoq/AHzyw9glb8
CpQ3Fp1E/R/7yzoZVH/+ZEdke04i/3WLXx1s5yLJCE+kFjSJruzI2Vjzh4ty
DvBz792bRKk1Qe4bq7hI6IfSXpd3k0goLHRbHOaiN9/NFql1TaIoteofnDgu
4pZled4zmUL85yqsvuzlougQgxW8x6eQorRntPl2LtIzqq51Pj+FeL5ymCWb
uOj2t4H1ewOnUHYj02I/g4vWlCpyF+RNofns1VbcUQ66+CXAxlltGuVM1FVf
i+Ygxc5d/OPrp9Gpvk1ecyEcVM67JNkbptGMVpX46esctBzCh4KtptGJ1mKt
trMc9Ccnyvd56DQKoAkaP9fmoO2pLx79IdPI7clklGU1G0nElzboZ82gI1ue
2xeNDqD87JBrZcUz6Grcg93S3QPofL0x07RqBqVEGgUdqBtAX6Srzh3vn0Fs
W75jV7MHkGfEn0kP+Vl0c/eemmTvAdT2X/+yFN9ZZBSbVu4314/SXIQPyu75
hw6WafO5Dvahirilnm8t/iHmh7SX+/72oe5i+uMdp/+h5N/Tl0XL+hCdpj7g
eP0fMhWb+YOe9aGAQgP/wvf/kGtOMd/pQ33IQvJ6hgNzDnlXL2r7nNaLpjOG
ln6amUOWnd/j3K16UILX+f41ljxgcRm7pp/qRGsKlkwGHeMBuDimu96oExUs
TFrUYssDRz3cXies60St4Z3K4S48wBf6sno3XydSfHLMsi+YB5b8+xiX+6wD
xRUfKE7I44F+l98ih9ra0R2RDY8kmQvA5EN5fMeBNuT3eNZ0lL0A/n2eVxSZ
b0Q8v1oh7yofSEU9yU3oLEeql+08DmksggQLvho5ngTcOXbfQugTP9zjrDkp
t6gKG3U5+Ny5KAA2EUvi4pe04l0+rDc7PQQgSnH0qe3yVrxDuqlh/JoAbFXi
sZHb3oq3GOzTORomAMGBGXesPFqxRuLqEdZLAfjb8DZDpLsVC50ZtX/fJAA/
E/pqtua34YpOn0P1u5fATZtJ3amTHbjUe5N/yP4lcEPKQ9P/agculiJpW82X
QLOa6+Wpux04b+dJsQSbJWCtqPEm+WsHfvN8R9k5nyVw1flor7xmJw4/vRhm
0pfA0F2ZAI3BTry/M0JTUVEQjhp8k9Fz6MYVmp011iqCoFD7IT/mejfee0n7
WryGIGTyT75sudeNDXmbf8pqC8I1hz/ja3E33qGseWWpiSBoW7643i3Zgzda
fykQ8BOEM5eL9a9/6MHyNVPmI12C0K2JvUY4vThObt/8WrYgvNWqjsvg6cM0
2ydJLsOCIPkw7duxpX142fCuGc6cIBgN2Em76PRhcfF7T3plhKDwQMujkBt9
mM941cDfPUIwFP85NFisH/d/tvEtfUvxLi8nffoAVoqsd7iVKQTxjjNHrmkO
4EPH95sfyhWCJF3FrQ+3DuD8yc0araVCIC+eHRV4fADfWSlRM9EhBGGsh/mL
Egaw7n2spkYXBgdlmuBLZTZ2Ob1RkqMsDIc2snRoa9j4xdrXs+lqwjDwrWqf
E2Jj8YroKr2NwiDfzB4sOMbGnTxOXhYmwvAsyM6GP5aNwxzkf/wXKAyX/Gyy
FgpycKH2ney94cJgOdeq/UiGg8cXCjyXuCcMIuZCqbTlHHzy8YjHwwRhuGlb
b/YBcfCGmjLm+zxhUE872BlwiYP/bvO80jksDIfnnd+e/83BkkLkZPIU9X91
AlcU2zjYsP70XhceEbCbNzmbzubgdFcT5VkREdAv2n7Ph4+LA1+qlS1VFwGP
z+0/H6/m4lUStQr6J0SgxcpUQNCPi7vDu/2izojAUfbJjyqhXPxQcKKn57wI
aKhtIax7XCy8UDY9zEME8M9Ff34kcnH/uNWu2kgREKmMzGoq4eKnlxxer4gR
Af6yqp/0n1xsNXhV3OuRCAQerF+/rZ6LS/viG5Rei4B5ldinVb1cnNj01+lc
sQgE9PlIF/MTbG3F/ZVbJgJuAbF5LFGCpWrndESrRIAhkXHlrDTBfj+U+DL+
ioBOXd2SeBbBJ4tO3Z8dFwH7ktUzaXoEyyd14dvqomC1QKEu1pngGpVxlfbV
oiAze/C3thvBoQn8IRs2iYI5py44+yrB03Fqh/7sEIW9tyR47f8juD78XC/T
WhQCV/cnu8QSHCF4dZ+bjSh4HHCr1XxE8O6gkPQSe1G41eR5t+wpwR98X3s7
uonCjniHtPTXBN+9xBH/cEsU7MM7RFfmEWw0+M9NIEoUZmV8LRcWEMx7QbTx
SLwofH+juhR/JtjFbnXi/EtRGAnZXttcRvCKDiRoliIKhfX76vQrCW45YeL8
PFMUfNE9vbAqgvdbXdy8p1AUajfQN5TUEcxfe+NRfIkoiAThvOwGgj+Z3eHj
fhcFn2sOT27/JVjLOOP7nQZRyFLPcupqJ7iz9PO6rlZR6Eq9dehMF8HxBjX3
tXtE4djN6tDSHoIF0dipphFR+O22vFuHTbDH9hUCH6ap38ejeBcuwd36R1Nu
LxCDDIdXsYGDBB/adevQOQExcF22uuXqMMFFhoXTO8TE4PCFgnP7Rgles3f0
ifwy6nyDi/bcGMGP9qntHpcXA2zvvit8gmBhkyOcHywxCCtaFTU9SfBVs/C7
rzTEIGejNHPXNMG9hwo2+68VA5HMigHnGYItLEdarHXEoKuGPuQ+S3CxlWrg
JiQGfrW9a47/I3idtZWW+C4xWP9YP5k5R/CT42HVfcZicCD/qDW172LRU9jj
80ExkLrw3y5q38XetsOKD4+IwbHbOvbUvosHziz/cuWUGKzOFC+k9l18xP7w
eRN7MVBZ9t2E2ndxqUOohIazGKTFm8hQ+y7edCH/I98VMdhRlyBF7bv4ufPQ
sb/eYqC9eMCQ2nexpKvKwo/+1Hnpq5l0in0vWyZHhIiBYUyBZTilh3slxMQh
UgzCfxxc30zpt/b8NK4fIwaOL9i7RSgu8xp8oPBYDJzSzkbTqXh1rrH0JxLF
oGLlFyV+yo8XvhZ9P9+IwSke9a4fU1S/+AffTs4QA/fMhh53yk+///I2BuSI
wfmrBupz4wQPBpHGY4VisE51MtmGykdFmPkKiR9i0PeCeeXrEMFbbt+s7P8t
Boq7HD5/IQQnReZeLm4Sg+SjsYefcQgOiGYUuveLwR6N37ZTvQQPxxw6azok
Bk1elc0Xu6l+jA8S0ZwUgzvON1+XdhCs+HNci/CKA+3NIwOJZoLNTcV5rPnF
wU1gIY2vkeCwavVfpUvE4Y3aVqNfVD1P11h7PhUXB8vQT79EqXqv/VP0xVxR
HJQGx/qGCwkWOdoUU8QQB7/sPon6TwTvbBo7v3q5OJSLe3+IzyY4vXmF5BIt
cdDZ6x+Un0rwrY5bx/M2i0PwtcU/XB8S/OV00lr1bdT9nTtOGscQPNtVuDAa
xOH3Mt77C+8S7NA7muy8WxwC37nzS9yk+p1zZIJpLg5dxfz341yo+pXy/3X9
sDg8WtsuFeRA8Kju63dNR8Xh9tLs2IOnqXoLmTkbbUOdV8uqCrOk4lF7UL/E
RRwuXX+X4buVYJMDxZl2l8ThYsgmhtNGKn9X2BGfr4gDo7qoXHcVwQe/bN3j
4yMOinssx9yVCH5j8zd7MEQcaoQvO1/moeZHyKLofbfEofT9rtjTk1x8OG2l
a3KkOEhNb9XbOMjFi3iuaZyOEYcCI345jxYuPv5QMb4uURyQtYbEf3lcLF5/
wju/QBzex5q3fXbhYrv5oMNyxeLwjNT0YzsuzlNN3eBRQl1npvE9tObic248
nLWV4oClOsKmd3NxkWTCscRGyq/QguU7Fbj48r52vbBxceCcjJaXK+Lg+qLT
C45oSQD93PJfmmNsPLi9ge6zWgJOZiXz7u9l48WFBzY8WScBvScC71s0svEm
vOVst44E0L7uVpIrZON7ueLfXQ0koLlWmusaysYHMvNiQo9LwFmld0L2cmz8
NVFqzacICYgakBgoWDGAm1VC9rTelYBTcTEfSmQH8NizeRu++xJwdNtCvw8C
A1jlaX/UnocSwDENMzXu7cd+jwpmfr+SgFW6omePvOjHevcdS7hFEuAbtX6/
iGI/fn+z+LjymATE9tsc2zzbi5OMymWDJiVg0n1nzpcean8Rrq7mzEiAemv1
Cp1fvdg3omVXLq8kdCskR/x41YuNY6ZXWYhLgo+vUF+ZeS9uf7lmPlRTEjz/
m1qw+FUPFi158HjilCQ4WZge3LCtG9stcmutrJSEuo/m31IZHZiu9K1upkoS
NtRKiOss6cCVOgo/VvyWBHQmXyxlsB1vcvzyya9REmgGYnftcDvm/yUdv6lX
EqLO8ioIW7fjxCcfzB8tWArdpg1C2+604U7dybILG5bC6lfdd991tWBbV6/3
wnFL4bDCKt6DUn/w6rOalcanpODGb5MD6WFf8A9JLSG3zdJwWnpLlVbAe5Sb
4hevxbcMHp2IzdDUqEFeCzRMKv4ug7xNzDLeS22oe6dQvWrbMvA6Jp02Ht6G
TG6yT9zoXAabrDV+1Se1IRWxd86bBpaBkeLI0bPNbahCfsPtJ5PLQP9BaEiy
YTtS1NGrvLxUBry7RDlptA5U5GRmrLBHBh5fSweRt51IK319jbuxDMSLAUR9
6UTRY1LW1QdkYJ4LmwWaO9F577rzQRYyYK6dmZki2oWkQqxDh2xloGNBNmPG
qQvZJdqVfbkmA750z0femt1IsOmqoVOmDESlOwr53O1Bm9xfidz+KANNdc6R
BS970CnJ+up3OTIgY/h5B8ntQVmGG48NFcjANROLVpHOHmT3nly8/F0GGnmX
0fev70WFt07HX+2WgaXN3tbl33uRx/b93EBZWbhc8vKl/nAfet7knfFSThYg
1TWqnK8f/XB/7VGqKAvtgU/jtkr3I9UUAT7B5bIgm/T77R/tfvSL/lkmfK0s
tM147p/z6kerRrW33zWShZqdZpc65/tR1wvGvcfe1HXF96cKxgYQO6Btis9X
FqTowwk3F7HRsE3CCXt/WRisV/27XpqNeJQYmmtDZGHP0bd86zewEf2+clHR
fVkY+gFm1S5sZBKkNNiVLgtG4WWngjrZyPJMi7nRB0rP4seT7sNsdFz/cW5K
tizsvicUZcTDQefnFYPcC2Qh2yk4MUqOgwLdFRWXVMqCRdVgfKEJB+WdVTDW
6pOFc9lLZk+/56DPBn/TItiyMO3G6+VcyEFlrIcyY0QWepK2qh/9zkF1LfId
n8Zl4dHA+vbfnRw0bCl/9cBCGrzrtr1sKclFKwzlklyVaKCnvmjM9ywXrVZt
FKlj0sA+eaAz5iIXbVoYf0lXlQaic8/2RXpxkX4BHS1cSYPcm8dOsm5z0XEd
em3UFhrs29R1sTyTi+6toC3MNqdBcsXTXuY0F1kfV33ZcZgGM7eCqjMXEKRy
b72RqDUNYsxXFmosIShzfl+ErQ0NMpu7I4tkCKqp9ZMXdaaBlGKJUcJ6gh4I
R2AdVxqkPs96ZraFoNM7HtrYutHgpc/Byh4gaPTtx6QsLxqoxDf6ftpH0NL/
2Btsb9KAtWp5rrQdQQ05U3XhoTQYFXnM03WeoKeD/F5Zt2igI8I/cP8iQeus
GYUiUTSIyGHGJXkTZLbeYl9WAg3O8XbVXY4kiH7OdrD9OQ0ihW1zTkYT1P7I
5a5IEg0qYt3l1sQT5CoY+scmhQbaAgxDz+cEUSPhjEguDXrmoD7zPUFHZL4L
6OTTYO9QiG5eNkHMfQ2vbQppsGix/78XnwhKzxod+lhCA+evl26rfiHoKndB
VHsZDdLVkg7nlhK0Q0VMR6SSBvcYvJfWVxBUfVv9mk0NDexGc259ryYo7ssm
RngdDX7dVwkhvwmymdEv/thA6XH6VjZaT9Cw3XFBkTYafDo7If6qmaCcB+ff
anfSwDD/iMThNoL8qj1MbHpoABlvjfs7CJLQuxv9kUMDjt2oQ1YvQfWXnmxu
H6T0C9/ZM9pP0JNXb5uER2lgyrh0ZCmHIPuWnOvaEzQ4E/k2XpoQtEa6lGkz
Tfm9+6LQzCBBk0a/v4T9o4H0OoGkz8MEFfi223/kocMyqHV2HiXIhD2bIryY
DvcT1L1cJgiSZQqaaQvSwWp4MvfLJEGtljJjp0ToMGJ7lzk3RVBSuEpMmDgd
0gRb3tJmCHL5vFb341I6OC1qspadJUhnSq+5bRkdLl97vmqaYp7VxjeE6XQw
f+PIxP8IKj1tpaKtQIeYaj/ts3MERcTZlZxSpsPpHQcuDFPsfsXvkjeLDm+F
zzUfnyfouNkjpfuqdOhpfX77HcUGq3LK09Sp+xXn+XZSrCVY616hRYdN3/3S
/lG8tHuI1bOaDgPMNsYMxdOFIj8XrKeD0NyfqiaK2x+qe8tvosPJpKDCpxR/
8zRYob2ZDj+95YeMKU41P1VjupUOG3vaTzZSemLW+vg6IjrInt4msZ/i6yKx
WkE76GDt+4I3kYrHri+zPsGADvX1qRtbqXj3ffkZkGdIh2ra4tfzlD8bEthr
6vbSwXnuvC0fxXI+An+H9tNBwCTnxADlJ6+VSrCwGR1cujqffKT87tsAG9XM
6SD3dFzNnsrHT3Hrtu2H6bDNTXJ8doygLLZ7uPVROpQeviR8hcrf49K7m92P
U/GYODr+ovIb+PxdV+QpOqyzt5eRHiLIybc88s1pOmRn9IvqUvWxVYevv82B
0mPC379+gCCWlFL07AU69LUqVPH3ESQ4uGWHzEU6vFLOEsrvpurvpWucsTsd
FLQ9/f9Q9eom02700Z8OnMywnOJagqxH/o1XBdIhN9Hlas4vgnb+oD1jB9PB
DB94cu8nQZJBpjOMCDok/eRVH/9GUMp4weuwB3Roirzt65RLUFR1k+XLx3QI
3DtZGPSRIO+USb6ip3SQCfp5478MgvbarbGeSKKD8okfIateE9T7+7GwzXs6
PBXfqq4dS9CPtNws7yw61Oi/K758j6AP4XWn7+dS9dg5Oxt9m6AAA7FPFYV0
8P+obB78H0GM99cuaFfS4TM9TEnVhZoP945VCvfQoeNVstFOap7JZwjKne+n
w5aMbXVoM0EtVR/PfuPQgWGedUNuHTX/xCQXBI7SIT03dd8lFuVvyNf18wvk
QM6mNSpxIdXPvqtjh+TlwM5VfkSukIt2Pm7qOqAsByfntogrZHHR4vzgdSks
OUjRVfwxl8JFYTMd5Q4acmAqEGl5+gEXRV+JmevQloMOpezHWW5c9Mpxwela
MzmY4RNruMXkIsfQlNQNFnJw8Jfnh0cyXLQq+ei/O1Zy8DEytP62MBel97yP
PnBSDlz+cOjLxqnnlY3Dt9ILcnAnLLQpo4SDfh7+tSr3phy0lBnU653hoMmd
iVOP8+VAQkx+JSeYjbxzH/sXF8rBP0GBd1u8qefrujiRvmI5OKxZ1+zkxEaL
lW4z1pXLgaGyvmeoGRstm/LYU1wnB1Uu2uPRNDZa/9Y4tndQDt4ENALvswHk
JD2qs5YlD6l7LivefNaPhkO5Reaq8lAjcaWi+E4/cuPtM76qLg/XMlwa+270
I2/y9+Tn1fJwrvTgYc6JfhT6reSm+VZ5mJO5eqWR3o+SfOLrPc3lIdch/Pup
sD7U0bXDoyhIHhQvrDkRdLwX7Xhc+VQjVB6kmnfKGO7pRU8OH/l+55Y8PE1+
5EKofeZ4+UWmbZQ88FU4nRwW6EUNqU8q+J7Jg82+I6/L03pQtdecskG+PGzk
hEy3zHWjIomcbyWj8hDeoCizMagLPd22Vu77KQVo6Zi6LmLRjor2C/rPnFaA
R6y/r/5tbUftJzr61e0VINdGQPsvqx2x/KJyAp0U4F5OVa3DUBt6/nXKCrwU
IEggPbUotA0lHiiKybinAN/Hphmen1pR0qmDy+JKFIBZvUd4n2Yzevufm8TZ
lYpwY3I8/P3WOhRkbruXb0wRws2eCNpFFKKNTQmvgr4rgchd7fcrX3zCMerx
b7/vVQZjPp0qZ8VaPDqyK9F/nzI4KK/OW2Jdiw/kDz/YfEAZ1q3okAmLrcX8
B43CEs2UYVzgmOIeqTrs5j3l4GOlDIsDGJYPBeqx2Q/LFSvPKkNB50ajK+w/
WNhN6lmYnzJ4XN9wbdXjv/h6QXjM3mxlkAqVk31i2o77/xbcm8pRhrcPY9oW
O7Zji5mRiJd5yiCNHMasA9ux1qYjwXwFyjAyqBJZmdOO61+rXs39qgxWR1tT
K5gdeN19fFSzRhn6tOsiFEgH7r4wpChElGHtNr7hYx5d2DRURS57UBlYwYwP
WyO6cF6SpczZYWU41Prz7qKkLny345PY5zFlCNS30jWv68JgFcLjNasM7Uzt
B30bunHcTlZ7/xIGFIePTFYNdON9cuaJZSoMYKrHB/AY9uKYzlUFR1UZ4Ji1
ujH8aC/ufCvQyFZjgNaH2eRFzr3YG/LExTQZoDfiezEzqhe/OcPyPriWAetW
q38Sbu/FgqlDZk3bGFAUJ/ci9kofLtl5i4drwQB+Td4bGbf6saSovdz1wwy4
s/gj0+VxPz5et32T+BEGuH5fsU06tR+Pnxs7v+4YAzYk+CbIVvVj1dvWdVds
GVB4eEckr+QADvijkTLvzACJOo0HFrcH8HankqMSwQyY7fTZ/MSdjafr+3YV
hzBAec1Na/dANs7UF17nHsYA4GU3roliY1WaqcDf2wwY2P4m3SidjYWLGzKT
ohmAunfJyQ6wcT2NKwLPGbAzNFtWxJKD7wSITw0nMkBliwWN7zQH7yXrOhNf
MkD6Ky2iwYWD84vdc4ReM0C//nfyyhAOfu684GxdGoOaR0fVbHM52OWLVIET
ZsBcibM2jywXa6zRfs0oZIDpjfWPF7O4uCPOKrqmiNLb8OwDWcnFFi6PHLd8
ZcC4h0XJKX0u3iq3gsb/nQG/pnO2VDhyscBFXdeHDVS8Nz5rpGVT7+uNx46Z
NDFgXpfnv/wiLvba5WvI18wAXs5Y7+tyLubKfVE818aApe2Sr1T/cnHN1/3l
G3oZsKkiWDR+josfy9uoVIwxQNcpa95dl+At6zVX2UwwINutGwntILhmz6j2
5CQDSBh9rZ8hwQLugXtVZhlw8KK+mJw5wS5Vya7evExYmDcjP+lIsGDvJW/J
hUx4Hy24O8mV4OdzWwOTFjGBr1R2XNeD4HrNH7E1AkwARdoPEX+CIXCkQEuM
CXdDYruO3Ce44UFeWZE4dT2u+Z3qA4IvZ/xXc1iSCeH9t/78fkJwUqtMb4A0
E+bXHdzS/IpgCd2tYn/lmHBl9aLC6ByC35guol1SYMKP18HSPvkE77KvZC5R
YsIf95PJu4oIvhp1ctNGJhNq39gF+X8juJ0EHAtfwYSoZxveP6sl2Jt//1mW
BhOEb46mPftD8DIFmYvZmkz4MO1cG9hEsJHRq4CuVUxwltYLG28juPOk6y2v
NdT9rJ7L+ncSfM1dN0ZiHRNun+MUDXcTnP78++ttG5mwo8rJ3muAYOPc6Pe/
NjHBSCDsxD0Owd1VJ/A5HSZcrzB3jCAE+/au+Da/mQlBC3jCnYcIps8PVUfp
MuFmXj1eO0JwpnRuk+Y2JrwwMOSrGyV4v1ZAd6EeE7xoVeYnxgnu3bFv0BKY
4NIv9qFsgmB/q2XTnO1MmErIZdKmCFZ0aeEL0GdCyanEOKNpgrMCk0ToBkyo
DsiSPzFDsNnDizKpu5hw7Mn0S4tZgtkZWxi7DJnwMyBUd+0/ggPL+DSb9jAh
RC+xlkuxclvFBte9TLi17IHH7TmCcyai9AT2MUHlbrPy0nmCD4meMHy0nwlW
HmOVnhRzVVaYbTBhgmOpv99nim/qDh0tM6XOF+/SHaSYaZZz5uRBJggOSE/N
U5xn7+88fogJETPtucMUW1w39gyzYAJtJNu/lOLBKGl/5mEmTIgUmtygOORN
c1iWFRP0SnRYChSrfH4Zvf8oE+7Ue83EU/oqtSafN1kz4VOo8bYFFHtEG2Y4
HKd46s0LIyoeJk9s4eQJKj7RrToeVPzl5/p+BJ6i6mE4dTiY8ufyr83NUrZU
vS1urL1O+ae4LYT99DQT7rMTuqwof0tfNEyvsWOCuOciZdlJgl3FNZfgs1Q+
PikE5VD5kb/qJbPvHBN288rJbx8j+EtH+fJGBybQSwxaX1P5lf3ouGPiAhMK
GvJnVg4SXKT8yeQ/ZyZw18hYGHAJdgwRObH0IhPUlqZ1AZtgfCzFa/VlJtgk
l7zu7CHYvmQu+JMbE573i3WHdREsufZAzF53JmiWrTlG6yDYbuFg5tmrTJC1
fCjY8pdgcSf4POZF5b/ZzUC2keDsuogqfx8m+H6ArxvrCRZ+vZb72JcJQrd/
PlOoJviDlN/sSj8mcDw7FvVWEnzyWrVgnj+lJyAgK7qc4AzTS2r1gRSzpeUS
igk+Mpl5UjycCeeFt2k5vCd4oc0i50e3mJC7tsXeMo3glHJzH60IJriJlIup
vyV4wePxWMO7TLh2RPU19T6Lkwx0fvnGMmFJ0Ef/n5FUfb672SYaz4T0i+U+
bWEEz8j+IQ8eUP2h1rWgLojqB7ancPZjJuRlVGY7+xA8difXYCiRCftMNpw7
fJbgR7NCh66/pPK9Inj9rVMEG9pZ24i8YoK0e+zbpKMEP9j875r6GyYkJId+
CT1A8I5WvaxT6Ux4s24HXWgTwRErizSq85nwMX+x6cg/Lk7SObrEr4DqV+aW
xOoxLsb6oz1ri5ggco+5/Q6Hmr9WqomRX5hgO8nvmt7ExXsDQ5RMK5hwAX68
cafmN3+LmdTPP1T+XwxHKVzgYoX+geHrjUwwf/D56SJbLt4wFlC1+i8TPn9I
C688zMW2Qh9v3W5lAmtVuxrfTi4u0JZbcqCHCYvdLsVNUs8Xr4iOf99HmbBr
pd5uxU/U8yveu8lnnAn/xpfb0tI4OPmFdO7KSYozLi8df87B9Xm7PcJnmJB0
RMX2UBgHb+p7PWzMywJH80TmCysOHtx+uadcjAX7pI++eMVlY7uRhVXfNFhw
SeO96l1eNj6evLPSWosFfi+XaveNDGCLUwHlZCULOhyyLVW7BvCuH3xfpddS
fOThnHnJAFZ9zZt7SpsFIXeGDoeFDOAuG57EKX2KLxzcfEp4AJ+unvFQP8aC
j6n3esXm+rB1sO6VvOMsIGsKtWzZffgQeF06cJIFGbtfmzxu6MM7U6YvuNmy
gLZprXv1hz6sEjJlU3iOBaP0n/PLnfpwx/YJY6srLBB0dzeMqO/FNmnDysG3
WWCWYEvrfdCDHf0OzhpFsqBrauKldGAPdjuYWSd8lwU160XF1Z178M0xt1sR
0SyA9xXVC7b34JTNUzP3H7JgoYnOiE9HN54qnK998ZoFi9Xc/T6yunFEtXB4
cQkLFimte8qO7MRxzy7YB35jwZoTsu0CHp342eVKfcNyFuSGtpwUPd6JPyyL
mC6vZMFutZRbv9U7cdORpfa/frNgeI90g2VBB1broOm3d1D+vVKfMOhrx2sy
ryo+72JBpFdpJ19lO97yX+PUmR4W4GfN/W/S27Gx2sPUvn4qHwO0nAKvdux6
XllxaIgFd0MvfhoWbsfeW29MpY+wwPNVxVfhoTb8n0h7zeUxFqRY7WiW/N2G
Y949C52cZMH26qmMjgdt+KnvwrM50yzQKEhNTfFtw69Nz+zwnmUB/y5HHbvT
bTiT+VVBb44Fqw48dBA0bMP5I6rU3GbB+M4yu3jNNvw/vSZcKA==
       "]]}},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->True,
    AxesOrigin->{0, 0},
    PlotRange->{{0, 10}, {-1, 1}},
    PlotRangeClipping->True,
    PlotRangePadding->{
      Scaled[0.02], Automatic}], ",", 
   GraphicsBox[{{}, {}, 
     {Hue[0.67, 0.6, 0.6], LineBox[CompressedData["
1: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
yeR4m9Eoh3T5CXeMlKriLyMxP0vJHjL/6bt0ixpVjK78Jq+t30NecOZYSTer
4pCSHHfVhR7y0r3t7pVxVdxlczVzQqyXJF09K39soRrquDz2AAku6V213/fq
YjU82RTmUTeTS3SH1g8+WaqGBqHris21uOSlveK3phVqOGgroF2/jkuew5tI
a1P+87/s2jdd4JL4sT7m9gNqGPSmau6NVi5pS6kNOWGvhisnDz4boFzCdsyZ
FuSghmud9nkbTXJJ3PfbrQXOaih9bnmHlSKPxLzRe2biqYauryoXtK3lkaiT
J/QM76ghl8sKNr7PI3WaljEWYWro++ja10NPeGRWw0o5t3tqaFQS4HMkiUci
zSQHkh+p4e3BvFWTOTwSrvUyff5LNcwY44S5d/BIze878zYmqaG4YLTnWcoj
ihHn7zmk8PPJNrlsPsojoUKbz8e9VUM3zsbiR+KUhDR3rlL5pIYCvxxNPBdQ
UhFZnmT8RQ3/iF9XM19CiezOd2r7CtXwgmFPmYgxJbeyAwQiytVwtRD1F9jM
P/8/mJsv26CGFZYfdhg4UFJiLm2o16iGlh7h5a3OlEhKDCdsbVHDZ5kzf590
o+SGZ/61wC41vNuodl3+MiXXrA5vERxWwxm/RjEigpK4HQ22DqNqmPQtbvHt
h5R82GzlUjChhqb+xmU2cZQMrN54J2g6E/mOHjiVRInU8pw4rjAT1/ZecHqX
SonWkhVpO8SZKBrX7Vr1jhLbeTo/FOSY6H11VNovlxIPVnzXWQUmniwUvDfz
CyWhs1XHfzCYGLA7565PESUFMrKqD1WZeG1tRXlpFSUtYtf1/rGYmHvAR/C/
75RMTp+GBzWZOMci5u6xOkqW/Bmw19Rh4kz34LTtzZRs63c+E6DHxNmSKSsv
t1Hi2NN2tUufibf3t0n6dVLi277/npkhE6e29bGsOZQ8avz+/NVyJnLO1Z4T
4lLy/ueOTJlVTNy3qEncl1JSVf212BWYqBwS+L2qnxJuqcmvqrVMjPYM/zky
SInY10yegSkTY+8KyvGGKWHnLRW4t5mJYDPD4/0fStZ8eCU/tpWJ7SogtXuM
kr1v57JtdjKxeHJD6ZdxStxTog0+WjBx0Zj6e4n/38+9VDZl7uHnz5UqVv9L
yfP4kD0+1vz3Qy8LSf2j5FO0+PHW/Uw8EKB/uJDPvyN9vTYcYmKE6ayOfVOU
jIVOBD07wkQzoxM3P/JZMfjMI3FHJsrERVv9/35R7xo32dmZPz/vDpv84/Nm
n6M5pS5MtA1O2lHP5yMXGisXuTHRlJ10JYjPl87ubb1zlokl+6tqZPh8/1Tl
0KAnE7XESrY68OOnHTcT2e3NxLKqa923+PmWH/6k/P4yE+eZL3kVxK+Hs3+V
9mw/Jv6eXBZhM0GJ0N50Y+8AJg5o44t/fD2Y5npbfwcycbeMUeeZUUqMtz7b
j8F8P2WuM88eocTSlHUqLoSJyxmlvXVDlJzC+1eEwvj1NnpmFA3w/Ww8I/To
PSb2xetkBfdRkmAQ9ORrFBNHcsWG2TxKcvSE0hdEM1HRxs0puIeSYY2RH7x4
JirYJzHq2imRUz3VvfM5EwVrva0+tlCyQLlrPDWRP15ZTaN7IyUHJetUPVKZ
SHnF3da1lHgJWyz6mc7Euzfs3INqKAmfKsaVGUw8dOmg7e0KSooGPx6eIky0
Ltx8WP4rJYYNsS+ulTJx7wefvn9p/Hh6jqOvK/h+rdlgOTeFkt7Lehtrq5lY
YTwhNDeRknh2Vtv8OiZOv/PDIeUxf/6ca5hFHUw8PTFa/yeQkr4PUS4D3Uy8
NCPGttuPv95lDn2czWXigmmrDqZdpMQ/lWvtPMhE+yf1Mj9cKRn3FtwiIsBC
99JL3TusKOlKOOoWNY2FnuoHDspsp+R7WeF9PUEWnqieePDUlJJUVkjXbhEW
Lm/+fPWIESVO+SoBz6RYKGSzQ1dZmZKfkstyN81ioUHIyicHy3nki8H9robZ
LAwfqhfL+cwjafsnZU+rsNCk/vXPsSweCXmdZ3efyULXXY29k894ZJPFjsnu
uSzUCmlYsvYSj7yPcjQKWsJCubS26Bo2jzz9VGzHNGDhNrNpaU3KPBLWqxfw
xpCFYg4vxL5K8ojrmuGa+uUsTN/XlDh/kEvmt/i46QILl7JCfJfmcEmk9oOk
0i0s1F1ttOmiBZcMDZom+G1joXRRz4kZ67lkR/bAwxU7WNiSnBd50YBLRCzM
biaYs1CFee7Ad0UuOes95nRxHwvfZx3VDqvuJeble+YvPMbCS5bW56w29xKp
s4pPbvqysC3iokEso4c4Qk7UWn8WpvRumq41vYd8Ej8ROnqVhcvCJBUDuBzi
Ff3J50ggX391Ya+KTxzSXeB2cFUIC9+dzL1/34VDvsyuVO19xMK/cQE6Mz92
k8s5wZFbMlioXeOa/GJNF+H8ygkby2ThMSm9DIl5XWT3xGDIsw8sXJfPsDeT
7iK6y6wDBXNY2LngrPLR+k5SmzjPK+sLC+39Un/OONdJltwjNjo1fD1Fy6IO
JnSQjpP9apKUhad62OKlvW1k2xyrhCJNdbyxe+PJ01rNJLJNL8dmnjr6XT7g
9EW8mbQlidX3aqmj9/GXXSK9TcQbP8jJ6qijXI/CqFlKE3nlwPa20FfHhi1a
5q1GTUQipd+8YbU6zrP46NMd8JsUrL8lwNutjqrx24xXRtURE5cCG/lAddS3
mxX5xaGKxKjYa5YMq6OFlzab5eUBmp+eRWy30cDAdgfpN62VUKY7Gt9gq4Gr
b807f2NeFXhGbHrjZKeBXfkGR7Yer4Li493lAYc0cFbT+IVbvCpwk9MRJ8c0
sOXk4hmCo9VA9idfWHRGA+/snrv0uMh3sB5NOygXrIHVrMn5ErL8/erCvAVV
2Rqofz6t8EZjEzxfbiPum6OBFqWmeVFTTUDWDXXq52lgppyvyF1mM/D2zUu4
81kDzZ7mkJUHmmFLwA3mrhIN3KG8S/X4r2YQaTRXrPipgcyNPQbS31rgQkjr
39IhDdTcdyNpR0obhD7wbrg4ooF7rNUOKZW2wcunSlkLRzXw7ZVvM7K726D2
w0bP4AkN9HgyVvFOox2WdScObJ3ORq1Y9cOb7rZDn8mZzmJZNj478IBkuXTA
0UGhysIFbGz0367dKt0Fdi/Xl9nqsjE52oCjNLcLdh/yL6YL2dhSV7lPZ1UX
mJYLflHSZ2NJmtG3v8e7YF7i9KxDRmw8ovrGYE1+F7TbCySMrWNjhVpAqaJ7
NxypmvDU3s/G8pzQDPsMDtgGrjz3wY6Nj99vKXxXwgFLvOC+4yAbW/HK9t5G
DqxPHj959jAbIx1X2Q4K94DmjTH73ONsDGutmeaxswdaTf5s3XeOjcrOTxux
sQfs/xtgBd5m46pzaSFmrb1wwtdi0uwOG7dBkhd7qBfOWqT9kLrLxsCdLuEV
Qly4Pnz2VkgEG0UePhp9OpcLySvGJu49YiO8u/3JhH8+HMud+v40kY1BdWlv
ZzdwYfrdg6mOSWy82B3vrMPhgtSR3OAFr9l4ZvqsXzKjXFAT8VufnMrGL+xP
sdsUeLDeTCQ1PYONZPTxuecbeRBSJRWcX8DGB/p7rfKe8SDqyUnHgEI2hot/
uD2cyoMnZ8rWbSpmY8Rw9e7xjzx4ywgZLy5j4wfFt5s8q3nQYK3gWP2NjTp+
X8fWTfKgQ+fMuvAfbDRIPfp9mggFOlmjtucnG/eYyeWFyFKYHhPxra6BjVVL
Bm+qa1DQap21rqWVjQ8NA09Kb6CwOM1LLb6djWv2sFebb6NgfLV+zKGTjX57
ml8fs6KwVetRSjeHjZIv2NuFHCi4ObPU+vv5ej7vny/oS8F7lc9Y6iB/vh63
FxVfp3BVuqXmzDAbB35NpR+5TSHy9ZOg0VG+nuenoehDCnFXhI5ljrNx5pui
Yrk4Com7HNZ6T7IxVPiSF+cZhTSNL6pr/rExYafJurAkCtmD88amptj4nOur
KvOGwv8AAUOnnA==
       "]]}},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->True,
    AxesOrigin->{0, 0},
    PlotRange->{{0, 10}, {-1, 1}},
    PlotRangeClipping->True,
    PlotRangePadding->{
      Scaled[0.02], Automatic}], ",", 
   GraphicsBox[{{}, {}, 
     {Hue[0.67, 0.6, 0.6], LineBox[CompressedData["
1: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
xqanNVDj2OMPAs615H9u0Q2q
       "]]}},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->True,
    AxesOrigin->{0, 0},
    PlotRange->{{0, 10}, {-1, 1}},
    PlotRangeClipping->True,
    PlotRangePadding->{
      Scaled[0.02], Automatic}], ",", 
   GraphicsBox[{{}, {}, 
     {Hue[0.67, 0.6, 0.6], LineBox[CompressedData["
1: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
       "]]}},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->True,
    AxesOrigin->{0, 0},
    PlotRange->{{0, 10}, {-1, 1}},
    PlotRangeClipping->True,
    PlotRangePadding->{
      Scaled[0.02], Automatic}], ",", 
   GraphicsBox[{{}, {}, 
     {Hue[0.67, 0.6, 0.6], LineBox[CompressedData["
1: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
Cg==
       "]]}},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->True,
    AxesOrigin->{0, 0},
    PlotRange->{{0, 10}, {-1, 1}},
    PlotRangeClipping->True,
    PlotRangePadding->{
      Scaled[0.02], Automatic}]}], "}"}]], "Output",
 CellTags->"Cell 9.84"]
}, Open  ]],

Cell[TextData[{
 "To make an animation from this table of plots, you can use the ",
 StyleBox["ListAnimate",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " command, which creates animations from any list of objects:"
}], "Text",
 CellChangeTimes->{{3.4464219194996347`*^9, 3.446421971726749*^9}, {
  3.44642270081092*^9, 3.446422701135462*^9}, {3.459964327479615*^9, 
  3.4599643285700083`*^9}},
 CellTags->"ListAnimate"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListAnimate", "[", "plottable", "]"}]], "Input",
 ShowCellTags->"True",
 CellChangeTimes->{{3.446421973995936*^9, 3.446421992618661*^9}, {
   3.446422092565832*^9, 3.4464220988866167`*^9}, 3.4465896430834837`*^9},
 CellTags->"Cell 9.85"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`i1$$ = 1, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {
    "\"min\"" :> {$CellContext`i1$$ = 1}, 
     "\"max\"" :> {$CellContext`i1$$ = 10}}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`i1$$], 1, ""}, 1, 10, 1}}, Typeset`size$$ = 
    Automatic, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = True, $CellContext`i1$4333$$ = 0}, 
    PaneBox[
     PanelBox[
      DynamicWrapperBox[GridBox[{
         {
          ItemBox[
           ItemBox[
            StyleBox[GridBox[{
               {
                TagBox["\<\"\"\>",
                 HoldForm], 
                AnimatorBox[Dynamic[$CellContext`i1$$], {1, 10, 1},
                 AnimationRate->Automatic,
                 
                 AppearanceElements->{
                  "ProgressSlider", "PlayPauseButton", "FasterSlowerButtons", 
                   "DirectionButton"},
                 AutoAction->False,
                 ContinuousAction->True,
                 DisplayAllSteps->True,
                 PausedTime->Automatic]}
              },
              AutoDelete->False,
              
              GridBoxAlignment->{
               "Columns" -> {Right, {Left}}, "ColumnsIndexed" -> {}, 
                "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
              
              GridBoxItemSize->{
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "ManipulateLabel",
             StripOnInput->False],
            Alignment->{Automatic, Inherited},
            StripOnInput->False],
           Background->None,
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            StyleBox[
             PaneBox[
              TagBox[
               PaneSelectorBox[{1->
                GraphicsBox[{{}, {}, 
                  {Hue[0.67, 0.6, 0.6], LineBox[CompressedData["
1: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
X6u56D9WJkR7
                    "]]}},
                 AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
                 Axes->True,
                 AxesOrigin->{0, 0},
                 PlotRange->{{0, 10}, {-1, 1}},
                 PlotRangeClipping->True,
                 PlotRangePadding->{
                   Scaled[0.02], Automatic}], 2->
                GraphicsBox[{{}, {}, 
                  {Hue[0.67, 0.6, 0.6], LineBox[CompressedData["
1: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
                    "]]}},
                 AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
                 Axes->True,
                 AxesOrigin->{0, 0},
                 PlotRange->{{0, 10}, {-1, 1}},
                 PlotRangeClipping->True,
                 PlotRangePadding->{
                   Scaled[0.02], Automatic}], 3->
                GraphicsBox[{{}, {}, 
                  {Hue[0.67, 0.6, 0.6], LineBox[CompressedData["
1:eJwV13c8Vf8fB3DjXjurQcY9lysKSRrfps+bSonKrGgpI7uIyigzI5Q0FEkZ
bZGoSD5WZFRWIkL2uPeezKz4nd9f9/F83Me5n3Pfn/f79TlH6dQZM3s+Hh6e
bF4env9/Jl0+JbDWLkqXbeSeZHImULesgWl8iOmE+E48EPmqehwtlBeGMJk+
SGF1+3iEqjtKKooh6MxIZONkn2Otehm5bvd2+0vcQ+2PlxQuUb2GGmYdb/0h
niH/p3JuG1c8QIKtXWocIg/N7oqS/Kn0Cj2qSvYYJirR3+SLW32WFKJXmZGt
rlo/Uf3kAwF7uW/oNKq7x/bsRj7HpfTVG5qQe++q7pxXg+iMt7QaSvuFRJRC
1To2/UFW62v13xl2oWuS1eqPbMaQ4+2kI1H6vehUqwXmr5lECwVTcQ0qA0gk
8bebR8sk8kriDtquGUDZ1u4KHX2TKNyki8HdPID4f4b75PP+Rb/6Fsv+2T+A
0prz13n89xfp6Gn+e3ZxAPV9Zz5tT/mLlAfzd4xVDSDnWnZsns8U0t/37VGl
8yDy+BR66ozaDHo9enF4+s4QYvQYCEyum0HH7+wbME8eQtV8ws/9YQZNPzhN
f/pkCK2AmJFIqxnU57X4nu77IdSSfzswLWoGSYuvHFNpGUJ6WY8ftJAz6K2J
36/G5cNIKvHzzx3vZ9GQ+PlVuXeGUWHe1ctVZbMoRqLj/YEHw8il2VjZtG4W
ZYgZafekD6NPS+ucjg/NIpcS/9qZnGHkE9sydVFhDmnMVDxprx9Gv68MLXsV
OIdC1njpByxio9dnxcxlDf+hB9q7x2Qvs1FNwmKfjIP/UMfekVuBV9ior0wu
Wd/uH9ogeai2M5qN5JavGnYN+IdWC2eJRSWyUWjxrpDi3H/ow2l/h7D3bHRQ
OuCNs/I8Kj0+PbtshI1m3ows/jg7j1wX7eC5eZSDlrRPbTYTXkDuO4oMRWw5
SEuIx6Z/2QL6mxgw5uPEQbZHxV9K6Sygc02yJ/XPc1ANTWOng+MCEjTzOH/h
Ogc9sLTzkvhOfb+GwfAo4qBHfi5D2od4oF3Pyi1egYu0i4Snwo/xgOKmHZb5
SlxURHtK77DlAfF0abcmVS7qjOlhxpzlgVPHy9RmtLmI8fDYocFIHpCW8HtG
7uSihLIDZY8KeODMpyvdN1y4KG7R+gfSyryQyBB59eINFymb1b9wWskLyeF3
z42+46LXd87mFWnxQqr50t06BVxUS2Q0um/lBY2v/EuSyrhIXEdVtNqCF6yd
tDWI71x09aDsxZBwXjjf1xDQOM5FwclzpuNsXpjsik36p0UiE+33HhpjvBDi
JmRurkMiRvG5G6emeaEzW14vZQOJ8ruGamvpfHCpbGOZxjYSja5oOZDB4AMh
0teMs4dEp17m7nMw4YP816MTq06SSHu7h1vSQT6wWqHQJW1HovkvmjGNR/lg
alRqbtyBRAlkao2+Ex/4RHe9TXMlUb1OnBERzAe21kMbsy+QSC/P3bD5DR9s
LRJqC40mkfhedSeJfD5wKhM6xnOdRG0/eyMMivhgWiOIz/sGiS7OHf2cU8MH
zlvy3xveIVEWMtp9o5f6/nR+6cNkEjHL1XbtleGHX7p6PbTXJOIe7LYLUuSH
q5jvrPQbEhX0Pwh9z+IHYYaD7PJcEh0WXlamqs0PcyqmH6XySBRrTNvBb8gP
BiKlRllFJOJp6IQCX36QijrITPlKotDBwke+Qfzgc0B5u10tiYR5kvg2R/DD
wMrwjYx6EkmvtirLvc0PLSNWH32+k2hFeN3uzCx++HjcUOJbK4meJ2U+dXvH
D4oF4zSTXyTSyokR1izkh20Cww2f20m06bdh9dNqfrjWt2nu0W8S7d1asj+l
jx9iD5i5jvaR6Kvpw0wbDj/Mj+oq6wyQyNzxsiQxzg/aXzJeOQ2S6OjtLfWJ
vDSQPvfdsGiYRJ0vZNdZC9GgX3HiUAebRPYlkzdlJWgw9tFu6ySHRO5ktuVt
BRo435ENEv1D7Tf9xltzFg0u2TV2CY+Q6ILCGRlpdRpsMv8myzNKokBDjZZr
/9Hg/IcInsYxEt1MTT0aYUaDyIFn75f/JZFsftBHAysaSBr/yW2ifL/2BINu
QwPRgPdXoqZI9PiffGeQGw0+n5a53zZNIvUlMwBeNMjvOtR1cYZEmerNj+Z9
aZD4zm1GbJZE7w/dsvWLoAHPfEiywhyJtrl7lm2+ToNDo7qadykXh5qsmLpN
A1ODnVdF/5HIIFEr7O19GvSeP593nnLVa7F+r1Qa9Mjm57VQ3v95aPe65zQQ
a5m4un6eRA3tn5+OZNGAz196dTjlwxOPhbPe0cCufSa5jnKb6BVn90IalIwn
di9eIJGNsm215icaZFb3/N1HuXeTnuZwNQ0KwsvbAig7HyBintXTINh+fdwz
ylz7f5zTLTRIzmPJVlM+59+6X7WTBsV/otx7KE/F5WX29NHg4XWH2xOU/Z/F
S6ZyaEBflxk9T5m3yNvj5DgNKq/bWixQDmsyrydmadDkGcL+S1mEs3ZdOy8d
1IolLQcoX+eXvHVfiA4VFySu1VJeIscdt5agQ/2LK/FZlO9q11guX0aHs1f9
PCIoK+5+/vaHAh2aD8/KH6accixC5g6LDru8pOIJyqpeDhct1Okwb1rT1U7V
Y/WWDvNkbTqs/6KnlEh5Pc/hNUMb6dDxKwSZUN5aXiuyYTsdzq1N3T5P1Vs/
2rAvYAcdXohmy6dTNjQrKa4ypEOwQVnLTsomsluTlprQYa0ZeeEXtZ/H0zQt
XhylAy2aYzFN7b+9c/qayVN0uBs5dtOfsqs2Q1TPiQ4tkxfeTFH94lsgUdLk
TVnn3K1Wqp+CgiOSlPzpIB686qA+5Yg9vD6uwXT4pvdr6hHVf3caR9fwXafD
nrAvv42o/kxKcBHdd5sO97YeXHlnkkRpNj198YmUS7xMWiZIlM3+nrT6KR0a
ZRQN9o5T80fLE7UqpsOwrWxNEzUv36vW9qdW0KFTSl9lgKT6JfZ5CfcLHbDL
5ROjXBINKdz3Cf1Jh8wXooEj1PzRNwT0Z45R+1XZfCaBml+x2b8lM9N0GNPg
9Hn2U/lRfPbBLh4BGLowqb+TmnfmvlOWrWICUPVv8nldN9X/9rtKBVQFwPqD
p348lRc7NAofmGoKwLJ9fQMbqTzZO7LR976OADjvu3P+/3lz+NLKtTpIALRO
c/YMN5PI67Zo8rHDAlAhk1T/hcorvyOhvk+PC0D/CvGC9XUkClb6ZzlmJwAf
Djhev/WNysMMrlikB7W+sfGEbg2JXn6q8825KgAnHll91v1Eop6J+IOiHwVA
6PFwzxCVpyl66879KqXWU2KcyaHy9kTM1+uZVQJw63dohjeVxz9V6JXmzQJg
sLDXsOMlierMPbfeHxOAUzW5iw6kkqjwtTFztbogREXyWz26Rs3Dv/5tC9qC
sD8mz6MvikSbDUOs6v4ThIxz4oasSBLldObFee8ShIS9fhtDQ6h8lVCjF9oI
gsA7VaVu6nyJd+Md2h8vCB/iad1LT5DIIu++gNIDQai+ROj9OELVm76JNZYm
CL49rs6xh0l07b770fhsQeB1klAeMqXyvrr1a8cXQWhgz23fupNEZ1e9fXOW
JgRE5dcxCzWq3r3Ol+I8hCBu3Qplt34uMrjEernzohCEi/AVb+/mIv2lbT8n
LwtBwM37twU6uGjLrn2bjkQLgYzdvp7AJi5ST18zxnoiBIzQ9g2yn7hI1H7c
MbdNCAJvaqfUP+Simp5LFs27hSG07GHlZTMu+uy/MeTqfmFIPuxueXgfF5Ut
IV9vsxQG2ScV29T3cFHBThuJR6eEwX61Fevddi56maZf5XRJGDRL6N7eK7ko
xk4QZrOFQTlQz+rKHAft74nVYDBEQHomamH2AfU8pNHTeFRFBMyd1i7ad4+D
jM79dzlRXQQOPM66H3+Tg/bwtdfK/icC6bvBYHkEB+kzNc4vNhEBgflF/V/P
ctCGo5+KhIJFwD7aKoCmx0EKjdOWY70iUNYSaJHSxkZDpacCP2eIQsrcVu+/
PGxE3Gh2vpYjCjy/xOWXTQ8ji+P7LS0+iMLpgLmI1SPU8+jUZvXOz6LAn2r+
yeD3MIpbLdX4t1sUoh9fnVYuHkZb47GampwYSG+dVg4NGEbRzgrfroSJQWbD
Po+pySGkJdWkuOPEIhB/z3imWjeIRNDEybYxcShV5KqddOhHuznWf5UtJaF3
wivPyKkHNZfY8VprSsESzzUeJqq/UW5E2XHmhBTEZk1Ou7xvRQ50786vX6Uh
uVVfwGJlI7L19MsVS1gMLrWXvTPuVqI1pzW+Gp9cAultBVKXHuaib9Kaot6b
l0JyyYeviyLT8YdXwYma/MvA+rDJf2vcyrAfr7pJza9lMHPB3MphXT0WafPd
454jA0u/nb1cXdSCex8r3Ur2lwXi3t2brv914lsrl9PyLJdDZq+kW93tbhyb
4FBxkikH/0mrWs979GHrW8e+ivXLQZyLwEb9kQGs8EZE3mVIDk7wp86emB3A
HXXvTldy5GCZ7iObC/RBbCchzRs2Lgc9u87Pxy0fxO5Xy9ct8MqD5fsKvUt6
gzg4cM29EQV5OJN285V87CB+5spr12QmDxJstRz3lUN4amf6dHKhPOwS0b3Z
v3MY+39IDikrlgfNNIeDlcbDmEcnYdFgmTxUXT8vlG4xjAWJ60o61fJwJ8BU
Z6/dMF42fdGw7Ic8bLWzdTUKGcbrMozvDfyRh8rT/dNqRcPYfen4prUsBRg5
nlS8fQMbj0ZxSyxVFUBz9vdy621s7M03aOy7SgEO89VpnN3Bxv7kL5vSNQrg
qml7PtKUjaMqKyIstymA1qq7vmfd2PjppcRmH0sFuPSlo1c8jY27e/UvloQr
AOYvKg8W42D95K8p6lHUelUmM9aLOfjhYesvcdcUIIqP546GHAcfr/ZQtr1N
Xb8naT5XjYN/Zj2s4U9VgP3L/GzP6HNwvd88c1ehAnyJjP7reZ6DS6TyKyvG
FcCadTH2dTMHK1XvGl8zpQBkWaXfzXYODgytY9ydpe7XWC3BrYeDdf8OnHPk
U4RsxWEnkT8cnN8mwxCWVAT2ZSONPgEuzn7i7blXQxEKf9YPqqzj4pTta+W/
nFSEK4NjdrlXuLhkv0jIrJ0ihD5tZOy5ysVdJ7qHVjkqwgcrh56Ga1zMCr6d
H+auCMUqvtea4rk4rXzaCvwUoUO5Wi/iGRenHyi5++aWIhyVDd91v5qLy20S
ebriFWFl0Ds9/I2L+zy8HCUTFSHXo2JzawMXq95S3eT2SBH2WlYun2/l4sfN
V3+ovlKE2LSwAHKYi5+eNF+WUKEIdzk5soEiJP7sqXn5cxV1/xJLHXTESTwQ
Qu+b/KIIAwYKj35JkXjl43e55o2KcF+6qo2xnMTPhuQtF/1WhB0b08yN1Uj8
/FzPzcAZRbiw+Um0mT6JM654S51ezYCxuJBhgXMkZm87FnxFmwF/viU6V3iT
WHN851jqOgZ48P8VCLpIXX9qyffOzQx4Kbn0dsclEj9Fb+5aGzBAMSpx0jCC
xGnTf4j9JxggdlDFtCGRxD1ZzbGupxgw9E7VZsUDErMci3ij7BkQpX8n5OxD
Eqc0Xe+ucGHAlv0F9NE0Eie/0Xqid5EBUsHeg48ySJzg5qq14QYD9K4xy3M+
kvinikWy+S0GBJcKd8djEi9v2yrpGc+APFHxRV7FJL67V3T0VRIDsO/nMJlP
JL6t9jx35XMGWMTO00VrSNzYfkN1dwYDUrwzA99+IfGSOz7x9lkM8DWyox/5
RuI4mqFPylsGZKm6aFyvJ3Hs7/5tCqUMCAnb1pnaTOLau98ytpQz4Nta00cy
P0ksYfKOYVXJgOOaOU6hrSS+VhjGc+cbA1w2q0kYtpM4OnFFmUQbA8ItHNIu
d5O4xmzRBq0OBiC38Pj8HhKLikykG3cxQLQ15TrZS+KrF8vCIwcYkPHxQ8zO
ARKHW9oa8U8wYL/L2fwENlWvA21H7acYoBbtGJLDIXGBoaV7xSwDfl8OWlzO
JfHo9t03ovgIWKE1H177h8Rim4pSOHQCFGxaXSpHSKymsznngDABY/trluaP
kvioqsaPxZIELE0cyw8eJ/EFZtqA92ICjGxycq0nqHrIKc78WEaAaXaSt/ok
iSvEJRTvKxKwR2HZztd/SdwlFKE1zyQgKBbMHKdIPMfHCzYqBGzaW6UiM01i
nb+jp1Q0CHh413DZ0RkS7xtx8QrTIuBuwPD6UcqOwz1XBtYSkGOySyZwlsTB
vcfi924gwCRY5yN9jsRJHU1PX24ioPBZrGoI5fctB/LFt1H354fMpyjXN3yu
PosI2FfF3GH/j8ScL3q/6vWp/x8pO1lJWehzPne9AQHGlWKuqvNU/5Ws44k3
JMD8Q2+aL2XdgpdS08YEkK9iHpZTPvx2BeuICQFz0iPHRRZIfC7rwfqP5gSE
eM937KJ87bmMAXGIgIKQxywfyk/TYg8FWVP1E2lblUa59IGwU/cxAjaM3xwt
p9x+N9h310kC/hl/uvSb8nTcbNQTOwKu6jpVj1FeEuOVJOxIwDZpv9Z/lLXC
Oa9cXAjI1J7KoN5XsGGQQ9EXdwJKlTr1pynb+XXUrfEkID56fcIQ5cveh7tv
eBNw7b/pNw2U752pGx+7SICB0PrYHMo5TnsFDvoTkMzP0Yqh/M22VOZ9AFXv
fVqxxygPHdu2Si6EgJ+raDkrKNMO527xDyMgYcY/oZeqB2GmZdweSUC23rMd
SZS3GD85BjEESDxMzDSmbGHAPJMSS0D5d8f2MareZ+BeIO0WAZIlarVxlK9u
kY5ziCdgl+1I6CrK6eujUj8nENDU1Dn3jtq/Ii1arvoDAnZaLd6kS3lCefIH
N42ALpniqbVUP0gqnhk0eUqAsmPQ5WSqX9RlBmayXxCwnxT/TKNsI/pT8UI2
Aa8Y6568pfrPl26+piWXAEY9sZ2f8u2FatiaR0Bb/ZX43VS/Vo19tF3ABNBW
BCW8o/p7Q9ujZ+FfCDC7z9+xnpoHSS3HqcxaAipajbaaUPPCDtDa3dxAwG83
Izc7ap7SWB96Vv6kfj9vl/kFat6WuDQSVX0EvFhruXr3EIn/FCS4jw4S8EjU
b/uqQWrexU9+lONQ/XlUcwWNmufQbI61yxgB3X83+6dR8z7jz28kwMOEV8vi
Ta53Unme7uCZwMuELadTVTZ1kLjpa+U9LX4mTCw5X9/yi8TZzNiBgwJM2Hr+
eYEglTfOZQphT8SYEJZg3LjoO4lbRDcW71nOhPWJKcdKK0hcvv7eQJscE7LG
XSanqTzMOTYn4aHAhMzN6e6ryqh8yyw5fo9gQhVbeMGziMR7zA/MDa5ggpm+
w4us99S8JTj+F6XDhBnTmdtNT0j8uLT6OLGeCTfaZK0T00l8i60V9mYDE14S
QzSrVBKf1Z1obN3EBFeTDElM5f3KriBPTcQEWz4jiY23qXxelZjxxYgJLWeL
lGsDSTw+ZpAeso8JQewVM4PUeXKgcPT+5gNMWGrafWXWl8QC5nuj082YQC+6
/JFOnUfe/tPOl6yYcHLIpvStI4nNvh1aufo0EyTloStqP4lf3eNndjsywZJ9
00bJiMTCdpky95yZcB49fPhqN9VvUwKCdHcmoPdhTllA4jXKb3vbvJgQEhO8
yVSHykvvJanRwUzotxdPEVpC5RMqStAPZYLo5JMMOUlqvoVd46auMKHoQthV
FTGq3x6UBtlFMmGdsF4BQSPxYIWnzbZYJvCLuirmjFHnv1ydIjuJCcHhadWW
dVwcUBRz1yiPCbj83J/QMC4e+lV0azqfCepWVheeB3Hxwdmx2CcFTCg7fIh6
V+FizY3WkfxFTLhtcSue7cnFzS9UfT+UM8Fb2yC6+TgX68TjIxqNTCi4Gf9Y
dwP1fOE2whAlmcDn0k7f18bBplEq8nl/mCC4smjbpSYOLnh6SOb0KBNy3mh3
ptdy8M3ujxKlE0xwbnnl2VnGwWB1lcdvjgm+x4g/My85OGEnq2tIWAlUI+VS
y/04eJ+8ZXqVihIY/P6xUEo9393t0So6oqoEA2m3RHwWcXBPhlArW00Jxo2l
nqsJcrA/FEhKaCjBhMzvlx4zbPzSnuVvvlYJxIINB993srFI1ohZ23YlsOo7
eGnpSzau2HmNh3tQCVZ/7D0qpcvGeu4VR6QilcD1TVur84FhPNM8aFB2VQkS
iuf0+g2Gcc4OMZ0L0UpwzmdD3FHdYay63FTo13UlqK2vn167ehiLlf3MeXpH
CbK8TVUiRIZx83LuIkhTgpXjPL+7S4fw2U9LityxEvCuvLzaae0QTlY4pVIz
oQRpqCZWZ2oAq5Q+ubP/iDJMRFbr87r04djVJer1hcqwvtAwvyWxGzuM0eoq
1VmwbTBupFa/E596PcqMvM4CIuCc4bUvLdg12Hxu7w0WLDxFUc9ftWBv85wf
YjdZ0FfT8gxfb8ERE97XYu+wIPxhc3KjaQt+tXl6Nj6JBf610jbPvzfj6eKF
pscvWCAfal8k1vYDx9aLxZRVsMDuuevPwe7vOCHVzTGskgW/8gsDdcq+41Sv
rzv2VLOgKvqinHfad/x2WexM9VcWbK12Mxqw+47brBc7NnxnAUOlLCG8txGr
dS/f0dXNAr0ljzNf9zZg7RxfRlovCxJ+XstO+tSAt1xpnbbvZ8HaHZ82hqY3
YGO1pKzBIRbciKjuA/sG7OnCZIyMsCBC06HDp6ce+28Lms4eY4FgTEvflrJ6
fGVRV6PXBAuy4pTfTabW47uZqVFTUyxYFrC06bhtPU4JpJ3On2FBzET2RtEd
9fiFqb2+/xwL0jQWhWYr1+Mc5XJF3XkWzHgpVVjw1ePCMdXphQVqvSiu0Ojv
Ovw/dQOHiw==
                    "]]}},
                 AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
                 Axes->True,
                 AxesOrigin->{0, 0},
                 PlotRange->{{0, 10}, {-1, 1}},
                 PlotRangeClipping->True,
                 PlotRangePadding->{
                   Scaled[0.02], Automatic}], 4->
                GraphicsBox[{{}, {}, 
                  {Hue[0.67, 0.6, 0.6], LineBox[CompressedData["
1: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
9VMC/wMtq9/O
                    "]]}},
                 AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
                 Axes->True,
                 AxesOrigin->{0, 0},
                 PlotRange->{{0, 10}, {-1, 1}},
                 PlotRangeClipping->True,
                 PlotRangePadding->{
                   Scaled[0.02], Automatic}], 5->
                GraphicsBox[{{}, {}, 
                  {Hue[0.67, 0.6, 0.6], LineBox[CompressedData["
1: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

                    "]]}},
                 AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
                 Axes->True,
                 AxesOrigin->{0, 0},
                 PlotRange->{{0, 10}, {-1, 1}},
                 PlotRangeClipping->True,
                 PlotRangePadding->{
                   Scaled[0.02], Automatic}], 6->
                GraphicsBox[{{}, {}, 
                  {Hue[0.67, 0.6, 0.6], LineBox[CompressedData["
1:eJwVl3k8VG8bxkVJdiJmrDMjsrQvlPLcJSWpUEhpoyQJKSGU8CNbUZGlTaWk
kq2y5UGKkCIhZN/NzGPf4z3vPzOf7+c8c+a6r3s592HYOJud4eXh4SmmPv7/
/fCaDf/a06F6ZXudHpo4R+gV/1I2tlQ+h7wv86WXqTqh+a/5/srKnsjCsOKO
l+o19LAgXGmRcjB6ET6otVz1FnLc5nZhQikWdYb/eaa3/BH6NWN/b1DpFTr6
PkyjmZGCFje2q3GUslHg0nwDL6l8lFD2+OKA0jf0IPVSCqPlO0p5F9zouKoB
sSKezeVrNqN+yf4wo1MNKKYVT/13qhmpXTHSW3GvAS13NjVbe78ZPdkqlNAx
1YBMY14e3sDbgu58C7M78qUR6Z6/eq67tgVd6bg9tNv6Lwr8NLvR/lMreixU
7i9h0IpWHd/Fm2Xejs6iqli2awda6ub+m2vWhXiejuc0hnagobebCzac60Ix
C+Wbyp53oL+rO4bPXu9Cpd/sFF/VdqB9H63ao153oRWHZp+e2dKJ9pq5VIrw
daNee7U3zQu6EB93aNOxlG7kcMcn/2dEN1J4WJo0OdaDeMeetuBX3ahrv/S2
z0t6UZxlKc+7om4UMG743UOhF5XJL9UPH+1G7NSQB8939iLNl0klew73IEGZ
ENl/kb2InfvrZ5FSL/qkcLDm6Yo+5NSl3pGZ0oceqf9KPWDQj1qP/xEo/NaH
/vnpXSmz7EcH62+u+t7Zh1Lv9jE0HPqRTnmPZxe9H8XPXWu9f6sf8aUlii8L
6kf8mXsGNWr7UYw3Q8/9xAA6FbzptNLJASQ4/tPW/+oACs9cQlpcBpCPs2/w
7agBNBM4pBdwYwDZ2LTUvCwfQA5/n/S5Px1AWoYPz9drs1GJp/GdJR0DqHAp
LXazOAfJ+Ob+KDnORhvCS/MNNDnorGFYV94FNnrB79FpuouD3Ef2593zZqOw
qdrVDt4c9DQqw5kdy0YWLfe+xvVy0BL4s2fLLzbqTxYfnSngIktZE1F94CBB
RoBai84g+jRuuvUVHxeVbo1cfc1gECVOjjfLi3JR4OFH2gpmg8h0p+NdN1ku
4o3I2n30/CBaF1kmXKvFRdNz7LN1DwfRv9+Z+maHuGigyTzpB+8QCnLiqqx5
xEXJkzapTmJDyLRCq3DwBRfZS7lkicgPoUKlvd1R77ioc29I6d6NQ8hYaueb
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
                    "]]}},
                 AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
                 Axes->True,
                 AxesOrigin->{0, 0},
                 PlotRange->{{0, 10}, {-1, 1}},
                 PlotRangeClipping->True,
                 PlotRangePadding->{
                   Scaled[0.02], Automatic}], 7->
                GraphicsBox[{{}, {}, 
                  {Hue[0.67, 0.6, 0.6], LineBox[CompressedData["
1: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
yeR4m9Eoh3T5CXeMlKriLyMxP0vJHjL/6bt0ixpVjK78Jq+t30NecOZYSTer
4pCSHHfVhR7y0r3t7pVxVdxlczVzQqyXJF09K39soRrquDz2AAku6V213/fq
YjU82RTmUTeTS3SH1g8+WaqGBqHris21uOSlveK3phVqOGgroF2/jkuew5tI
a1P+87/s2jdd4JL4sT7m9gNqGPSmau6NVi5pS6kNOWGvhisnDz4boFzCdsyZ
FuSghmud9nkbTXJJ3PfbrQXOaih9bnmHlSKPxLzRe2biqYauryoXtK3lkaiT
J/QM76ghl8sKNr7PI3WaljEWYWro++ja10NPeGRWw0o5t3tqaFQS4HMkiUci
zSQHkh+p4e3BvFWTOTwSrvUyff5LNcwY44S5d/BIze878zYmqaG4YLTnWcoj
ihHn7zmk8PPJNrlsPsojoUKbz8e9VUM3zsbiR+KUhDR3rlL5pIYCvxxNPBdQ
UhFZnmT8RQ3/iF9XM19CiezOd2r7CtXwgmFPmYgxJbeyAwQiytVwtRD1F9jM
P/8/mJsv26CGFZYfdhg4UFJiLm2o16iGlh7h5a3OlEhKDCdsbVHDZ5kzf590
o+SGZ/61wC41vNuodl3+MiXXrA5vERxWwxm/RjEigpK4HQ22DqNqmPQtbvHt
h5R82GzlUjChhqb+xmU2cZQMrN54J2g6E/mOHjiVRInU8pw4rjAT1/ZecHqX
SonWkhVpO8SZKBrX7Vr1jhLbeTo/FOSY6H11VNovlxIPVnzXWQUmniwUvDfz
CyWhs1XHfzCYGLA7565PESUFMrKqD1WZeG1tRXlpFSUtYtf1/rGYmHvAR/C/
75RMTp+GBzWZOMci5u6xOkqW/Bmw19Rh4kz34LTtzZRs63c+E6DHxNmSKSsv
t1Hi2NN2tUufibf3t0n6dVLi277/npkhE6e29bGsOZQ8avz+/NVyJnLO1Z4T
4lLy/ueOTJlVTNy3qEncl1JSVf212BWYqBwS+L2qnxJuqcmvqrVMjPYM/zky
SInY10yegSkTY+8KyvGGKWHnLRW4t5mJYDPD4/0fStZ8eCU/tpWJ7SogtXuM
kr1v57JtdjKxeHJD6ZdxStxTog0+WjBx0Zj6e4n/38+9VDZl7uHnz5UqVv9L
yfP4kD0+1vz3Qy8LSf2j5FO0+PHW/Uw8EKB/uJDPvyN9vTYcYmKE6ayOfVOU
jIVOBD07wkQzoxM3P/JZMfjMI3FHJsrERVv9/35R7xo32dmZPz/vDpv84/Nm
n6M5pS5MtA1O2lHP5yMXGisXuTHRlJ10JYjPl87ubb1zlokl+6tqZPh8/1Tl
0KAnE7XESrY68OOnHTcT2e3NxLKqa923+PmWH/6k/P4yE+eZL3kVxK+Hs3+V
9mw/Jv6eXBZhM0GJ0N50Y+8AJg5o44t/fD2Y5npbfwcycbeMUeeZUUqMtz7b
j8F8P2WuM88eocTSlHUqLoSJyxmlvXVDlJzC+1eEwvj1NnpmFA3w/Ww8I/To
PSb2xetkBfdRkmAQ9ORrFBNHcsWG2TxKcvSE0hdEM1HRxs0puIeSYY2RH7x4
JirYJzHq2imRUz3VvfM5EwVrva0+tlCyQLlrPDWRP15ZTaN7IyUHJetUPVKZ
SHnF3da1lHgJWyz6mc7Euzfs3INqKAmfKsaVGUw8dOmg7e0KSooGPx6eIky0
Ltx8WP4rJYYNsS+ulTJx7wefvn9p/Hh6jqOvK/h+rdlgOTeFkt7Lehtrq5lY
YTwhNDeRknh2Vtv8OiZOv/PDIeUxf/6ca5hFHUw8PTFa/yeQkr4PUS4D3Uy8
NCPGttuPv95lDn2czWXigmmrDqZdpMQ/lWvtPMhE+yf1Mj9cKRn3FtwiIsBC
99JL3TusKOlKOOoWNY2FnuoHDspsp+R7WeF9PUEWnqieePDUlJJUVkjXbhEW
Lm/+fPWIESVO+SoBz6RYKGSzQ1dZmZKfkstyN81ioUHIyicHy3nki8H9robZ
LAwfqhfL+cwjafsnZU+rsNCk/vXPsSweCXmdZ3efyULXXY29k894ZJPFjsnu
uSzUCmlYsvYSj7yPcjQKWsJCubS26Bo2jzz9VGzHNGDhNrNpaU3KPBLWqxfw
xpCFYg4vxL5K8ojrmuGa+uUsTN/XlDh/kEvmt/i46QILl7JCfJfmcEmk9oOk
0i0s1F1ttOmiBZcMDZom+G1joXRRz4kZ67lkR/bAwxU7WNiSnBd50YBLRCzM
biaYs1CFee7Ad0UuOes95nRxHwvfZx3VDqvuJeble+YvPMbCS5bW56w29xKp
s4pPbvqysC3iokEso4c4Qk7UWn8WpvRumq41vYd8Ej8ROnqVhcvCJBUDuBzi
Ff3J50ggX391Ya+KTxzSXeB2cFUIC9+dzL1/34VDvsyuVO19xMK/cQE6Mz92
k8s5wZFbMlioXeOa/GJNF+H8ygkby2ThMSm9DIl5XWT3xGDIsw8sXJfPsDeT
7iK6y6wDBXNY2LngrPLR+k5SmzjPK+sLC+39Un/OONdJltwjNjo1fD1Fy6IO
JnSQjpP9apKUhad62OKlvW1k2xyrhCJNdbyxe+PJ01rNJLJNL8dmnjr6XT7g
9EW8mbQlidX3aqmj9/GXXSK9TcQbP8jJ6qijXI/CqFlKE3nlwPa20FfHhi1a
5q1GTUQipd+8YbU6zrP46NMd8JsUrL8lwNutjqrx24xXRtURE5cCG/lAddS3
mxX5xaGKxKjYa5YMq6OFlzab5eUBmp+eRWy30cDAdgfpN62VUKY7Gt9gq4Gr
b807f2NeFXhGbHrjZKeBXfkGR7Yer4Li493lAYc0cFbT+IVbvCpwk9MRJ8c0
sOXk4hmCo9VA9idfWHRGA+/snrv0uMh3sB5NOygXrIHVrMn5ErL8/erCvAVV
2Rqofz6t8EZjEzxfbiPum6OBFqWmeVFTTUDWDXXq52lgppyvyF1mM/D2zUu4
81kDzZ7mkJUHmmFLwA3mrhIN3KG8S/X4r2YQaTRXrPipgcyNPQbS31rgQkjr
39IhDdTcdyNpR0obhD7wbrg4ooF7rNUOKZW2wcunSlkLRzXw7ZVvM7K726D2
w0bP4AkN9HgyVvFOox2WdScObJ3ORq1Y9cOb7rZDn8mZzmJZNj478IBkuXTA
0UGhysIFbGz0367dKt0Fdi/Xl9nqsjE52oCjNLcLdh/yL6YL2dhSV7lPZ1UX
mJYLflHSZ2NJmtG3v8e7YF7i9KxDRmw8ovrGYE1+F7TbCySMrWNjhVpAqaJ7
NxypmvDU3s/G8pzQDPsMDtgGrjz3wY6Nj99vKXxXwgFLvOC+4yAbW/HK9t5G
DqxPHj959jAbIx1X2Q4K94DmjTH73ONsDGutmeaxswdaTf5s3XeOjcrOTxux
sQfs/xtgBd5m46pzaSFmrb1wwtdi0uwOG7dBkhd7qBfOWqT9kLrLxsCdLuEV
Qly4Pnz2VkgEG0UePhp9OpcLySvGJu49YiO8u/3JhH8+HMud+v40kY1BdWlv
ZzdwYfrdg6mOSWy82B3vrMPhgtSR3OAFr9l4ZvqsXzKjXFAT8VufnMrGL+xP
sdsUeLDeTCQ1PYONZPTxuecbeRBSJRWcX8DGB/p7rfKe8SDqyUnHgEI2hot/
uD2cyoMnZ8rWbSpmY8Rw9e7xjzx4ywgZLy5j4wfFt5s8q3nQYK3gWP2NjTp+
X8fWTfKgQ+fMuvAfbDRIPfp9mggFOlmjtucnG/eYyeWFyFKYHhPxra6BjVVL
Bm+qa1DQap21rqWVjQ8NA09Kb6CwOM1LLb6djWv2sFebb6NgfLV+zKGTjX57
ml8fs6KwVetRSjeHjZIv2NuFHCi4ObPU+vv5ej7vny/oS8F7lc9Y6iB/vh63
FxVfp3BVuqXmzDAbB35NpR+5TSHy9ZOg0VG+nuenoehDCnFXhI5ljrNx5pui
Yrk4Com7HNZ6T7IxVPiSF+cZhTSNL6pr/rExYafJurAkCtmD88amptj4nOur
KvOGwv8AAUOnnA==
                    "]]}},
                 AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
                 Axes->True,
                 AxesOrigin->{0, 0},
                 PlotRange->{{0, 10}, {-1, 1}},
                 PlotRangeClipping->True,
                 PlotRangePadding->{
                   Scaled[0.02], Automatic}], 8->
                GraphicsBox[{{}, {}, 
                  {Hue[0.67, 0.6, 0.6], LineBox[CompressedData["
1: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
xqanNVDj2OMPAs615H9u0Q2q
                    "]]}},
                 AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
                 Axes->True,
                 AxesOrigin->{0, 0},
                 PlotRange->{{0, 10}, {-1, 1}},
                 PlotRangeClipping->True,
                 PlotRangePadding->{
                   Scaled[0.02], Automatic}], 9->
                GraphicsBox[{{}, {}, 
                  {Hue[0.67, 0.6, 0.6], LineBox[CompressedData["
1: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
                    "]]}},
                 AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
                 Axes->True,
                 AxesOrigin->{0, 0},
                 PlotRange->{{0, 10}, {-1, 1}},
                 PlotRangeClipping->True,
                 PlotRangePadding->{
                   Scaled[0.02], Automatic}], 10->
                GraphicsBox[{{}, {}, 
                  {Hue[0.67, 0.6, 0.6], LineBox[CompressedData["
1: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
Cg==
                    "]]}},
                 AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
                 Axes->True,
                 AxesOrigin->{0, 0},
                 PlotRange->{{0, 10}, {-1, 1}},
                 PlotRangeClipping->True,
                 PlotRangePadding->{
                   Scaled[0.02], Automatic}]}, Dynamic[$CellContext`i1$$],
                Alignment->Automatic,
                ImageSize->All],
               Identity,
               Editable->True,
               Selectable->True],
              ImageMargins->10],
             Deployed->False,
             StripOnInput->False,
             ScriptLevel->0,
             GraphicsBoxOptions->{PreserveImageOptions->True},
             Graphics3DBoxOptions->{PreserveImageOptions->True}],
            Identity,
            Editable->False,
            Selectable->False],
           Alignment->{Left, Center},
           Background->GrayLevel[1],
           Frame->1,
           FrameStyle->GrayLevel[0, 0.2],
           ItemSize->Automatic,
           StripOnInput->False]}
        },
        AutoDelete->False,
        GridBoxAlignment->{
         "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Top}}, 
          "RowsIndexed" -> {}},
        GridBoxDividers->{
         "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
          "RowsIndexed" -> {}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.7], {
             Offset[0.5599999999999999]}, 
            Offset[0.7]}, "ColumnsIndexed" -> {}, "Rows" -> {
            Offset[0.4], {
             Offset[0.8]}, 
            Offset[0.4]}, "RowsIndexed" -> {}}], If[
        CurrentValue["SelectionOver"], 
        Manipulate`Dump`ReadControllerState[
         Map[Manipulate`Dump`updateOneVar[#, 
           CurrentValue["PreviousFormatTime"], 
           CurrentValue["CurrentFormatTime"]]& , {
           
           Manipulate`Dump`controllerLink[{$CellContext`i1$$, \
$CellContext`i1$4333$$}, "X1", 
            If["DefaultAbsolute", True, "JB1"], False, {1, 10, 1}, 10, 1.]}], 
         
         CurrentValue[{
          "ControllerData", {
           "Gamepad", "Joystick", "Multi-Axis Controller"}}], {}]],
       ImageSizeCache->{489., {173.75, 180.75}}],
      DefaultBaseStyle->{},
      FrameMargins->{{5, 5}, {5, 5}}],
     BaselinePosition->Automatic,
     ImageMargins->0],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellTags->"Cell 9.85"]
}, Open  ]],

Cell[TextData[{
 "You can speed up or slow down the animation, run it forward or backward, or \
move through frames manually using the slider. If you don't want the \
animation to play automatically when you first evaluate the cell, you can add \
the option  ",
 StyleBox["AnimationRunning ",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 Cell[BoxData[
  FormBox["\[Rule]", TraditionalForm]],
  FontWeight->"Bold"],
 StyleBox[" False",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ". "
}], "Text",
 CellChangeTimes->{{3.44642220091238*^9, 3.446422328496964*^9}, {
  3.4464225274670277`*^9, 3.4464225988526773`*^9}, {3.446422719698908*^9, 
  3.446422722898831*^9}, {3.446505875888036*^9, 3.446505891127554*^9}, {
  3.446589634152679*^9, 3.4465897250698347`*^9}, {3.446596713992525*^9, 
  3.446596734205933*^9}}],

Cell[TextData[{
 "\tAlso, as a general rule it is useful to specify the vertical range of the \
plots using the ",
 StyleBox["PlotRange",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " option, so that the axes of the graphs remain fixed during the animation."
}], "Text",
 CellChangeTimes->{{3.446589394138579*^9, 3.4465894060768127`*^9}}],

Cell[TextData[{
 "You can also create an animation more directly by using the command ",
 StyleBox["Animate",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ", or alternately, ",
 StyleBox["Manipulate",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ". ",
 StyleBox["Animate",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " forms an animation from an expression by varying a parameter in the \
expression over time. The syntax is "
}], "Text",
 CellTags->"Animate"],

Cell[TextData[{
 "\t\t",
 StyleBox["Animate[",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 StyleBox["expression",
  FontSlant->"Italic"],
 ", ",
 StyleBox["{k,kmin,kmax}]",
  FontFamily->"Courier",
  FontWeight->"Bold"]
}], "Text",
 CellChangeTimes->{{3.446505948332355*^9, 3.446505976804147*^9}, {
  3.446506366645825*^9, 3.446506462223628*^9}}],

Cell[TextData[{
 "or alternately,\n\t\t",
 StyleBox["Animate[",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 StyleBox["expression",
  FontSlant->"Italic"],
 ", ",
 StyleBox["{k,kmin,kmax,dk}]",
  FontFamily->"Courier",
  FontWeight->"Bold"]
}], "Text",
 CellTags->"i:manip"],

Cell[TextData[{
 "to specify the step size in the parameter ",
 StyleBox["k",
  FontSlant->"Italic"],
 ".  ",
 StyleBox["Manipulate",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " has the same syntax, but provides some other options in order to allow \
extra control over the result. An example of ",
 StyleBox["Animate",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " is shown in Cell ",
 ButtonBox["9.87",
  BaseStyle->"Hyperlink",
  ButtonData->{"Chapter9.nb", "Cell 9.87"}],
 ", and an example of ",
 StyleBox["Manipulate",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " is shown in Cell ",
 ButtonBox["9.88",
  BaseStyle->"Hyperlink",
  ButtonData->"Cell 9.88"],
 "."
}], "Text",
 CellChangeTimes->{{3.4599643755576878`*^9, 3.4599643761876783`*^9}},
 CellTags->"i:manip"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"f", "[", 
    RowBox[{"k_", ",", "x_"}], "]"}], " ", "=", " ", 
   RowBox[{"Sin", "[", 
    RowBox[{"k", " ", "x"}], "]"}]}], ";"}]], "Input",
 ShowCellTags->"True",
 CellChangeTimes->{{3.446421973995936*^9, 3.446421992618661*^9}, {
   3.446422092565832*^9, 3.4464220988866167`*^9}, {3.4465059967329082`*^9, 
   3.4465060294045677`*^9}, {3.446506077469742*^9, 3.446506102858107*^9}, 
   3.446506133431519*^9, {3.446507491388892*^9, 3.44650751146369*^9}, 
   3.446588836871479*^9, {3.4465888996827383`*^9, 3.446588915339499*^9}, {
   3.446589775396318*^9, 3.446589782188826*^9}, 3.446590507125753*^9, 
   3.447780844697145*^9},
 CellTags->"Cell 9.86"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Animate", "[", 
  RowBox[{
   RowBox[{"Plot", "[", 
    RowBox[{
     RowBox[{"f", "[", 
      RowBox[{"k", ",", "x"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", "0", ",", "10"}], "}"}], ",", 
     RowBox[{"PlotRange", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "1"}], ",", "1"}], "}"}]}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"k", ",", ".2", ",", "2", ",", ".2"}], "}"}], ",", 
   RowBox[{"AnimationRunning", "\[Rule]", "False"}]}], "]"}]], "Input",
 ShowCellTags->"True",
 CellTags->"Cell 9.87"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`k$$ = 1.6, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{
      Hold[$CellContext`k$$], 0.2, 2, 0.2}}, Typeset`size$$ = {
    450., {137., 145.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = True, $CellContext`k$4360$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, "Variables" :> {$CellContext`k$$ = 0.2}, 
      "ControllerVariables" :> {
        Hold[$CellContext`k$$, $CellContext`k$4360$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> Plot[
        $CellContext`f[$CellContext`k$$, $CellContext`x], {$CellContext`x, 0, 
         10}, PlotRange -> {-1, 1}], 
      "Specifications" :> {{$CellContext`k$$, 0.2, 2, 0.2, AnimationRunning -> 
         False, AppearanceElements -> {
          "ProgressSlider", "PlayPauseButton", "FasterSlowerButtons", 
           "DirectionButton"}}}, 
      "Options" :> {
       ControlType -> Animator, AppearanceElements -> None, 
        SynchronousUpdating -> True, ShrinkingDelay -> 10.}, 
      "DefaultOptions" :> {}],
     ImageSizeCache->{509., {184., 191.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellTags->"Cell 9.87"]
}, Open  ]],

Cell[TextData[{
 "If you click the play button in the animation in Cell ",
 ButtonBox["9.87",
  BaseStyle->"Hyperlink",
  ButtonData->"Cell 9.87"],
 " you will see that it does not run properly until the function ",
 Cell[BoxData[
  FormBox[
   RowBox[{"f", "(", 
    RowBox[{"k", ",", "x"}], ")"}], TraditionalForm]]],
 " is evaluated (in Cell ",
 ButtonBox["9.86",
  BaseStyle->"Hyperlink",
  ButtonData->"Cell 9.86"],
 "); whereas the animation in Cell ",
 ButtonBox["9.85",
  BaseStyle->"Hyperlink",
  ButtonData->"Cell 9.85"],
 " runs fine without any cell being evaluated. This is because the \
information required to make the animation in Cell ",
 ButtonBox["9.85",
  BaseStyle->"Hyperlink",
  ButtonData->"Cell 9.85"],
 " is already stored in the notebook as a table of plots; but the animation \
in Cell ",
 ButtonBox["9.87",
  BaseStyle->"Hyperlink",
  ButtonData->"Cell 9.87"],
 " is created \"on the fly\",  and the function ",
 Cell[BoxData[
  FormBox[
   RowBox[{"f", "(", 
    RowBox[{"k", ",", "x"}], ")"}], TraditionalForm]]],
 " being plotted must be evaluated before it can be animated.  In order to \
make  Cell ",
 ButtonBox["9.87",
  BaseStyle->"Hyperlink",
  ButtonData->"Cell 9.87"],
 " work without having to evaluate the function ",
 Cell[BoxData[
  FormBox[
   RowBox[{"f", "(", 
    RowBox[{"k", ",", "x"}], ")"}], TraditionalForm]]],
 "  every time the notebook is opened, you can add the option ",
 StyleBox["SaveDefinitions ",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 Cell[BoxData[
  FormBox["\[Rule]", TraditionalForm]],
  FontWeight->"Bold"],
 StyleBox[" True",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ".  ",
 "This is done in Cell ",
 ButtonBox["9.88",
  BaseStyle->"Hyperlink",
  ButtonData->"Cell 9.88"],
 " for the case of a ",
 StyleBox["Manipulate",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " command. ",
 "When such a cell is viewed, the function definitions required by the \
animation are then automatically evaluated.  This may be time-consuming if \
the evaluations are complex; in which case the ",
 StyleBox["ListAnimate",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " method of animation may be superior. Also, be aware that the saved \
definitions are stored in the ",
 StyleBox["Global",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " context along with other user-defined variables, as soon as the cell is \
viewed for the first time. These saved definitions may overwrite  or shadow \
previously-defined variables with the same name. For instance, without first \
evaluating Cell ",
 ButtonBox["9.88",
  BaseStyle->"Hyperlink",
  ButtonData->"Cell 9.88"],
 ", you can check (using, for instance, ",
 StyleBox["?g",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ") that the act of viewing cell once causes the function ",
 StyleBox["g",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " to be defined.  "
}], "Text",
 CellChangeTimes->{{3.459964418944796*^9, 3.459964428346189*^9}, 
   3.459964459308844*^9, 3.459964515860031*^9}],

Cell[TextData[{
 "Since the option  ",
 StyleBox["SaveDefinitions ",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 Cell[BoxData[
  FormBox["\[Rule]", TraditionalForm]],
  FontWeight->"Bold"],
 StyleBox[" True",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " can cause variables to be overwritten when the cell is viewed, I do not \
recommend using this method to store definitions in an animation. It is \
better to use a ",
 StyleBox["DynamicModule",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ". This will be discussed in Chapter ",
 ButtonBox["4",
  BaseStyle->"Hyperlink",
  ButtonData->{"Chapter4.nb", None}],
 " in relation to Cell ",
 ButtonBox["4.7",
  BaseStyle->"Hyperlink",
  ButtonData->{"Chapter4.nb", "Cell 4.7"}],
 "."
}], "Text",
 CellChangeTimes->{{3.459964522153061*^9, 3.4599647012097673`*^9}, {
   3.45996526057624*^9, 3.4599652912109003`*^9}, {3.459965337429469*^9, 
   3.459965342966112*^9}, {3.531586121706509*^9, 3.531586152669053*^9}, 
   3.531586271187623*^9},
 CellTags->"i:dyn"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"g", "[", 
    RowBox[{"k_", ",", "x_"}], "]"}], " ", "=", " ", 
   RowBox[{"Cos", "[", 
    RowBox[{"k", " ", "x"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"Plot", "[", 
    RowBox[{
     RowBox[{"g", "[", 
      RowBox[{"k", ",", "x"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", "0", ",", "10"}], "}"}], ",", 
     RowBox[{"PlotRange", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "1.5"}], ",", "1.5"}], "}"}]}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"k", ",", "0", ",", "2"}], "}"}], ",", 
   RowBox[{"SaveDefinitions", "\[Rule]", "True"}]}], "]"}]}], "Input",
 ShowCellTags->True,
 CellChangeTimes->{{3.4599644865463877`*^9, 3.4599644890221157`*^9}},
 CellTags->"Cell 9.88"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`k$$ = 0.77, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{
      Hold[$CellContext`k$$], 0, 2}}, Typeset`size$$ = {450., {137., 145.}}, 
    Typeset`update$$ = 0, Typeset`initDone$$, Typeset`skipInitDone$$ = 
    False, $CellContext`k$13698$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, "Variables" :> {$CellContext`k$$ = 0}, 
      "ControllerVariables" :> {
        Hold[$CellContext`k$$, $CellContext`k$13698$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> Plot[
        $CellContext`g[$CellContext`k$$, $CellContext`x], {$CellContext`x, 0, 
         10}, PlotRange -> {-1.5, 1.5}], 
      "Specifications" :> {{$CellContext`k$$, 0, 2}}, "Options" :> {}, 
      "DefaultOptions" :> {}],
     ImageSizeCache->{509., {193., 200.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({$CellContext`g[
         Pattern[$CellContext`k, 
          Blank[]], 
         Pattern[$CellContext`x, 
          Blank[]]] = Cos[$CellContext`k $CellContext`x]}; 
     Typeset`initDone$$ = True),
    SynchronousInitialization->True,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{
  3.459964491268608*^9, {3.460503804073472*^9, 3.4605038111198473`*^9}},
 CellTags->"Cell 9.88"]
}, Open  ]],

Cell[TextData[{
 "By clicking on the plus sign beside the slider in Cell ",
 ButtonBox["9.88",
  BaseStyle->"Hyperlink",
  ButtonData->"Cell 9.88"],
 " various controls are displayed, which allow one to step through or animate \
the plots. "
}], "Text"],

Cell[TextData[{
 StyleBox["Animate",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ", ",
 StyleBox["ListAnimate",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ", and ",
 StyleBox["Manipulate",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " are examples of commands that create \"dynamic content\" in ",
 StyleBox["Mathematica ",
  FontSlant->"Italic"],
 "notebooks.  Dynamic content runs automatically, without  requiring mouse \
clicks or other intercession by the user. This is a very powerful feature, \
and therefore must be treated carefully. It is possible for a hacker to code \
a ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " notebook with dynamic content that wipes out files or installs malicious \
software, without the knowledge of the user. Therefore, whenever you open a \
notebook with dynamic content, a dialogue box will appear asking if you wish \
to enable these features. ",
 StyleBox["You should only enable dynamic content in notebooks generated by \
trusted individuals or organizations. ",
  FontWeight->"Bold"]
}], "Text",
 CellChangeTimes->{{3.45996474137533*^9, 3.459965115091148*^9}, {
   3.45996515098102*^9, 3.459965233338323*^9}, {3.459966951663556*^9, 
   3.4599669576236973`*^9}, {3.459967008170713*^9, 3.459967025475274*^9}, {
   3.459967058168439*^9, 3.459967113176586*^9}, {3.459967154260453*^9, 
   3.459967168609159*^9}, 3.459967206249496*^9, {3.4599672932036*^9, 
   3.459967315786593*^9}, {3.4599674188734913`*^9, 3.45996742836136*^9}, {
   3.459967764491995*^9, 3.459967765390456*^9}, {3.460504096022058*^9, 
   3.460504132163883*^9}, {3.4605041677687407`*^9, 3.460504175350988*^9}, {
   3.460504227436623*^9, 3.4605042301109867`*^9}, {3.4605042687752533`*^9, 
   3.46050433788202*^9}, {3.46050437043954*^9, 3.460504407699643*^9}, {
   3.4605044692704697`*^9, 3.46050453675292*^9}}],

Cell[TextData[{
 "There is a third way to create an animation that can sometimes be useful \
when the animation cells are very complicated. For slower computers this is \
currently the best animation method. First print out the series of cells to \
be animated using the ",
 StyleBox["Print",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " command. Then by selecting these cells with the mouse, you can animate \
them by using the ",
 StyleBox["Animate Selected Graphics",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " command under the ",
 StyleBox["Graphics -> Rendering",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " menu. Here is  an example  using the same plots that were created in Cell ",
 ButtonBox["9.84",
  BaseStyle->"Hyperlink",
  ButtonData->"Cell 9.84"],
 ": "
}], "Text",
 CellChangeTimes->{{3.459967790330346*^9, 3.459967790920849*^9}, {
  3.503089831631048*^9, 3.5030898321800337`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Do", "[", 
   RowBox[{
    RowBox[{"Print", "[", 
     RowBox[{"plottable", "[", 
      RowBox[{"[", "n", "]"}], "]"}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"n", ",", "1", ",", 
      RowBox[{"Length", "[", "plottable", "]"}]}], "}"}]}], "]"}], 
  ";"}]], "Input",
 ShowCellTags->"True",
 CellChangeTimes->{{3.44694607974371*^9, 3.446946106507465*^9}, 
   3.446946185738123*^9},
 CellTags->"Cell 9.89"],

Cell[CellGroupData[{

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {Hue[0.67, 0.6, 0.6], LineBox[CompressedData["
1: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
X6u56D9WJkR7
     "]]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  AxesOrigin->{0, 0},
  PlotRange->{{0, 10}, {-1, 1}},
  PlotRangeClipping->True,
  PlotRangePadding->{
    Scaled[0.02], Automatic}]], "Print",
 CellTags->"Cell 9.89"],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {Hue[0.67, 0.6, 0.6], LineBox[CompressedData["
1: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
     "]]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  AxesOrigin->{0, 0},
  PlotRange->{{0, 10}, {-1, 1}},
  PlotRangeClipping->True,
  PlotRangePadding->{
    Scaled[0.02], Automatic}]], "Print",
 CellTags->"Cell 9.89"],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {Hue[0.67, 0.6, 0.6], LineBox[CompressedData["
1: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
Ovw/dQOHiw==
     "]]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  AxesOrigin->{0, 0},
  PlotRange->{{0, 10}, {-1, 1}},
  PlotRangeClipping->True,
  PlotRangePadding->{
    Scaled[0.02], Automatic}]], "Print",
 CellTags->"Cell 9.89"],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {Hue[0.67, 0.6, 0.6], LineBox[CompressedData["
1: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
9VMC/wMtq9/O
     "]]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  AxesOrigin->{0, 0},
  PlotRange->{{0, 10}, {-1, 1}},
  PlotRangeClipping->True,
  PlotRangePadding->{
    Scaled[0.02], Automatic}]], "Print",
 CellTags->"Cell 9.89"],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {Hue[0.67, 0.6, 0.6], LineBox[CompressedData["
1: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

     "]]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  AxesOrigin->{0, 0},
  PlotRange->{{0, 10}, {-1, 1}},
  PlotRangeClipping->True,
  PlotRangePadding->{
    Scaled[0.02], Automatic}]], "Print",
 CellTags->"Cell 9.89"],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {Hue[0.67, 0.6, 0.6], LineBox[CompressedData["
1:eJwVl3k8VG8bxkVJdiJmrDMjsrQvlPLcJSWpUEhpoyQJKSGU8CNbUZGlTaWk
kq2y5UGKkCIhZN/NzGPf4z3vPzOf7+c8c+a6r3s592HYOJud4eXh4SmmPv7/
/fCaDf/a06F6ZXudHpo4R+gV/1I2tlQ+h7wv86WXqTqh+a/5/srKnsjCsOKO
l+o19LAgXGmRcjB6ET6otVz1FnLc5nZhQikWdYb/eaa3/BH6NWN/b1DpFTr6
PkyjmZGCFje2q3GUslHg0nwDL6l8lFD2+OKA0jf0IPVSCqPlO0p5F9zouKoB
sSKezeVrNqN+yf4wo1MNKKYVT/13qhmpXTHSW3GvAS13NjVbe78ZPdkqlNAx
1YBMY14e3sDbgu58C7M78qUR6Z6/eq67tgVd6bg9tNv6Lwr8NLvR/lMreixU
7i9h0IpWHd/Fm2Xejs6iqli2awda6ub+m2vWhXiejuc0hnagobebCzac60Ix
C+Wbyp53oL+rO4bPXu9Cpd/sFF/VdqB9H63ao153oRWHZp+e2dKJ9pq5VIrw
daNee7U3zQu6EB93aNOxlG7kcMcn/2dEN1J4WJo0OdaDeMeetuBX3ahrv/S2
z0t6UZxlKc+7om4UMG743UOhF5XJL9UPH+1G7NSQB8939iLNl0klew73IEGZ
ENl/kb2InfvrZ5FSL/qkcLDm6Yo+5NSl3pGZ0oceqf9KPWDQj1qP/xEo/NaH
/vnpXSmz7EcH62+u+t7Zh1Lv9jE0HPqRTnmPZxe9H8XPXWu9f6sf8aUlii8L
6kf8mXsGNWr7UYw3Q8/9xAA6FbzptNLJASQ4/tPW/+oACs9cQlpcBpCPs2/w
7agBNBM4pBdwYwDZ2LTUvCwfQA5/n/S5Px1AWoYPz9drs1GJp/GdJR0DqHAp
LXazOAfJ+Ob+KDnORhvCS/MNNDnorGFYV94FNnrB79FpuouD3Ef2593zZqOw
qdrVDt4c9DQqw5kdy0YWLfe+xvVy0BL4s2fLLzbqTxYfnSngIktZE1F94CBB
RoBai84g+jRuuvUVHxeVbo1cfc1gECVOjjfLi3JR4OFH2gpmg8h0p+NdN1ku
4o3I2n30/CBaF1kmXKvFRdNz7LN1DwfRv9+Z+maHuGigyTzpB+8QCnLiqqx5
xEXJkzapTmJDyLRCq3DwBRfZS7lkicgPoUKlvd1R77ioc29I6d6NQ8hYaueb
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
     "]]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  AxesOrigin->{0, 0},
  PlotRange->{{0, 10}, {-1, 1}},
  PlotRangeClipping->True,
  PlotRangePadding->{
    Scaled[0.02], Automatic}]], "Print",
 CellTags->"Cell 9.89"],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {Hue[0.67, 0.6, 0.6], LineBox[CompressedData["
1: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
yeR4m9Eoh3T5CXeMlKriLyMxP0vJHjL/6bt0ixpVjK78Jq+t30NecOZYSTer
4pCSHHfVhR7y0r3t7pVxVdxlczVzQqyXJF09K39soRrquDz2AAku6V213/fq
YjU82RTmUTeTS3SH1g8+WaqGBqHris21uOSlveK3phVqOGgroF2/jkuew5tI
a1P+87/s2jdd4JL4sT7m9gNqGPSmau6NVi5pS6kNOWGvhisnDz4boFzCdsyZ
FuSghmud9nkbTXJJ3PfbrQXOaih9bnmHlSKPxLzRe2biqYauryoXtK3lkaiT
J/QM76ghl8sKNr7PI3WaljEWYWro++ja10NPeGRWw0o5t3tqaFQS4HMkiUci
zSQHkh+p4e3BvFWTOTwSrvUyff5LNcwY44S5d/BIze878zYmqaG4YLTnWcoj
ihHn7zmk8PPJNrlsPsojoUKbz8e9VUM3zsbiR+KUhDR3rlL5pIYCvxxNPBdQ
UhFZnmT8RQ3/iF9XM19CiezOd2r7CtXwgmFPmYgxJbeyAwQiytVwtRD1F9jM
P/8/mJsv26CGFZYfdhg4UFJiLm2o16iGlh7h5a3OlEhKDCdsbVHDZ5kzf590
o+SGZ/61wC41vNuodl3+MiXXrA5vERxWwxm/RjEigpK4HQ22DqNqmPQtbvHt
h5R82GzlUjChhqb+xmU2cZQMrN54J2g6E/mOHjiVRInU8pw4rjAT1/ZecHqX
SonWkhVpO8SZKBrX7Vr1jhLbeTo/FOSY6H11VNovlxIPVnzXWQUmniwUvDfz
CyWhs1XHfzCYGLA7565PESUFMrKqD1WZeG1tRXlpFSUtYtf1/rGYmHvAR/C/
75RMTp+GBzWZOMci5u6xOkqW/Bmw19Rh4kz34LTtzZRs63c+E6DHxNmSKSsv
t1Hi2NN2tUufibf3t0n6dVLi277/npkhE6e29bGsOZQ8avz+/NVyJnLO1Z4T
4lLy/ueOTJlVTNy3qEncl1JSVf212BWYqBwS+L2qnxJuqcmvqrVMjPYM/zky
SInY10yegSkTY+8KyvGGKWHnLRW4t5mJYDPD4/0fStZ8eCU/tpWJ7SogtXuM
kr1v57JtdjKxeHJD6ZdxStxTog0+WjBx0Zj6e4n/38+9VDZl7uHnz5UqVv9L
yfP4kD0+1vz3Qy8LSf2j5FO0+PHW/Uw8EKB/uJDPvyN9vTYcYmKE6ayOfVOU
jIVOBD07wkQzoxM3P/JZMfjMI3FHJsrERVv9/35R7xo32dmZPz/vDpv84/Nm
n6M5pS5MtA1O2lHP5yMXGisXuTHRlJ10JYjPl87ubb1zlokl+6tqZPh8/1Tl
0KAnE7XESrY68OOnHTcT2e3NxLKqa923+PmWH/6k/P4yE+eZL3kVxK+Hs3+V
9mw/Jv6eXBZhM0GJ0N50Y+8AJg5o44t/fD2Y5npbfwcycbeMUeeZUUqMtz7b
j8F8P2WuM88eocTSlHUqLoSJyxmlvXVDlJzC+1eEwvj1NnpmFA3w/Ww8I/To
PSb2xetkBfdRkmAQ9ORrFBNHcsWG2TxKcvSE0hdEM1HRxs0puIeSYY2RH7x4
JirYJzHq2imRUz3VvfM5EwVrva0+tlCyQLlrPDWRP15ZTaN7IyUHJetUPVKZ
SHnF3da1lHgJWyz6mc7Euzfs3INqKAmfKsaVGUw8dOmg7e0KSooGPx6eIky0
Ltx8WP4rJYYNsS+ulTJx7wefvn9p/Hh6jqOvK/h+rdlgOTeFkt7Lehtrq5lY
YTwhNDeRknh2Vtv8OiZOv/PDIeUxf/6ca5hFHUw8PTFa/yeQkr4PUS4D3Uy8
NCPGttuPv95lDn2czWXigmmrDqZdpMQ/lWvtPMhE+yf1Mj9cKRn3FtwiIsBC
99JL3TusKOlKOOoWNY2FnuoHDspsp+R7WeF9PUEWnqieePDUlJJUVkjXbhEW
Lm/+fPWIESVO+SoBz6RYKGSzQ1dZmZKfkstyN81ioUHIyicHy3nki8H9robZ
LAwfqhfL+cwjafsnZU+rsNCk/vXPsSweCXmdZ3efyULXXY29k894ZJPFjsnu
uSzUCmlYsvYSj7yPcjQKWsJCubS26Bo2jzz9VGzHNGDhNrNpaU3KPBLWqxfw
xpCFYg4vxL5K8ojrmuGa+uUsTN/XlDh/kEvmt/i46QILl7JCfJfmcEmk9oOk
0i0s1F1ttOmiBZcMDZom+G1joXRRz4kZ67lkR/bAwxU7WNiSnBd50YBLRCzM
biaYs1CFee7Ad0UuOes95nRxHwvfZx3VDqvuJeble+YvPMbCS5bW56w29xKp
s4pPbvqysC3iokEso4c4Qk7UWn8WpvRumq41vYd8Ej8ROnqVhcvCJBUDuBzi
Ff3J50ggX391Ya+KTxzSXeB2cFUIC9+dzL1/34VDvsyuVO19xMK/cQE6Mz92
k8s5wZFbMlioXeOa/GJNF+H8ygkby2ThMSm9DIl5XWT3xGDIsw8sXJfPsDeT
7iK6y6wDBXNY2LngrPLR+k5SmzjPK+sLC+39Un/OONdJltwjNjo1fD1Fy6IO
JnSQjpP9apKUhad62OKlvW1k2xyrhCJNdbyxe+PJ01rNJLJNL8dmnjr6XT7g
9EW8mbQlidX3aqmj9/GXXSK9TcQbP8jJ6qijXI/CqFlKE3nlwPa20FfHhi1a
5q1GTUQipd+8YbU6zrP46NMd8JsUrL8lwNutjqrx24xXRtURE5cCG/lAddS3
mxX5xaGKxKjYa5YMq6OFlzab5eUBmp+eRWy30cDAdgfpN62VUKY7Gt9gq4Gr
b807f2NeFXhGbHrjZKeBXfkGR7Yer4Li493lAYc0cFbT+IVbvCpwk9MRJ8c0
sOXk4hmCo9VA9idfWHRGA+/snrv0uMh3sB5NOygXrIHVrMn5ErL8/erCvAVV
2Rqofz6t8EZjEzxfbiPum6OBFqWmeVFTTUDWDXXq52lgppyvyF1mM/D2zUu4
81kDzZ7mkJUHmmFLwA3mrhIN3KG8S/X4r2YQaTRXrPipgcyNPQbS31rgQkjr
39IhDdTcdyNpR0obhD7wbrg4ooF7rNUOKZW2wcunSlkLRzXw7ZVvM7K726D2
w0bP4AkN9HgyVvFOox2WdScObJ3ORq1Y9cOb7rZDn8mZzmJZNj478IBkuXTA
0UGhysIFbGz0367dKt0Fdi/Xl9nqsjE52oCjNLcLdh/yL6YL2dhSV7lPZ1UX
mJYLflHSZ2NJmtG3v8e7YF7i9KxDRmw8ovrGYE1+F7TbCySMrWNjhVpAqaJ7
NxypmvDU3s/G8pzQDPsMDtgGrjz3wY6Nj99vKXxXwgFLvOC+4yAbW/HK9t5G
DqxPHj959jAbIx1X2Q4K94DmjTH73ONsDGutmeaxswdaTf5s3XeOjcrOTxux
sQfs/xtgBd5m46pzaSFmrb1wwtdi0uwOG7dBkhd7qBfOWqT9kLrLxsCdLuEV
Qly4Pnz2VkgEG0UePhp9OpcLySvGJu49YiO8u/3JhH8+HMud+v40kY1BdWlv
ZzdwYfrdg6mOSWy82B3vrMPhgtSR3OAFr9l4ZvqsXzKjXFAT8VufnMrGL+xP
sdsUeLDeTCQ1PYONZPTxuecbeRBSJRWcX8DGB/p7rfKe8SDqyUnHgEI2hot/
uD2cyoMnZ8rWbSpmY8Rw9e7xjzx4ywgZLy5j4wfFt5s8q3nQYK3gWP2NjTp+
X8fWTfKgQ+fMuvAfbDRIPfp9mggFOlmjtucnG/eYyeWFyFKYHhPxra6BjVVL
Bm+qa1DQap21rqWVjQ8NA09Kb6CwOM1LLb6djWv2sFebb6NgfLV+zKGTjX57
ml8fs6KwVetRSjeHjZIv2NuFHCi4ObPU+vv5ej7vny/oS8F7lc9Y6iB/vh63
FxVfp3BVuqXmzDAbB35NpR+5TSHy9ZOg0VG+nuenoehDCnFXhI5ljrNx5pui
Yrk4Com7HNZ6T7IxVPiSF+cZhTSNL6pr/rExYafJurAkCtmD88amptj4nOur
KvOGwv8AAUOnnA==
     "]]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  AxesOrigin->{0, 0},
  PlotRange->{{0, 10}, {-1, 1}},
  PlotRangeClipping->True,
  PlotRangePadding->{
    Scaled[0.02], Automatic}]], "Print",
 CellTags->"Cell 9.89"],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {Hue[0.67, 0.6, 0.6], LineBox[CompressedData["
1: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
xqanNVDj2OMPAs615H9u0Q2q
     "]]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  AxesOrigin->{0, 0},
  PlotRange->{{0, 10}, {-1, 1}},
  PlotRangeClipping->True,
  PlotRangePadding->{
    Scaled[0.02], Automatic}]], "Print",
 CellTags->"Cell 9.89"],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {Hue[0.67, 0.6, 0.6], LineBox[CompressedData["
1:eJwVWHk8lN8Xti9FDGKsoxlbEhGVtnvaS9psKcsXRaRE0iJKUbSIiixFJUqW
SFRKLkK27EmRlHWYmWsPkd/7+2s+z+dz5pznPOc5933vu8jlhIWrAB8fX5gg
H9//fxMuuIgYHr6x3tZHkzP5NHZ9aZO6+X51D7RlX3GLbMJpNFdeGKyufg6J
V4aNVj+4ihKKwhnC6teQsXPxpO2De+jYOr/jfxhxSLRI3Kkr/ilq+useNcR4
jg4m5qevin6NRNt+a3MZ+ah+6e2e9Avl6HHVQ59BRiWKzQk4Ok+zBY3F5un+
vFmJGE6um4aCWtDWI9VdjVOVyCqrdfvj9hbEEfxj/a6pCjmo9wU43/2KVq3b
vfpaaA3aXLNfbdO/VlSfNSOgTepQTs315IaKNnSxSs/M8L8mVNZubPU6uhOl
vnyjlR7dhD7pXW+MxJ2oMXajoGZNE1qcSePbzO5EGkdsC+imzYhNC/1ltPYX
qhIM0eeT/YL0PuxW1+n8heTXtcnUlbegQ288f6iod6EXWdfajul/R39Gouuf
BvagAZmBm2bO39G4mKVUwMMepH3abL1O1Hd00HxGQrO4Bz1aO/9x19R3NOr8
03BYsBfdqbzpdrCsDS08cS3raGgvOt0VMbzN/geyOTSkmHqlD+VsHUrSjPiB
Jh63fopL7kPk+V4rwZIfaAvXSsbuYx9y96a9KdTuQJs8nl7aydePDs7eCTAZ
7UBiGq1z7Wf60cP51cG0LZ3IamLFuXAHNlq/7rx9kGMn+ia6z9z+HBu1ey0x
IWc6UV9y4sxEFBvRG2/01qR1oluLNstGVLPR7VjzHWHSv1CQ/h7hzSsGULBm
7YK5tl/oaFZ1+W3+QXQENcRxTnahhch74oAXB/ElTbxru9GFLlnojLZc5qBY
IZX2quQulJuv+105hoMqKt3Unrd0IS1LvoqZQg7SsZpJcl3djb6m1P2Sl+Ci
fnftjA7+HpTAUj114z4XBVWbf/6s1IPo+WO2fhlcRNc/yStY3oMO1CV1aHzg
ou2jBcvuu/Ygfs30Hc0/uOh5oEXe/soetJX1keWjwkNH7wQW1kf2oq/HXkaE
3eIhgfGkn/h5L1rxPlWl8D4Pxe+v4Msq6UV+cyW+b1J5qEpFdlP4WC8aVytW
Gi/moSXPUj/tsO1DZlKhiXHDPFQqXtu/yqcPWYfMVg/M8JD9sVFxnet96PSp
E0JzogTdNFxvLlLQh37L3UbeqgRx3jfVlzD6EWJrx/tuIShEbWr45SpqTt6R
X7/vJkjlkprs4339KJ+v/IKQLUHmWz2sLwb3o7pPkyWJHgR1p9467fWgH8kl
Wq+TOklQwPzcGIe8flTPh9o3+BOUWf/v25q+fmQD2du41wjaulzjry4fGy1f
7DruepugjugdKkqKbGQxynf9USxBC+yiHCfN2Mhw8VUDu6cEPf2Qf7HvEBul
fT2u2ZZB0Hr1n49aAthoapFpjcorgrx6FnflvmCjnY/e/e0uJKjT8ZtYcSUb
tQz5eXeWEmTZGqb/uZuN9D+M2N2pIqh83yqrb3OUz+wFXk7XEbSquu9cj9IA
8vRXP6T4haD0zTEPh00GUPgKXzfeN4LUCreWze4dQE7rqrPOdRAk+DJFWj50
gNpr1mBOL0Gnda1XMJMGkMcKpSqnAYL6nwjZ638YQC+eClWWcgmyU829tLp1
AD11Fe/sGCKo9t6hZ1tHB9Cc/bRo1ihBIC372WLBIJKNs1ptMkHQq2slI46L
B9HcfvDxmSRIS/Ak3XPzIGIp3H52aJqg2IBF68/8N4iYD8ta588QNG+i/lCw
/yDavUCM/+gsQYEngq5FRA+ikF9LVS/8I2io3yDrfvYguvr3je72OYJcXH42
P6seREVpjdoVFG5uuzX9qncQXcq0lv1H4W3W69WL+Dko07iUw6bwu1rulhoV
DvrWbZ57g8J62xM8W1dyUNeXyqNdVP7EYvPb3RYcNB5ZRBum6tPWzLweOs5B
wpIu6bkUv5Dc9PaZMA4qeH59tf5fgiaW2gmIJ3PQD52SEocpgjyezdNZiDlo
4dM12zf9Iahd/d2uRd85aFP4l7qOMYJ2x3v4Lh3nIJMIxf+WjRBULKsYZyrN
Rc1Ra2dWEoKMwysKtyzhovJstRfjg5RfRM5279vKRaFSOwM8+glSDNKe5+jM
RUM9f7zudlP+n2oxOBrARSsdRSJ8Own6d/Kq9ekYLnIMFugVbyfIh2Ny/nIO
F6ktYV2w+UqQzc+o8vh+LjqOBRJlPhNUYbuZ81SQh055h6y7/ImgNY2jtFdq
PCQ6kbUrtZgg9TILh2orHrpe3TahkEfQnfUCwV9P8NDGuaEM5xcECb99mdp1
nYfwjW+SLs8IGkiTHvtbxEM3H8TTQin/22sUKYq18xDhfWlJjySoLuEEkvvD
Q896n98IDSMoN7L2ut5SguTbtaQPnyHo4umbixziCNqVn/nh1T6CRsiabR65
BPmWbjG+s42gwx6Dx/won6+XS9+ks44gTX3N9nKBITThPBR+Xpvyz6IQ7Z+r
hpAv3f9B8SQPVay9bXBhyxAyDbjtbsLloau2iStVLYbQTqWZ70d/UedT5Ntt
dp5DaIf4fzLKlTw0/Y9z5GvCEHrb0RB8N5qH3ipNnzidNoQetIeuVAjjodMr
RM8ufDOElG8ed3Dw56GR44vCLOuHkF/CmJehIw8Ntlun1gkMI9HbK2r/Mnko
bdIl20tqGB0p225yT5aH3OW830qqDKMMuWNTo5Tu3TuvV+w0GUbPjX0Vpru4
qP1dYf+nI8NIKoJ/jfFjLqqJ1V5cVDOMbp6vXHaB8sn1XGPD/74No1ethqsc
Zzloe/0G0389w+ioatRnwQEOKhW137F2bhillXxe/6iE8unpSI+3hiMoVuT4
A6YPtQdWU8+z742gG/8sanw+DqJb0tW6j51GUYJT3hO/9QMof6Vq3m6vUeS2
gtm/mDmAuh1PoJnzoyjiQM7OR8IDaE2mrNX+mFHU+V3+YjP1vOrfYR8oWTuK
8ryy1Fys2WhTMLfu3JoxxEZDVnsd+tHkuJSfhfw4YoidwVc29iKWqsvcHGsc
BU4fuzSf0Yt2b869lmk4juSEr/y2/9uDUu7YJortGkdv2641H3rVgywMHn8q
DB5Hwep5TfMX9aBMdyOlJcPjKPOlz1Pp0S7k0maFBWsmUGymibv7qV9o3v1f
x32+TaAXf28vqN/5C+Uc9FL52TuB/Os+rJFm/UKC30PPveP/g5qftiUqN3Si
5NZ3y31W/kHnNLmV7ks6Ue8X9dSOpD/o/OGNef/l/EBH6zmR+ecmEfP1jnUm
q1qRT1mIywntaXTruVrWPptK9NJbwpK+Yxad2qXoyr78EdfEy57LtJlFiyVW
qqtvLsW9pUoPNx6eRYdXX7mmLVyGlRQXDx67OIvyFlvaP75ajkOKtwQX582i
ppAFzVKhldhG5uKro8x/aOrMjm17A+rw9Kth2Q9//yFptyMp6ve+YLmOSVML
8TkkdDf/vcLIF6wvxufUJz+HJivNo9p2teBD9gsyaEZz6NXppOXlQl9xjdCS
zW7uc0h4vch3Ke9WnGh9+JTUFyredWvf+zVt+PF5z4Fl+/lAIRnCe/d24mVF
4pOhDnxwLz20UOlsJy4SShX+eYgPFh+yOrb0YSfuDO9WD/fmg9zct3McTidW
e+Swn32ND1bs9T1cc/UXji/dU/q4gA9kYg+KVLz6je9IGifKMPkheUEH4/FQ
N2ZaNKZ76PDDb6kGJ2nZHvzynnd+kT4/LFVdhq1MenA9I7PZaw0/8N1K+GB3
rgcvMNKaX23FDwuEzq2wm+vB123oZ4ND+cG05S+7W6APX344s2+Mww9X/z2X
dOjtx3uXvfVZMsoPNx0LPZwE2Fit2Pe2yxQ/XGbOthupsfG73wP19cICcC03
z2CzNRuPaH7bk6kmAHs+702TKWZjl4y8XW57BUCnhGdjGDGAl63zOZ5gIwDu
v0+ek0wdwP8+64U32wtAm6O/f17RAI4nT2o2eghA/MG4/e7DA7jR6M5OxmUB
GKKt3Ge1dxBvyPfa0fpKAKD1voGqEAcvMNP1kHonAJdeHLn8WJGD27/3hG0t
EoDnfiOdPH0OPjtjX5FbIwCVApLK3bYcnI12brvdIwCa0n5SxmkcrF6uvcVM
QRDeFE3gbRu5mGfTdfiSqiBE+FwwMbPi4oK+xJC3LEFI+n5kj6wbF9uKy5dq
LROEFcpZPZNhXBxpLrRJcIcgXHL4xZas4WK+pk4o8BeEwdHW5Zu28XAIu/Cx
/yVByLKqP91iw8PifAkCpmGC0Frj3cly42GZpQdK86IFYaeHy31OMA9rhjZs
y8oWBNb13bOGBTyclpCVevyNINTp+hTeqeRh/dxwcb1CQdAXl0/MaOHhVb92
VKdWC4JOTxfMH+JhszUlu5N6BaF73e4hbwbBtfseZTlxBeHvjpqAGF2CLd0v
SDPGBOFL4Yntp00Ito9e3XifXwge2740tTcjuDOdvvygmBC8DjQyOGRFsGvJ
xF26lBDE+z8UZDoS7EVyrKNVhOChvsZQuTfBI8K3X1uyhMDuwJ4fGecIPqNy
QkFGVwh4KeGWZpcJDtqx5NutlUKw2y3qZvodgu8+eWIfZiEEC8ltfeFsgunv
Ln3YekAIPuBbDimvCX5Q/5+asJMQFGB0baaA4Kezyp2XjguB6BOBhLoKgnXl
pgFOCcGUc5vHzlqCs3RbH//zFwLYOjET2ETw2/1Rh86HCcF084etoj8IXut1
stQ0Qghy5/z6HH4RXByyV3MyWgg6LocyPXsI3npf/+rrB0LQ6ZLI02cTXPVS
ou/UEyE4miu16TmH4N0VA9uWpwmBW/Y3he+E4KaOitThbCE4Uf7EtXiEYNvx
p+LZb4QgJ7NQ879xgtvnXznqVSgEVqc0LF79IdiJeahar0wIrMPP9nyYIrhn
1Qa9wWoh+N0u2nbhL8FH9zDCnzcKweKPFfoTMwTzXGe5R74JwRNNux+sfwT7
BrTt1uqk+J0W6xadI3jyTn5Wdy+lV8FHSKJwwPMY6SdcIVgUvXhkhML8RX4+
zmNCYGQa9GeKwldbLBsZf4Xg74U3e99QeB7XcHkHvzDc/eb+T5fCEYLSUQ/E
hKF4/1d+a6qenBJv7KCUMMx/TOxNZgmOXVZjrSgvDHuHt8nUUHxVt6W9/qoi
DLUy6pqK0wQnOYQp3GMJQ5qNc5zKJMFap9zOWukKA+9Gom8LpcfS1T8tHy4T
Biel9p5TowQb89kaDKwQhrInmeZNQwSvKa+fZ7JOGHTtD2QOcwneeHNH78VN
wiD1OUWyfoDgHRYlxVU7hKGp8puvVx/Be+lrEhbuFQbWoYLemi6CHZP1rNLt
hUHolq50VRvl16MpBhMuwqAyVtri/pXgY8vU5m/wEIa4i0uqPjUS7F8gVdLi
Jwzp3tP25ZSfLl0OS1gUIAzeDB9pt48Eh23nP3fssjBUONTTyz8QfK95xEAg
QhhEQ35Zf3pJcEK85/xd0cIQ+zQxyT2d4GSn7t6Y+8LQlnDwVFUywTmcLwlL
U4Vh+KdDe909av+E8ucfKBaGiA2b9nWdIfhLlWHfk0/CoDenZ339BOWXyLQS
3mdh6I+StxlxI3hA5cG5kO/CsCx3d5SwNcHCJhf7skaFQcQqTXCNPsESf/+U
TE8JQ5C2H3eQRbBMsXfiFj4RODCvydNRkWD1XS7WbRIicHy18/kwQcr/rls+
imiJwNKUj1ajzTy8aUlh4j49EQgzeL37VQV1Xgyv8H9gJAJXNi6MMqHOG9tA
HUMjJAJHjr13vZTEw6ei5z90sKXytUvzmR7j4fN2If6pjiIge+j40gWOPHx5
0az16GEROBk5ff7pHh6OzORJXPMRAeP5j4bUjXg4o6zBP/e6CCSXXLgAY1zc
PR5jM/+DCCzrUuJsOc7FSRuW+/74KAIpIp0zXw9w8X/htRFZVSIQf02cq7GV
i79rCFdatorARlysOaTKxQ2WJ9c8GBWBBpeC5fuqOLjwpbn6Ul1RuJlnnOoh
z8EBs31r55aJwp+rTbVF/wax6Y7gAw0rRaHn3G6Rlt5BnNuZf8dviyislC67
tub1IE6T0hYudBKFlFf9hlP7BnHMcf6B3TGiUH5Yxc83cABb5T8QWZQoCond
Ff99ch7AMsKrWKPJonA+e0z7x5YBfOuBl31MjigICO633SM5gEOq22p/fhaF
DTt/hlvHsbH34tevvIXE4H2ja7nm035s1nM08I6PGFTdf1f+JaoXbw1kZWw+
KwaVcn077p7sxRsXtn+fuCAGw+rLvqnu7cWrt+xaZXdTDAp83K3vz+vFuikG
o6xnYlCnkuwFgT14vuuYe167GGio2vScO9CNa7oDrVq3iYPih86JcfIL7+6O
XKKmNg/mrXG47bHvGx746BJUkTkfug2k1r/5LwPr01pUN/0nCbISVxTHzzSj
3vDey9GukuCYVcVaVNuMEub96evzlAQPv66FLI0vSEKInnPzrCSY2TRPpdR9
QQMTB7a23JaE1cqtn6M0vqKU9h9eHqWScNPdbn1Q2TekktqDIxYvAI0CyRTS
0YGaNSY0fhssgKXe0zW39H+iG49FrhuvWADxy2gdvMCfaDpe2+rbxgWwVZ77
4I9kJ2oN9+hn2i+AwteRr06kdaK7vlzp17cWAG0qrGeqnXo/RePO7aMLYA3v
zEsHrW50doOO2OvpBXDyl/jJe+bdqHeT3YsIfimIG8+bSjzZjUq2F09vlJKC
HHv3cdXCbuRvEX73ua4UpH4Zb6206EGDrpplp52lYK4vJ+PmyV500N3Wc6+7
FKzeJBkaG92LKo7eoOmekAK+7eXvvN72ouQTww4/AqTAZK6m6+xsL7I/92Fi
U6wUzO/P3v03pA/V3LTWodVJwdTdedUnr/Wj1RFhtQNfpMDDYcOtf6n9KPX2
+1Ol7VJwt8+vYE9FPwq5t6j4zIAUPLarXbZBhI3U6if0iIA0/C3NO2t7kY1a
vpWUWatJw/f5B6yV3AbQNu7BP0xraciI9WpREOKgRLngpou20sBvtL7bQZmD
xtakZ7XbScOYc0b0ISMOenT975F7LtJg4KtIy/yPg6a1H7SKe0uDlV18ldEb
Dspw+ZE/dF0atq8uXNFxgIsErgvf23VLGtxFZheIHuci25dLT6bdloZ3m1Kv
cC5ykTDfBd3DsdJw3bzqMSeZuicnqN3/miINz4Kb5goGuUi69b+AwiJpuPvM
JvX8MR5ymwu1VS6VBs3mEV+78zxUoJVtfPaTNIgq/Dk5fo2HPPz4uIa10rB/
gdLV/U95qETmsUNKmzQoREoH1bfxEH11panAT2ko2vbV+UI/D3k5Dy/877c0
6LapBvaM8ZBy9oZaOlsaDucZkQ4JQt0jfq+/OSENfEWbas+bElR1ap4ye0oa
CkYOhwxtou7jD4z+bJml+pN7lKS6m6DPA5ez5gRp8KGj8d0jZ4I0ZNJv2IvS
4O5plbCJowT5mzYdyZ9Hg5kNGoeFThGkFcZS96XRYNFCzYltVwgKyNo5UydH
g4yB6JDAcIIaW3xb9eg0GGLnNh6Npu7jmqWRvWo02JIn6nYsmaAWc86xTUwa
yLd0hAWlE6R3Sm7HI00a1NDTtcxzCGotOcx/UI8GZNeNaHFM0NCG70qBBjRg
3jt8OqaUINHiPcaPjGjAL9Qv2ltJ0Aq8+kjvKhq8y1CVLWsiaPf67CDxtTSo
rGKds24lyPWDZrweooHWzHn3p+0ERb2X/nxyCw3UFU2Lr3UTlLH6am/0dhoc
ye5RUukn6GP+37m3O2nwuMG3w2uQoO+rfBTbd9OgT2Cz8GUeQSNveo3m9tFg
MsLkmvUwQeIr7c2Z1jTwvPf0MHuU0vd1g+sWWxoMS5+6s26CoFUm2y6629Hg
5q8pSYtJgvbkFsTecKRBw3eZJq1pgtyWG+W8cKaBbgW94/1fgi7kPKtuOEwD
Fb/uJbRZgqINVXvGjtDg1qvP+Vr/KL7Zd/4peNKA7px+ZYbCpQZi9DVeNNjj
2RR+Z46gtheBho4+lL5NSg39FB5ZOmp26RQNRl982T1H4XmZ7oeTz9DAVe+r
SAuFmXodgZ/8abA20mfqGIVN0y1jBgJpMG1yWruUyr9XtzJb8hLF75bJnTaK
j/vz9VXLQmhQoXxxzasZgoJ0crssQ2mQ5P1YcyfFP+bZ4tnT12lQrHPU8skU
QS+0HsrHh1P9dmtWvP9DUHmK3LIPkTSI2PQoNGqcoA6N6zs679Jg1XfWvaWU
fuNP5lwEY2gwu8R/8uoQQRIsvwCteBqceTT46hGX8mfSQPSOBGp+51Ct/wBB
axc5ZR17RIP6sve7FvYRZPnoS0XEE6ofW01T7y6CLicW/f3ynAYXJHb5HGkj
KF51xcKpDBq8UVlQK/iVoJcP0vVVsmlw3aDktVMjQZ3x95xdXtNgLOfsPvsK
giYVJc5fyafB6Wwfhb8lBEnFXYpKLaBBapLZ7YMfCFofc+wTr4QG7qnjn+1e
EmQj/7uTVk6D/qNZqbNpBB2P3j9tXEmD/XvpR5wo/z+4u3Hp+TrKnwsMSt3v
ETQdQb8r2k4DmehjEVfPECQjdStD9ycNWM66coYnCFp8S7B8129qHlEfRx+4
EWR7kzd5t5+K9zkilm9FUF5YqaP6OA2e5teFCOkTlGpWTQ+dpIGj3LhlG5Pq
V6KxkfuXBpck9Iw8FKh5Rf7c+l5ABnoj3oWmzfGQeey0vo00hcVp2eU1PIQO
8rMLZGVgm33N/AOYh4xUxJ6wFGQgKun1f09e8pDCo4UKw6oycGLNKh+naB76
/WzZ3I0lMhCjENd38QAPffFYmT+iLwOW/C0ZX3bwUMWS9b4HjGTg9subgd2m
PJSZtbNPy1QGAk54f12qyENn37jVFW+lsOPVdN9mLlrw6cHDP85U/uH+LrKO
i/ivPTng6CoDD4QzzNiLuWjMLE22zF0Gsr97/Je4kIu+1b4JvXNCBjLYD/at
5XBQckvjiaWBMvBiqcYr83sctLpXDA7FyoDCJsuNnB+DyE3Yr7O2Vgaq5o+L
Zq4dQEqMyq9/G2Rg8daAlYeZA6h2lWqdzhcZaNA0FOsVHUArjpV9uNwmA1eD
plzNGtlIpGnh/RX9MqC6LJj+4DAbpTx6bZ3ILwsiwTe7oi72o+41k1XHjWWh
uzQ7MzCyF8Vam5fEr5SFjk1nP0+d6EXmJx7lf1otC7e+aitv39OLcpO2py7a
IAv8SzN32kv2ohDxuCtfdsmC9r5brkdDe5DGV1NYd0QWUk97Vhzw7UaHTp7P
k4iXhc07lkSe0/uNVhh15C1OkIVWBdXTl0R/o3kj8HrrI1nYWC065fr7F8r2
EXkT9FQWdGucpspifqEZ79tvx3JkYfGxjRw23y9078Sz9+3VsvCtWO+YcPxP
VHmsqThjluJjorhGOeE7MjiypNbcWQ6oi6brd+l6VCejN9/PdCHU2c/5i6sW
4fXHj7Pvr10IL4WbB2QaivCLTy8+laCFcIzv2NXpkGJ8K8AwRHorFR8WGefI
KcHmvStm0y0WwpDXmQyL/DJclb+B/PZcCP9tqPfPMqvGZU77m/YmLoR7K3pm
36s34fcvLt/XE5SHBLbWOe+4H1jE3FopRkQekhePHA0d+oH3sbXj+OfJQ9DK
5wn7t3XgPtbney3S8pAj/ue2+lgHlo1TuBOkJg/C7mqrGJqd2DM4I6zZVB5M
nryQmPX9hZVtW/wCvOVhxnbGRGKkC7uNp471+sqD2JjDoCe9G7+8c9533xl5
KKxN0Hiwvhtv+6zuo3VBHj6cNXl37Ho39t3oeaz+hjy0XFPMKmX04Go9vkMa
z+Sh+W+kjuCGXnyeX3dvzQ95mENGoV52/bh38/xWrV/yoJh2pinZvx/vDeP8
d6lbHtgpN/97EtePNaSyTqwYlIfZ5ztUJ1v6cY2KccSjSXlIS1G6N7mbjdVW
ra89JasAAz/vOikZD+Cw8wybOnkF4I+//yJ3zwAeKeTrWKykAHVVutKyngP4
05aP3A71/8fLLVR+PIC9LbdL7tBXgBDblNP75g3iEi8Lc9UdCnD0/fJeVsMg
1stZ3nzGXAEao88c7uofxPfG5ewb9ygAvDpocYiPgz0DvnqG2igA0+j8syf6
HCx33f7G8CEF8D56LEg9jIPdUtyqyi4oQCZ7udJPfS6u799moX5ZATa3/ykI
38jFq/UWf/e/ogDT95ULpqy5WOrVINvgpgI8ldVjiAdw8dsib/H4OAVovXfy
E18ZF89r99/ulasA6WxV2jIzHl5x5rlkxBuKX9fY5jhbHnaWaW3MeqcAdtxQ
23I3Hn673cRhuEgBggrmXnhe5mG3POJz6rMCWIboaXS+5uE7e9VWRtcrwMSz
OAfXjzz8YdB8Jq9JAZbk6zzJrONhOWba1T/fFCBJunb4ah8PF986fN+/VwFO
WD+kHZQjmLP4rtN9tgJE+ZiqjqsRTC8r1izgKMDjbTcuWiwm2OuvWvbsiALE
u6ZPWK4jWMX9W2nQnAK8PjIbfsKF4O2CYtcfC9BhuwxjibInwb6JK/aUCNOB
bx49LMyX4Krmu98EJehgfGIDSg0m+OyG3byrdDpc0rLhTj2i7t/tAa+eKdPB
68Wb+pfPCK47k362Qo0OL+91/9V9QbDWCzHBeZp0CFhZN+H0juB9O1ZW6OrQ
oWyn3QvVIoIDul3Ddy6hw7dnewLvlxHcpPRRIdyQDj4u7iu+1xH8L2+4PdOY
DvVrQeJ+M8G6+9STalfSYeBCX73KN4KtObuPkNV0qNL0Pv/fD4KDQgP1pNfT
wdHEQ/DQL4IzmBnDyzbQYXFlh5N2D8FfP3x/vW8zHUQ0Dt7M6CdYf2zlhrtm
dODaTBlO8Qg+GOEmkruLDhlTjx8WDRN8RTe6unkvHZJpB0u2jxGcXfYxctyS
Dp3eqtG3Jwhudxqxlt9Ph9GDrrL3JwkWm1FXXnmQDiRcx9R1muDlMXs69zvQ
wc2sTWDoL8GORhdSzjrR4dTBE8fXzBJ8/XPG0bhDlB4KVqe3/SP4tXubwTs3
OmR7n1aWmyP4l+C88e8edNjLAbvHFJZ4uOrd32MUv8z7xoTCq1YfuajiTYd2
P87TWQof+hK9eZ0vHdanyOfUUPiWd6m442kqfs15G3sKv5s/WnvhHB3w18mo
DKpez9NFUQ8D6CCXN+j1geLDCfk1JRhE8fvodfLkDMEjLo//cw+mg6FAKbed
6mcKnMtqrtLh9cEH3TNUv3yMRUsMr9Nh1QEbu0ZKD5HZzsjocDpcZP6zcaD0
kmx7NDEVSYel7rt+JFB6yuU72TtG0cHBLn3sLqW3Uox6SUkMHQoT9JLRIMGL
/Dq1te/TQdrw7uijPoJ1LB+F30ikg4zr7sE3XdS8DJ1GyWM6/PjoHxXyk2AT
KfUDVil0eDjza1KkjeC13J+Fb1MpP9VMM1ELwRurH2qoZtBhuq9fdWkDwXtD
GUM9OXRom1n+Wrec4P2uP63NXtPhrumq46spPzpuevj+RT4dbOY76fBRfvWc
Uws9U0QH/0WNPZkZBJ/80cFp+0iHVyVaovdSqH14n2gBn+jgfPTVUeNEgq+e
UVMTr6WD0HPOuqhbBIdbdwQfb6DDDUOBRuurBEctT2Q3NNPh0+5Fw58DCX5M
VPPi2yj99dPUf1P7V3BE1VyPTYfBtSH3H2wm+OOWHy8jOXRQCGj+Jrea2kdW
gsI4oUNwZbvVZgPKzz9Vuj5M0MFg4rpbJZ2a134V/z1CitD4LaLLq5+Hp0za
f74SVQQ+NX3ekzYe5pN7sIU+XxGc++7SbtfysGS9Mu0XTRGSv61UjXrFwzrb
lVNPMhQBfxkrA38eNtBqk/zKVITDP3ZKr/akzjuh+75rtBTB89XBcxw7Ht5U
pISElipC8PPeFYFredhxlVJL9GpFODLyxMtimoujdBSF8q0VQdbS1InnzsX2
jlrPumwVYcHaFeyvNlysEbXcbIG9IowOPv15ZTMX587tijzkQvE31UkzYHBx
c8tllQUnFCFc52d3YQMHy17hGB8KUwT14DMjvCUc/P3d1NfwG4owaWFXYSjP
wUlDIuff3lIE7uHSe2uo54OR/aJiyWhF2Bo+WZfcNIgtltvsevuY6tf8S3bj
mUF85xd2lXyvCHeLQq+V5Q3ggwqfxVYVKoJFcWVF+IMBzNz1Pd2lWBEcPx+c
YwQP4Jy3Y8NvPinCJan/Fj2hnm+NEYsvuDQrwshuv6nFvWxMW3/33huuIlQt
/enoIc7GkfFun5zVlWDzuZcpSLcPnzl92TeApQQXJrCrxfw+7GiRyIjRUoKZ
qQj9VZxerDev5UyNnhLcmwn/HJjZiyvPbdFZaaoEsZtfTv1Z2osFDmhck7BQ
gvdvx/o6tHqwn8JvszfBSmA1Vda3fvo3PhjlUCvRpwQNmx9p/jvWjlVezVP2
HFCCfx6NDqML2/HPhjdHKrlKoOXHW5Ba2IYPS8nwXx1TgqRHuf8spNqw1/Xy
5XP8ytBhUq9dlvkNXw4yiBtWUYa08ssCn3+24OfH+A+3WCgDo3elBF2tAU9u
Tpl6WKgMyyRsl3pU5uKuno1nS0JVYGfk/OBRkwa08WFtku4NFSgeOLveKaoB
PbI9+PnOLRWIETZOfTLSgByrfZiHolUg8lyBdPqLRvQ9+1GN4BMVMN23XzZZ
oxk1nv+nvqVQBYKLRhZfFP2KSmjvKj+NqcDeHBw1ltSOFlVvGTOYVAG0v8f7
znQ7CgppUIv9qwI3JD2Wcfb9QOv/9Pu6C6gCGA5p1M/9QO/aFdTEpVUh+P79
mE22P1HOM7+TZktUodazfEXUbCdKWmeo/NlZFZwzOM/LL3Whkt3zgv8eVgWG
/nMtwadd6Pd/XQOL3VVBRGfQUaGqC7EuR7+76qUKmD/yexmtGyWXTx2A86rQ
of1oxuhhN0rZUxL7KkoVCoPyJhbk9KBUZ0v5+E+qMCb42LE/rw9VnNS7UFGl
ConBtcl3m/tQf7Bw78RnVcjYfFFuwWgf0nn6Js+yWRUuLJg4fcKgHz0fULaW
/KUK4kJaN3+k9KM03+67QdOqEOdcccToGhtlXvGjHVmqBileDIllOoOIs9bh
8pVlahDYBt9a0CDSG9s8+mS5Giz8ypzatn8QpbnIfek0VYPXL36cDbsyiFLR
q9iDW9Vg0ZjnlcCfgyh5aoix+z81EEzNTqBd46Du7NbIYy5qoOmztH17Agex
3Iv4b7iqgaIF7cO2lxyU1BLR9clTDQwthirut3LQw1f6zzacVQMlr+QvsRpc
FH/8mL7JbTU4+kQkrvwlF33XsHpoGaUGMon8gW4lXKTYvkb6ZIwatM3OFVc3
clGs2fyRFwlqUDdsxusZ4aJo7bQ8nTQ1+K/T8rD1Mh5q7rittS1TDeYFBf5S
QTwkd+9cjGu2GrjV81Wl7uKhO0I7ziW9VoMqXc5RyaM8FPmrb63KRzW4pMHX
J/KIh+pj6zJXl6uBa9Dx17wMHpLa+0btQKUa+I130uPzeehW4VW+e3VqIJAe
uHxNIw/dvK9ZKtWuBszbmsxkPoJqLCRN9H+qgYWAMjtlPkHz542nmP+m9LoX
HHZUnqDrZ0tDr/WrgbPH7pk1SwgKtT60U3BcDTxiYoNn9xGUtKfd3nWS4utJ
bb4dQQU7rL0+/VWDGG3RLldXgkbWbbt9Q4ABU3+ilqdT93GJVUVJXGEG/HtO
gpyCCNI2Ms3dI84A+u/O6powguy1lnyVlWbARQ0lyapYgs6oJ/f7yTJg90nL
joOPCLqjpDr9VZ4B4iyRQ0nPCPq0QEr1gSoDZkqFN1vnEfRbLEz/nzoD/Gbv
BBW9J2hGgB+cNBjA81Yy/F1MkNGfEReNJQyQfDqQt/0zQbuGPU9d1af47fx0
IryRIPfB7iv9hgzINSp3D/tK0OUehxgzEwboeNhHm7YTlPCzJTVjFQM2i6UN
POok6O23Pe8WrGWAvrm/Y2E3QY1NFdXeiAHs9E19t/sJ4n7e8KNxI8WHaAco
cwgSq3jHM97KAOvNY3J2hCBWyXK+mB0MiNm7KG3vCEHrCzJoU+YMWLe5yXhm
jCDb15osu70MWMb+9sLhD0G+2YnGHywZcONltozfFEG30hS2MvYz4HjpBbuN
fwlKTY7cf+kgxUdc4UrZDEEfE8U9uhwYIG84eePfLEEdsZf9tzgz4CQ2P879
R9DUnb83nh2m4qUHtf7/vUsu/FSCuDsDmu2t33AorB/KfeHpyQC+onxV6v0M
7bjkVvTZiwE7V44c+Ejhw+d/NhicZEDik5BjiMIX/Gy7bvsxYO5Tko0PlT/u
RMPY6FkGVG3VVTpA1c/1MBOxCWCAS0Jy/gTFt+7QR4W3FxmwQ23bKrNpggYc
1i5WCmZAPnskznKSICHbvNUBV6n83cZdMhMEMSz0zTuuMUDqxRbFsFGCVps/
c4BwBhjfFd/4aoggq63qJ5IiGZBwSfpwFJegExAXJBRFzXsy+uqSAcrPq2Xu
uMUw4NV40MuzvQSlGN94UhHPgN6+Q9zzvwkq0hfK002k8t0L2GTSQdA4c+Ir
L5kBmVcT3aqaCZJWPcHem8qAQovzO57WEaSr0D+dk84A7QLjk6uqCHKa/131
TA4DqpvWVlwsJMhf2NLgWx6lx1yetMlbgqLnqmFNPuXvq05fHr0kqGr0w6E5
zICz+cPSD54QZNL++HnoZwagj42arBCqnr77ZFY9hd+qcpgBBHEu6m9rbWLA
C0dfZpcvQcms99063xmQZ2LPTHGh5ufZzKjqZUCj0biT4TqChgrivUbYDBC8
0hW9Yjm17wucPyhxGfA7VK52RoegkBzuQc9RBmzn7L1fI0vQdIDgThE+dUjP
8JkX0MtD/SluJ+P51YEXterNje881FJbGacvqA5jCpuUHGp5KEc9st9GRB3W
a/G5bcnjoaOlKlefSajD3/I7XfpBPPRt/ori7Yrq4Jw/dyNwHg+VG8f1tyup
w1TjIZO8aS7KdZiR8lFRB8Tj2WYPcFFkVoljHEMdKl7siRyu5KLtlntm2Jrq
QPfOOvLkChe9jXdfecNIHfi2DgV1DXPQ04/VjgxjdYg/ve+fSwcHRXH0r74y
UYfLHV+Xp1ZxkPf68ea2VeqwxUTlSEgSB+n8vnRSD6mD75W7bmF7OCh28f3M
zzvV4UbxLpHuxEE0Nro1JXiXOjzeZUj/TT1P9hSOPDDdow6cjhl24rFBJGJp
djPFQh003p7+YG06iPwCpo4GHlCHBdJvWwrrBpBF3X6dpUfUwfW0x8HXQ2wk
4Sf35OZldTjh04QWCvcjd1QUvzFEHbaG6GQf7e5DH8WP3Zm8og739YbOh37s
Q/6JHy8dvqYOp7zWOtIv9SH2p5NOayPVoajx/vjDqV5UrtSgyklQh1gfnYPh
nT3oYlF47M58dSho/Uo3CutCAz+KoqbeqYPZoTOpVc5dyObvaOSzAko/VMxd
saYL6a04eE2wSB0e3LeevsH9jVrTtfzfl6uDl6htq+He38goBtstaVaH5C6+
z+8lf6He48Nq84k6xLhqb3ze2o52KVunVGksAq/ksyrz4xvQBq9PdrRri6Bm
tMDzfV8Onm5lby29vgiOLOC34fPKxbmbJIzO3FwEec2rAxeO5WEtxX1iPyIW
wdpQg01Jc2+xROn33NR7i4AhEin5WxbjVkWeJCQvgqbbQrXkXhn2LpMr8sKL
4ManfasrP9bjhyouGjXji2DX7yTR/YbtePXyJfoufxbBtYrLV9cHt+PmHWMr
JycXwZW7NYODze1Y7MzVnRozi2DzyoP10Wd+YO+GtJMBAkxQ0v83IPuuA8PV
0SI9KSbYsXS1o+M68W8S4hCuw4S8ukMGLyd/4wCR3UdYukxo2C8+66baheVV
FXzylzBBVeLU1/ENXdjM7HlIjz4TkkxJWML1LpyT/Dl9nQkTXqw6UyOh1I2D
D8hPczcwYVESzWqJYQ/W+Pjs3m47Jog6Tv8JXN+Ha/Umk9vtKT61Jy31Hfrw
2XvbXx11ZIJ38ENu9vk+XO3BrrvqzIR1kyfIkrd9+KT0EnF8hAk9/oavR/T7
MXZ4cd7gFBPKiyT6I2XZ2P3Tv2sf/Jjwci3f+A4DNpYx3BO78wwTbCK+ZTWY
sbGb0FDuEX8mrKmZ2G9+iY0l0g15D4OY0C22Orl/kI0PTuY6SYczodkxUzDy
zQAWchE+kXiL6lfLIUi5fgC/qLYO1Itkwhtauv/J/gHM/3AibvtdJuyP7lh8
mT6IU7esagqKY8Kg8Vlr1ulBPH7n/ZbhFCZor7y3Z4s2ByfOzLe6+IwJDJsg
I9+1HLzdzd5F8jkTThleqfTYx8EPTGcvLM5ggme3nHe2Pwdv7Fz/1jmHCW6t
MWsfVnFw5NIS3cZCij/Iaf36j4tTV9mJXy5iworTycuEfbkYbxrrMyxhQof1
etueK1zMO6CVcruMCVExjH3f0rh459XrjH01TBD7OLLrxjAXu9xm/eOrZULE
RM+jGwI87P+goD27jgnpdLHyrbI8nJrDi5NuoubJMeJylvOwyE8LufpvTLgv
9ChxzIeHVQcGRy62MUG5ZKnXpyAeNh4PaTD4wQTL2UGOZQQPH5r/5lZEJxN0
z/qdjEvn4aKVyuJ7+phQVvVKqamTh1s35vb962fC9pk97Se4PEx27Sp/McAE
+rIki7IpHlY7fDF4AY8J4z8tOHE0gs9Hds1+HmOCQbV9Z+86gu/cD2gPnGDC
rtgne7ZuJzjt6cL3SyeZwDNeneRgQXBrwbaz4X+Z4DIzFPXKleChT50262aZ
sPvqBbERL4JFm86ZcP8x4ZrQSpH+MwSvYKePmAuwQCDZYPd0GMG7xjY3zAiy
gHZ4oY/8bYIPz/3IyhBmwXC2Tx07luC7C6WPS4izIFBP8k/eM6q++vOdBfNY
sLLHIPHFC4JLlmzUPSbBgojwyLWOeVT9Daf6qqVYIJguyaTex7DYLsny8zQW
hFzca/76E8EM26fJS2RZ0LJZzXjDZ4rPIRTcJseCMdXsmsuNBO/2anW+Ic8C
Hb1+8fNfCXY95wNr6FR82r7Oxe0EB4TMYwwqskBm3qItEZ0Ep8evbTdTZYFq
Ge1OYD/FJ+XLu2k1Fth1DhwR4RD8PdsrLk2dBcwrcc+2EIKH34uePchkwcZL
j3esGaH4fXpkM0+DBXesl23rGyNYvdHU5J0mCzK3qMbv+EPwyh+Nske1WaDo
xl7rMkXx6/ccUVzMAuHnWNfwL8Fuo0INlbpUPfap/17PEOyYtrnWXo8FkXv6
5/+cJdjGOaSaLGWBf/CTS5/+Uf+nl1ZcNmCBPLep8MQcwVvrBMsXGrKgo027
5CuF11/d9DHViAVHr9Ven6PwinXBRWuMqXjls/S+uf9/Dyz5UGvCgodJ1p63
KKyVLvDeeSULSlUVQ8ap/GouG9+OrWJB56nxQyoUlle8nBe6mgUXziZKCFJ8
FtQX5yitZcHEj+1Bzyn+IqH82ZnrWPBndVqx1DTB/9ZtyARE6ck31WQySfDE
WFBaE7Ag4CTnnfIEwbz0omduG1mwJLnAv3iU4B4XvpSpTSyo8mTStYcJbleE
pJtbWCButz/WnEdwc/3Fh4xtLFiau5DfaJDgmlD8IGc7pY9jrO3XPoJL18/F
bTFjgdr3+JS13QQXjK+Pad3JggbDA8SZmm9uxoUoz10sMOZGrNtGzT9Z6d+t
23tZkPzhu5hFE8EPGtbd1LBgwTPMjjlTS3BUWOC1N5Ys0G1z2+NQSXDIxEzw
DxsW5FiynD0KKX83/j272IEFevmDu66kEGx/bc3pAkcWdJsus8tMJNgKzvvu
cWLBpSN1Q9ExBG9+MX3c7xDlt6ybvFRqXzSuT7kUe7DA2qr919cjBKtsMHWy
8mRB+5BFu/B/BMtNnnXoO8YCXmR/x5g1wUJuk/slvVlg8St/i/wmgrs2/DE/
cJrS3/faa3clyp+TK8w4Z1hwfEp+/mMpghuzTm+7eI4FdZcYoveFKD+rTmxI
CWDBxZmHu5up8yNpamzF8GUWiDg+THH8wMMuL0fUr0WwgFWp7NC/l4ePXbac
MbtN8amKF4oAHvazzP0qcZcFsSWm/AMGPBw27ncr8h61r8eUH3+Q5OEXplN/
YxJY4CR9aWVnGRdPFc+1PE2n4t8vF16jw8UCd51y3DMpv725rbJWloslDheH
62ax4IrNB/+xWQ5WEwne/CKHBdvaFH/daOTgzWYiOXn5LIgRKrSyO0ud540S
4aWfWPD2m7RS1utBHP/kuPvVShZ4K29QQgmD+Mmp2k3bq1kg+ypD7HrwIH4t
HzldXUvNlyOXs2/PIG4/KOve9IUFyvvKPbK6BrB2l+Km310seKJ/YmnnHBsv
y/VXS+6h+LONn6//zcarr7RNufaxwOjXhiP2pWxsrp2QzR5gwZ6PtV9aQtn4
pKe62vAwC6BOqaFuPhsHrL00lTNK7Y/EgqxlnH58RfJ386lxFqRFvl1hWdOP
Y7Oe3JicZAHXMOFyx41+nBQkdOTdNAtub5Lq3+bZj9P3uW4MmGFBydBT01Nm
/TiXWa66/h8L7F9frDy0uB8XjmpNzc2xoEts14C8WD/+Hw4WNbA=
     "]]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  AxesOrigin->{0, 0},
  PlotRange->{{0, 10}, {-1, 1}},
  PlotRangeClipping->True,
  PlotRangePadding->{
    Scaled[0.02], Automatic}]], "Print",
 CellTags->"Cell 9.89"],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {Hue[0.67, 0.6, 0.6], LineBox[CompressedData["
1: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
Cg==
     "]]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  AxesOrigin->{0, 0},
  PlotRange->{{0, 10}, {-1, 1}},
  PlotRangeClipping->True,
  PlotRangePadding->{
    Scaled[0.02], Automatic}]], "Print",
 CellTags->"Cell 9.89"]
}, Closed]]
}, Open  ]],

Cell[TextData[{
 "The graphics cells are automatically grouped together, making it easy to \
select them all by clicking on the cell markers on the right hand side of the \
notebook window. Then by selecting the cells and clicking on ",
 StyleBox["Animate Selected Graphics",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ", the cells are displayed one after another (try it). You may need to wait \
for a few moments while the cells are loaded into the Front End's memory, \
depending on the speed of your computer and the version of ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ". A control menu is also displayed in the lower left hand corner of the \
notebook. A mouse click anywhere in the notebook will stop the animation."
}], "Text",
 CellChangeTimes->{{3.459967494653234*^9, 3.4599674988225117`*^9}, {
  3.4605039326676493`*^9, 3.46050398811861*^9}, {3.4711973529373503`*^9, 
  3.47119736569256*^9}},
 CellTags->"asg"],

Cell[TextData[{
 "\tThis animation method, as well the method using ",
 StyleBox["ListAnimate",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ", does not need the kernel to be running in order to display the animation. \
However, ",
 StyleBox["Animate",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " and ",
 StyleBox["Manipulate",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " require a running kernel. "
}], "Text"]
}, Open  ]],

Cell[CellGroupData[{

Cell["9.6.8 Add-On Packages, Contexts, and Shadowing", "Subsubtitle",
 CellChangeTimes->{{3.4465123463604403`*^9, 3.446512356253333*^9}},
 CellTags->{"i:57", "c:34"}],

Cell[TextData[{
 "In addition to the many functions that are intrinsic to ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ", there are  other functions that are only available if you load in the \
appropriate add - on package into memory. These add - on packages are ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " notebooks that have within them the definitions of various functions. To \
extend the capabilities of ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ", there are a whole series of  add - on packages. Some of these functions \
will eventually become a part of the main ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " installation in future releases. For example, the current installation I \
am using ",
 StyleBox["(Mathematica",
  FontSlant->"Italic"],
 " 8.0) does not allow you to easily add legends to plots, but this \
capability is available in an add - on package. This package can be loaded \
into the kernel by typing ",
 StyleBox["<<PlotLegends`",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ". (",
 StyleBox["<< ",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " is the notation used for loading external files. ",
 StyleBox["PlotLegends`",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " is a context. Recall from Sec.  ",
 ButtonBox["9.4.2",
  BaseStyle->"Hyperlink",
  ButtonData->"c:14"],
 " that a context is a \"surname\"  for a set of variables or functions.  In \
this case, the context refers to a collection of  functions and variables \
used in creating plot legends. All of the functions and variables in this \
context are loaded into memory when the command ",
 StyleBox["<<PlotLegends`",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 "is evaluated. )"
}], "Text",
 CellChangeTimes->{{3.5030888298549128`*^9, 3.50308883041508*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"<<", "PlotLegends`"}], "\n"}], "\n", 
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Sin", "[", "x", "]"}], ",", 
     RowBox[{"Cos", "[", "x", "]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "10"}], "}"}], ",", 
   RowBox[{"PlotLegend", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Sin", "[", "x", "]"}], ",", 
      RowBox[{"Cos", "[", "x", "]"}]}], "}"}]}], ",", 
   RowBox[{"LegendPosition", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"1.1", ",", 
      RowBox[{"-", ".4"}]}], "}"}]}]}], "]"}]}], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.90"],

Cell[BoxData[
 GraphicsBox[{InsetBox[
    GraphicsBox[{{}, {}, 
      {Hue[0.67, 0.6, 0.6], LineBox[CompressedData["
1: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
UX25u3ZED1invt9rc0AAF+i4lS2U74EtWY67G94JoGSc/kcFsW7g+9GKOVcE
cWw4aZl0WQdouNq4H1oqhNkt6QmbXFugYzTcXDxXGNdbPiqNaakBo84L10Iu
imDP5/NObOEPsK8jeBmTKYYc8ySlGSeC6Cuyvln+Shzfl7o3/xD+SWjT6lS2
nliAgtX6W8uWtxJdgV23ws4uwP2LvXseGrYST8XGu7vtFuCQvq2N+ZFWQmLe
wrf33BegTuHb9zm3W4m+saM76h4swNQt9poLfrUSCc2/Hc8XL8CFB5LC3nj/
JZSTOomgJZK4k7xOvqxuI8Rg9FTzsCQqlmRej9jZSbhv0RL5MCmJl7+8DJxv
2Ul0bT2WFsQvhYOZzsM2zp1E4a6CSUMpKfz476PvWEQnccU08GHyUikUzG1e
c7i3k+g/u7jkv1NSmNz3ooTm20V8uWemRfsmhaXa3U/mf+gm9ILuVvXVSmGw
MV45W95NJD345FrcLIUpG4K63/zqJrwfqRZc7pNCjQ/O+nJz3QTz+9hyUkAa
nSwLLcR39hB1jYUlZkxpfHRbb/Dxjx5iJ8diXM1MGp8MC56faeklomVu/7hx
RBoVP5+8WMHtJUY2vUxvPiaNS5Z9Xnx7tpd45j917pG1NBp3WtgQKn3EpOaT
BlFnaRy4eJlucayPSLX+nTXoL43bmj49l/zRR0g3nPDMy5fGjOx96csy+gmb
Od8jSsXSWPXs6uuIgn4iR+P1WvcyaUw+9pkxVNVPnHfj46yqksbZbcym8739
RCH9+fGEJmkU7vp7zl5lgHDd22Zwb0waP+ys83rvNUA0FJ7ht1hOw1hNoxbF
TRxicMsvxWs6NBRwNNLftZ1DzC/Yv/bZahoudMTI0/s5xHpC71zXRhrO/NLb
cOY0hwj9JP3VZTsNv48wjtzz5xD7M3IiAqxo+Ldny7hLLYewWbP6bdopGvZP
TLpca+EQ198mVlafoWHPaocgt24Okfo6ZFbejoZH11wO1eZxCLFXtmfiL9NQ
SMllQ5ESlyhNkFmZG0xDT/O6XS7HuUTLIv/drQ9p+Oz2sOmhs1xiNG7OWjCc
mp/YmKLuwCUWxfaF7X5KQz/d2pX+nlziVnT+VG0yDdve/Kb9F8UlDMLty7iF
NOSyC1eW1HAJc7m2VlopDQuO6A96NHIJh7DDk2sraGj5WvKDUiuXePLQcMXV
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
j2MTfVzoeN0QbG/NRJVGJdfF/7igbpvPH3CWiQHXssbdx7kQWxfUXmbHRO/T
Eje7BUmIeaeduMWdiUFfVy5vUyIhysFee90DJlpbqFcb7SLh16JDMQdDmdhv
7eFyay8JCs2bpF3Cmbg+/4t4oikJEUbiQ2lPmbh3w6hCpiUJYZop77VSmNgt
HbV/yImEny0PNHa+YmJaad2xB64kyDzyCD/7molRn0x2qXiQEDJvt0fsByam
eMx9mPIiIfhvt75yERMlc948qwkh4XvEt1d6pUx09BU+0/CIBKkDmcyjFUws
DSkc+hxFwv08H75H35iof6fN9r9YEu49Xlws1czE60yny12vSfhiumCd9h8m
1lw9amaaQYK42GiCcRsTtx0jBlIySfB3L/b162Gi2rouUMsjwdfs9B7BUSY+
Xxm4ZclnEmL3N1uenWCiIlk2sP4rCTm7zRzLppjY9uR0w4rvJAxt3vkgQICF
5oGmtvW1JEhszI/lCLFwbXeEiH8DCZqrdTP2i7LwzSmNv4ubSLDUWFbPkGah
t/LrNQqtJFxmx/e4MVjo/F01xbmN0kNRZbJejoVp90tM3nSQUCYppfJEhYV/
bmzR5vaQ0CZyV3uWzULTl7STfX0kTAvw48lFLNz8UzD32wAJq8eHrBctY6Fk
+r8hs0ES9v6zc/XRZqEEv23F2D8SbPs77vSsYuHtkNGSm8Mk3Oo8Hm60joU7
gm52D4+Q8PRPXVLqRhYGe84tPzBGwsfG/dmS+izM0PUICxsnoeZHeaUzsLCZ
T4hdPEEC5+uW3zWGLHxx7nNlE48EkfJs7todLCw6wR/RPEmCeuEavvDdLPTd
MHS7dIoEg5xUGs+YheejRu9HTpNw5MNi9WMHWHjtgetHsxkSLr2OXpt7kIVt
t3vmJim+nyK/g3WYhcobms74zZKQFB982MuChU7furr45kgoihY9336chYu/
v79ziuKWiFtXtp9iYaWS4JaXFPNCpgISz7Dw9EjkwhaKZQJdn4rasjBgykxi
kmJtX06anR0LQ1arK89RvNvLJv+rIwuDJmf+978NZ67+qdZxYaGFzHBQMcXX
3Y60P3Cj1j9jjXhTHOlUPTLszkIr1htXbYozzhsJm3uyMNK5k1ZAnffb6SL5
jzdYaPlD7Is+xX3H9Zco3mZhb+eNuOfU/eYdea/n6UOdL+FdBEnpwTLVNm7x
Y6GHw+JUDYr1jBOPYyALGRNnWnZQ+h3awXaKDWZhpyV95QFKXyeMvDkvlIXT
0i3PDSn9/fXoITbhLNzZdXctk6pPwtqAuPIoFgqKd/S0UfXM1573fmk0C3VE
q4ngURJG1cbqufEsTLy5sTFxiARpFafeA0kszK4pU6FRflkq3zP59iUL96bR
/U6TJJwU/6Vy+S0LvW59bCjqJ+GK0EGdxvcsfCfzkqjupfI/V4mbsliYdOpu
TXk3CZ+Hc0/PESy8Idzl5dJOwrrm58m+X1no6Da8JqOR2k/bdiL9O5WXTktC
t56EgRvaOxt+sNAz8cullz9JiFf/1KH1i4XVBkutDn6j6mf3k/W5i5q/54bt
+yISBnOiHId6Wdh4wMbuST6Vd8lTuYocFv4avpDglEuC91uOhd0wC7+wi0p/
fSBh0lNwjzAfG7v2KPGKkkjoSbBxieJnY7myECmRQEJdVUWktiAbtUo2rjB8
TsJbdnCPuTAbrU/NBFyMJOFCsbJPogQbz/gsWdhxl4RG8fUFuxTYmKr7Jkfx
DAmlayN7mhXZKNIV4rDkBOWH49NSF5XZaHXdKGSRBdXf0gutIllsbB+r2Nq6
n4RdB/dP9y5mo2ljxHMHPSpvUbYbAlaz0SaoYFu7OAkviiqtWGvZ2Ln6V3G2
EAmhA9o+79ax8db2W4PX57jgbDD6s2kjG/dpyVl8HeKCVpuXy3Kg1p+Y13Wr
gQsRSx6/+rqHjW50ms+hZ1wYGd6RcHsvG1clGayyoL4n+/OGnujuZ+O7PAuP
3cFcED5odC/BlI3nR0QnOm5wwc2Td+HaUTZGPL17RNqKC6bfDmutOMfG8flP
FhvIcSEtUpDdbsvGN4H3fFsluCB6Jl0+8gIbr4pcGbAX5EL+hPB8IUc2El+F
mrYOckBH7UNnsysbJQbdpfvLOSDhJhN37xYbF08LGCz+jwO2kB9l6M1GtYLU
lXZ2HCgStQ+ZuMPG5q+Xnzw+yYEr0UVeZ/zYmPl98dwnIw70lrmc1A9mo63P
5popFQ6UKlarDDxlo2K0D+d6/gDcyA+M2JPFRnb6c7nvo/3Q9zs/lJfNxqVi
nUszevrBfGo4ODGHqu8i2WDvpn5Yvt7CTzCfuo+/p0tffj80vNS48qmUjUIW
62Iq/fthdThxbNlPNk7+/ik4oNgPXQ7/mOIkG3vcRpj9y/tgr5JZwudFquhx
T2kFKPZARId2/jENVQzPX26aLdoDHa9EmgY0VXEy0PeDBq8bPDFHWmqZKsYm
/zz7o74bUs+qex5cpYoS6q3XroV2g9jrf6bNm1XRnvUsWUW8G8q23efjmqsi
a4m5XQOnE7Y4lh2j+ami2PpHyxMD2iFG2XrRl1FV9Bu7UrTlbhMsKkp8tO+Y
Gqa++WEwpfsNglcULq3JU0Od2A/+BokpYDM8r7piqTqemZp/69rmYsL6zRDb
L0gd1ThpnMiddYT9rYPTRg/UUf6ygtEuzzrC7WBGvcRDdZSzLzDqfF1H3B11
ux/8SB3NXp141KdQT6Tp8qbCn6qjwPaBHpX+eoJXMFf34qU6PlUV1Zvn30gE
10gEFpep4+7ZF/4fPzYTUXEOtj4V6ih0ePgHp6+ZiHOt2rqrUh2ZMXs/S6j8
Jj7IBU9WVqnjD1V39flev4lmC4btj1p11KfdO9C7s4XQbFfY2taujsuPOMsb
Vv8hVmZcYcZ3UvsfjVPk428l9O408c52q2PcnZwqU4VWwljz6evePnXk+2zT
VLO7lXCxYzP//VPH4a6NVzeltBKe+l68t8PqSIskE9cVthJ3FrT9dB2l9CBS
O9R+tRIR6XEBExPq+Hmh9bY60b9E7M1557In1ZG3z9fwiepf4qXJWUPPaXXM
VFww30z3L5GhVqpiMEutPxd3g8/kL5E3rMGbm1On/jfnRUXb/iX+D01y2q0=

        "]]}, 
      {Hue[0.9060679774997897, 0.6, 0.6], LineBox[CompressedData["
1:eJwVmXk8VN8bx+3GLoUZZJkpSlqlIjoPkRKtSJFCSEV9qQiV0qKsoVKJkhaR
FhSlDkparBGy74xZDtm3/O5v/ph5vV/33nOf8/l8nnOX0XI9vstdSEBAwIv6
+v/v/XOuYisPhW8wn/3/h6Av1ZrWezS90MXRdOYoxbNfP4Vqap5BqTMu4fUU
y8a+fSVZfxEF7Vpt9JTi+wWRGqKa11CDo+lyV4r1yKGoWc9odC0t64gExc2y
Sf+m62LR4uFCbuI/ghY8kVgzOXUTyc5/maNG8TGTU95jGneQ2rIfxWEzBGXV
tKUOb0xEcXt95rdPEzR51Lpp0DMZ1U8IfVxI8QPBpmtjFg+R/o2pVPspgszL
biwcrUtB17/X/fabJKgvwbJw2CsVzT3J2nF2gqCIQzNOQ1OP0XTY6Xl+4wRV
Tx2OH9BIQ6ZxFWdZowSdLlFfQV4/R27rzBa0DBOkElfzk7cxA0U+ual8eYgg
V10Q5ni+RItqTfpuDxAkNBVYMRz8Ck16HywRJgTVtNnNH7Z4jYIDZ0cdeQQF
ZEjl/a17g3Zo1GytYhNkFdsj9vdBFqpNWefH7yVILaDQdtArG6me8Cdj3QQV
bPQfIFM5KJjpyaloJ0i8sUOHp5GHRrW5ivH1BNUXfDzF7ctDLbvSafNqCXr+
JOEz5/V7NH/9JseQaoK2+W470L8xH5VPn9JWLyfolsT7W72eGMUGrrzkU0RQ
tr+Vrx+9AN0T46fuxAQl9q9lDAUXIDPBKH2tfIJ8KhU8/1oUouehLimXcwhS
SPwmNFhXhK7c3idw6ClBU7Jv004Yf0Y9I+3fnz8iqOvCox0DDz4jx3AHhZZk
gt56nksiXl/QJ/bZxZIJBO3TX23EnypGtsKrcwKuEvTwR/J/HI3vyKx7KvK1
K0HDCTm6rRHf0Z+8teb2+wna5Pmz89fEd/RQU8K0aw9BXOExu/fVP5C/rIV6
vjVB60y2GV27Woo6JB7/cTQgqPLltJAOqUDM2yPzDwhR9SIJZ5lllWj9vXaj
u1N8tF473ujqoUpk/HZV96dhPooaThsKrKpEWdeHRr708NHqG7/dXdOrkOsO
2u0v3/no/A89q5UHqlFnnMvlW+F89Oz1O+30m9UoTt9g4FgoH/1KMBNeWFqN
nKbPo6VBfLTA0yGfbliDvDp8Hx09wkc/hC8tE5j7G/0WmKfXZslHSiaNChVf
a5HylrflL/7xUObLa43HljWgkLS1UlJOPNSv0B9h5dKAjr9rHO3cyUM6p602
LIpvQNvPrt7/3JKHHhhLPeycaEBRJd1Zs6t4KPZ7hMe+4kakXzELZTQeOt0Z
PWjp1Iz2Vw1+nHjFRclSP0PnWLQh+gf5T9+HOGiDSZBTiHMbOv2Z63agl4Oa
fJYYEP821D8R5NXZwEH0X+E9pc/b0J59VllvCznoRoL1ljD5drRTdaVWeBQH
hS4sl51tbEeit59f+buAgzxR1R2ubyeiZ/FzR837kUDK6PvG8E7kudbkzes1
/ShBRK3pR2onYlmsL3Ra1I++ffdQT6vtRLdq528MlepHi2ynU9yNuijdz5Uq
VLFR32GdjBbBbvRjWrF44142OhJ79lNlTA96oXLm3VLnPuTTvbgzO5ONfntv
HjQz7kFtzn9ohd/ZKL1lz6WSRT1od33YsrIuNgpdmm5mrNiD1v3sPdOt0o+8
bIXOjPK6kfDrx/JKV/tRi7Wu/cukbpQQrLXB/wAHDXREmqOZLlQ4l3HHUJ6H
tD7LfjR52YkktS7ptK4bQHMCMo6I9rehKPmfug8PDiG9rc1PWFdrkWujLRYu
HUUVy39bfE4qQv8VX3I9rjOJkg6jCi/bV/j1Cend9C0zaDTm2sGWY5X4YdDR
/hV7BEA3ovCipFIzvpg8vXOYKwjjz/MtQ1o68Y4Vuf8tGRKE4ifDm8cGO7F6
od8N1wlBqF9nCK6iXfh9R39lpagQ9EXJdMzV68J/F/7Z/kJdCLrmhGZ0BXRh
14wcG48dQlDSOGi6Sr4bm+b5bKnPEoLDLD2dZQY9WNZK10vuvRA47MsplrHs
wU0N3WGbCoSAf7ZrsNWhBwdMO33LLhWC2gqDb47BPfgV2mp5o1sIDjWcNn1V
1IM1v+pYWCkLA1dj3qLP1r1YoLoN8gOFIaTmZ/hm+z58if3pYeAFYXBYlvLo
s2cflhC4L2QYJgzMh3/dlp7pwwpL937JuSkMdxujM0rv9eGFV6ssX74Shi/V
u8UM2/qw1fqibSk9wvB88OuWT+5sHPfokVPYLhF4YHCZsditH9PfX/i4aa8I
HHCKXO/q248TKw+oix4UAdbEm9iwC/34yYxq2wVvEdgaapuTmNyPc/fEuwWF
iUDdhaqH7Q39uEnq8hGfTyKQYyk5VGPDwdonPQJsdUWhh9zRUF3IxUuNWncn
rxCFr183B0mv5OLVAg7L+9eIwooz0h5cYy42i9jSc36jKJDQwJ/+tlzsnKpn
m+4kCuf+9krmX+TiWzV/lwtFU/u7+uoMN3Lx/btHpWxuioKlwkOVnz1cnHqw
q+f2PVGwsTupFzPIxW+4v+8vfSYKrq3HbnSJ8XC5SJ7U3kJRYNtWPctZwcOi
Bud7Xw6Jgp3fbr+hEB6WnhormpwQhVSNhC1p13lYofBEkoWAGLQ4av6xjudh
TRtXu0ZpMbgbrCe9/ykPG7tbfBbTFoOZYRH1h6U8fPKmVPJ+BzGIH7s7/GYu
H3eN3LaX+igGQql2PXVxfJxiqu/X/FkMhuKa5erv8fGByPLolz/EQHPGY6Lw
ER83LBD9vrteDHwLw0d2ZfFx1W7f9YlDYuBpJT5yuIqPP7221lyqKw7iocf3
H5QgOHim13h2hTjcWrJpfEKOYMMtoXur1ooDbVnWv2AlgrPb8mJPWYjDgmv/
rUcsgp/L6Yh+OigOLCPB4az1BN/2FuzfdlscOp5Gxu07TLBtXqKYVpI4VCr8
qA7zJlhBdB1rKFUcgu7cXf/Al+CoRB+n22/EIfqDkd/1YIIv/Wwsby0Th5+Y
p24dTbCZsj/ndY04nLUsW/s5juBZVwXapUaqPkl/J1YCwYGTm00XscXh5UhI
ftIDgk8sfpt1QoQGjx8HXbzwiuBlp3ZWmknRwCXGIhWyCeYUcLnzFGjw4sn6
933vCPZwYGnnadDg2SbV3KFPBC9I/WQWrk2DeSt77toXEdxB9h7Yv5QGFtIP
PFOKCd5/NSZBcD21vdMxZ/gnwSrVS3KqTWmgHFK8cqqc4Hr1kqrHm2kgZMuL
6q+i5v92RtLKngbf3892hNYRbNV95GzsfzRYwLz1/kE7wZvOsjLMA2iw62mM
X2cnNV/FpobRczQo38/6LddDsJGFzTrHCBoUt0tELOwneE2zqKdMHA1SFS+0
yHIJXnXq0018hwb3ttRVt/MI1n28fIj1lAaXK+ammA8SrG3Sp1X7ggZ3W+4G
1PwlmPn7wY6wbBpkeZnxbIYJVvfee97oA3V+QaHZVyPUfEQVMrmFNOjuasuY
GSVY6f6PpqRvNDgpPDqiP075ZxAqtbOC0mPa88/uCYJly9YbCdfSwFfD237/
JMFS7sOHc5poEOyz9diOKYJpMxm3PTup+hMdVJZOEyxy0/0ro58GcvKTB4Yo
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
2biewZeBVC2wsmRfzLLvxyeK5xX4YC1wTsoJUDTnYN0Va9O1CqnteypUNu3i
4M67e2/VFGnBocNKYm4HOdj+RNIxo69acEHwfLRLMAcbqy5iiJVpwe82FdsT
WRxM+2+97/0GarxrGWKl87k4Wc11QemIFoynq6kbdXKxkf6SZa5jlD7M3kpV
PhfXbBleOz6uBew5zTs541xM87+ydcG0FrCyFjzaLcvDJ6qe+wYLMcFH4HbJ
5nU8DFeGCvTkmHDheZALDuPhhsT8H0XyTPiubNMWGMvDJ7Mu1zgoMMHsE7uY
lcjDz9qU+y4pMmHb8Y0vTF7y8Jz1xnLNqkx4NB8sbtTwcAe5tD9yERPet5hc
faPKx8Fi2zxZukzIMzydZbqAj5XmK/+Xt4QJzL0/+z/q8bGVVdql7mVMKIDz
7mdN+PhNalm6iQET5tnEjis783HoXqVJnikTGj62LXp3j4/VT7QKX9rIhFre
2wfzHvFx7pVnMioWTChv6al2fs7H3CwjrU2bmdDjIbEvL5ePbWUPbE7axoSR
lFHPKzV8vODz01vbHJlQHbSzJJhGcLneeGqTExOu3dNnXpYlOODW5qwjzlR9
I1ffBc4j+KcXu+KKCxOKTHRDl2oS7Cu/RAJ7MsGw0sL49RqC1QKDlG28mKAn
7UhjGRNc3PlzYeMRJugI7hi6YEow/d0xszFvJmzY3UcXtyYY788MWn6SCbSF
H62WHST4cMm/ax9PMWGs/UgOzZ1ghZXbE7b6M2GVFmhXehHsITKQ7RnIhC0v
WmS1/QiWTl/JTw6hjn/f/IJ3ieB949kH5SOZEPtxRT07lWARV9HjSVFMyMht
cIt7RnDmT7uzejFMeLvoT+niDIIFk0fvbI5jwsCFVcuo6z9+ZrGuOuQOEw4o
nhmeX0Dwrpdh7bL3mNBefHvFss8ET9H/kMREJnSgUcMlXwnexj0jnZfMBM3L
5i84Pwkeif1gMfiYCSt3+vRcriU4aVrK9vxTJhxWuug0XU/wZg8nV5k0Jiy7
8zT2QCPBiYYz5xZnMGFNvrcht5XgTY9sIt+9YILX4W1PFTsIJtJJ9yxeMiGb
U1CxpItgs7YNuS5vmCCX7rhVvY9g7pborySLCTZMrcRJNsG3slprzuYw4XTf
m5TPHILZV0IG7+QyYXzuaKkqITh2oHJW5z0Tfk0+5D8fINh4n5bs2w8Ur5Yr
0v5LcMzSIt1fn5ggMJMS2DVM6bHOUeJiARNqLi3+BaOUXxuHe1cWMeGih/ax
K2ME126L/Nr+mapn4rVlzjjB/L3aj28UM2Fu0bBb2QTBou441LSECTtO6xSU
T1L5OOHgOviNCaaTsY55UwSvDhqEhz+YkOQaYxA5TfDWK9c1dpYyoWo4zMZq
hmDXG6x/AuVMcNUZTRmgODAxv+lVBRPsU1wMQv4RfOOp3YeDVUy4hNxFJih+
9oZ/R76aCU2S6XKOswQXfLwaUFDDhGdmPPsnFNd909xzopYJuXtG/zRQzK/O
M9CsZ0IU70HCOMVirbvmVf5hgl9DXSx1/4/n93P+nm9kQoTOrW+E4tUjl6qW
NzOhXr7X8DvF1gLqr1pbmKAr2tMTTrGb1Luo6DYmMJ58qlhLcaDSDm/UwYQ/
JRnDpVR9sVrsraSTCSr/TdttpThN76JucjcTfjRIDL/5//vttaoS23up/Y+b
VghTXG+W3fuvj+rfUo0+E0ofYmPzNbOfCVy8ErlQ+ont7Ul15jKh2XLeb29K
X/VD50Nl+VT/xZ987kbpb3Cc7vqJMGG/iHyBGeWPdeBr8Bmk5qeTrSRF+RcU
0zlTNsyEoIz71/dQfsfeC246O0r1y7yKtEYqD8+fKH5YOk7l36hdZssgVU++
ZUDkFBMs8lamtfIIHihpszeZYQL9THMHjUuwePUZA94/Kh9fzD1U////Czv9
r7UQCxTjf22f7ibYZti8alqYBWnFvbk/Ogk+NNv8MkOUBfGNN/+72E5wnKK8
t7QEC7anba1/0USNb3qy96ccC2YmIjOGqwim2ch8DZrDgvr/vD7LVBCs4fAk
dclcFsRKJq+TL6X60afeJVyJBZXu6ZuqiglOv2vcZDWfGt+kaoV5LsFFj3+/
n1RnwVa/m2eeZRPc8MrnznNNFhQGB+mPvqLGL3lgL7mABUvUzUS3pVHrzZBI
1XddFtyYt92HJBDs/Ny83EmPBf0Prir0xxNs73LpJ1nKAu+HitpVMVT/Vgh/
VVzJgjkH3R8fCiNYO13og8taFtSEt297eJrgbleBxxMbKc5wK/bbTnATA1Ii
LFjgmCP4fI0VwTWV55M1LFkgsNVYr8ec4C8bZu9YWLHg+clPSlJGBKeq/Iu6
sYMFZbmMzmMsSr9fUwGL97PgldjVM3F/+djp2vrT+c6U3pv1m7W41HoPQX7b
D7JgZ/kX+v1uPjbPnPQ+5caC6K8/dPbVU+v/9QnXQi8WPHl5gEHy+bjTdMx6
72kWhCQ7zQm7yMeur/9qXotmwdu37L+3Znn42MXd01Y3qHqNcHbhCA+f2p1d
Jx3HgnnyT+x+c3g4bORUVMwtFhTTnHe/q+PhTMOJqdv3qfprHRiemTw8UThb
+ySd2l/6bVvwHh6O+SUd+aWEBTc9Pl74mMDFdx95H77ynQXPeGd2z4vg4kcn
yzdu/skCtu1ZVbvzXPxWKWbyZzkLWPu/5sS7c3HTvrmHq3+z4ESf4hKZlVys
08nY2NHJgs13k2S4nzl4RXagemo3C6SF40R7czjY6HLjhHsv5XfawjulTznY
Wuf+K3Y/lQ9S9GlPOAf7HtVUHxxkwcpln9cd38nBwcYXJt4MUfVcUDUrMOPg
yzIdNSdHWGCybgxN63NwwstH4ePjLOj2bd9koMTBKSEinu8nWdBRwvVYJc7B
6TvdzYKnWTBX/lSayng/zmZ+nb/hHwteSGqp8Pv68ach7YnZWRacuvb0S8af
fvw/JjN+xQ==
        "]]}},
     AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
     Axes->True,
     AxesOrigin->{0, 0},
     DisplayFunction:>$DisplayFunction,
     FormatType->TraditionalForm,
     PlotRange->{{0, 10}, {-0.9999997966795732, 0.9999999999999791}},
     PlotRangeClipping->True,
     PlotRangePadding->{
       Scaled[0.02], 
       Scaled[0.02]}], {-1, -0.6180339887498948}, {
    Left, Bottom}, {2, 1.2360679774997896`}], GraphicsGroupBox[{
     {GrayLevel[0], 
      RectangleBox[{1.1500000000000001`, -0.45}, \
{1.9500000000000002`, 0.15000000000000008`}]}, 
     {GrayLevel[1], EdgeForm[{GrayLevel[0], Thickness[0.001]}], 
      GraphicsGroupBox[{
        RectangleBox[{1.1, -0.4}, \
{1.9000000000000001`, 0.20000000000000007`}], InsetBox[
         GraphicsBox[{{{InsetBox[
              GraphicsBox[
               {Hue[0.9060679774997897, 0.6, 0.6], 
                LineBox[{{0, 0}, {1, 0}}]}], {0.08, 0.08}, {
              Left, Bottom}, {1, 1}], InsetBox[
              RowBox[{"cos", "(", "x", ")"}], {1.2100000000000002`, 0.58}, {-1, 0},
               Automatic, {1, 0}]}, {InsetBox[
              GraphicsBox[
               {Hue[0.67, 0.6, 0.6], 
                LineBox[{{0, 0}, {1, 0}}]}], {0.08, 1.24}, {
              Left, Bottom}, {1, 1}], InsetBox[
              RowBox[{"sin", "(", "x", ")"}], {1.2100000000000002`, 1.74}, {-1, 0},
               Automatic, {1, 0}]}}, {}},
          AspectRatio->0.7500000000000001,
          FormatType->TraditionalForm,
          PlotRange->{{-0.1, 3.26}, {-0.1, 2.42}}], {1.1, -0.4}, {
         Left, Bottom}, {0.8, 0.6000000000000001}]}]}}]},
  AspectRatio->Automatic,
  Background->None,
  ColorOutput->Automatic,
  ImageSize->Automatic,
  PlotRange->All]], "Output",
 CellChangeTimes->{3.503084652219427*^9},
 CellTags->"Cell 9.90"]
}, Open  ]],

Cell[TextData[{
 "The options ",
 StyleBox["PlotLegend",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " and ",
 StyleBox["LegendPosition",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " have been used to label the different curves and determine the position of \
the legend.  These variables are only defined after the package ",
 StyleBox["PlotLegends",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " has been loaded.  If you evaluate the above cell  ",
 StyleBox["before",
  FontSlant->"Italic"],
 " you have evaluated Cell ",
 ButtonBox["9.90",
  BaseStyle->"Hyperlink",
  ButtonData->"Cell 9.90"],
 " you will get an error because these options have not yet been defined. "
}], "Text",
 CellChangeTimes->{{3.446513063628728*^9, 3.446513109696409*^9}, {
   3.4465131575708933`*^9, 3.446513193493607*^9}, {3.446513227157197*^9, 
   3.4465132315737877`*^9}, {3.4465132816504908`*^9, 
   3.4465133226125507`*^9}, {3.446513353742289*^9, 3.446513559283452*^9}, {
   3.446516051246236*^9, 3.446516096910893*^9}, 3.446590843178926*^9}],

Cell[TextData[{
 "The full name of these options is ",
 StyleBox["PlotLegends`PlotLegend",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " and ",
 StyleBox["PlotLegends`LegendPosition",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ". In other words, the context for these variables is ",
 StyleBox["PlotLegends",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ". Several different contexts are generally in use in any given ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " session, and this has the following consequence. Two variables can have \
the same short name, but different contexts. For instance, if we remove the \
definitions in ",
 StyleBox["PlotLegends, ",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 "we can create our own variable named ",
 StyleBox["LegendPosition",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ", as in "
}], "Text",
 CellChangeTimes->{{3.446513063628728*^9, 3.446513109696409*^9}, {
  3.4465131575708933`*^9, 3.446513193493607*^9}, {3.446513227157197*^9, 
  3.4465132315737877`*^9}, {3.4465132816504908`*^9, 3.4465133226125507`*^9}, {
  3.446513353742289*^9, 3.446513559283452*^9}, {3.4465136112791643`*^9, 
  3.446513753614644*^9}, {3.446514212887445*^9, 3.4465142507047462`*^9}, {
  3.4465153432199707`*^9, 3.446515360573661*^9}, {3.4469457509900303`*^9, 
  3.446945762396922*^9}, {3.446947107880005*^9, 3.446947112531705*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Remove", "[", "\"\<PlotLegends`*\>\"", "]"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{"LegendPosition", " ", "=", " ", "1"}], ";"}]}], "Input",
 ShowCellTags->"True",
 CellTags->"Cell 9.91"],

Cell["The context for this variable can be found as follows:", "Text",
 CellChangeTimes->{{3.4465138271239567`*^9, 3.4465138452315683`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Context", "[", "LegendPosition", "]"}]], "Input",
 ShowCellTags->"True",
 CellChangeTimes->{{3.446513887810561*^9, 3.446513896915563*^9}, {
  3.4465142956128483`*^9, 3.4465143011769323`*^9}, {3.446947141409511*^9, 
  3.446947145234845*^9}},
 CellTags->"Cell 9.92"],

Cell[BoxData["\<\"Global`\"\>"], "Output",
 CellChangeTimes->{3.503084672274056*^9},
 CellTags->"Cell 9.92"]
}, Open  ]],

Cell[TextData[{
 "The ",
 StyleBox["Global",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " context is the default context for user defined variables. However, if we \
reload the ",
 StyleBox["PlotLegends",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " package, we will see a warning that there are now two variables named ",
 StyleBox["LegendPosition",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ", but in different contexts:"
}], "Text",
 CellChangeTimes->{{3.446514306442381*^9, 3.446514434145608*^9}, {
  3.446515240849654*^9, 3.446515241395561*^9}, {3.446590899967389*^9, 
  3.446590914807782*^9}, {3.44694715377325*^9, 3.446947158871179*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"<<", "PlotLegends`"}]], "Input",
 ShowCellTags->"True",
 CellChangeTimes->{{3.44651434795702*^9, 3.446514350965538*^9}},
 CellTags->"Cell 9.93"],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"LegendPosition", "::", "shdw"}], "MessageName"], ":", 
  " ", "\<\"Symbol \[NoBreak]\\!\\(\\\"LegendPosition\\\"\\)\[NoBreak] \
appears in multiple contexts \[NoBreak]\\!\\({\\\"PlotLegends`\\\", \
\\\"Global`\\\"}\\)\[NoBreak]; definitions in context \
\[NoBreak]\\!\\(\\\"PlotLegends`\\\"\\)\[NoBreak] may shadow or be shadowed \
by other definitions. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", \
ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/General/shdw\\\", ButtonNote -> \
\\\"PlotLegends`LegendPosition::shdw\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.503084680654998*^9},
 CellTags->"Cell 9.93"]
}, Open  ]],

Cell[TextData[{
 "The two variables named ",
 StyleBox["LegendPosition",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " \"shadow\" one-another, i.e. one of them takes precedence over the other \
when only the short name is used. Variables that shadow one-another are \
displayed in ",
 StyleBox["Red",
  FontColor->RGBColor[1, 0, 0]],
 " to indicate that there is a potential problem.  For instance, if you now \
ask for the context of the variable ",
 StyleBox["LegendPosition",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " you get a different answer than in Cell ",
 ButtonBox["9.92",
  BaseStyle->"Hyperlink",
  ButtonData->"Cell 9.92"],
 ":"
}], "Text",
 CellChangeTimes->{{3.503158652965187*^9, 3.503158653288995*^9}},
 CellTags->"i:120"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Context", "[", "LegendPosition", "]"}]], "Input",
 ShowCellTags->"True",
 CellChangeTimes->{{3.446514523020433*^9, 3.446514524578135*^9}, {
  3.446514587779317*^9, 3.446514602803978*^9}, {3.446947174835548*^9, 
  3.4469471820743303`*^9}},
 CellTags->"Cell 9.94"],

Cell[BoxData["\<\"PlotLegends`\"\>"], "Output",
 CellChangeTimes->{3.503084685240591*^9},
 CellTags->"Cell 9.94"]
}, Open  ]],

Cell[TextData[{
 "This shows that the names of variables in the context ",
 StyleBox["PlotLegends",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " take precedence over variables in the ",
 StyleBox["Global",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " context. To determine the value of the user-defined variable ",
 StyleBox["LegendPosition",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " you must type its full name: "
}], "Text",
 CellChangeTimes->{{3.4465148070782413`*^9, 3.446514877456925*^9}, {
  3.4465152743313103`*^9, 3.446515295279892*^9}, {3.446590964739863*^9, 
  3.446590969916329*^9}, {3.446946578927988*^9, 3.44694661200718*^9}, {
  3.446947213695084*^9, 3.446947218819174*^9}}],

Cell[CellGroupData[{

Cell[BoxData["Global`LegendPosition"], "Input",
 ShowCellTags->"True",
 CellChangeTimes->{{3.446514879473837*^9, 3.446514885040312*^9}, {
  3.446947222451496*^9, 3.446947226005404*^9}},
 CellTags->"Cell 9.95"],

Cell[BoxData["1"], "Output",
 CellChangeTimes->{3.503084689848724*^9},
 CellTags->"Cell 9.95"]
}, Open  ]],

Cell[TextData[{
 "Precedence between contexts is determined by order in the list ",
 StyleBox["$ContextPath",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ", which lists the different contexts loaded in the current session:"
}], "Text",
 CellChangeTimes->{{3.446514893769703*^9, 3.44651493907843*^9}, {
  3.4465149766673737`*^9, 3.4465149774084682`*^9}, {3.446515127384397*^9, 
  3.4465151381162777`*^9}}],

Cell[CellGroupData[{

Cell[BoxData["$ContextPath"], "Input",
 ShowCellTags->"True",
 CellChangeTimes->{{3.44651494093447*^9, 3.446514965427902*^9}},
 CellTags->"Cell 9.96"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"PlotLegends`\"\>", ",", "\<\"PacletManager`\"\>", 
   ",", "\<\"WebServices`\"\>", ",", "\<\"System`\"\>", 
   ",", "\<\"Global`\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.503084692903016*^9},
 CellTags->"Cell 9.96"]
}, Open  ]],

Cell[TextData[{
 "Here we see that variable names in the ",
 StyleBox["PlotLegends",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " context take precedence even over system variables such as ",
 StyleBox["Pi",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ". "
}], "Text",
 CellChangeTimes->{{3.446515014371557*^9, 3.446515086833846*^9}, {
  3.44694663578269*^9, 3.446946637468899*^9}}],

Cell[TextData[{
 "\tIn addition to the add-on packages that come with ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ", various external packages written by ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " users can be found on the world wide web. One particularly useful website \
in this regard is ",
 ButtonBox["http://library.wolfram.com/database/MathSource/",
  BaseStyle->"Hyperlink",
  ButtonData:>{
    URL["http://library.wolfram.com/database/MathSource/"], None}],
 ". There, you can find a large collection of notebooks that extend the \
capabilities of ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ". "
}], "Text",
 CellChangeTimes->{{3.446511386964101*^9, 3.446511389965205*^9}, {
  3.446512081235466*^9, 3.446512130031763*^9}, {3.446590991830879*^9, 
  3.446590992169331*^9}},
 CellTags->"i:114"],

Cell[TextData[{
 "(For more on loading external files, see the discussion of the ",
 StyleBox["Directory",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " and ",
 StyleBox["SetDirectory",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " commands in Sec. ",
 ButtonBox["9.11.4",
  BaseStyle->"Hyperlink",
  ButtonData:>"c:82"],
 ".) "
}], "Text",
 CellChangeTimes->{3.44651205843044*^9}],

Cell[TextData[{
 "Finally, ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " allows access to large databases over the internet.  For example, \
scientific and technical data,  and geographic data can be obtained using \
commands such as ",
 StyleBox["ElementData",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " or ",
 StyleBox["CountryData",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ". See the ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " documentation under the heading \[OpenCurlyDoubleQuote]Computable Data\
\[CloseCurlyDoubleQuote] for more information on how to use this \
constantly-updated source of information."
}], "Text",
 CellChangeTimes->{{3.5030850954917517`*^9, 3.5030854175214767`*^9}},
 CellTags->"i:compd"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"CountryData", "[", 
  RowBox[{"\"\<China\>\"", ",", "\"\<Population\>\""}], "]"}]], "Input",
 ShowCellTags->True,
 CellChangeTimes->{{3.5030855524357224`*^9, 3.503085563083652*^9}, {
  3.5030856027242126`*^9, 3.503085726663487*^9}},
 CellTags->"Cell 9.97"],

Cell[BoxData["1.314357176`*^9"], "Output",
 CellChangeTimes->{
  3.5030855635919943`*^9, {3.503085603878538*^9, 3.503085632114476*^9}, {
   3.503085667444425*^9, 3.503085688354767*^9}, {3.503085719739176*^9, 
   3.5030857272398777`*^9}, 3.503085785231307*^9},
 CellTags->"Cell 9.97"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Exercises for Sec. 9.6", "Subsubtitle",
 CellTags->{"Ex. 9.6", "c:35"}],

Cell[TextData[{
 StyleBox["(1)",
  FontWeight->"Bold"],
 " Using a plot, determine whether the equation ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{"3", 
      SuperscriptBox["x", "8"]}], "-", 
     RowBox[{"2", "x"}], "+", "1"}], "=", "0"}], TraditionalForm]]],
 "  has any real solutions. (Hint: Plot the left-hand side as a function of \
",
 Cell[BoxData[
  FormBox["x", TraditionalForm]]],
 " and see whether it can equal zero for any real ",
 Cell[BoxData[
  FormBox["x", TraditionalForm]]],
 ".)"
}], "Text",
 CellTags->"Ex. 9.6"],

Cell[TextData[{
 StyleBox["(2)",
  FontWeight->"Bold"],
 " A train pulls out of a station, with position ",
 Cell[BoxData[
  FormBox["x", TraditionalForm]]],
 " following the equation ",
 Cell[BoxData[
  FormBox[
   RowBox[{"x", " ", "=", " ", 
    RowBox[{"0.1", " ", 
     SuperscriptBox["t", "2"]}]}], TraditionalForm]]],
 " as a function of time ",
 Cell[BoxData[
  FormBox["t", TraditionalForm]]],
 ". A second train coming into the station at high speed, sees the first \
train and applies its brakes, following the equation ",
 Cell[BoxData[
  FormBox[
   RowBox[{"x", " ", "=", " ", 
    RowBox[{
     RowBox[{"-", "20"}], "  ", "+", " ", 
     RowBox[{"5", " ", "t"}], " ", "-", " ", 
     SuperscriptBox["t", "2"], "  ", "-", " ", 
     SuperscriptBox["t", "3"]}]}], TraditionalForm]]],
 " until it comes to a stop.  Use a plot to determine if the two trains \
collide."
}], "Text"],

Cell[TextData[{
 StyleBox["(3)",
  FontWeight->"Bold"],
 " The solution of Newton's equations for the orbit of a mass point around a \
stationary mass (such as the sun) is defined in cylindrical coordinates ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{"r", ",", "\[Theta]"}], ")"}], TraditionalForm]]],
 " by the equation ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    FractionBox["1", "r"], "=", 
    RowBox[{
     FractionBox["1", 
      SubscriptBox["r", "o"]], 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"e", " ", "sin\[Theta]"}], "+", "1"}], ")"}]}]}], 
   TraditionalForm]]],
 "  where the orbit parameters ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["r", "o"], TraditionalForm]]],
 " and ",
 Cell[BoxData[
  FormBox["e", TraditionalForm]]],
 " (",
 Cell[BoxData[
  FormBox["e", TraditionalForm]]],
 " being the orbit's ",
 StyleBox["eccentricity",
  FontSlant->"Italic"],
 ") are both greater than or equal to zero. Taking ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"e", " ", "=", "0"}], ",", 
    RowBox[{"1", "/", "2"}], ",", "1", ","}], TraditionalForm]]],
 " and 2, for each case"
}], "Text",
 CellTags->"i:59"],

Cell[TextData[{
 StyleBox["(a)",
  FontWeight->"Bold"],
 " Plot ",
 Cell[BoxData[
  FormBox[
   RowBox[{"r", "/", 
    SubscriptBox["r", "o"]}], TraditionalForm]]],
 " as a function of ",
 Cell[BoxData[
  FormBox["\[Theta]", TraditionalForm]]],
 " using a polar plot. Classify each orbit as an ellipse, a parabola, or a \
hyperbola."
}], "Text"],

Cell[TextData[{
 StyleBox["(b)",
  FontWeight->"Bold"],
 " In each case find the value of ",
 Cell[BoxData[
  FormBox[
   RowBox[{"  ", 
    RowBox[{"r", "/", 
     SubscriptBox["r", "o"]}]}], TraditionalForm]]],
 " and  ",
 Cell[BoxData[
  FormBox["\[Theta]", TraditionalForm]]],
 "  for  perihelion (closest approach to the sun)."
}], "Text",
 CellTags->"i:60"],

Cell[TextData[{
 StyleBox["(4)",
  FontWeight->"Bold"],
 " The power density ",
 Cell[BoxData[
  FormBox["S", TraditionalForm]]],
 StyleBox[" ",
  FontFamily->"Symbol"],
 "(energy released per unit volume per unit time) in an industrial process is \
found empirically to depend on the mean density ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]]],
 StyleBox[" ",
  FontSlant->"Italic"],
 " of fuel in the reactor , and the temperature ",
 StyleBox["T ",
  FontSlant->"Italic"],
 "according to  ",
 Cell[BoxData[
  FormBox[
   RowBox[{"S", "=", 
    RowBox[{"0.04", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        SuperscriptBox["n", "3.2"], "+", 
        RowBox[{"0.2", 
         SuperscriptBox["n", "0.7"], 
         SuperscriptBox["T", "1.3"], 
         SuperscriptBox["\[ExponentialE]", 
          RowBox[{
           SuperscriptBox["T", "2"], "/", "100"}]]}]}], ")"}], "/", 
      RowBox[{"(", 
       RowBox[{"10", "+", 
        SuperscriptBox["T", "2"]}], ")"}]}]}]}], TraditionalForm]]],
 " ",
 StyleBox[" ",
  FontSlant->"Italic"],
 " kW/",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["cm", "3"], TraditionalForm]]],
 ", (where ",
 StyleBox["T ",
  FontSlant->"Italic"],
 " and ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]]],
 " are measured in units of 100 K and 1 g/",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["cm", "3"], TraditionalForm]]],
 " respectively) .  Furthermore, if the power density exceeds ",
 Cell[BoxData[
  FormBox[
   RowBox[{"S", " ", "=", " ", 
    RowBox[{"1", " ", 
     RowBox[{"kW", "/", 
      SuperscriptBox["cm", "3"]}]}]}], TraditionalForm]]],
 ", the power release will exceed cooling capacity , the temperature will \
increase, and the reactor will melt down. Use a contour plot to find the \
regime  of safe operation in  ",
 StyleBox["n ",
  FontSlant->"Italic"],
 "and ",
 StyleBox["T",
  FontSlant->"Italic"],
 ". "
}], "Text"],

Cell[TextData[{
 StyleBox["(5)",
  FontWeight->"Bold"],
 " Create an animation of the function defined by ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SuperscriptBox["r", "2"], "(", 
     RowBox[{"\[Theta]", ",", "t"}], ")"}], "=", " ", 
    RowBox[{"\[Theta]", "+", "t"}]}], TraditionalForm]]],
 ", where ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{"r", ",", "\[Theta]"}], ")"}], TraditionalForm]]],
 " are polar coordinates. This curve is related to ",
 ButtonBox["Fermat's Spiral",
  BaseStyle->"Hyperlink",
  ButtonData:>{
    URL["http://www-groups.dcs.st-and.ac.uk/~history/Curves/Fermats.html"], 
    None}],
 ". Plot the function in the ",
 Cell[BoxData[
  FormBox[
   RowBox[{"x", "-", "y"}], TraditionalForm]]],
 " plane with ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{"-", "5"}], "<", "x", "<", "5"}], ",", 
    RowBox[{
     RowBox[{"-", "5"}], "<", "y", "<", "5"}]}], TraditionalForm]]],
 ", for ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"-", "t"}], "<", "\[Theta]", "<", 
    RowBox[{"10", "\[Pi]"}]}], TraditionalForm]]],
 ",  and animate it at a sequence of times from ",
 Cell[BoxData[
  FormBox[
   RowBox[{"0", "\[LessEqual]", " ", "t", "\[LessEqual]", " ", 
    RowBox[{"1.8", "\[Pi]"}]}], TraditionalForm]]],
 ", in units of ",
 Cell[BoxData[
  FormBox[
   RowBox[{"0.2", " ", "\[Pi]"}], TraditionalForm]]],
 "."
}], "Text",
 CellTags->"i:58"],

Cell[TextData[{
 StyleBox["(6)",
  FontWeight->"Bold"],
 " Read about the plotting function ",
 StyleBox["ParametricPlot3D",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " in the ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " documentation. Use this function to create a surface plot in Cartesian \
coordinates ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"(", 
     RowBox[{"x", ",", "y", ",", "z"}], ")"}], " "}], TraditionalForm]]],
 "of a ",
 ButtonBox["M\[ODoubleDot]bius",
  BaseStyle->"Hyperlink",
  ButtonData:>{
    URL["http://www-groups.dcs.st-and.ac.uk/~history/Mathematicians/Mobius.\
html"], None}],
 " strip (a surface with only a single side),  defined in cylindrical \
coordinates ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{"r", ",", "\[Theta]", ",", "z"}], ")"}], TraditionalForm]]],
 " by the parametric equations ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{"r", "(", 
      RowBox[{"s", ",", "\[Theta]"}], ")"}], "=", "  ", 
     RowBox[{"1", " ", "+", " ", 
      RowBox[{"s", " ", 
       RowBox[{"cos", "(", 
        RowBox[{"\[Theta]", "/", "2"}], ")"}]}]}]}], ",", " ", 
    RowBox[{
     RowBox[{"z", "(", 
      RowBox[{"s", ",", "\[Theta]"}], ")"}], "=", 
     RowBox[{"s", " ", 
      RowBox[{"sin", "(", 
       RowBox[{"\[Theta]", "/", "2"}], ")"}]}]}]}], TraditionalForm]]],
 ", ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{"-", "1"}], "/", "2"}], "<", "s", "<", 
    RowBox[{"1", "/", "2"}]}], TraditionalForm]]],
 ", ",
 Cell[BoxData[
  FormBox[
   RowBox[{"0", "<", "\[Theta]", "<", 
    RowBox[{"2", " ", "\[Pi]"}]}], TraditionalForm]]],
 " .  (You can put more twists in the strip by replacing ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Theta]", "/", "2"}], TraditionalForm]]],
 " with ",
 Cell[BoxData[
  FormBox[
   RowBox[{"n", " ", 
    RowBox[{"\[Theta]", "/", "2"}]}], TraditionalForm]]],
 ".)"
}], "Text",
 CellChangeTimes->{3.446516525965201*^9},
 CellTags->"i:52"],

Cell[TextData[{
 StyleBox["(7)",
  FontWeight->"Bold"],
 " Read about the plotting function ",
 StyleBox["ContourPlot3D",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ". Use this function to plot the surface defined by the equation ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"f", "(", 
     RowBox[{"x", ",", "y", ",", "z"}], ")"}], " ", "=", " ", "0"}], 
   TraditionalForm]]],
 ", where ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"f", "(", 
     RowBox[{"x", ",", "y", ",", "z"}], ")"}], " ", "=", 
    RowBox[{
     RowBox[{"x", " ", 
      SuperscriptBox["y", "2"]}], "-", " ", 
     RowBox[{"y", " ", 
      SuperscriptBox["z", "2"]}], " ", "+", " ", 
     RowBox[{"z", " ", 
      SuperscriptBox["x", "2"], " "}]}]}], TraditionalForm]]],
 " , over the range ",
 Cell[BoxData[
  FormBox[
   RowBox[{"-", "3"}], TraditionalForm]]],
 " to ",
 Cell[BoxData[
  FormBox["3", TraditionalForm]]],
 " in each dimension. Use the mouse to view the surface from all sides, and \
determine where there is a singularity. "
}], "Text",
 CellChangeTimes->{{3.446516544198443*^9, 3.446516554115733*^9}, {
   3.4465178028230343`*^9, 3.446517804128275*^9}, 3.446517972896607*^9}]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 "9.7 Help for ",
 StyleBox["Mathematica ",
  FontSlant->"Italic"],
 "Users"
}], "Subtitle",
 CellTags->{"Sec. 9.7", "c:36"}],

Cell[TextData[{
 "By now you can see that there's a lot to remember--and we are just getting \
started! Fortunately, ",
 StyleBox["Mathematica ",
  FontSlant->"Italic"],
 " comes with an excellent online help facility. It is available on the main \
menu under ",
 StyleBox["Help",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ". If you go to it now, and  type into the search window  the name of an \
intrinsic function that you wish to learn about, the documentation will \
display information about the function, including options, examples, and \
information about other related functions. Also, the function index in the \
help browser has an alphabetical list of every function. "
}], "Text",
 CellChangeTimes->{{3.446516586398699*^9, 3.446516611851253*^9}, {
  3.446516646375682*^9, 3.4465166515205097`*^9}, {3.5042765465600233`*^9, 
  3.504276549110496*^9}}],

Cell["\<\
\tThe examples displayed in the help window can be modified and evaluated, \
just like the examples in the electronic version of this textbook,  allowing \
you to easily explore variations in the examples. \
\>", "Text",
 CellChangeTimes->{{3.446516692375946*^9, 3.446516692963601*^9}}],

Cell[TextData[{
 "\tYou can also find information about ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " functions directly within a ",
 StyleBox["Mathematica ",
  FontSlant->"Italic"],
 "session. In order to see the definition of a function, type ",
 StyleBox["?Function",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ". For example,"
}], "Text",
 CellTags->"i:122"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "Eigenvalues"}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.98"],

Cell[BoxData[
 RowBox[{
  StyleBox["\<\"\!\(\*RowBox[{\\\"Eigenvalues\\\", \\\"[\\\", \
StyleBox[\\\"m\\\", \\\"TI\\\"], \\\"]\\\"}]\) gives a list of the \
eigenvalues of the square matrix \!\(\*StyleBox[\\\"m\\\", \\\"TI\\\"]\). \\n\
\!\(\*RowBox[{\\\"Eigenvalues\\\", \\\"[\\\", RowBox[{\\\"{\\\", \
RowBox[{StyleBox[\\\"m\\\", \\\"TI\\\"], \\\",\\\", StyleBox[\\\"a\\\", \
\\\"TI\\\"]}], \\\"}\\\"}], \\\"]\\\"}]\) gives the generalized eigenvalues \
of \!\(\*StyleBox[\\\"m\\\", \\\"TI\\\"]\) with respect to \
\!\(\*StyleBox[\\\"a\\\", \\\"TI\\\"]\). \
\\n\!\(\*RowBox[{\\\"Eigenvalues\\\", \\\"[\\\", RowBox[{StyleBox[\\\"m\\\", \
\\\"TI\\\"], \\\",\\\", StyleBox[\\\"k\\\", \\\"TI\\\"]}], \\\"]\\\"}]\) \
gives the first \!\(\*StyleBox[\\\"k\\\", \\\"TI\\\"]\) eigenvalues of \
\!\(\*StyleBox[\\\"m\\\", \\\"TI\\\"]\). \
\\n\!\(\*RowBox[{\\\"Eigenvalues\\\", \\\"[\\\", RowBox[{RowBox[{\\\"{\\\", \
RowBox[{StyleBox[\\\"m\\\", \\\"TI\\\"], \\\",\\\", StyleBox[\\\"a\\\", \
\\\"TI\\\"]}], \\\"}\\\"}], \\\",\\\", StyleBox[\\\"k\\\", \\\"TI\\\"]}], \
\\\"]\\\"}]\) gives the first \!\(\*StyleBox[\\\"k\\\", \\\"TI\\\"]\) \
generalized eigenvalues.\"\>", "MSG"], "\[NonBreakingSpace]", 
  ButtonBox[
   StyleBox["\[RightSkeleton]", "SR"],
   Active->True,
   BaseStyle->"Link",
   ButtonData->"paclet:ref/Eigenvalues"]}]], "Print", "PrintUsage",
 CellChangeTimes->{3.446516770102947*^9},
 CellTags->{"Cell 9.97", "Info3446487969-5429238"}]
}, Open  ]],

Cell["\<\
This also works for user-defined variables and functions. For instance, if \
you define a function  as\
\>", "Text",
 CellChangeTimes->{{3.4465183275394506`*^9, 3.446518343668632*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"f", "[", "x_", "]"}], " ", "=", " ", 
   RowBox[{"x", " ", 
    RowBox[{"Sin", "[", "x", "]"}]}]}], ";"}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.99"],

Cell["you can check its definition using", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "f"}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.100"],

Cell[CellGroupData[{

Cell["Global`f", "Print", "PrintUsage",
 CellChangeTimes->{3.446516869958953*^9},
 CellTags->{"Cell 9.99", "Info3446488069-9932704"}],

Cell[BoxData[
 InterpretationBox[GridBox[{
    {GridBox[{
       {
        RowBox[{
         RowBox[{"f", "[", "x_", "]"}], "=", 
         RowBox[{"x", " ", 
          RowBox[{"Sin", "[", "x", "]"}]}]}]}
      },
      BaselinePosition->{Baseline, {1, 1}},
      GridBoxAlignment->{
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}},
      GridBoxItemSize->{"Columns" -> {{
           Scaled[0.999]}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
        "RowsIndexed" -> {}}]}
   },
   BaselinePosition->{Baseline, {1, 1}},
   GridBoxAlignment->{
    "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
     "RowsIndexed" -> {}}],
  Definition[$CellContext`f],
  Editable->False]], "Print",
 CellChangeTimes->{3.446516870092518*^9},
 CellTags->{"Cell 9.99", "Info3446488069-9932704"}]
}, Open  ]]
}, Open  ]],

Cell["\<\
The first line is the full name of the variable, including its context. You \
can also obtain a list of all user-defined variables that have been employed \
in the current session:\
\>", "Text",
 CellTags->"i:121"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "Global`*"}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.101"],

Cell[BoxData[
 DynamicModuleBox[{Typeset`open$$ = True}, 
  PaneSelectorBox[{False->
   RowBox[{
    OpenerBox[Dynamic[Typeset`open$$],
     ImageSize->Small], 
    StyleBox["Global`", "InfoHeading"]}], True->GridBox[{
     {
      RowBox[{
       OpenerBox[Dynamic[Typeset`open$$],
        ImageSize->Small], 
       StyleBox["Global`", "InfoHeading"]}]},
     {GridBox[{
        {
         ButtonBox["f",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3446488086-4262034", {"f", "Global`"}},
          ButtonNote->"Global`"], 
         ButtonBox["x",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3446488086-4262034", {"x", "Global`"}},
          ButtonNote->"Global`"]}
       },
       DefaultBaseStyle->"InfoGrid",
       GridBoxItemSize->{"Columns" -> {{
            Scaled[0.475]}}}]}
    },
    GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}}]}, 
   Dynamic[Typeset`open$$],
   ImageSize->Automatic]]], "Print", "InfoCell",
 CellChangeTimes->{3.446516887505677*^9},
 CellTags->"Cell 9.100"]
}, Open  ]],

Cell[TextData[{
 "By clicking on the symbols, you will obtain their definitions and/or \
values.  ",
 StyleBox["Eigenvalues",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " is not listed, because it is not a user-defined variable; and ",
 StyleBox["x",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " is listed because it was used, even though it has not yet been given a \
definition."
}], "Text"],

Cell[TextData[{
 "\tTo see all of the options available for any ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " function,  you can  type ",
 StyleBox["??Function ",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 "or ",
 StyleBox["Options[Function]",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ". For example, typing  ",
 StyleBox["??Plot ",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 "results in a long list of options for the plot command, as well as the \
values they take by default."
}], "Text",
 CellChangeTimes->{{3.447781426892358*^9, 3.447781448646344*^9}, {
  3.458913815226248*^9, 3.458913843371126*^9}},
 CellTags->"i:61"],

Cell[TextData[{
 "\tYou may also have noticed that ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " automatically colors symbols  to aid in formatting input. Brackets are \
colored pink until they are closed, as are trailing commas or unfinished \
operators such as ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    RowBox[{"/.", "\[Rule]"}],
    FontFamily->"Courier",
    FontWeight->"Bold"], TraditionalForm]]],
 " .  Grey is used for text strings. When the kernel is running, dark blue is \
used for variables that have not yet been defined in the current session. \
Black is used for variables that have been previously defined, including \
intrinsic functions.  Blue-green is used for dummy variables such as function \
arguments, or iterators in tables and sums. Red is used for syntax errors. \
Also, ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " places a red caret below locations where it expects more input. For \
instance, if you forget to type the second required argument in an intrinsic \
function the caret will appear. If you evaluate the command anyway, error \
messages typically result. Even though these messages are sometimes cryptic, \
you should read them carefully as they contain useful clues that will help \
you correct the error:"
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"x", "^", "2"}], ","}], "]"}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.102"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Plot", "::", "\<\"pllim\"\>"}], ":", 
  " ", "\<\"\\!\\(\\*StyleBox[\\\"\\\\\\\"Range specification \\\\\\\"\\\", \
\\\"MT\\\"]\\)\[NoBreak]\\!\\(\\*StyleBox[\\!\\(Null\\), \\\"MT\\\"]\\)\
\[NoBreak]\\!\\(\\*StyleBox[\\\"\\\\\\\" is not of the form {x, xmin, \
xmax}.\\\\\\\"\\\", \\\"MT\\\"]\\) \
\\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", \
ButtonFrame->None, ButtonData:>\\\"paclet:ref/message/Plot/pllim\\\", \
ButtonNote -> \\\"Plot::pllim\\\"]\\)\"\>"}]], "Message", "MSG",
 CellTags->"Cell 9.101"],

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   SuperscriptBox["x", "2"], ",", "Null"}], "]"}]], "Output",
 CellTags->"Cell 9.101"]
}, Open  ]],

Cell[TextData[{
 " Here, the error message tells us that we need extra input of the form ",
 StyleBox["{x, xmin, xmax}",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ". ",
 StyleBox["Null",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " is the term ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " uses for the absence of an expression or variable."
}], "Text",
 CellChangeTimes->{3.4605057831628847`*^9}],

Cell[TextData[{
 "Finally, another aid to users has been incorporated into ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " 8.0: the ",
 ButtonBox["WolframAlpha",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://www.wolframalpha.com/about.html"], None},
  ButtonNote->"http://www.wolframalpha.com/about.html"],
 " \[OpenCurlyDoubleQuote]computational knowledge engine\
\[CloseCurlyDoubleQuote]. For computers connected to the internet this \
allows, among other things, relaxed \[OpenCurlyDoubleQuote]free-form\
\[CloseCurlyDoubleQuote] syntax (i.e. plain English) in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " commands. The commands are interpreted using the  computational knowledge \
engine rather than the kernel, provided that they begin with an equal sign \
\[OpenCurlyDoubleQuote]=\[CloseCurlyDoubleQuote] .  You can pose all sorts of \
questions to the computational engine this way, without requiring correct \
syntax. For instance,  you can have ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " plot ",
 Cell[BoxData[
  FormBox[
   RowBox[{"sin", "(", "x", ")"}], TraditionalForm]]],
 " by simply typing \[OpenCurlyDoubleQuote]= plot sin x\
\[CloseCurlyDoubleQuote] over any given range:"
}], "Text",
 CellChangeTimes->{{3.5030859487159433`*^9, 3.503086028735656*^9}, {
   3.503086090837881*^9, 3.503086216531955*^9}, {3.503086341723054*^9, 
   3.503086350295772*^9}, {3.503086456443162*^9, 3.50308646136684*^9}, {
   3.503086598249234*^9, 3.503086660741667*^9}, {3.50308793685732*^9, 
   3.50308796271681*^9}, {3.503088049696165*^9, 3.5030881005630703`*^9}, {
   3.5030881398526783`*^9, 3.503088143460579*^9}, {3.5030881902642117`*^9, 
   3.50308820323208*^9}, {3.5030882612077827`*^9, 3.503088262159219*^9}, {
   3.503088301044589*^9, 3.503088309330648*^9}, {3.503088593014208*^9, 
   3.50308859301746*^9}, {3.503088670957505*^9, 3.503088673417795*^9}, {
   3.5141382783435717`*^9, 3.5141382840081463`*^9}, {3.514139279686707*^9, 
   3.514139358092885*^9}, {3.514141219577344*^9, 3.514141270959841*^9}, {
   3.514141308211763*^9, 3.51414139206637*^9}, {3.5141414399501333`*^9, 
   3.514141550680274*^9}, {3.5141415908876047`*^9, 3.514141781646285*^9}, {
   3.5141418837965813`*^9, 3.514141892939838*^9}, {3.51414193024918*^9, 
   3.514141954027041*^9}, 3.514142013157784*^9, {3.514142057598699*^9, 
   3.514142070151063*^9}, 3.514143966369906*^9},
 CellTags->"i:wlfa"],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "plot sin x from -10 to 10", 
   Typeset`opts$$ = {
   AppearanceElements -> {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
    Asynchronous -> All, 
    Method -> {
     "ExtrusionChosen" -> {
       "Plot", "Plot", 1, 1, "Input", "Plot[Sin[x], {x, -10, 10}]"}, 
      "Formats" -> {"cell", "minput", "moutput", "msound", "dataformats"}, 
      "ExtrusionOpen" -> False}}, Typeset`elements$$ = {
   "Extrusion", "Warnings", "Assumptions", "Pods"}, Global`pod1$$ = 
   XMLElement[
   "pod", {"title" -> "Input interpretation", "scanner" -> "Identity", "id" -> 
     "Input", "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
    
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Plot[Sin[x], {x, -10, 10}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TagBox[
              GridBox[{{
                 StyleBox[
                  TagBox[
                   GridBox[{{
                    StyleBox[
                    "\"plot\"", {
                    LineIndent -> 0, LineSpacing -> {0.9, 0, 1.5}}], 
                    RowBox[{"sin", "(", "x", ")"}], 
                    TemplateBox[{
                    RowBox[{"x", "\[LongEqual]", 
                    RowBox[{"-", "10"}]}], 
                    StyleBox[
                    "\" to \"", LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, 
                    GrayLevel[0.6], StripOnInput -> False], "10"}, "Row", 
                    DisplayFunction -> (
                    RowBox[{#, "\[InvisibleSpace]", #2, 
                    "\[InvisibleSpace]", #3}]& ), 
                    InterpretationFunction -> (RowBox[{
                    StyleBox[
                    "Row", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited], "[", 
                    RowBox[{"{", 
                    RowBox[{#, ",", #2, ",", #3}], "}"}], "]"}]& )]}}, 
                    GridBoxBackground -> {"Columns" -> {
                    GrayLevel[0.949], None, None}, "Rows" -> {{None}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxDividers -> {"Columns" -> {
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84]}, "Rows" -> {{
                    GrayLevel[0.84]}}, 
                    "RowsIndexed" -> {
                    1 -> GrayLevel[0.84], -1 -> GrayLevel[0.84]}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 2, 2, 2}, "Rows" -> {{1}}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AllowScriptLevelChange -> False], 
                   Global`TagBoxWrapper["Separator" -> " | "]], 
                  LineSpacing -> {1, 0, 1.5}, LineIndent -> 0]}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               ColumnsEqual -> False, RowsEqual -> False, 
               GridBoxSpacings -> {"Columns" -> {{
                    AbsoluteThickness[-1]}}, "Rows" -> {{0}}}, 
               AllowScriptLevelChange -> False], 
              Global`TagBoxWrapper["Separator" -> " | "]], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output"]}], 
       XMLElement["dataformats", {}, {}]}]}], Global`pod2$$ = XMLElement[
   "pod", {"title" -> "Plot", "scanner" -> "Plot", "id" -> "Plot", "position" -> 
     "200", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Plot[Sin[x], {x, -10, 10}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            GraphicsBox[{{{}, {}, {
                Hue[0.67, 0.6, 0.6], 
                Directive[
                 RGBColor[0.24720000000000014`, 0.24, 0.6], 
                 AbsoluteThickness[1]], 
                LineBox[CompressedData["
1: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
QBvMCnsGn1KgtJGGkwSTQD0/mnZ/eUmBGTc+RMSOESh+PzP0fgIFbjZp5C+f
JJBlJmePWQoFCs/71IbPEEhGUWb35gwKHHUOqWebJ9DfqB2h858psLpzVJC6
SKDnvAbdVQUUWJSX4Fe5RKCz3ta7XpZQoMmbHBn5FdLPx4pyz1ZRoFei3Xqh
VQI1o/Km03UUuPVtmWw6icV7vN5mNlPgnNVR9TkSm3Cqugt0kPnYKetN/u/5
jVLHYadesj6qu3Msif/oPRatGKbAd2m8L2bI+BLOB/oUxyjwF7xfv7JMILOw
yRz/GQr8mm8vlUvm8zzjbUDHEgUuV/ZelyHzbfltenrvGirk7efr3U7WIzG1
VjF6LRWO7f9yeYas95x4wcSkEBVuznok7jRFoJdaLsVG4lSo/Y19MHScrN+c
HvFBhgpvXTLqt2QRSMq33mqdIhXG7w+W7BohkPnrwO2XNlPhXTXvUOFBcn3R
LvbSrVT43qtBd6yHQG29Q3X0XVTIeLF69nYngSw2HXf9e5AK91SGP08jfXrM
sVWwW58K88Yb+/VqCdR+OUso8iQVnmK8zYuqItD5LLGM4xZUOGl5WVGH7K+4
hgq/VGsq5J941f4il0Cd0zdP8DhS4XmtX2ZvM0g993YysTsVbjGx6a6OJ9DF
kuQtmo+pUPfN7Klzt0n9+82WnkRR4btloL3Tg0DdPHw/ma+ocHStR+j//l9j
bXjV+V0KFXYWyCCGGYFsmnanShWTfHlZaz9QI9Cb2eGbnpVUKPMwkcaQJ1Cf
ZIx+Yw0VGjpRdVbECGRryTYc1kaFI7Krb7WWWch+sFKZfZoKL6Xmv2avJM+L
td6z5xepkL5c1jiWz0KDqmoVX9lFocN1ccOINBZycA23vyEoCsMiPz0dDWMh
x/lzbweVReGkimQWx0kWuszHUKgxF4UB+0SmW4qZiHHzKyeflSjk5PtrYpnJ
RE5DDwZ0L4nCuHzzoFexTHSpbFNq0XVRGBOTvbrfk4msb9tv/xwqCgectCM2
KTPRucluEFMoCiMzt6Shm6OoxSpLvrVUFN69cDqvxXoUmdT5rxGvFoXFPXrf
0g1G0ZkPtIrHf0Sh98OM0GCZUWR06fyJgDFR+EXBOIXnGwMdbWuxcFIQgwbH
ojxvMEZQmX6KzrtNYvAqN9FoVjeCDn/xpPepi8Gah8ylxU8j6ECUeN/5fWJw
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
vhr8v/fV0P8D8Cl/Cw==
                 "]]}}}, {
             AspectRatio -> NCache[GoldenRatio^(-1), 0.6180339887498948], 
              Axes -> True, AxesOrigin -> {0, 0}, 
              BaseStyle -> {CellBaseline -> Baseline}, FrameTicksStyle -> 
              Directive[FontFamily -> "Times", FontSize -> 10], 
              ImageSize -> {300.}, 
              LabelStyle -> {FontFamily -> "Verdana", FontSize -> 10}, 
              PlotRange -> {{-10, 10}, {-0.9999999784391316, 
                0.9999999998606331}}, PlotRangeClipping -> True, 
              PlotRangePadding -> {
                Scaled[0.02], 
                Scaled[0.02]}, TicksStyle -> 
              Directive[FontFamily -> "Times", FontSize -> 10]}], 
            TraditionalForm]], "Output"]}], 
       XMLElement["dataformats", {}, {}]}]}], Global`aux1$$ = {
   True, False, {False}}, Global`aux2$$ = {True, False, {False}}, 
   Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {}, Typeset`initdone$$ = 
   True, Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> "false", "numpods" -> "2", "datatypes" -> 
    "Plot", "timedout" -> "", "timing" -> "0.943", "parsetiming" -> "0.795", 
    "parsetimedout" -> "false", "recalculate" -> "", "version" -> "1.1"}, 
   Typeset`sessioninfo$$ = {
   "TimeZone" -> -8., 
    "Date" -> {2011, 1, 3, 15, 36, 54.900391`8.492150411933071}, "Line" -> 
    150, "SessionID" -> 22957538211603299932}, Typeset`showpods$$ = {1, 2}, 
   Typeset`failedpods$$ = {}, Typeset`chosen$$ = {
   "Plot", "Plot", 1, 1, "Input", "Plot[Sin[x], {x, -10, 10}]"}, 
   Typeset`open$$ = False, Typeset`newq$$ = "plot sin x from -10 to 10"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Global`pod1$$, Global`pod2$$}, {Global`aux1$$, Global`aux2$$}, 
        Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
        Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{281., {58., 21.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Global`pod1$$, Global`pod2$$}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 ShowCellTags->True,
 CellTags->"Cell 9.103"],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {Hue[0.67, 0.6, 0.6], LineBox[CompressedData["
1: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
0P8DAC5/Fg==
     "]]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  AxesOrigin->{0, 0},
  PlotRange->{{-10, 10}, {-0.9999999784391316, 0.9999999998606331}},
  PlotRangeClipping->True,
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02]}]], "Output",
 CellChangeTimes->{3.503086236462933*^9, 3.5030866149763308`*^9},
 CellTags->"Cell 9.103"]
}, Open  ]],

Cell["\<\
The computational engine can also access a broad range of databases, from \
economics to astrophysics. One can pose questions like:\
\>", "Text",
 CellChangeTimes->{{3.514142191168436*^9, 3.514142262413742*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "what is the mass of the top quark?", 
   Typeset`opts$$ = {
   AppearanceElements -> {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
    Asynchronous -> All, 
    Method -> {
     "ExtrusionChosen" -> {"Result", "Result", 1, 1, "Content"}, 
      "Formats" -> {"cell", "minput", "moutput", "msound", "dataformats"}}}, 
   Typeset`elements$$ = {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
   Global`pod1$$ = XMLElement[
   "pod", {"title" -> "Input interpretation", "scanner" -> "Identity", "id" -> 
     "Input", "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
    
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"ParticleData[\"TopQuark\", \"Mass\"]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              TagBox[
               GridBox[{{
                  StyleBox[
                   TagBox[
                    GridBox[{{
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TagBox["t", 
                    Global`TagBoxWrapper[
                    "Entity" -> {ParticleData, "TopQuark"}]], Identity], 
                    "\" \"", 
                    StyleBox[
                    
                    RowBox[{"\"(\"", "\[NoBreak]", "\"top quark\"", 
                    "\[NoBreak]", "\")\""}], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, 
                    GrayLevel[0.6], StripOnInput -> False]}, "Row", 
                    DisplayFunction -> (
                    RowBox[{#, "\[InvisibleSpace]", #2, 
                    "\[InvisibleSpace]", #3}]& ), 
                    InterpretationFunction -> (RowBox[{
                    StyleBox[
                    "Row", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited], "[", 
                    RowBox[{"{", 
                    RowBox[{#, ",", #2, ",", #3}], "}"}], "]"}]& )], {
                    LineIndent -> 0, LineSpacing -> {0.9, 0, 1.5}}], 
                    "\"mass\""}}, GridBoxBackground -> {"Columns" -> {
                    GrayLevel[0.949], None}, "Rows" -> {{None}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxDividers -> {"Columns" -> {
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84]}, "Rows" -> {{
                    GrayLevel[0.84]}}, 
                    "RowsIndexed" -> {
                    1 -> GrayLevel[0.84], -1 -> GrayLevel[0.84]}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {1, 1, 1}, "Rows" -> {{0.2}}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AllowScriptLevelChange -> False], 
                    Global`TagBoxWrapper["Separator" -> " | "]], 
                   LineSpacing -> {1, 0, 1.5}, LineIndent -> 0]}}, 
                GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                ColumnsEqual -> False, RowsEqual -> False, 
                GridBoxSpacings -> {"Columns" -> {{
                    AbsoluteThickness[-1]}}, "Rows" -> {{0}}}, 
                AllowScriptLevelChange -> False], 
               Global`TagBoxWrapper["Separator" -> " | "]], TraditionalForm], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output"]}], 
       XMLElement["dataformats", {}, {"plaintext,minput"}]}]}], 
   Global`pod2$$ = XMLElement[
   "pod", {"title" -> "Result", "scanner" -> "Data", "id" -> "Result", 
     "position" -> "200", "error" -> "false", "numsubpods" -> "1", "primary" -> 
     "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              TagBox[
               RowBox[{
                 TagBox["174.2", 
                  Global`TagBoxWrapper["StringBoxes" -> "174.2"]], 
                 "\[InvisibleSpace]", 
                 StyleBox[
                  RowBox[{}], FontFamily -> "Helvetica", FontSize -> Smaller],
                  "\[InvisibleSpace]", "\[ThickSpace]", "\[InvisibleSpace]", 
                 StyleBox[
                  
                  RowBox[{
                   "\"GeV\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", 
                    SuperscriptBox["c", "2"]}], FontFamily -> "Helvetica", 
                  FontSize -> Smaller]}], Identity], #& , SyntaxForm -> Dot], 
             LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 0, 
             ZeroWidthTimes -> False], TraditionalForm]], "Output"]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,numberdata,quantitydata"}]}]}]\
, Global`pod3$$ = XMLElement[
   "pod", {"title" -> "Unit conversions", "scanner" -> "Unit", "id" -> 
     "UnitConversion", "position" -> "300", "error" -> "false", "numsubpods" -> 
     "2"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              TagBox[
               RowBox[{
                 TagBox[
                  RowBox[{"3.1054", " ", 
                    SuperscriptBox["10", "-22"]}], 
                  Global`TagBoxWrapper[
                  "StringBoxes" -> RowBox[{"3.1054", "\[Times]", 
                    SuperscriptBox["10", "-22"]}]], SyntaxForm -> CenterDot], 
                 "\[InvisibleSpace]", " ", 
                 StyleBox[
                 "\"grams\"", LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                  LineIndent -> 0, FontFamily -> "Helvetica", FontSize -> 
                  Smaller, StripOnInput -> False]}], Identity], #& , 
              SyntaxForm -> Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100},
              LineIndent -> 0, ZeroWidthTimes -> False], TraditionalForm]], 
          "Output"]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,numberdata,quantitydata"}]}], 
     
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             RowBox[{
               TagBox[
                TagBox[
                 RowBox[{
                   TagBox[
                    RowBox[{"3.1054", " ", 
                    SuperscriptBox["10", "-25"]}], 
                    Global`TagBoxWrapper[
                    "StringBoxes" -> RowBox[{"3.1054", "\[Times]", 
                    SuperscriptBox["10", "-25"]}]], SyntaxForm -> CenterDot], 
                   "\[InvisibleSpace]", 
                   StyleBox[
                    RowBox[{}], FontFamily -> "Helvetica", FontSize -> 
                    Smaller], "\[InvisibleSpace]", "\[ThickSpace]", 
                   "\[InvisibleSpace]", 
                   StyleBox[
                   "\"kg\"", FontFamily -> "Helvetica", FontSize -> 
                    Smaller]}], Identity], #& , SyntaxForm -> Dot], " ", 
               StyleBox[
                
                RowBox[{
                 "\"(\"", "\[NoBreak]", "\"kilograms\"", "\[NoBreak]", 
                  "\")\""}], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                LineIndent -> 0, 
                GrayLevel[0.6], FontFamily -> "Helvetica", FontSize -> 
                Smaller, StripOnInput -> False]}], 
             LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 0, 
             ZeroWidthTimes -> False], TraditionalForm]], "Output"]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,numberdata,quantitydata"}]}]}]\
, Global`pod4$$ = XMLElement[
   "pod", {"title" -> "Comparisons", "scanner" -> "Unit", "id" -> 
     "Comparison", "position" -> "400", "error" -> "false", "numsubpods" -> 
     "3"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FormBox[
             TemplateBox[{"\" \[TildeTilde] \"", 
               
               TemplateBox[{"\"\"", "0", "\".\"", "9"}, "Row", 
                DisplayFunction -> (
                 RowBox[{#, "\[InvisibleSpace]", #2, "\[InvisibleSpace]", #3, 
                   "\[InvisibleSpace]", #4}]& ), 
                InterpretationFunction -> (RowBox[{
                   StyleBox[
                   "Row", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited], "[", 
                   RowBox[{"{", 
                    RowBox[{#, ",", #2, ",", #3, ",", #4}], "}"}], "]"}]& )], 
               "\" \"", 
               StyleBox["\"\[Times]\"", 
                GrayLevel[0.3], FontSize -> 10.219999999999999`, StripOnInput -> 
                False], "\"\[MediumSpace]\"", 
               StyleBox[
               "\"lead-208 mass\"", FontFamily -> "Helvetica", FontSize -> 
                Smaller, StripOnInput -> False], "\" \"", 
               StyleBox[
                RowBox[{"\"(\"", "\[NoBreak]", 
                  TemplateBox[{"\"\[TildeTilde]\[ThinSpace]\"", 
                    StyleBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["208", 
                    Global`TagBoxWrapper["StringBoxes" -> "208"]], 
                    "\[InvisibleSpace]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Helvetica", FontSize -> 
                    Smaller], "\[InvisibleSpace]", "\[ThickSpace]", 
                    "\[InvisibleSpace]", 
                    StyleBox[
                    "\"u\"", FontFamily -> "Helvetica", FontSize -> 
                    Smaller]}], Identity], #& , SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False], "\"\[MediumSpace]\""}, "Row",
                    DisplayFunction -> (
                    RowBox[{#, "\[InvisibleSpace]", #2, 
                    "\[InvisibleSpace]", #3}]& ), 
                   InterpretationFunction -> (RowBox[{
                    StyleBox[
                    "Row", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited], "[", 
                    RowBox[{"{", 
                    RowBox[{#, ",", #2, ",", #3}], "}"}], "]"}]& )], 
                  "\[NoBreak]", "\")\""}], 
                LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 0, 
                FontFamily -> "Bitstream Vera Sans", 
                GrayLevel[0.5], FontSize -> 10, StripOnInput -> False]}, 
              "Row", 
              DisplayFunction -> (
               RowBox[{#, "\[InvisibleSpace]", #2, "\[InvisibleSpace]", #3, 
                 "\[InvisibleSpace]", #4, "\[InvisibleSpace]", #5, 
                 "\[InvisibleSpace]", #6, "\[InvisibleSpace]", #7, 
                 "\[InvisibleSpace]", #8}]& ), 
              InterpretationFunction -> (RowBox[{
                 StyleBox[
                 "Row", FontFamily -> "Bitstream Vera Sans", 
                  FontSize -> -1 + Inherited], "[", 
                 RowBox[{"{", 
                   
                   RowBox[{#, ",", #2, ",", #3, ",", #4, ",", #5, ",", #6, 
                    ",", #7, ",", #8}], "}"}], "]"}]& )], TraditionalForm], 
            TraditionalForm]], "Output"]}], 
       XMLElement["dataformats", {}, {"plaintext"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FormBox[
             TemplateBox[{"\" \[TildeTilde] \"", 
               
               TemplateBox[{"\"\"", "0", "\".\"", "9", "6"}, "Row", 
                DisplayFunction -> (
                 RowBox[{#, "\[InvisibleSpace]", #2, "\[InvisibleSpace]", #3, 
                   "\[InvisibleSpace]", #4, "\[InvisibleSpace]", #5}]& ), 
                InterpretationFunction -> (RowBox[{
                   StyleBox[
                   "Row", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited], "[", 
                   RowBox[{"{", 
                    RowBox[{#, ",", #2, ",", #3, ",", #4, ",", #5}], "}"}], 
                   "]"}]& )], "\" \"", 
               StyleBox["\"\[Times]\"", 
                GrayLevel[0.3], FontSize -> 10.219999999999999`, StripOnInput -> 
                False], "\"\[MediumSpace]\"", 
               StyleBox[
               "\"caffeine molecule mass\"", FontFamily -> "Helvetica", 
                FontSize -> Smaller, StripOnInput -> False], "\" \"", 
               StyleBox[
                RowBox[{"\"(\"", "\[NoBreak]", 
                  TemplateBox[{"\"\[TildeTilde]\[ThinSpace]\"", 
                    StyleBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["194", 
                    Global`TagBoxWrapper["StringBoxes" -> "194"]], 
                    "\[InvisibleSpace]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Helvetica", FontSize -> 
                    Smaller], "\[InvisibleSpace]", "\[ThickSpace]", 
                    "\[InvisibleSpace]", 
                    StyleBox[
                    "\"u\"", FontFamily -> "Helvetica", FontSize -> 
                    Smaller]}], Identity], #& , SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False], "\"\[MediumSpace]\""}, "Row",
                    DisplayFunction -> (
                    RowBox[{#, "\[InvisibleSpace]", #2, 
                    "\[InvisibleSpace]", #3}]& ), 
                   InterpretationFunction -> (RowBox[{
                    StyleBox[
                    "Row", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited], "[", 
                    RowBox[{"{", 
                    RowBox[{#, ",", #2, ",", #3}], "}"}], "]"}]& )], 
                  "\[NoBreak]", "\")\""}], 
                LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 0, 
                FontFamily -> "Bitstream Vera Sans", 
                GrayLevel[0.5], FontSize -> 10, StripOnInput -> False]}, 
              "Row", DisplayFunction -> (
               RowBox[{#, "\[InvisibleSpace]", #2, "\[InvisibleSpace]", #3, 
                 "\[InvisibleSpace]", #4, "\[InvisibleSpace]", #5, 
                 "\[InvisibleSpace]", #6, "\[InvisibleSpace]", #7, 
                 "\[InvisibleSpace]", #8}]& ), 
              InterpretationFunction -> (RowBox[{
                 StyleBox[
                 "Row", FontFamily -> "Bitstream Vera Sans", 
                  FontSize -> -1 + Inherited], "[", 
                 RowBox[{"{", 
                   
                   RowBox[{#, ",", #2, ",", #3, ",", #4, ",", #5, ",", #6, 
                    ",", #7, ",", #8}], "}"}], "]"}]& )], TraditionalForm], 
            TraditionalForm]], "Output"]}], 
       XMLElement["dataformats", {}, {"plaintext"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FormBox[
             TemplateBox[{"\" \[TildeTilde] \"", 
               
               TemplateBox[{"\"\"", "1", "\".\"", "9"}, "Row", 
                DisplayFunction -> (
                 RowBox[{#, "\[InvisibleSpace]", #2, "\[InvisibleSpace]", #3, 
                   "\[InvisibleSpace]", #4}]& ), 
                InterpretationFunction -> (RowBox[{
                   StyleBox[
                   "Row", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited], "[", 
                   RowBox[{"{", 
                    RowBox[{#, ",", #2, ",", #3, ",", #4}], "}"}], "]"}]& )], 
               "\" \"", 
               StyleBox["\"\[Times]\"", 
                GrayLevel[0.3], FontSize -> 10.219999999999999`, StripOnInput -> 
                False], "\"\[MediumSpace]\"", 
               StyleBox[
               "\"Z boson mass\"", FontFamily -> "Helvetica", FontSize -> 
                Smaller, StripOnInput -> False], "\" \"", 
               StyleBox[
                RowBox[{"\"(\"", "\[NoBreak]", 
                  TemplateBox[{"\"\[TildeTilde]\[ThinSpace]\"", 
                    StyleBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["91\[ThinSpace]188", 
                    Global`TagBoxWrapper["StringBoxes" -> "91188"]], 
                    "\[InvisibleSpace]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Helvetica", FontSize -> 
                    Smaller], "\[InvisibleSpace]", "\[ThickSpace]", 
                    "\[InvisibleSpace]", 
                    StyleBox[
                    
                    RowBox[{
                    "\"MeV\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", 
                    SuperscriptBox["c", "2"]}], FontFamily -> "Helvetica", 
                    FontSize -> Smaller]}], Identity], #& , SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, ZeroWidthTimes -> False], 
                    "\"\[MediumSpace]\""}, "Row", 
                   DisplayFunction -> (
                    RowBox[{#, "\[InvisibleSpace]", #2, 
                    "\[InvisibleSpace]", #3}]& ), 
                   InterpretationFunction -> (RowBox[{
                    StyleBox[
                    "Row", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited], "[", 
                    RowBox[{"{", 
                    RowBox[{#, ",", #2, ",", #3}], "}"}], "]"}]& )], 
                  "\[NoBreak]", "\")\""}], 
                LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 0, 
                FontFamily -> "Bitstream Vera Sans", 
                GrayLevel[0.5], FontSize -> 10, StripOnInput -> False]}, 
              "Row", DisplayFunction -> (
               RowBox[{#, "\[InvisibleSpace]", #2, "\[InvisibleSpace]", #3, 
                 "\[InvisibleSpace]", #4, "\[InvisibleSpace]", #5, 
                 "\[InvisibleSpace]", #6, "\[InvisibleSpace]", #7, 
                 "\[InvisibleSpace]", #8}]& ), 
              InterpretationFunction -> (RowBox[{
                 StyleBox[
                 "Row", FontFamily -> "Bitstream Vera Sans", 
                  FontSize -> -1 + Inherited], "[", 
                 RowBox[{"{", 
                   
                   RowBox[{#, ",", #2, ",", #3, ",", #4, ",", #5, ",", #6, 
                    ",", #7, ",", #8}], "}"}], "]"}]& )], TraditionalForm], 
            TraditionalForm]], "Output"]}], 
       XMLElement["dataformats", {}, {"plaintext"}]}]}], Global`pod5$$ = 
   XMLElement[
   "pod", {"title" -> "Corresponding quantities", "scanner" -> "Unit", "id" -> 
     "CorrespondingQuantity", "position" -> "500", "error" -> "false", 
     "numsubpods" -> "8"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                InterpretationBox[
                 Cell[
                  TextData[{"Relativistic energy ", 
                    Cell[
                    BoxData[
                    FormBox[
                    FormBox[
                    StyleBox["\"E\"", Italic, StripOnInput -> False], 
                    TraditionalForm], TraditionalForm]]], " from ", 
                    Cell[
                    BoxData[
                    FormBox[
                    FormBox[
                    TemplateBox[{
                    TagBox[
                    RowBox[{
                    FormBox[
                    StyleBox["\"E\"", Italic, StripOnInput -> False], 
                    TraditionalForm], "\[InvisibleSpace]", "\[LongEqual]", 
                    "\[InvisibleSpace]", 
                    RowBox[{"m", "\[InvisibleSpace]", 
                    SuperscriptBox["c", "2"]}]}], 
                    PolynomialForm[#, TraditionalOrder -> False]& ], "\":\""},
                     "Row", 
                    DisplayFunction -> (
                    RowBox[{#, "\[InvisibleSpace]", #2}]& ), 
                    InterpretationFunction -> (RowBox[{
                    StyleBox[
                    "Row", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited], "[", 
                    RowBox[{"{", 
                    RowBox[{#, ",", #2}], "}"}], "]"}]& )], TraditionalForm], 
                    TraditionalForm]]]}]], 
                 TextCell[
                  Row[{"Relativistic energy ", Global`capitalE, " from ", 
                    Global`InlineForm[
                    "capitalE \[LongEqual] m c^2", ":"]}]]]}, {
                TagBox[
                 GridBox[{{
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {10, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[10]], 
                    StyleBox[
                    RowBox[{
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["174", 
                    Global`TagBoxWrapper["StringBoxes" -> "174"]], 
                    "\[InvisibleSpace]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Helvetica", FontSize -> 
                    Smaller], "\[InvisibleSpace]", "\[ThickSpace]", 
                    "\[InvisibleSpace]", 
                    StyleBox[
                    "\"GeV\"", FontFamily -> "Helvetica", FontSize -> 
                    Smaller]}], Identity], #& , SyntaxForm -> Dot], " ", 
                    StyleBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", "\"gigaelectronvolts\"", 
                    "\[NoBreak]", "\")\""}], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, 
                    GrayLevel[0.6], FontFamily -> "Helvetica", FontSize -> 
                    Smaller, StripOnInput -> False]}], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                  False, GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Grid"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              GridBoxItemSize -> {"ColumnsIndexed" -> {1 -> 0}}], "Column"], 
            TraditionalForm]], "Output"]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,numberdata,quantitydata"}]}], 
     
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                InterpretationBox[
                 Cell[
                  TextData[{"Weight ", 
                    Cell[
                    BoxData[
                    FormBox["w", TraditionalForm]]], " of a body from ", 
                    Cell[
                    BoxData[
                    FormBox[
                    FormBox[
                    TemplateBox[{
                    TagBox[
                    
                    RowBox[{"w", "\[InvisibleSpace]", "\[LongEqual]", 
                    "\[InvisibleSpace]", 
                    RowBox[{"m", "\[InvisibleSpace]", "g"}]}], 
                    PolynomialForm[#, TraditionalOrder -> False]& ], "\":\""},
                     "Row", 
                    DisplayFunction -> (
                    RowBox[{#, "\[InvisibleSpace]", #2}]& ), 
                    InterpretationFunction -> (RowBox[{
                    StyleBox[
                    "Row", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited], "[", 
                    RowBox[{"{", 
                    RowBox[{#, ",", #2}], "}"}], "]"}]& )], TraditionalForm], 
                    TraditionalForm]]]}]], 
                 TextCell[
                  Row[{"Weight ", 
                    Global`CalculateSymbol["w"], " of a body from ", 
                    Global`InlineForm["w \[LongEqual] m g", ":"]}]]]}, {
                TagBox[
                 GridBox[{{
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {10, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[10]], 
                    StyleBox[
                    RowBox[{
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox[
                    RowBox[{"6.8", " ", 
                    SuperscriptBox["10", "-25"]}], 
                    Global`TagBoxWrapper[
                    "StringBoxes" -> RowBox[{"6.8", "\[Times]", 
                    SuperscriptBox["10", "-25"]}]], SyntaxForm -> CenterDot], 
                    "\[InvisibleSpace]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Helvetica", FontSize -> 
                    Smaller], "\[InvisibleSpace]", "\[ThickSpace]", 
                    "\[InvisibleSpace]", 
                    StyleBox[
                    "\"lbf\"", FontFamily -> "Helvetica", FontSize -> 
                    Smaller]}], Identity], #& , SyntaxForm -> Dot], " ", 
                    StyleBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", "\"pounds\[Hyphen]force\"", 
                    "\[NoBreak]", "\")\""}], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, 
                    GrayLevel[0.6], FontFamily -> "Helvetica", FontSize -> 
                    Smaller, StripOnInput -> False]}], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False]}, {
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {10, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[10]], 
                    StyleBox[
                    RowBox[{
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox[
                    RowBox[{"3", " ", 
                    SuperscriptBox["10", "-24"]}], 
                    Global`TagBoxWrapper[
                    "StringBoxes" -> RowBox[{"3", "\[Times]", 
                    SuperscriptBox["10", "-24"]}]], SyntaxForm -> CenterDot], 
                    "\[InvisibleSpace]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Helvetica", FontSize -> 
                    Smaller], "\[InvisibleSpace]", "\[ThickSpace]", 
                    "\[InvisibleSpace]", 
                    StyleBox[
                    "\"N\"", FontFamily -> "Helvetica", FontSize -> 
                    Smaller]}], Identity], #& , SyntaxForm -> Dot], " ", 
                    StyleBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", "\"newtons\"", "\[NoBreak]", 
                    "\")\""}], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, 
                    GrayLevel[0.6], FontFamily -> "Helvetica", FontSize -> 
                    Smaller, StripOnInput -> False]}], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False]}, {
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {10, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[10]], 
                    StyleBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox[
                    RowBox[{"3", " ", 
                    SuperscriptBox["10", "-19"]}], 
                    Global`TagBoxWrapper[
                    "StringBoxes" -> RowBox[{"3", "\[Times]", 
                    SuperscriptBox["10", "-19"]}]], SyntaxForm -> CenterDot], 
                    "\[InvisibleSpace]", " ", 
                    StyleBox[
                    "\"dynes\"", LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, FontFamily -> "Helvetica", FontSize -> 
                    Smaller, StripOnInput -> False]}], Identity], #& , 
                    SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                  False, GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Grid"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              GridBoxItemSize -> {"ColumnsIndexed" -> {1 -> 0}}], "Column"], 
            TraditionalForm]], "Output"]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,numberdata,quantitydata"}]}], 
     
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                InterpretationBox[
                 Cell[
                  TextData[{"Characteristic length ", 
                    Cell[
                    BoxData[
                    FormBox["L", TraditionalForm]]], " from ", 
                    Cell[
                    BoxData[
                    FormBox[
                    FormBox[
                    TemplateBox[{
                    TagBox[
                    
                    RowBox[{"L", "\[InvisibleSpace]", "\[LongEqual]", 
                    "\[InvisibleSpace]", 
                    RowBox[{
                    RowBox[{"h", "\[InvisibleSpace]", "c"}], 
                    "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]", 
                    RowBox[{"\"(\"", "\[InvisibleSpace]", 
                    RowBox[{"m", "\[InvisibleSpace]", 
                    SuperscriptBox["c", "2"]}], "\[InvisibleSpace]", 
                    "\")\""}]}]}], 
                    PolynomialForm[#, TraditionalOrder -> False]& ], "\":\""},
                     "Row", 
                    DisplayFunction -> (
                    RowBox[{#, "\[InvisibleSpace]", #2}]& ), 
                    InterpretationFunction -> (RowBox[{
                    StyleBox[
                    "Row", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited], "[", 
                    RowBox[{"{", 
                    RowBox[{#, ",", #2}], "}"}], "]"}]& )], TraditionalForm], 
                    TraditionalForm]]]}]], 
                 TextCell[
                  Row[{"Characteristic length ", 
                    Global`CalculateSymbol["L"], " from ", 
                    Global`InlineForm[" L \[LongEqual] h c/m/c^2", ":"]}]]]}, {
                TagBox[
                 GridBox[{{
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {10, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[10]], 
                    StyleBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox[
                    RowBox[{"7.1", " ", 
                    SuperscriptBox["10", "-18"]}], 
                    Global`TagBoxWrapper[
                    "StringBoxes" -> RowBox[{"7.1", "\[Times]", 
                    SuperscriptBox["10", "-18"]}]], SyntaxForm -> CenterDot], 
                    "\[InvisibleSpace]", " ", 
                    StyleBox[
                    "\"meters\"", LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0, FontFamily -> "Helvetica", FontSize -> 
                    Smaller, StripOnInput -> False]}], Identity], #& , 
                    SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                  False, GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Grid"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              GridBoxItemSize -> {"ColumnsIndexed" -> {1 -> 0}}], "Column"], 
            TraditionalForm]], "Output"]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,numberdata,quantitydata"}]}], 
     
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                InterpretationBox[
                 Cell[
                  TextData[{"Thermal de Broglie wavelength at 100 K from ", 
                    Cell[
                    BoxData[
                    FormBox[
                    FormBox[
                    TemplateBox[{
                    TagBox[
                    
                    RowBox[{"\[Lambda]", "\[InvisibleSpace]", "\[LongEqual]", 
                    "\[InvisibleSpace]", 
                    
                    RowBox[{"h", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", 
                    SuperscriptBox[
                    RowBox[{"(", "\[InvisibleSpace]", 
                    
                    RowBox[{"2", "\[InvisibleSpace]", "\[Pi]", 
                    "\[InvisibleSpace]", "m", "\[InvisibleSpace]", "k", 
                    "\[InvisibleSpace]", "T"}], "\[InvisibleSpace]", ")"}], 
                    
                    RowBox[{"1", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "2"}]]}]}], 
                    PolynomialForm[#, TraditionalOrder -> False]& ], "\":\""},
                     "Row", 
                    DisplayFunction -> (
                    RowBox[{#, "\[InvisibleSpace]", #2}]& ), 
                    InterpretationFunction -> (RowBox[{
                    StyleBox[
                    "Row", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited], "[", 
                    RowBox[{"{", 
                    RowBox[{#, ",", #2}], "}"}], "]"}]& )], TraditionalForm], 
                    TraditionalForm]]]}]], 
                 TextCell[
                  Row[{"Thermal de Broglie wavelength at 100 K from ", 
                    Global`InlineForm[
                    " \[Lambda] \[LongEqual] h/(Superscript[2\[Pi] m k T, \
1/2])", ":"]}]]]}, {
                TagBox[
                 GridBox[{{
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {10, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[10]], 
                    StyleBox[
                    RowBox[{
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["13", 
                    Global`TagBoxWrapper["StringBoxes" -> "13"]], 
                    "\[InvisibleSpace]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Helvetica", FontSize -> 
                    Smaller], "\[InvisibleSpace]", "\[ThickSpace]", 
                    "\[InvisibleSpace]", 
                    StyleBox[
                    "\"pm\"", FontFamily -> "Helvetica", FontSize -> 
                    Smaller]}], Identity], #& , SyntaxForm -> Dot], " ", 
                    StyleBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", "\"picometers\"", "\[NoBreak]", 
                    "\")\""}], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, 
                    GrayLevel[0.6], FontFamily -> "Helvetica", FontSize -> 
                    Smaller, StripOnInput -> False]}], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                  False, GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Grid"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              GridBoxItemSize -> {"ColumnsIndexed" -> {1 -> 0}}], "Column"], 
            TraditionalForm]], "Output"]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,numberdata,quantitydata"}]}], 
     
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                InterpretationBox[
                 Cell[
                  TextData[{"Characteristic time ", 
                    Cell[
                    BoxData[
                    FormBox["T", TraditionalForm]]], " from ", 
                    Cell[
                    BoxData[
                    FormBox[
                    FormBox[
                    TemplateBox[{
                    TagBox[
                    
                    RowBox[{"T", "\[InvisibleSpace]", "\[LongEqual]", 
                    "\[InvisibleSpace]", 
                    
                    RowBox[{"h", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", 
                    RowBox[{"\"(\"", "\[InvisibleSpace]", 
                    RowBox[{"m", "\[InvisibleSpace]", 
                    SuperscriptBox["c", "2"]}], "\[InvisibleSpace]", 
                    "\")\""}]}]}], 
                    PolynomialForm[#, TraditionalOrder -> False]& ], "\":\""},
                     "Row", 
                    DisplayFunction -> (
                    RowBox[{#, "\[InvisibleSpace]", #2}]& ), 
                    InterpretationFunction -> (RowBox[{
                    StyleBox[
                    "Row", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited], "[", 
                    RowBox[{"{", 
                    RowBox[{#, ",", #2}], "}"}], "]"}]& )], TraditionalForm], 
                    TraditionalForm]]]}]], 
                 TextCell[
                  Row[{"Characteristic time ", 
                    Global`CalculateSymbol["T"], " from ", 
                    Global`InlineForm["T \[LongEqual] h/m/c^2", ":"]}]]]}, {
                TagBox[
                 GridBox[{{
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {10, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[10]], 
                    StyleBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox[
                    RowBox[{"2.4", " ", 
                    SuperscriptBox["10", "-26"]}], 
                    Global`TagBoxWrapper[
                    "StringBoxes" -> RowBox[{"2.4", "\[Times]", 
                    SuperscriptBox["10", "-26"]}]], SyntaxForm -> CenterDot], 
                    "\[InvisibleSpace]", " ", 
                    StyleBox[
                    "\"seconds\"", 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, FontFamily -> "Helvetica", FontSize -> Smaller, 
                    StripOnInput -> False]}], Identity], #& , SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, ZeroWidthTimes -> False]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                  False, GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Grid"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              GridBoxItemSize -> {"ColumnsIndexed" -> {1 -> 0}}], "Column"], 
            TraditionalForm]], "Output"]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,numberdata,quantitydata"}]}], 
     
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                InterpretationBox[
                 Cell[
                  TextData[{"Thermodynamic temperature ", 
                    Cell[
                    BoxData[
                    FormBox["T", TraditionalForm]]], " from ", 
                    Cell[
                    BoxData[
                    FormBox[
                    FormBox[
                    TemplateBox[{
                    TagBox[
                    RowBox[{
                    RowBox[{"k", "\[InvisibleSpace]", "T"}], 
                    "\[InvisibleSpace]", "\[LongEqual]", "\[InvisibleSpace]", 
                    
                    RowBox[{"m", "\[InvisibleSpace]", 
                    SuperscriptBox["c", "2"]}]}], 
                    PolynomialForm[#, TraditionalOrder -> False]& ], "\":\""},
                     "Row", 
                    DisplayFunction -> (
                    RowBox[{#, "\[InvisibleSpace]", #2}]& ), 
                    InterpretationFunction -> (RowBox[{
                    StyleBox[
                    "Row", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited], "[", 
                    RowBox[{"{", 
                    RowBox[{#, ",", #2}], "}"}], "]"}]& )], TraditionalForm], 
                    TraditionalForm]]]}]], 
                 TextCell[
                  Row[{"Thermodynamic temperature ", 
                    Global`CalculateSymbol["T"], " from ", 
                    Global`InlineForm["k T \[LongEqual] m c^2", ":"]}]]]}, {
                TagBox[
                 GridBox[{{
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {10, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[10]], 
                    StyleBox[
                    RowBox[{
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox[
                    RowBox[{"2.022", " ", 
                    SuperscriptBox["10", "15"]}], 
                    Global`TagBoxWrapper[
                    "StringBoxes" -> RowBox[{"2.022", "\[Times]", 
                    SuperscriptBox["10", "15"]}]], SyntaxForm -> CenterDot], 
                    "\[InvisibleSpace]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Helvetica", FontSize -> 
                    Smaller], "\[InvisibleSpace]", "\[ThickSpace]", 
                    "\[InvisibleSpace]", 
                    StyleBox[
                    "\"K\"", FontFamily -> "Helvetica", FontSize -> 
                    Smaller]}], Identity], #& , SyntaxForm -> Dot], " ", 
                    StyleBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", "\"kelvins\"", "\[NoBreak]", 
                    "\")\""}], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, 
                    GrayLevel[0.6], FontFamily -> "Helvetica", FontSize -> 
                    Smaller, StripOnInput -> False]}], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                  False, GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Grid"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              GridBoxItemSize -> {"ColumnsIndexed" -> {1 -> 0}}], "Column"], 
            TraditionalForm]], "Output"]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,numberdata,quantitydata"}]}], 
     
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                InterpretationBox[
                 Cell[
                  TextData[{"Molecular weight ", 
                    Cell[
                    BoxData[
                    FormBox[
                    SubscriptBox["M", "W"], TraditionalForm]]], " from ", 
                    Cell[
                    BoxData[
                    FormBox[
                    FormBox[
                    TemplateBox[{
                    TagBox[
                    RowBox[{
                    SubscriptBox["M", "W"], "\[InvisibleSpace]", 
                    "\[LongEqual]", "\[InvisibleSpace]", 
                    
                    RowBox[{"m", "\[InvisibleSpace]", "\[ThickSpace]", 
                    "\[InvisibleSpace]", 
                    SubscriptBox["N", "A"]}]}], 
                    PolynomialForm[#, TraditionalOrder -> False]& ], "\":\""},
                     "Row", 
                    DisplayFunction -> (
                    RowBox[{#, "\[InvisibleSpace]", #2}]& ), 
                    InterpretationFunction -> (RowBox[{
                    StyleBox[
                    "Row", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited], "[", 
                    RowBox[{"{", 
                    RowBox[{#, ",", #2}], "}"}], "]"}]& )], TraditionalForm], 
                    TraditionalForm]]]}]], 
                 TextCell[
                  Row[{"Molecular weight ", 
                    Global`CalculateSymbol[
                    Subscript["M", "W"]], " from ", 
                    Global`InlineForm[
                    "Subscript[M, W] \[LongEqual] m space Subscript[N, A]", 
                    ":"]}]]]}, {
                TagBox[
                 GridBox[{{
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {10, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[10]], 
                    StyleBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["187", 
                    Global`TagBoxWrapper["StringBoxes" -> "187"]], 
                    "\[InvisibleSpace]", " ", 
                    StyleBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", "\"grams per mole\"", "\[NoBreak]",
                     "\")\""}], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, 
                    GrayLevel[0.6], FontFamily -> "Helvetica", FontSize -> 
                    Smaller, StripOnInput -> False]}], Identity], #& , 
                    SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                  False, GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Grid"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              GridBoxItemSize -> {"ColumnsIndexed" -> {1 -> 0}}], "Column"], 
            TraditionalForm]], "Output"]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,numberdata,quantitydata"}]}], 
     
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                InterpretationBox[
                 Cell[
                  TextData[{"Compton wavelength ", 
                    Cell[
                    BoxData[
                    FormBox["\[Lambda]", TraditionalForm]]], " from ", 
                    Cell[
                    BoxData[
                    FormBox[
                    FormBox[
                    TemplateBox[{
                    TagBox[
                    
                    RowBox[{"\[Lambda]", "\[InvisibleSpace]", "\[LongEqual]", 
                    "\[InvisibleSpace]", 
                    
                    RowBox[{"h", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", 
                    RowBox[{"\"(\"", "\[InvisibleSpace]", 
                    RowBox[{"m", "\[InvisibleSpace]", "c"}], 
                    "\[InvisibleSpace]", "\")\""}]}]}], 
                    PolynomialForm[#, TraditionalOrder -> False]& ], "\":\""},
                     "Row", 
                    DisplayFunction -> (
                    RowBox[{#, "\[InvisibleSpace]", #2}]& ), 
                    InterpretationFunction -> (RowBox[{
                    StyleBox[
                    "Row", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited], "[", 
                    RowBox[{"{", 
                    RowBox[{#, ",", #2}], "}"}], "]"}]& )], TraditionalForm], 
                    TraditionalForm]]]}]], 
                 TextCell[
                  Row[{"Compton wavelength ", 
                    Global`CalculateSymbol["\[Lambda]"], " from ", 
                    Global`InlineForm[
                    "\[Lambda] \[LongEqual] h/(m c)", ":"]}]]]}, {
                TagBox[
                 GridBox[{{
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {10, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[10]], 
                    StyleBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox[
                    RowBox[{"7.1", " ", 
                    SuperscriptBox["10", "-18"]}], 
                    Global`TagBoxWrapper[
                    "StringBoxes" -> RowBox[{"7.1", "\[Times]", 
                    SuperscriptBox["10", "-18"]}]], SyntaxForm -> CenterDot], 
                    "\[InvisibleSpace]", " ", 
                    StyleBox[
                    "\"meters\"", LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0, FontFamily -> "Helvetica", FontSize -> 
                    Smaller, StripOnInput -> False]}], Identity], #& , 
                    SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                  False, GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Grid"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              GridBoxItemSize -> {"ColumnsIndexed" -> {1 -> 0}}], "Column"], 
            TraditionalForm]], "Output"]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,numberdata,quantitydata"}]}]}]\
, Global`aux1$$ = {True, False, {False}}, Global`aux2$$ = {
   True, False, {False}}, Global`aux3$$ = {True, False, {False}}, 
   Global`aux4$$ = {True, False, {False}}, Global`aux5$$ = {
   True, False, {False}}, Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {
    XMLElement["sources", {"count" -> "1"}, {
      XMLElement[
      "source", {
       "url" -> 
        "http://www.wolframalpha.com/sources/\
ParticleDataSourceInformationNotes.html", "text" -> "Particle data"}, {}]}]}, 
   Typeset`initdone$$ = True, Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> "false", "numpods" -> "5", "datatypes" -> 
    "Particle", "timedout" -> "", "timing" -> "1.557", "parsetiming" -> 
    "0.803", "parsetimedout" -> "false", "recalculate" -> "", "id" -> 
    "MSP224719fc5233afe883cf000012i05afhh298eiie&s=54", "related" -> 
    "http://www4b.wolframalpha.com/api/v2/relatedQueries.jsp?id=\
MSP224819fc5233afe883cf0000208d19766395dh5h&s=54", "version" -> "2.1"}, 
   Typeset`sessioninfo$$ = {
   "TimeZone" -> -7., 
    "Date" -> {2011, 5, 11, 15, 39, 53.903553`8.48419236693046}, "Line" -> 
    1080, "SessionID" -> 23028930380989740577}, Typeset`showpods$$ = {1, 2, 3,
    4, 5}, Typeset`failedpods$$ = {}, Typeset`chosen$$ = {
   "Result", "Result", 1, 1, "Content"}, Typeset`open$$ = False, 
   Typeset`newq$$ = "what is the mass of the top quark?"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Global`pod1$$, Global`pod2$$, Global`pod3$$, Global`pod4$$, 
         Global`pod5$$}, {
        Global`aux1$$, Global`aux2$$, Global`aux3$$, Global`aux4$$, 
         Global`aux5$$}, Typeset`chosen$$, Typeset`open$$, Typeset`elements$$,
         Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{287., {37., 21.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{
        Global`pod1$$, Global`pod2$$, Global`pod3$$, Global`pod4$$, 
         Global`pod5$$}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 ShowCellTags->True,
 CellTags->"Cell 9.104"],

Cell[BoxData[
 InterpretationBox[
  FrameBox[
   StyleBox[
    FormBox[
     StyleBox[
      TagBox[
       TagBox[
        RowBox[{
         TagBox["174.2",
          $CellContext`TagBoxWrapper["StringBoxes" -> "174.2"]], 
         "\[InvisibleSpace]", "\[InvisibleSpace]", "\[ThickSpace]", 
         "\[InvisibleSpace]", 
         StyleBox[
          
          RowBox[{"\<\"GeV\"\>", "\[InvisibleSpace]", "\<\"/\"\>", 
           "\[InvisibleSpace]", 
           SuperscriptBox["c", "2"]}],
          FontFamily->"Helvetica",
          FontSize->Smaller]}],
        Identity],
       #& ],
      ZeroWidthTimes->False,
      LineIndent->0,
      LinebreakAdjustments->{1, 100, 1, 0, 100}],
     TraditionalForm], "Output",
    ScriptLevel->0,
    FontFamily->"Times",
    FontSize->14,
    Background->None],
   BaseStyle->{Plain},
   FrameMargins->10,
   FrameStyle->GrayLevel[0.85],
   RoundingRadius->5,
   StripOnInput->False],
  WolframAlphaResult[
  "what is the mass of the top quark?", {{"Result", 1}, 
    "Content"}]]], "Output",
 CellChangeTimes->{{3.514142385271276*^9, 3.5141423950805902`*^9}}]
}, Open  ]],

Cell["\<\
or
\
\>", "Text",
 CellChangeTimes->{{3.514142400734509*^9, 3.514142416968357*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "How many sheep are in France?", 
   Typeset`opts$$ = {
   AppearanceElements -> {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
    Asynchronous -> All, 
    Method -> {
     "ExtrusionChosen" -> {"Result", "Result", 1, 1, "Content"}, 
      "ExtrusionOpen" -> False, 
      "Formats" -> {"cell", "minput", "moutput", "msound", "dataformats"}}}, 
   Typeset`elements$$ = {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
   Global`pod1$$ = XMLElement[
   "pod", {"title" -> "Input interpretation", "scanner" -> "Identity", "id" -> 
     "Input", "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
    
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              TagBox[
               GridBox[{{
                  StyleBox[
                   TagBox[
                    GridBox[{{
                    StyleBox[
                    TagBox[
                    TagBox["\"France\"", 
                    Global`TagBoxWrapper[
                    "Entity" -> {CountryData, "France"}]], Identity], {
                    LineIndent -> 0, LineSpacing -> {0.9, 0, 1.5}}], 
                    "\"livestock population\"", "\"sheep\""}}, 
                    GridBoxBackground -> {"Columns" -> {
                    GrayLevel[0.949], None, None}, "Rows" -> {{None}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxDividers -> {"Columns" -> {
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84]}, "Rows" -> {{
                    GrayLevel[0.84]}}, 
                    "RowsIndexed" -> {
                    1 -> GrayLevel[0.84], -1 -> GrayLevel[0.84]}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 2, 2, 2}, "Rows" -> {{1}}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AllowScriptLevelChange -> False], 
                    Global`TagBoxWrapper["Separator" -> " | "]], 
                   LineSpacing -> {1, 0, 1.5}, LineIndent -> 0]}}, 
                GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                ColumnsEqual -> False, RowsEqual -> False, 
                GridBoxSpacings -> {"Columns" -> {{
                    AbsoluteThickness[-1]}}, "Rows" -> {{0}}}, 
                AllowScriptLevelChange -> False], 
               Global`TagBoxWrapper["Separator" -> " | "]], TraditionalForm], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output"]}], 
       XMLElement["dataformats", {}, {"plaintext"}]}]}], Global`pod2$$ = 
   XMLElement[
   "pod", {"title" -> "Result", "scanner" -> "Data", "id" -> "Result", 
     "position" -> "200", "error" -> "false", "numsubpods" -> "1", "primary" -> 
     "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{
              StyleBox[
               TagBox[
                RowBox[{
                  RowBox[{
                    TagBox["7.72", 
                    Global`TagBoxWrapper["StringBoxes" -> "7.72"]], " ", 
                    TagBox[
                    StyleBox[
                    "\"million\"", ShowStringCharacters -> False, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, FontFamily -> "Helvetica", FontSize -> Smaller, 
                    StripOnInput -> False], 1000000& , AutoDelete -> True]}], 
                  "\[InvisibleSpace]", " ", 
                  StyleBox[
                  "\"\"", LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                   LineIndent -> 0, FontFamily -> "Helvetica", FontSize -> 
                   Smaller, StripOnInput -> False]}], #& , SyntaxForm -> Dot],
                LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 0, 
               ZeroWidthTimes -> False], "\" \"", 
              StyleBox[
               RowBox[{"\"(\"", "\[NoBreak]", 
                 TemplateBox[{
                   FormBox[
                    TagBox["\"2009\"", Identity], TraditionalForm], 
                   "\" estimate\""}, "Row", 
                  DisplayFunction -> (RowBox[{#, "\[InvisibleSpace]", #2}]& ),
                   InterpretationFunction -> (RowBox[{
                    StyleBox[
                    "Row", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited], "[", 
                    RowBox[{"{", 
                    RowBox[{#, ",", #2}], "}"}], "]"}]& )], "\[NoBreak]", 
                 "\")\""}], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
               LineIndent -> 0, 
               GrayLevel[0.6], FontFamily -> "Bitstream Vera Sans", FontSize -> 
               10, StripOnInput -> False]}, "Row", 
             DisplayFunction -> (
              RowBox[{#, "\[InvisibleSpace]", #2, 
                "\[InvisibleSpace]", #3}]& ), 
             InterpretationFunction -> (RowBox[{
                StyleBox[
                "Row", FontFamily -> "Bitstream Vera Sans", 
                 FontSize -> -1 + Inherited], "[", 
                RowBox[{"{", 
                  RowBox[{#, ",", #2, ",", #3}], "}"}], "]"}]& )], 
            TraditionalForm]], "Output"]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,numberdata,quantitydata"}]}]}]\
, Global`pod3$$ = XMLElement[
   "pod", {"title" -> "Sheep livestock population history", "scanner" -> 
     "Data", "id" -> "History:LivestockPopulation:CountryData", "position" -> 
     "300", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TemplateBox[{
               GraphicsBox[{
                 GraphicsComplexBox[CompressedData["
1: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
xCK80KDpQT7Q5FSh5BdA0hmPTw==
                  "], {{{}, {
                    EdgeForm[], 
                    Directive[
                    Opacity[0.05], 
                    Hue[0.67, 0.6, 0.6]], 
                    GraphicsGroupBox[{
                    PolygonBox[CompressedData["
1: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
                    
                    "]]}]}, {}, {}}, {{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    LineBox[CompressedData["
1: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
CRUX
                    "]]}}}], {
                  Hue[0.67, 0.6, 0.6], 
                  RGBColor[0.24720000000000014`, 0.24, 0.6], 
                  PointBox[CompressedData["
1:eJwt0m1IU2EUAOAxIsoMlvmVyJhz7SN/6MrwI1o7Sk6ToRiopeGozR8VbuSM
MoippVktl6kFSjkVKhy1/euH4VpBuCynmKZt7u7zbrmVFUbiB+2e9cLl8nDu
Pe85533TziorFHQajSaMPNSbWoUv7fC+NKcTWGxxhEQXzwGx9IyOxIU0ymb7
Ewckrn/4PuFBDwqSl0D7sCGuTYwmrLol6HhaZT04Ev0+aacTakzjocepmG9Q
3uIEdVHPn+11aI1pzQnShLsnvm1LpywT5BHwpaWxqKcPbStrIsDSHkkYx6Es
vmwiYPp+7VZhM9o4ECagQBRYMOSjy8MCF2w8/zkjdaPNe+tdgI2Z0Vn5Qy7o
BJnPxt6P9ciWXFBAsR8tNqW4QX7EWaZN4mL++Uo3xL+QuJpn0aytbjcMvGMZ
LxXzKOs4U25gKn/VqGfQWU27PLA1eyXINQkwf7/EAx8nIys2gzLD0uYBnnCH
IXUR45rAuAcqXjFvLu85gPnzNv7HT2NcV5frhdYJLfuCg0+Z1q72gjVllaFN
RKsMRi8cjZkfVm1ifYzNkBem2V/Xrp9Ha9IFPiiYqv9MRr1SovDB73sn1Zwq
tEyl90FLb+GdixLsn/bG4YO3q/zaLgvOS0Xu80dNx/6I3ZV+GFFRO0bnnd3t
hyCXKhj/X7nxyQ+iq9XPDocxLhuNIUEZ12a26tG26SISruFAo+f5t5UEUvvA
MsbD8yaKx0lYaG5XTbrxfpQr10koWdSK/KNoc29OAEqPuUJzreisscYA6Oey
f+RK0bZYYwCOZw5XNwjR4kOhACQ/SritnsL7aDzFD8Lm63hm9jIL562RB0Ga
KewL1qHNtsEg9CpunTtjZ4r/Ac7jJ6c=
                   "]]}}, 
                FrameTicks -> {{{{8., 
                    FormBox[
                    TagBox["8", #& ], TraditionalForm], {0.00625, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.25]}}, {10., 
                    FormBox[
                    TagBox["10", #& ], TraditionalForm], {0.00625, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.25]}}, {12., 
                    FormBox[
                    TagBox["12", #& ], TraditionalForm], {0.00625, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.25]}}, {14., 
                    FormBox[
                    TagBox["14", #& ], TraditionalForm], {0.00625, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.25]}}, {7.5, 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {8.5, 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {9., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {9.5, 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {10.5, 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {11., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {11.5, 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {12.5, 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {13., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {13.5, 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}}, {{6., 
                    FormBox["\"\"", TraditionalForm], {0.00625, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.25]}}, {8., 
                    FormBox["\"\"", TraditionalForm], {0.00625, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.25]}}, {10., 
                    FormBox["\"\"", TraditionalForm], {0.00625, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.25]}}, {12., 
                    FormBox["\"\"", TraditionalForm], {0.00625, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.25]}}, {14., 
                    FormBox["\"\"", TraditionalForm], {0.00625, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.25]}}, {6.5, 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {7., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {7.5, 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {8.5, 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {9., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {9.5, 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {10.5, 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {11., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {11.5, 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {12.5, 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {13., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {13.5, 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}}}, {{{1893369600, 
                    FormBox["\"1960\"", TraditionalForm]}, {
                    NCache[2208988800, 2.2089888*^9], 
                    FormBox["\"1970\"", TraditionalForm]}, {
                    NCache[2524521600, 2.5245216*^9], 
                    FormBox["\"1980\"", TraditionalForm]}, {
                    NCache[2840140800, 2.8401408*^9], 
                    FormBox["\"1990\"", TraditionalForm]}, {
                    NCache[3155673600, 3.1556736*^9], 
                    FormBox["\"2000\"", TraditionalForm]}, {
                    NCache[3471292800, 3.4712928*^9], 
                    FormBox["\"2010\"", TraditionalForm]}, {1956528000, 
                    FormBox["\"\"", TraditionalForm]}, {2019600000, 
                    FormBox["\"\"", TraditionalForm]}, {2082758400, 
                    FormBox["\"\"", TraditionalForm]}, {2145830400, 
                    FormBox["\"\"", TraditionalForm]}, {
                    NCache[2272060800, 2.2720608*^9], 
                    FormBox["\"\"", TraditionalForm]}, {
                    NCache[2335219200, 2.3352192*^9], 
                    FormBox["\"\"", TraditionalForm]}, {
                    NCache[2398291200, 2.3982912*^9], 
                    FormBox["\"\"", TraditionalForm]}, {
                    NCache[2461449600, 2.4614496*^9], 
                    FormBox["\"\"", TraditionalForm]}, {
                    NCache[2587680000, 2.58768*^9], 
                    FormBox["\"\"", TraditionalForm]}, {
                    NCache[2650752000, 2.650752*^9], 
                    FormBox["\"\"", TraditionalForm]}, {
                    NCache[2713910400, 2.7139104*^9], 
                    FormBox["\"\"", TraditionalForm]}, {
                    NCache[2776982400, 2.7769824*^9], 
                    FormBox["\"\"", TraditionalForm]}, {
                    NCache[2903212800, 2.9032128*^9], 
                    FormBox["\"\"", TraditionalForm]}, {
                    NCache[2966371200, 2.9663712*^9], 
                    FormBox["\"\"", TraditionalForm]}, {
                    NCache[3029443200, 3.0294432*^9], 
                    FormBox["\"\"", TraditionalForm]}, {
                    NCache[3092601600, 3.0926016*^9], 
                    FormBox["\"\"", TraditionalForm]}, {
                    NCache[3218832000, 3.218832*^9], 
                    FormBox["\"\"", TraditionalForm]}, {
                    NCache[3281904000, 3.281904*^9], 
                    FormBox["\"\"", TraditionalForm]}, {
                    NCache[3345062400, 3.3450624*^9], 
                    FormBox["\"\"", TraditionalForm]}, {
                    NCache[3408134400, 3.4081344*^9], 
                    FormBox["\"\"", TraditionalForm]}}, {{1893369600, 
                    FormBox[
                    StyleBox["\"\"", 0, StripOnInput -> False], 
                    TraditionalForm]}, {
                    NCache[2208988800, 2.2089888*^9], 
                    FormBox[
                    StyleBox["\"\"", 0, StripOnInput -> False], 
                    TraditionalForm]}, {
                    NCache[2524521600, 2.5245216*^9], 
                    FormBox[
                    StyleBox["\"\"", 0, StripOnInput -> False], 
                    TraditionalForm]}, {
                    NCache[2840140800, 2.8401408*^9], 
                    FormBox[
                    StyleBox["\"\"", 0, StripOnInput -> False], 
                    TraditionalForm]}, {
                    NCache[3155673600, 3.1556736*^9], 
                    FormBox[
                    StyleBox["\"\"", 0, StripOnInput -> False], 
                    TraditionalForm]}, {
                    NCache[3471292800, 3.4712928*^9], 
                    FormBox[
                    StyleBox["\"\"", 0, StripOnInput -> False], 
                    TraditionalForm]}, {1956528000, 
                    FormBox[
                    StyleBox["\"\"", 0, StripOnInput -> False], 
                    TraditionalForm]}, {2019600000, 
                    FormBox[
                    StyleBox["\"\"", 0, StripOnInput -> False], 
                    TraditionalForm]}, {2082758400, 
                    FormBox[
                    StyleBox["\"\"", 0, StripOnInput -> False], 
                    TraditionalForm]}, {2145830400, 
                    FormBox[
                    StyleBox["\"\"", 0, StripOnInput -> False], 
                    TraditionalForm]}, {
                    NCache[2272060800, 2.2720608*^9], 
                    FormBox[
                    StyleBox["\"\"", 0, StripOnInput -> False], 
                    TraditionalForm]}, {
                    NCache[2335219200, 2.3352192*^9], 
                    FormBox[
                    StyleBox["\"\"", 0, StripOnInput -> False], 
                    TraditionalForm]}, {
                    NCache[2398291200, 2.3982912*^9], 
                    FormBox[
                    StyleBox["\"\"", 0, StripOnInput -> False], 
                    TraditionalForm]}, {
                    NCache[2461449600, 2.4614496*^9], 
                    FormBox[
                    StyleBox["\"\"", 0, StripOnInput -> False], 
                    TraditionalForm]}, {
                    NCache[2587680000, 2.58768*^9], 
                    FormBox[
                    StyleBox["\"\"", 0, StripOnInput -> False], 
                    TraditionalForm]}, {
                    NCache[2650752000, 2.650752*^9], 
                    FormBox[
                    StyleBox["\"\"", 0, StripOnInput -> False], 
                    TraditionalForm]}, {
                    NCache[2713910400, 2.7139104*^9], 
                    FormBox[
                    StyleBox["\"\"", 0, StripOnInput -> False], 
                    TraditionalForm]}, {
                    NCache[2776982400, 2.7769824*^9], 
                    FormBox[
                    StyleBox["\"\"", 0, StripOnInput -> False], 
                    TraditionalForm]}, {
                    NCache[2903212800, 2.9032128*^9], 
                    FormBox[
                    StyleBox["\"\"", 0, StripOnInput -> False], 
                    TraditionalForm]}, {
                    NCache[2966371200, 2.9663712*^9], 
                    FormBox[
                    StyleBox["\"\"", 0, StripOnInput -> False], 
                    TraditionalForm]}, {
                    NCache[3029443200, 3.0294432*^9], 
                    FormBox[
                    StyleBox["\"\"", 0, StripOnInput -> False], 
                    TraditionalForm]}, {
                    NCache[3092601600, 3.0926016*^9], 
                    FormBox[
                    StyleBox["\"\"", 0, StripOnInput -> False], 
                    TraditionalForm]}, {
                    NCache[3218832000, 3.218832*^9], 
                    FormBox[
                    StyleBox["\"\"", 0, StripOnInput -> False], 
                    TraditionalForm]}, {
                    NCache[3281904000, 3.281904*^9], 
                    FormBox[
                    StyleBox["\"\"", 0, StripOnInput -> False], 
                    TraditionalForm]}, {
                    NCache[3345062400, 3.3450624*^9], 
                    FormBox[
                    StyleBox["\"\"", 0, StripOnInput -> False], 
                    TraditionalForm]}, {
                    NCache[3408134400, 3.4081344*^9], 
                    FormBox[
                    StyleBox["\"\"", 0, StripOnInput -> False], 
                    TraditionalForm]}}}}, ImagePadding -> All, GridLines -> 
                NCache[{{
                   1893369600, 2208988800, 2524521600, 2840140800, 3155673600,
                     3471292800}, Automatic}, {{
                   1893369600, 2.2089888*^9, 2.5245216*^9, 2.8401408*^9, 
                    3.1556736*^9, 3.4712928*^9}, Automatic}], 
                PlotRangePadding -> None, AspectRatio -> 
                NCache[GoldenRatio^(-1), 0.6180339887498948], 
                AxesOrigin -> {2.*^9, 6.}, BaseStyle -> AbsoluteThickness[1], 
                Epilog -> {
                  CapForm[None], {
                   GrayLevel[1], 
                   PolygonBox[{
                    Offset[{-4.6, -4.25}, 
                    Scaled[{0, 0.08}]], 
                    Offset[{-4.6, -0.34999999999999987`}, 
                    Scaled[{0, 0.08}]], 
                    Offset[{4.6, 4.25}, 
                    Scaled[{0, 0.08}]], 
                    Offset[{4.6, 0.34999999999999987`}, 
                    Scaled[{0, 0.08}]]}]}, {
                   AbsoluteThickness[1], 
                   GrayLevel[0], 
                   LineBox[{{
                    Offset[{-4.6, -4.25}, 
                    Scaled[{0, 0.08}]], 
                    Offset[{4.6, 0.34999999999999987`}, 
                    Scaled[{0, 0.08}]]}, {
                    Offset[{-4.6, -0.34999999999999987`}, 
                    Scaled[{0, 0.08}]], 
                    Offset[{4.6, 4.25}, 
                    Scaled[{0, 0.08}]]}}]}}, Frame -> True, FrameTicksStyle -> 
                Directive[FontFamily -> "Times", FontSize -> 10], GridLines -> 
                NCache[{{
                   1893369600, 2208988800, 2524521600, 2840140800, 3155673600,
                     3471292800}, Automatic}, {{
                   1893369600, 2.2089888*^9, 2.5245216*^9, 2.8401408*^9, 
                    3.1556736*^9, 3.4712928*^9}, Automatic}], GridLinesStyle -> 
                GrayLevel[0.9], ImageSize -> 250, 
                LabelStyle -> {FontFamily -> "Verdana", FontSize -> 10}, 
                Method -> {"AxesInFront" -> True}, 
                PlotRange -> {{1.9249920309135673`*^9, 
                 3.4397567690864325`*^9}, {5.973271681276001, 
                 14.392594119247585`}}, PlotRangePadding -> None, Prolog -> {
                  Opacity[0], 
                  TagBox[
                   RectangleBox[
                    Scaled[{0, 0}], 
                    Scaled[{1, 1}]], Annotation[#, "DatePlot", "Frame"]& ]}, 
                TicksStyle -> 
                Directive[FontFamily -> "Times", FontSize -> 10]], 
               TagBox[
                GridBox[{{
                   TagBox[
                    GridBox[{{
                    StyleBox[
                    RowBox[{"\"(\"", "\[NoBreak]", 
                    TemplateBox[{"\"from \"", 
                    FormBox[
                    TagBox["\"1961\"", Identity], TraditionalForm], 
                    "\" to \"", 
                    FormBox[
                    TagBox["\"2009\"", Identity], TraditionalForm]}, "Row", 
                    DisplayFunction -> (
                    RowBox[{#, "\[InvisibleSpace]", #2, 
                    "\[InvisibleSpace]", #3, "\[InvisibleSpace]", #4}]& ), 
                    InterpretationFunction -> (RowBox[{
                    StyleBox[
                    "Row", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited], "[", 
                    RowBox[{"{", 
                    RowBox[{#, ",", #2, ",", #3, ",", #4}], "}"}], "]"}]& )], 
                    "\[NoBreak]", "\")\""}], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, FontFamily -> "Bitstream Vera Sans", 
                    GrayLevel[0.5], FontSize -> 10, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                   TagBox[
                    GridBox[{{
                    StyleBox[
                    RowBox[{"\"(\"", "\[NoBreak]", 
                    
                    TemplateBox[{"\"in \"", "\"millions\""}, "Row", 
                    DisplayFunction -> (
                    RowBox[{#, "\[InvisibleSpace]", #2}]& ), 
                    InterpretationFunction -> (RowBox[{
                    StyleBox[
                    "Row", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited], "[", 
                    RowBox[{"{", 
                    RowBox[{#, ",", #2}], "}"}], "]"}]& )], "\[NoBreak]", 
                    "\")\""}], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, FontFamily -> "Bitstream Vera Sans", 
                    GrayLevel[0.5], FontSize -> 10, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                 GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                "Column"]}, "Labeled", DisplayFunction -> (FormBox[
                GridBox[{{
                   TagBox[
                    ItemBox[
                    PaneBox[
                    TagBox[#, "SkipImageSizeLevel"], 
                    Alignment -> {Center, Baseline}, BaselinePosition -> 
                    Baseline], DefaultBaseStyle -> "Labeled"], 
                    "SkipImageSizeLevel"], 
                   ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {{Center}}, "Rows" -> {{Center}}}, AutoDelete -> 
                 False, GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 BaselinePosition -> {1, 1}], TraditionalForm]& ), 
              InterpretationFunction -> (RowBox[{
                 StyleBox[
                 "Labeled", FontFamily -> "Bitstream Vera Sans", 
                  FontSize -> -1 + Inherited], "[", 
                 RowBox[{#, ",", 
                   RowBox[{"{", #2, "}"}], ",", 
                   RowBox[{"(", "\[NoBreak]", 
                    GridBox[{{
                    StyleBox[
                    "Right", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited], 
                    StyleBox[
                    "Center", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited]}}, RowSpacings -> 1, 
                    ColumnSpacings -> 1, RowAlignments -> Baseline, 
                    ColumnAlignments -> Center], "\[NoBreak]", ")"}]}], 
                 "]"}]& )], 
             Global`TagBoxWrapper[
             "CDFContent" -> {"Tooltips", "Coordinates"}]], TraditionalForm]],
           "Output"]}], 
       XMLElement[
       "dataformats", {}, {
        "computabledata,formatteddata,timeseriesdata"}]}]}], Global`pod4$$ = 
   XMLElement[
   "pod", {"title" -> "Livestock population", "scanner" -> "Data", "id" -> 
     "LivestockPopulationTypes:CountryData", "position" -> "400", "error" -> 
     "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              GridBox[{{
                 TagBox[
                  PaneBox[
                   
                   TemplateBox[{"\"cattle\""}, "Row", 
                    DisplayFunction -> (#& ), 
                    InterpretationFunction -> (RowBox[{
                    StyleBox[
                    "Row", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited], "[", 
                    RowBox[{
                    RowBox[{"{", #, "}"}], ",", "\",\""}], "]"}]& )], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  Global`TagBoxWrapper["Label"]], 
                 TemplateBox[{
                   StyleBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    TagBox["18.6", 
                    Global`TagBoxWrapper["StringBoxes" -> "18.6"]], " ", 
                    TagBox[
                    StyleBox[
                    "\"million\"", ShowStringCharacters -> False, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, FontFamily -> "Helvetica", FontSize -> Smaller, 
                    StripOnInput -> False], 1000000& , AutoDelete -> True]}], 
                    "\[InvisibleSpace]", " ", 
                    StyleBox[
                    "\"\"", LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, FontFamily -> "Helvetica", FontSize -> 
                    Smaller, StripOnInput -> False]}], #& , SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, ZeroWidthTimes -> False], "\" \"", 
                   StyleBox[
                    RowBox[{"\"(\"", "\[NoBreak]", 
                    
                    TemplateBox[{"2009", "\" estimate\""}, "Row", 
                    DisplayFunction -> (
                    RowBox[{#, "\[InvisibleSpace]", #2}]& ), 
                    InterpretationFunction -> (RowBox[{
                    StyleBox[
                    "Row", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited], "[", 
                    RowBox[{"{", 
                    RowBox[{#, ",", #2}], "}"}], "]"}]& )], "\[NoBreak]", 
                    "\")\""}], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, FontFamily -> "Bitstream Vera Sans", 
                    GrayLevel[0.5], FontSize -> 10, StripOnInput -> False]}, 
                  "Row", 
                  DisplayFunction -> (
                   RowBox[{#, "\[InvisibleSpace]", #2, 
                    "\[InvisibleSpace]", #3}]& ), 
                  InterpretationFunction -> (RowBox[{
                    StyleBox[
                    "Row", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited], "[", 
                    RowBox[{"{", 
                    RowBox[{#, ",", #2, ",", #3}], "}"}], "]"}]& )]}, {
                 TagBox[
                  PaneBox[
                   
                   TemplateBox[{"\"chickens\""}, "Row", 
                    DisplayFunction -> (#& ), 
                    InterpretationFunction -> (RowBox[{
                    StyleBox[
                    "Row", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited], "[", 
                    RowBox[{
                    RowBox[{"{", #, "}"}], ",", "\",\""}], "]"}]& )], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  Global`TagBoxWrapper["Label"]], 
                 TemplateBox[{
                   StyleBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    TagBox["176", 
                    Global`TagBoxWrapper["StringBoxes" -> "176"]], " ", 
                    TagBox[
                    StyleBox[
                    "\"million\"", ShowStringCharacters -> False, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, FontFamily -> "Helvetica", FontSize -> Smaller, 
                    StripOnInput -> False], 1000000& , AutoDelete -> True]}], 
                    "\[InvisibleSpace]", " ", 
                    StyleBox[
                    "\"\"", LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, FontFamily -> "Helvetica", FontSize -> 
                    Smaller, StripOnInput -> False]}], #& , SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, ZeroWidthTimes -> False], "\" \"", 
                   StyleBox[
                    RowBox[{"\"(\"", "\[NoBreak]", 
                    
                    TemplateBox[{"2009", "\" estimate\""}, "Row", 
                    DisplayFunction -> (
                    RowBox[{#, "\[InvisibleSpace]", #2}]& ), 
                    InterpretationFunction -> (RowBox[{
                    StyleBox[
                    "Row", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited], "[", 
                    RowBox[{"{", 
                    RowBox[{#, ",", #2}], "}"}], "]"}]& )], "\[NoBreak]", 
                    "\")\""}], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, FontFamily -> "Bitstream Vera Sans", 
                    GrayLevel[0.5], FontSize -> 10, StripOnInput -> False]}, 
                  "Row", DisplayFunction -> (
                   RowBox[{#, "\[InvisibleSpace]", #2, 
                    "\[InvisibleSpace]", #3}]& ), 
                  InterpretationFunction -> (RowBox[{
                    StyleBox[
                    "Row", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited], "[", 
                    RowBox[{"{", 
                    RowBox[{#, ",", #2, ",", #3}], "}"}], "]"}]& )]}, {
                 TagBox[
                  PaneBox[
                   
                   TemplateBox[{"\"goats\""}, "Row", DisplayFunction -> (#& ),
                     InterpretationFunction -> (RowBox[{
                    StyleBox[
                    "Row", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited], "[", 
                    RowBox[{
                    RowBox[{"{", #, "}"}], ",", "\",\""}], "]"}]& )], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  Global`TagBoxWrapper["Label"]], 
                 TemplateBox[{
                   StyleBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    TagBox["1.27", 
                    Global`TagBoxWrapper["StringBoxes" -> "1.27"]], " ", 
                    TagBox[
                    StyleBox[
                    "\"million\"", ShowStringCharacters -> False, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, FontFamily -> "Helvetica", FontSize -> Smaller, 
                    StripOnInput -> False], 1000000& , AutoDelete -> True]}], 
                    "\[InvisibleSpace]", " ", 
                    StyleBox[
                    "\"\"", LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, FontFamily -> "Helvetica", FontSize -> 
                    Smaller, StripOnInput -> False]}], #& , SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, ZeroWidthTimes -> False], "\" \"", 
                   StyleBox[
                    RowBox[{"\"(\"", "\[NoBreak]", 
                    
                    TemplateBox[{"2009", "\" estimate\""}, "Row", 
                    DisplayFunction -> (
                    RowBox[{#, "\[InvisibleSpace]", #2}]& ), 
                    InterpretationFunction -> (RowBox[{
                    StyleBox[
                    "Row", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited], "[", 
                    RowBox[{"{", 
                    RowBox[{#, ",", #2}], "}"}], "]"}]& )], "\[NoBreak]", 
                    "\")\""}], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, FontFamily -> "Bitstream Vera Sans", 
                    GrayLevel[0.5], FontSize -> 10, StripOnInput -> False]}, 
                  "Row", DisplayFunction -> (
                   RowBox[{#, "\[InvisibleSpace]", #2, 
                    "\[InvisibleSpace]", #3}]& ), 
                  InterpretationFunction -> (RowBox[{
                    StyleBox[
                    "Row", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited], "[", 
                    RowBox[{"{", 
                    RowBox[{#, ",", #2, ",", #3}], "}"}], "]"}]& )]}, {
                 TagBox[
                  PaneBox[
                   
                   TemplateBox[{"\"pigs\""}, "Row", DisplayFunction -> (#& ), 
                    InterpretationFunction -> (RowBox[{
                    StyleBox[
                    "Row", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited], "[", 
                    RowBox[{
                    RowBox[{"{", #, "}"}], ",", "\",\""}], "]"}]& )], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  Global`TagBoxWrapper["Label"]], 
                 TemplateBox[{
                   StyleBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    TagBox["14.8", 
                    Global`TagBoxWrapper["StringBoxes" -> "14.8"]], " ", 
                    TagBox[
                    StyleBox[
                    "\"million\"", ShowStringCharacters -> False, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, FontFamily -> "Helvetica", FontSize -> Smaller, 
                    StripOnInput -> False], 1000000& , AutoDelete -> True]}], 
                    "\[InvisibleSpace]", " ", 
                    StyleBox[
                    "\"\"", LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, FontFamily -> "Helvetica", FontSize -> 
                    Smaller, StripOnInput -> False]}], #& , SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, ZeroWidthTimes -> False], "\" \"", 
                   StyleBox[
                    RowBox[{"\"(\"", "\[NoBreak]", 
                    
                    TemplateBox[{"2009", "\" estimate\""}, "Row", 
                    DisplayFunction -> (
                    RowBox[{#, "\[InvisibleSpace]", #2}]& ), 
                    InterpretationFunction -> (RowBox[{
                    StyleBox[
                    "Row", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited], "[", 
                    RowBox[{"{", 
                    RowBox[{#, ",", #2}], "}"}], "]"}]& )], "\[NoBreak]", 
                    "\")\""}], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, FontFamily -> "Bitstream Vera Sans", 
                    GrayLevel[0.5], FontSize -> 10, StripOnInput -> False]}, 
                  "Row", DisplayFunction -> (
                   RowBox[{#, "\[InvisibleSpace]", #2, 
                    "\[InvisibleSpace]", #3}]& ), 
                  InterpretationFunction -> (RowBox[{
                    StyleBox[
                    "Row", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited], "[", 
                    RowBox[{"{", 
                    RowBox[{#, ",", #2, ",", #3}], "}"}], "]"}]& )]}, {
                 TagBox[
                  PaneBox[
                   
                   TemplateBox[{"\"sheep\""}, "Row", DisplayFunction -> (#& ),
                     InterpretationFunction -> (RowBox[{
                    StyleBox[
                    "Row", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited], "[", 
                    RowBox[{
                    RowBox[{"{", #, "}"}], ",", "\",\""}], "]"}]& )], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  Global`TagBoxWrapper["Label"]], 
                 TemplateBox[{
                   StyleBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    TagBox["7.72", 
                    Global`TagBoxWrapper["StringBoxes" -> "7.72"]], " ", 
                    TagBox[
                    StyleBox[
                    "\"million\"", ShowStringCharacters -> False, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, FontFamily -> "Helvetica", FontSize -> Smaller, 
                    StripOnInput -> False], 1000000& , AutoDelete -> True]}], 
                    "\[InvisibleSpace]", " ", 
                    StyleBox[
                    "\"\"", LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, FontFamily -> "Helvetica", FontSize -> 
                    Smaller, StripOnInput -> False]}], #& , SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, ZeroWidthTimes -> False], "\" \"", 
                   StyleBox[
                    RowBox[{"\"(\"", "\[NoBreak]", 
                    
                    TemplateBox[{"2009", "\" estimate\""}, "Row", 
                    DisplayFunction -> (
                    RowBox[{#, "\[InvisibleSpace]", #2}]& ), 
                    InterpretationFunction -> (RowBox[{
                    StyleBox[
                    "Row", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited], "[", 
                    RowBox[{"{", 
                    RowBox[{#, ",", #2}], "}"}], "]"}]& )], "\[NoBreak]", 
                    "\")\""}], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, FontFamily -> "Bitstream Vera Sans", 
                    GrayLevel[0.5], FontSize -> 10, StripOnInput -> False]}, 
                  "Row", DisplayFunction -> (
                   RowBox[{#, "\[InvisibleSpace]", #2, 
                    "\[InvisibleSpace]", #3}]& ), 
                  InterpretationFunction -> (RowBox[{
                    StyleBox[
                    "Row", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited], "[", 
                    RowBox[{"{", 
                    RowBox[{#, ",", #2, ",", #3}], "}"}], "]"}]& )]}}, 
               GridBoxAlignment -> {
                "Columns" -> {Left, Left}, "Rows" -> {{Baseline}}}, 
               AutoDelete -> False, 
               GridBoxBackground -> {"Columns" -> {None, None}}, 
               GridBoxFrame -> {"Columns" -> {{True}}, "Rows" -> {{True}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, 
               FrameStyle -> GrayLevel[0.84], BaselinePosition -> Automatic, 
               AllowScriptLevelChange -> False], "Grid"], 
             LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
             False], TraditionalForm]], "Output"]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,numberdata,quantitydata"}]}], 
     
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "More", "input" -> 
         "LivestockPopulationTypes:CountryData__More"}, {}]}]}], 
   Global`aux1$$ = {True, False, {False}}, Global`aux2$$ = {
   True, False, {False}}, Global`aux3$$ = {True, False, {False}}, 
   Global`aux4$$ = {True, False, {False}}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {
    XMLElement["sources", {"count" -> "1"}, {
      XMLElement[
      "source", {
       "url" -> 
        "http://www.wolframalpha.com/sources/\
CountryDataSourceInformationNotes.html", "text" -> "Country data"}, {}]}]}, 
   Typeset`initdone$$ = True, Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> "false", "numpods" -> "4", "datatypes" -> 
    "Country", "timedout" -> "", "timing" -> "0.691", "parsetiming" -> 
    "0.278", "parsetimedout" -> "false", "recalculate" -> "", "id" -> 
    "MSP95119fc558f72h3age200000i950a8fa12h4adc&s=42", "related" -> 
    "http://www4b.wolframalpha.com/api/v2/relatedQueries.jsp?id=\
MSP95219fc558f72h3age200003eg50da8h0h7301g&s=42", "version" -> "2.1"}, 
   Typeset`sessioninfo$$ = {
   "TimeZone" -> -7., 
    "Date" -> {2011, 5, 11, 15, 43, 13.70109`7.889330104752671}, "Line" -> 
    1084, "SessionID" -> 23028930380989740577}, Typeset`showpods$$ = {1, 2, 3,
    4}, Typeset`failedpods$$ = {}, Typeset`chosen$$ = {
   "Result", "Result", 1, 1, "Content"}, Typeset`open$$ = False, 
   Typeset`newq$$ = "How many sheep are in France?"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Global`pod1$$, Global`pod2$$, Global`pod3$$, Global`pod4$$}, {
        Global`aux1$$, Global`aux2$$, Global`aux3$$, Global`aux4$$}, 
        Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
        Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{269., {37., 21.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Global`pod1$$, Global`pod2$$, Global`pod3$$, Global`pod4$$}], 
       Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 ShowCellTags->True,
 CellTags->"Cell 9.105"],

Cell[BoxData[
 InterpretationBox[
  FrameBox[
   StyleBox[
    FormBox[
     TemplateBox[{StyleBox[
        TagBox[
         RowBox[{
           RowBox[{
             TagBox["7.72", 
              $CellContext`TagBoxWrapper["StringBoxes" -> "7.72"]], " ", 
             TagBox[
              StyleBox[
              "\"million\"", StripOnInput -> False, ShowStringCharacters -> 
               False, LineIndent -> 0, 
               LinebreakAdjustments -> {1, 100, 1, 0, 100}, FontFamily -> 
               "Helvetica", FontSize -> Smaller], 1000000& , AutoDelete -> 
              True]}], "\[InvisibleSpace]", " ", 
           StyleBox[
           "\"\"", StripOnInput -> False, LineIndent -> 0, 
            LinebreakAdjustments -> {1, 100, 1, 0, 100}, FontFamily -> 
            "Helvetica", FontSize -> Smaller]}], #& ], ZeroWidthTimes -> 
        False, LineIndent -> 0, LinebreakAdjustments -> {1, 100, 1, 0, 100}],
       "\" \"",StyleBox[
        RowBox[{"\"(\"", "\[NoBreak]", 
          TemplateBox[{
            FormBox[
             TagBox["\"2009\"", Identity], TraditionalForm], "\" estimate\""},
            "Row", DisplayFunction -> (
            RowBox[{#, "\[InvisibleSpace]", #2}]& ), 
           InterpretationFunction -> (RowBox[{
              StyleBox[
              "Row", FontFamily -> "Bitstream Vera Sans", 
               FontSize -> -1 + Inherited], "[", 
              RowBox[{"{", 
                RowBox[{#, ",", #2}], "}"}], "]"}]& )], "\[NoBreak]", 
          "\")\""}], StripOnInput -> False, LineIndent -> 0, 
        LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineColor -> 
        GrayLevel[0.6], FrontFaceColor -> GrayLevel[0.6], BackFaceColor -> 
        GrayLevel[0.6], GraphicsColor -> GrayLevel[0.6], FontFamily -> 
        "Bitstream Vera Sans", FontSize -> 10, FontColor -> GrayLevel[0.6]]},
      "Row",
      DisplayFunction->(
       RowBox[{#, "\[InvisibleSpace]", #2, "\[InvisibleSpace]", #3}]& ),
      InterpretationFunction->(RowBox[{
         StyleBox[
         "Row", FontFamily -> "Bitstream Vera Sans", 
          FontSize -> -1 + Inherited], "[", 
         RowBox[{"{", 
           RowBox[{#, ",", #2, ",", #3}], "}"}], "]"}]& )],
     TraditionalForm], "Output",
    ScriptLevel->0,
    FontFamily->"Times",
    FontSize->14,
    Background->None],
   BaseStyle->{Plain},
   FrameMargins->10,
   FrameStyle->GrayLevel[0.85],
   RoundingRadius->5,
   StripOnInput->False],
  WolframAlphaResult[
  "How many sheep are in France?", {{"Result", 1}, "Content"}]]], "Output",
 CellChangeTimes->{
  3.514142429680291*^9, {3.5141425098089867`*^9, 3.5141425355942307`*^9}, 
   3.514142594403129*^9}]
}, Open  ]],

Cell["\<\
Note that extra information can often be obtained by clicking on the plus \
sign in the upper right corner of the pane. \
\>", "Text",
 CellChangeTimes->{{3.514142454891704*^9, 3.514142461034411*^9}}],

Cell[TextData[{
 "English sentences are obviously easier to use than ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " syntax (although for complicated expressions they are not always \
interpreted properly). However, the WolframAlpha interpretation is (usually) \
provided in exact ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " syntax, so as to reduce misunderstanding."
}], "Text",
 CellChangeTimes->{{3.503086281607218*^9, 3.503086329583477*^9}, {
   3.5030865215542088`*^9, 3.5030865434691677`*^9}, {3.503086755289261*^9, 
   3.503086932432704*^9}, {3.503087973900625*^9, 3.503087987355434*^9}, {
   3.503088336122581*^9, 3.503088377877841*^9}, {3.5031781095955887`*^9, 
   3.503178224756909*^9}, {3.5042766754871817`*^9, 3.5042767383147707`*^9}, {
   3.504276831827345*^9, 3.5042768329150763`*^9}, {3.514141797553383*^9, 
   3.514141832437674*^9}, {3.514141974099894*^9, 3.514141978744691*^9}, 
   3.514142453296384*^9}],

Cell[TextData[{
 "In this book we will not resort to relaxed syntax, preferring instead to \
employ exact ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " syntax. However, you might find relaxed syntax useful in various \
circumstances, such as for hints in remembering the exact syntax for a given \
operation such as plotting or root finding. "
}], "Text",
 CellChangeTimes->{{3.5031782612401667`*^9, 3.503178516886261*^9}, {
  3.5141394057703*^9, 3.51413943011547*^9}, {3.514142096884849*^9, 
  3.514142097139062*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["9.8 Computer Algebra", "Subtitle",
 CellTags->{"Sec. 9.8", "c:37"}],

Cell["", "Text"],

Cell[CellGroupData[{

Cell["9.8.1 Manipulating Expressions", "Subsubtitle",
 CellTags->"c:38"],

Cell[TextData[{
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " can do symbolic as well as numerical mathematics.  The program will \
perform basic algebraic simplifications automatically, as in"
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"4", "x"}], "+", "5", "-", 
  RowBox[{"3", "x"}], "+", "15"}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.106"],

Cell[BoxData[
 RowBox[{"20", "+", "x"}]], "Output",
 CellChangeTimes->{3.446516968952128*^9, 3.45891470116074*^9},
 CellTags->"Cell 9.102"]
}, Open  ]],

Cell[TextData[{
 "However, ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " will not expand out expressions in brackets unless you ask it to do so \
using the ",
 StyleBox["Expand",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " function",
 ":"
}], "Text",
 CellTags->"i:62"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"5", 
   RowBox[{"(", 
    RowBox[{"x", "+", 
     RowBox[{"2", "y"}]}], ")"}]}], " ", "+", 
  RowBox[{"10", 
   RowBox[{"(", 
    RowBox[{"x", " ", "-", 
     RowBox[{"4", 
      RowBox[{"y", "^", "2"}], " ", "x"}], "-", "y"}], ")"}]}]}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.107"],

Cell[BoxData[
 RowBox[{
  RowBox[{"5", " ", 
   RowBox[{"(", 
    RowBox[{"x", "+", 
     RowBox[{"2", " ", "y"}]}], ")"}]}], "+", 
  RowBox[{"10", " ", 
   RowBox[{"(", 
    RowBox[{"x", "-", "y", "-", 
     RowBox[{"4", " ", "x", " ", 
      SuperscriptBox["y", "2"]}]}], ")"}]}]}]], "Output",
 CellChangeTimes->{{3.446516962160172*^9, 3.446516971582334*^9}, 
   3.446591179253793*^9, 3.4589147115876837`*^9},
 CellTags->"Cell 9.103"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Expand", "[", "%", "]"}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.108"],

Cell[BoxData[
 RowBox[{
  RowBox[{"15", " ", "x"}], "-", 
  RowBox[{"40", " ", "x", " ", 
   SuperscriptBox["y", "2"]}]}]], "Output",
 CellChangeTimes->{3.446516981778921*^9, 3.458914713685495*^9},
 CellTags->"Cell 9.104"]
}, Open  ]],

Cell[TextData[{
 " \tAnother way to simplify an expression is to apply the ",
 StyleBox["Factor",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " command, which tries to factor out all common elements in an expression. \
For example, when applied to the above result,  ",
 StyleBox["Factor",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " yields"
}], "Text",
 CellChangeTimes->{3.446518050185804*^9},
 CellTags->"i:63"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Factor", "[", "%", "]"}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.109"],

Cell[BoxData[
 RowBox[{
  RowBox[{"-", "5"}], " ", "x", " ", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"-", "3"}], "+", 
    RowBox[{"8", " ", 
     SuperscriptBox["y", "2"]}]}], ")"}]}]], "Output",
 CellChangeTimes->{3.44651700782332*^9, 3.4589147240287943`*^9},
 CellTags->"Cell 9.105"]
}, Open  ]],

Cell["\<\
\tThere are also several command that are useful when  dealing with  complex \
expressions that include terms with numerators and denominators. For \
instance,  the expression\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"x", "/", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"x", "^", "2"}], " ", "+", " ", "2"}], ")"}]}], " ", "+", " ", 
  RowBox[{"3", "/", 
   RowBox[{"(", 
    RowBox[{"x", "-", "1"}], ")"}]}]}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.110"],

Cell[BoxData[
 RowBox[{
  FractionBox["3", 
   RowBox[{
    RowBox[{"-", "1"}], "+", "x"}]], "+", 
  FractionBox["x", 
   RowBox[{"2", "+", 
    SuperscriptBox["x", "2"]}]]}]], "Output",
 CellChangeTimes->{3.446517023063702*^9, 3.4465170909652433`*^9},
 CellTags->"Cell 9.106"]
}, Open  ]],

Cell[TextData[{
 "can be put over a common denominator, using the function ",
 StyleBox["Together",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ":"
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Together", "[", "%", "]"}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.111"],

Cell[BoxData[
 FractionBox[
  RowBox[{"6", "-", "x", "+", 
   RowBox[{"4", " ", 
    SuperscriptBox["x", "2"]}]}], 
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "1"}], "+", "x"}], ")"}], " ", 
   RowBox[{"(", 
    RowBox[{"2", "+", 
     SuperscriptBox["x", "2"]}], ")"}]}]]], "Output",
 CellChangeTimes->{3.4465170330186653`*^9, 3.446517097196855*^9},
 CellTags->"Cell 9.107"]
}, Open  ]],

Cell[TextData[{
 "The numerator and denominator of the expression can then be extracted using \
the functions",
 StyleBox[" Numerator ",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 "and ",
 StyleBox["Denominator",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ":"
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Numerator", "[", "%", "]"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"Denominator", "[", "%%", "]"}]}], "Input",
 ShowCellTags->True,
 CellChangeTimes->{{3.446517073208148*^9, 3.446517078921043*^9}},
 CellTags->"Cell 9.112"],

Cell[BoxData[
 RowBox[{"6", "-", "x", "+", 
  RowBox[{"4", " ", 
   SuperscriptBox["x", "2"]}]}]], "Output",
 CellChangeTimes->{3.446517048530662*^9, 3.4465171032996063`*^9},
 CellTags->"Cell 9.108"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{
    RowBox[{"-", "1"}], "+", "x"}], ")"}], " ", 
  RowBox[{"(", 
   RowBox[{"2", "+", 
    SuperscriptBox["x", "2"]}], ")"}]}]], "Output",
 CellChangeTimes->{3.446517048530662*^9, 3.4465171034449472`*^9},
 CellTags->"Cell 9.108"]
}, Open  ]],

Cell[TextData[{
 "If you really want ",
 StyleBox["Mathematica ",
  FontSlant->"Italic"],
 " to do all of the work (and after all, isn't that what computers are for?), \
the function ",
 StyleBox["Simplify",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " will try various tricks to simplify a given expression . The function ",
 StyleBox["FullSimplify",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " has an even larger bag of tricks,  but for this reason takes somewhat \
longer  to run. For example, ",
 StyleBox["Simplify",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " knows all the trigonometric identities:"
}], "Text",
 CellChangeTimes->{{3.458914771766087*^9, 3.458914772980013*^9}},
 CellTags->"i:64"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Simplify", "[", " ", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"Sin", "[", "x", "]"}], "^", "2"}], " ", 
    RowBox[{"Cos", "[", "x", "]"}]}], "+", " ", 
   RowBox[{
    RowBox[{"Cos", "[", "x", "]"}], "^", "3"}]}], "]"}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.113"],

Cell[BoxData[
 RowBox[{"Cos", "[", "x", "]"}]], "Output",
 CellChangeTimes->{3.446517131886298*^9, 3.446591218934079*^9},
 CellTags->"Cell 9.109"]
}, Open  ]],

Cell[TextData[{
 "One of the palettes, called AlgebraicManipulation, contains a  suite of \
functions that are useful in simplifying or otherwise manipulating algebraic \
expressions. A list of some of these commands is also provided in Table ",
 ButtonBox["9.14",
  BaseStyle->"Hyperlink",
  ButtonData:>"Table 9.14"],
 "."
}], "Text",
 CellChangeTimes->{{3.446591234637951*^9, 3.446591236013858*^9}}],

Cell[TextData[Cell[BoxData[GridBox[{
   {
    StyleBox[
     RowBox[{
     "Table", "9.14", "Some", " ", "Useful", " ", "Functions", " ", "for", 
      " ", "Doing", " ", "Computer", " ", "Algebra"}],
     FontSize->9]},
   {
    StyleBox[GridBox[{
       {
        StyleBox[
         RowBox[{"Expand", "[", "expr", "]"}],
         FontFamily->"Courier",
         FontWeight->"Bold"], 
        RowBox[{
        "Multiply", " ", "out", " ", "products", " ", "and", " ", 
         "powers"}]},
       {
        StyleBox[
         RowBox[{"Factor", "[", "expr", "]"}],
         FontFamily->"Courier",
         FontWeight->"Bold"], 
        RowBox[{
        "Reduce", " ", "to", " ", "a", " ", "product", " ", "of", " ", 
         "factors"}]},
       {
        StyleBox[
         RowBox[{"Together", "[", "expr", "]"}],
         FontFamily->"Courier",
         FontWeight->"Bold"], 
        RowBox[{
        "Put", " ", "all", " ", "terms", " ", "over", " ", "a", " ", "common",
          " ", "denominator"}]},
       {
        StyleBox[
         RowBox[{"Apart", "[", "expr", "]"}],
         FontFamily->"Courier",
         FontWeight->"Bold"], 
        RowBox[{
        "Separate", " ", "out", " ", "into", " ", "terms", " ", "with", " ", 
         "simple", " ", "denominators"}]},
       {
        StyleBox[
         RowBox[{"Simplify", "[", "expr", "]"}],
         FontFamily->"Courier",
         FontWeight->"Bold"], 
        RowBox[{
        "Try", " ", "to", " ", "simplify", " ", "an", " ", "expression"}]},
       {
        StyleBox[
         RowBox[{"FullSimplify", "[", "expr", "]"}],
         FontFamily->"Courier",
         FontWeight->"Bold"], 
        RowBox[{
        "Try", " ", "a", " ", "larger", " ", "collection", " ", "of", " ", 
         "tricks", " ", "to", " ", "simplify", " ", "an", " ", "expression"}]},
       {
        StyleBox[
         RowBox[{"Numerator", "[", "expr", "]"}],
         FontFamily->"Courier",
         FontWeight->"Bold"], 
        RowBox[{
        "Pick", " ", "out", " ", "the", " ", "numerator", " ", "of", " ", 
         "an", " ", "expression"}]},
       {
        StyleBox[
         RowBox[{"Denominator", "[", "expr", "]"}],
         FontFamily->"Courier",
         FontWeight->"Bold"], 
        RowBox[{
        "Pick", " ", "out", " ", "the", " ", "denominator", " ", "of", " ", 
         "an", " ", "expression"}]}
      },
      GridBoxAlignment->{
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[1.9599999999999997`]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}],
     FontFamily->"Times"]}
  }]]]], "Text",
 CellFrame->True,
 Background->GrayLevel[0.849989],
 CellTags->"Table 9.14"]
}, Closed]],

Cell[CellGroupData[{

Cell["9.8.2 Replacement", "Subsubtitle",
 CellTags->"c:39"],

Cell[TextData[{
 " In order to evaluate an expression at specific values of the variables \
that appear in the expression, you can perform a ",
 StyleBox["replacement",
  FontSlant->"Italic"],
 ". For example, to evaluate the expression ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["x", "2"], TraditionalForm]]],
 " at ",
 Cell[BoxData[
  FormBox[
   RowBox[{"x", "=", "2"}], TraditionalForm]]],
 ", you can replace the variable ",
 Cell[BoxData[
  FormBox["x", TraditionalForm]]],
 "  by ",
 Cell[BoxData[
  FormBox["2", TraditionalForm]]],
 " using the notation"
}], "Text",
 CellChangeTimes->{{3.446591245565921*^9, 3.446591255233108*^9}},
 CellTags->"i:65"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"x", "^", "2"}], " ", "/.", 
  RowBox[{"x", "\[Rule]", "2"}]}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.114"],

Cell[BoxData["4"], "Output",
 CellChangeTimes->{3.4465171540559196`*^9},
 CellTags->"Cell 9.110"]
}, Open  ]],

Cell[TextData[{
 "The symbol  ",
 StyleBox["/.",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 "  can be thought of as the verb \"replace\", and the expression ",
 StyleBox["/.",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " ",
 StyleBox["x",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " \[Rule]",
 StyleBox["2",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 "  means replace ",
 StyleBox["x",
  FontSlant->"Italic"],
 " with 2. The right arrow ",
 Cell[BoxData[
  FormBox["\[Rule]", TraditionalForm]]],
 "  can be obtained from the BasicInput palette, or by typing ->   \
(\"minus-greater than-space\"). You can perform more than one substitution at \
the same time by using a list after the symbol ",
 StyleBox["/.",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ":"
}], "Text",
 CellChangeTimes->{{3.446591268911985*^9, 3.446591269300108*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"y", " ", 
   RowBox[{"Cos", "[", "x", "]"}]}], " ", "/.", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"x", "\[Rule]", 
     RowBox[{"45", " ", "Degree"}]}], ",", " ", 
    RowBox[{"y", "\[Rule]", "2"}]}], "}"}]}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.115"],

Cell[BoxData[
 SqrtBox["2"]], "Output",
 CellChangeTimes->{3.4465171768603983`*^9},
 CellTags->"Cell 9.111"]
}, Open  ]],

Cell[TextData[{
 "\tThe use of this command is summarized in Table ",
 ButtonBox["9.15",
  BaseStyle->"Hyperlink",
  ButtonData:>"Table 9.15"],
 "."
}], "Text"],

Cell[TextData[Cell[BoxData[GridBox[{
   {
    StyleBox[
     RowBox[{
     "Table", "9.15", " ", "Performing", "  ", "Substitutions", " ", "in", 
      " ", "an", " ", "Expression"}],
     FontSize->9]},
   {GridBox[{
      {
       RowBox[{
        StyleBox["expr",
         FontWeight->"Bold"], " ", 
        StyleBox["/.",
         FontWeight->"Bold"], 
        StyleBox[
         RowBox[{"x", "  ", "\[Rule]", "value"}],
         FontWeight->"Bold"]}], 
       RowBox[{
        StyleBox["Replace",
         FontFamily->"Times"], 
        StyleBox[" ",
         FontFamily->"Times"], 
        StyleBox["x",
         FontWeight->"Bold"], 
        StyleBox[" ",
         FontFamily->"Times",
         FontSlant->"Italic"], 
        StyleBox["with",
         FontFamily->"Times"], 
        StyleBox[" ",
         FontFamily->"Times"], 
        StyleBox["value",
         FontWeight->"Bold"], 
        StyleBox[" ",
         FontWeight->"Bold"], 
        StyleBox["everywhere",
         FontFamily->"Times"], 
        StyleBox[" ",
         FontFamily->"Times"], 
        StyleBox["in",
         FontFamily->"Times"], 
        StyleBox[" ",
         FontFamily->"Times"], 
        StyleBox["the",
         FontFamily->"Times"], 
        StyleBox[" ",
         FontFamily->"Times"], 
        StyleBox["expression",
         FontFamily->"Times"], 
        StyleBox[" ",
         FontFamily->"Times"], 
        StyleBox["expr",
         FontWeight->"Bold"]}]},
      {
       RowBox[{
        StyleBox[" ",
         FontFamily->"Times",
         FontSlant->"Italic"], 
        StyleBox[
         RowBox[{"expr", 
          StyleBox["/.",
           FontFamily->"Courier"], 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"x", "  ", "\[Rule]", "xval"}], 
            StyleBox[",",
             FontFamily->"Times"], 
            RowBox[{"y", "  ", "\[Rule]", "yval"}], 
            StyleBox[" ",
             FontFamily->"Times",
             FontSlant->"Italic"], 
            StyleBox[",",
             FontFamily->"Times"], 
            StyleBox["\[Ellipsis]",
             FontFamily->"Times"]}], "}"}]}],
         FontWeight->"Bold"]}], 
       StyleBox[
        RowBox[{
        "Perform", " ", "several", " ", "replacements", " ", "at", " ", 
         "once"}],
        FontFamily->"Times"]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[1.9599999999999997`]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}]}
  }]]]], "Text",
 CellFrame->True,
 Background->GrayLevel[0.849989],
 CellTags->"Table 9.15"]
}, Closed]],

Cell[CellGroupData[{

Cell["9.8.3 Defining Functions", "Subsubtitle",
 CellTags->{"i:19", "c:40"}],

Cell[CellGroupData[{

Cell["Functions of One Variable", "Section",
 CellTags->"c:41"],

Cell[TextData[{
 "If you need to evaluate an expression like ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["x", "2"], "+", 
    RowBox[{"2", "x"}], "+", "3"}], TraditionalForm]]],
 " many times at different values of the variable, you can save typing in all \
those ",
 StyleBox["/.",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " and ",
 StyleBox["\[Rule]",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 "  symbols by creating your own function, ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"f", "(", "x", ")"}], " ", "=", " ", 
    RowBox[{
     SuperscriptBox["x", "2"], "+", 
     RowBox[{"2", "x"}], "+", "3"}]}], TraditionalForm]]],
 ". Then to evaluate the function at ",
 Cell[BoxData[
  FormBox[
   RowBox[{"x", "=", "2", " "}], TraditionalForm]]],
 "you need only type ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    RowBox[{
     StyleBox["f",
      FontSlant->"Plain"], "[", "2", "]"}],
    FontFamily->"Courier",
    FontWeight->"Bold"], TraditionalForm]]],
 ".  To define this function type"
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"f", "[", "x_", "]"}], " ", "=", " ", 
  RowBox[{
   RowBox[{"x", "^", "2"}], "+", 
   RowBox[{"2", "x"}], "+", "3"}]}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.116"],

Cell[BoxData[
 RowBox[{"3", "+", 
  RowBox[{"2", " ", "x"}], "+", 
  SuperscriptBox["x", "2"]}]], "Output",
 CellChangeTimes->{3.446517276686809*^9},
 CellTags->"Cell 9.112"]
}, Open  ]],

Cell[TextData[{
 "You can now evaluate this function for any value of ",
 Cell[BoxData[
  FormBox["x", TraditionalForm]]],
 ":"
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"f", "[", "2", "]"}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.117"],

Cell[BoxData["11"], "Output",
 CellChangeTimes->{3.446517298713819*^9},
 CellTags->"Cell 9.113"]
}, Open  ]],

Cell[TextData[{
 "The underscore in the definition of ",
 Cell[BoxData[
  FormBox[
   RowBox[{"f", "(", "x", ")"}], TraditionalForm]]],
 " is very important. The notation ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    StyleBox[
     StyleBox[
      RowBox[{
       StyleBox["x",
        FontSlant->"Plain"], 
       StyleBox["_",
        FontSlant->"Italic"]}]],
     FontFamily->"Courier",
     FontWeight->"Bold"], "  "}], TraditionalForm]]],
 "means the following: treat ",
 Cell[BoxData[
  FormBox[
   StyleBox["x",
    FontFamily->"Courier",
    FontWeight->"Bold",
    FontSlant->"Plain"], TraditionalForm]]],
 " as a stand-in for ",
 StyleBox["any",
  FontSlant->"Italic"],
 " number, variable, or expression. To understand what this implies, let's \
see what happens if we leave out the underscore, defining a new function ",
 Cell[BoxData[
  FormBox[
   RowBox[{"g", "(", "x", ")"}], TraditionalForm]]],
 " as"
}], "Text",
 CellChangeTimes->{{3.446518231159794*^9, 3.446518231159953*^9}},
 CellTags->"i:66"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"g", "[", "x", "]"}], " ", "=", " ", 
  RowBox[{"x", "^", "2"}]}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.118"],

Cell[BoxData[
 SuperscriptBox["x", "2"]], "Output",
 CellChangeTimes->{3.446517295055827*^9},
 CellTags->"Cell 9.114"]
}, Open  ]],

Cell[TextData[{
 "Then if we ask for the value of ",
 Cell[BoxData[
  FormBox["g", TraditionalForm]]],
 " at some point, we obtain the following:"
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"g", "[", "2", "]"}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.119"],

Cell[BoxData[
 RowBox[{"g", "[", "2", "]"}]], "Output",
 CellChangeTimes->{3.446517311418477*^9},
 CellTags->"Cell 9.115"]
}, Open  ]],

Cell[TextData[{
 "Typing  ",
 StyleBox["g[2]",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " just returns ",
 StyleBox["g[2]",
  FontFamily->"Courier"],
 " rather than 4, because ",
 StyleBox["g[2]",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " has not been defined. We have not defined ",
 Cell[BoxData[
  FormBox[
   RowBox[{"g", "(", "x", ")"}], TraditionalForm]]],
 " ",
 StyleBox["for any x",
  FontSlant->"Italic"],
 ". Rather, ",
 Cell[BoxData[
  FormBox[
   RowBox[{"g", "(", "x", ")"}], TraditionalForm]]],
 " is defined only when the argument is ",
 Cell[BoxData[
  FormBox["x", TraditionalForm]]],
 " itself, and no other quantity.  The underscore in ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    StyleBox[
     StyleBox[
      RowBox[{
       StyleBox["x",
        FontSlant->"Plain"], 
       StyleBox["_",
        FontSlant->"Italic"]}]],
     FontFamily->"Courier",
     FontWeight->"Bold"], "  "}], TraditionalForm]]],
 " tells ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ", \"when I type ",
 Cell[BoxData[
  FormBox[
   StyleBox["x",
    FontFamily->"Courier",
    FontWeight->"Bold",
    FontSlant->"Plain"], TraditionalForm]]],
 " here, I don't literally mean just ",
 Cell[BoxData[
  FormBox[
   StyleBox["x",
    FontFamily->"Courier",
    FontWeight->"Bold",
    FontSlant->"Plain"], TraditionalForm]]],
 ",  I mean ",
 StyleBox[" any variable, number, or expression",
  FontSlant->"Italic"],
 "\". "
}], "Text",
 CellChangeTimes->{{3.446518253024393*^9, 3.4465182579556227`*^9}}],

Cell[TextData[{
 "This distinction between ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    RowBox[{
     StyleBox["g",
      FontSlant->"Plain"], "[", 
     StyleBox["x",
      FontSlant->"Plain"], "]"}],
    FontFamily->"Courier",
    FontWeight->"Bold"], TraditionalForm]]],
 " and ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    RowBox[{
     StyleBox["g",
      FontSlant->"Plain"], "[", 
     StyleBox["x_",
      FontSlant->"Plain"], "]"}],
    FontFamily->"Courier",
    FontWeight->"Bold"], TraditionalForm]]],
 " seems like splitting hairs, but it can actually be useful. For example, \
say you want to define a function ",
 Cell[BoxData[
  FormBox[
   RowBox[{"h", "(", "x", ")"}], TraditionalForm]]],
 " that equals ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["x", "2"], TraditionalForm]]],
 " everywhere except at a specific point ",
 Cell[BoxData[
  FormBox[
   RowBox[{"x", "=", "a"}], TraditionalForm]]],
 ", where you want the function to be",
 Cell[BoxData[
  FormBox[
   RowBox[{" ", "0"}], TraditionalForm]]],
 ".  Then  type"
}], "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"h", "[", "a", "]"}], " ", "=", " ", "0"}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"h", "[", "x_", "]"}], " ", "=", " ", 
   RowBox[{"x", "^", "2"}]}], ";"}]}], "Input",
 ShowCellTags->True,
 CellChangeTimes->{{3.446517248828951*^9, 3.446517252546755*^9}},
 CellTags->"Cell 9.120"],

Cell[TextData[{
 "Evaluating the function at ",
 Cell[BoxData[
  FormBox[
   RowBox[{"x", "=", "3", " "}], TraditionalForm]]],
 " yields the correct result: "
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"h", "[", "3", "]"}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.121"],

Cell[BoxData["9"], "Output",
 CellChangeTimes->{3.4465173391581*^9},
 CellTags->"Cell 9.117"]
}, Open  ]],

Cell[TextData[{
 "Also, evaluating the function at the special point ",
 Cell[BoxData[
  FormBox[
   RowBox[{"x", "=", "a"}], TraditionalForm]]],
 " yields"
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"h", "[", "a", "]"}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.122"],

Cell[BoxData["0"], "Output",
 CellChangeTimes->{3.446517348667685*^9},
 CellTags->"Cell 9.118"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Checking the Definition of a Function", "Section",
 CellTags->"c:42"],

Cell[TextData[{
 "\tIf you want to check the definition of a user-defined function, type ",
 StyleBox["?",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 StyleBox["functionname",
  FontSlant->"Italic"],
 ", just as you would for an intrinsinc function.",
 StyleBox[" ",
  FontSlant->"Italic"],
 "For example, to check the definition of our function ",
 Cell[BoxData[
  FormBox[
   RowBox[{"h", "(", "x", ")"}], TraditionalForm]]],
 ", type"
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "h"}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.123"],

Cell[CellGroupData[{

Cell[BoxData["\<\"Global`h\"\>"], "Print"],

Cell[BoxData[
 InterpretationBox[GridBox[{
    {GridBox[{
       {
        RowBox[{
         RowBox[{"h", "[", "a", "]"}], "=", "0"}]},
       {" "},
       {
        RowBox[{
         RowBox[{"h", "[", "x_", "]"}], "=", 
         SuperscriptBox["x", "2"]}]}
      },
      BaselinePosition->{Baseline, {1, 1}},
      GridBoxAlignment->{
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}},
      GridBoxItemSize->{"Columns" -> {{
           Scaled[0.999]}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
        "RowsIndexed" -> {}}]}
   },
   BaselinePosition->{Baseline, {1, 1}},
   GridBoxAlignment->{
    "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
     "RowsIndexed" -> {}}],
  Definition[h],
  Editable->False]], "Print"]
}, Open  ]]
}, Open  ]],

Cell[TextData[{
 "Function definitions valid only at specific points like ",
 Cell[BoxData[
  FormBox[
   RowBox[{"x", "=", "a"}], TraditionalForm]]],
 " always supersede the more general definitions created by placeholders like \
",
 StyleBox["x_",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ".This is why the general definition ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    RowBox[{
     RowBox[{
      StyleBox["h",
       FontSlant->"Plain"], "[", 
      StyleBox["x_",
       FontSlant->"Plain"], "]"}], "=", 
     RowBox[{
      StyleBox["x",
       FontSlant->"Plain"], "^", "2"}]}],
    FontFamily->"Courier",
    FontWeight->"Bold"], TraditionalForm]]],
 " does not apply to ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    RowBox[{
     StyleBox["h",
      FontSlant->"Plain"], "[", 
     StyleBox["a",
      FontSlant->"Plain"], "]"}],
    FontFamily->"Courier",
    FontWeight->"Bold"], TraditionalForm]]],
 "."
}], "Text"]
}, Closed]],

Cell[CellGroupData[{

Cell["Functions of Several Variables", "Section",
 CellTags->{"i:67", "c:43"}],

Cell[TextData[{
 "\tCreating  a function with more than one argument is a straightforward \
generalization of the previous syntax. For instance, to define a function ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"p", "(", 
     RowBox[{"x", ",", "y"}], ")"}], " ", "=", " ", 
    RowBox[{"y", " ", "sin", " ", "x"}]}], TraditionalForm]]],
 ",  type"
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"p", "[", 
    RowBox[{"x_", ",", "y_"}], "]"}], " ", "=", " ", 
   RowBox[{"y", " ", 
    RowBox[{"Sin", "[", "x", "]"}]}]}], ";"}], "\n", 
 RowBox[{"p", "[", 
  RowBox[{
   RowBox[{"60", " ", "Degree"}], ",", "2"}], "]"}]}], "Input",
 ShowCellTags->True,
 CellChangeTimes->{3.503087159300521*^9},
 CellTags->"Cell 9.124"],

Cell[BoxData[
 SqrtBox["3"]], "Output"]
}, Open  ]],

Cell[TextData[{
 Cell[BoxData[GridBox[{
    {
     StyleBox[
      RowBox[{"Table", "9.16", " ", "Defining", " ", "Functions"}],
      FontSize->9]},
    {
     StyleBox[GridBox[{
        {
         StyleBox[
          RowBox[{
           RowBox[{"f", "[", "x", "]"}], "=", "expr"}],
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         RowBox[{"Define", " ", "the", " ", "function", " ", 
          StyleBox["f",
           FontSlant->"Italic"], 
          StyleBox[" ",
           FontSlant->"Italic"], "at", " ", "the", " ", "value", " ", 
          StyleBox["x",
           FontSlant->"Italic"], 
          RowBox[{"(", 
           RowBox[{"and", " ", 
            StyleBox["only",
             FontSlant->"Italic"], 
            StyleBox[" ",
             FontSlant->"Italic"], "at", " ", 
            StyleBox["x",
             FontSlant->"Italic"]}], ")"}]}]},
        {
         StyleBox[
          RowBox[{
           RowBox[{"f", "[", "x_", "]"}], "=", "expr"}],
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         RowBox[{"Define", " ", "the", " ", "function", " ", 
          StyleBox["f",
           FontSlant->"Italic"], 
          StyleBox[" ",
           FontSlant->"Italic"], "for", " ", 
          StyleBox["any",
           FontSlant->"Italic"], 
          StyleBox[" ",
           FontSlant->"Italic"], "value", " ", "of", " ", 
          StyleBox["x",
           FontSlant->"Italic"]}]},
        {
         StyleBox[
          RowBox[{"?", "f"}],
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         RowBox[{
         "Ask", " ", "for", " ", "the", " ", "definition", " ", "of", " ", 
          "a", " ", "function"}]}
       },
       GridBoxAlignment->{
        "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}},
          "RowsIndexed" -> {}},
       GridBoxSpacings->{"Columns" -> {
           Offset[0.27999999999999997`], {
            Offset[1.9599999999999997`]}, 
           Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
           Offset[0.2], {
            Offset[0.4]}, 
           Offset[0.2]}, "RowsIndexed" -> {}}],
      FontFamily->"Times"]}
   }]]],
 StyleBox["               ",
  FontSlant->"Italic"]
}], "Text",
 CellFrame->True,
 Background->GrayLevel[0.849989]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["9.8.4 Applying Functions", "Subsubtitle",
 CellTags->"c:44"],

Cell[TextData[{
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " allows you to apply functions to their argument(s) in several ways. For \
example, to evaluate ",
 Cell[BoxData[
  FormBox[
   RowBox[{"f", "(", "x", ")"}], TraditionalForm]]],
 ", you can type"
}], "Text",
 CellChangeTimes->{{3.446591353088243*^9, 3.446591353476273*^9}, {
  3.458915046708877*^9, 3.458915047337109*^9}}],

Cell[TextData[{
 "\t\t",
 Cell[BoxData[GridBox[{
    {
     StyleBox[
      RowBox[{"f", "[", "x", "]"}],
      FontFamily->"Courier",
      FontWeight->"Bold"]},
    {
     StyleBox[
      RowBox[{"x", "//", "f"}],
      FontFamily->"Courier",
      FontWeight->"Bold"]},
    {
     StyleBox[
      RowBox[{"f", "@", "x"}],
      FontFamily->"Courier",
      FontWeight->"Bold"]}
   }]],
  FontFamily->"Times"],
 "\t\t"
}], "Text"],

Cell[TextData[{
 "All three forms have their uses. For example, recall that we applied the \
second form of notation to numerical evaluations in ",
 ButtonBox["Sec. 9.1",
  BaseStyle->"Hyperlink",
  ButtonData:>"Sec. 9.1"],
 " when we used ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    RowBox[{
     StyleBox["x",
      FontSlant->"Plain"], "//", 
     StyleBox["N",
      FontSlant->"Plain"]}],
    FontFamily->"Courier",
    FontWeight->"Bold"], TraditionalForm]]],
 " rather than ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    RowBox[{
     StyleBox["N",
      FontSlant->"Plain"], "[", 
     StyleBox["x",
      FontSlant->"Plain"], "]"}],
    FontFamily->"Courier",
    FontWeight->"Bold"], TraditionalForm]]],
 ".  This \"afterthought\" form is useful when you have typed out a long \
expression and then decide to apply a function to it.  The \"forethought\" \
form ",
 StyleBox["f@x",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " will not be used much in this book, but does correspond to the theoretical \
picture of a function ",
 Cell[BoxData[
  FormBox["f", TraditionalForm]]],
 " \"acting on\" a variable ",
 Cell[BoxData[
  FormBox["x", TraditionalForm]]],
 "."
}], "Text"],

Cell[TextData[{
 "\tFor functions of two arguments, such as ",
 Cell[BoxData[
  FormBox[
   RowBox[{"p", "(", 
    RowBox[{"x", ",", "y"}], ")"}], TraditionalForm]]],
 " above, you can use the notation ",
 StyleBox["x~p~y",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ". An example of notation of this type is the + symbol. ",
 StyleBox["x+y",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " actually stands for ",
 StyleBox["x ~Plus~ y",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ", where ",
 StyleBox["Plus[x,y]",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " is the addition function. In fact, one of the basic ideas behind ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " is that ",
 StyleBox["any",
  FontSlant->"Italic"],
 " mathematical operation can be thought of  as a function acting on \
arguments. "
}], "Text",
 CellChangeTimes->{{3.446591369463188*^9, 3.4465913697926893`*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["9.8.5 Delayed Evaluation of Functions", "Subsubtitle",
 CellTags->{"i:68", "c:45"}],

Cell[TextData[{
 "Sometimes a function can't be evaluated by ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " until a specific value of the argument is given. For instance, this \
happens when you deal with functions that require specific numerical inputs. \
Say, for example, that you wish to define a function ",
 Cell[BoxData[
  FormBox[
   RowBox[{"f", "(", "x", ")"}], TraditionalForm]]],
 " that plots the function ",
 Cell[BoxData[
  FormBox[
   RowBox[{"sin", " ", "y"}], TraditionalForm]]],
 " on the interval ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"-", "x"}], "<", "y", "<", "x"}], TraditionalForm]]],
 ". To do so you might type"
}], "Text",
 CellChangeTimes->{{3.446591391369443*^9, 3.446591433798087*^9}}],

Cell[CellGroupData[{

Cell["f[x_] = Plot[Sin[y], {y, -x, x}]", "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.125"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Plot", "::", "\<\"plln\"\>"}], ":", 
  " ", "\<\"\\!\\(\\*StyleBox[\\\"\\\\\\\"Limiting value \\\\\\\"\\\", \\\"MT\
\\\"]\\)\[NoBreak]\\!\\(\\*StyleBox[\\!\\(-x\\), \
\\\"MT\\\"]\\)\[NoBreak]\\!\\(\\*StyleBox[\\\"\\\\\\\" in \\\\\\\"\\\", \
\\\"MT\\\"]\\)\[NoBreak]\\!\\(\\*StyleBox[\\!\\({y, \\(\\(-x\\)\\), x}\\), \\\
\"MT\\\"]\\)\[NoBreak]\\!\\(\\*StyleBox[\\\"\\\\\\\" is not a machine-size \
real number.\\\\\\\"\\\", \\\"MT\\\"]\\) \\!\\(\\*ButtonBox[\\\"\
\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/General/plln\\\", ButtonNote -> \
\\\"Plot::plln\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.44651843956628*^9},
 CellTags->"Cell 9.122"],

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"Sin", "[", "y", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"y", ",", 
     RowBox[{"-", "x"}], ",", "x"}], "}"}]}], "]"}]], "Output",
 CellChangeTimes->{3.446518439640609*^9},
 CellTags->"Cell 9.122"]
}, Open  ]],

Cell[TextData[{
 "However, as you can see, that won\[CloseCurlyQuote]t work. Remember from ",
 ButtonBox["Sec. 9.1",
  BaseStyle->"Hyperlink",
  ButtonData:>"Sec. 9.1"],
 " what the ",
 StyleBox["=",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " sign means: it means, evaluate the right-hand side and assign the result \
to the symbol on the ",
 "left-hand",
 " side. Here, however, the right-hand side cannot be evaluated, because no \
particular numerical value for ",
 Cell[BoxData[
  FormBox[
   StyleBox["x",
    FontFamily->"Courier",
    FontWeight->"Bold",
    FontSlant->"Plain"], TraditionalForm]]],
 " has been specified."
}], "Text"],

Cell[TextData[{
 "\tTo get around this problem, you must use a different type of equal \
sign,",
 StyleBox[" :=",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " , which means \"delayed equal\". With this delayed equal sign, ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " remembers that a function has been defined, but does not evaluate the \
right-hand side until the function is actually called."
}], "Text",
 CellChangeTimes->{{3.446591458691225*^9, 3.4465914724010267`*^9}}],

Cell[TextData[{
 "\tUsing delayed evaluation allows us to define ",
 Cell[BoxData[
  FormBox[
   RowBox[{"f", "(", "x", ")"}], TraditionalForm]]],
 " as"
}], "Text",
 CellChangeTimes->{{3.446591484345579*^9, 3.446591507660233*^9}, 
   3.514143002781315*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"f", "[", "x_", "]"}], " ", ":=", " ", 
  RowBox[{"Plot", "[", 
   RowBox[{
    RowBox[{"Sin", "[", "y", "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"y", ",", 
      RowBox[{"-", "x"}], ",", "x"}], "}"}]}], "]"}]}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.126"],

Cell[TextData[{
 "There is no result plotted because there has been no evaluation of the \
right-hand side yet.  However, if we now ask for ",
 Cell[BoxData[
  FormBox["f", TraditionalForm]]],
 " at a particular value of ",
 Cell[BoxData[
  FormBox["x", TraditionalForm]]],
 ", ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " recalls the definition and performs the evaluation, as shown in Cell ",
 ButtonBox["9.127",
  BaseStyle->"Hyperlink",
  ButtonData:>"Cell 9.127"],
 ". "
}], "Text",
 CellChangeTimes->{{3.446518480506538*^9, 3.446518489264674*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"f", "[", "5", "]"}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.127"],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {Hue[0.67, 0.6, 0.6], LineBox[CompressedData["
1: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

     "]]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  AxesOrigin->{0, 0},
  PlotRange->{{-5, 5}, {-0.999999987301805, 0.9999999723133323}},
  PlotRangeClipping->True,
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02]}]], "Output",
 CellTags->"Cell 9.124"]
}, Open  ]],

Cell[TextData[{
 "The distinction between ",
 StyleBox["=",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " and ",
 StyleBox[":=",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 "  is summarized in Table ",
 ButtonBox["9.17",
  BaseStyle->"Hyperlink",
  ButtonData:>"Table 9.17"],
 "."
}], "Text",
 CellChangeTimes->{{3.4465915504885073`*^9, 3.4465915829249496`*^9}, {
  3.446591619727406*^9, 3.44659165785846*^9}}],

Cell[TextData[{
 Cell[BoxData[GridBox[{
    {
     StyleBox[
      RowBox[{
       RowBox[{
       "Table", "9.17", " ", "The", " ", "Difference", " ", "Between"}], "  ", 
       StyleBox["=",
        FontFamily->"Courier",
        FontWeight->"Bold"], " ", 
       RowBox[{"and", " ", 
        StyleBox[":=",
         FontFamily->"Courier",
         FontWeight->"Bold"]}]}],
      FontSize->9]},
    {GridBox[{
       {
        StyleBox[
         RowBox[{
          RowBox[{"f", "[", "x_", "]"}], "=", "expr"}],
         FontWeight->"Bold"], 
        RowBox[{
         StyleBox["immediately",
          FontFamily->"Times"], 
         StyleBox[" ",
          FontFamily->"Times"], 
         StyleBox["evaluate",
          FontFamily->"Times"], 
         StyleBox[" ",
          FontFamily->"Times"], 
         StyleBox["expr",
          FontWeight->"Bold"], 
         StyleBox[" ",
          FontWeight->"Bold"], 
         StyleBox["and",
          FontFamily->"Times"], 
         StyleBox[" ",
          FontFamily->"Times"], 
         StyleBox["define",
          FontFamily->"Times"], 
         StyleBox[" ",
          FontFamily->"Times"], 
         StyleBox[
          RowBox[{"f", "[", "x", "]"}],
          FontWeight->"Bold"]}]},
       {
        StyleBox[
         RowBox[{
          RowBox[{"f", "[", "x_", "]"}], ":=", " ", "expr"}],
         FontWeight->"Bold"], 
        RowBox[{
         RowBox[{
          StyleBox["remember",
           FontFamily->"Times"], 
          StyleBox[" ",
           FontFamily->"Times"], 
          StyleBox["this",
           FontFamily->"Times"], 
          StyleBox[" ",
           FontFamily->"Times"], 
          StyleBox["definition",
           FontFamily->"Times"], 
          StyleBox[" ",
           FontFamily->"Times"], 
          StyleBox["of",
           FontFamily->"Times"], 
          StyleBox[" ",
           FontFamily->"Times"], 
          StyleBox["f",
           FontWeight->"Bold"]}], 
         StyleBox[",",
          FontFamily->"Times"], 
         StyleBox[" ",
          FontFamily->"Times"], 
         RowBox[{
          StyleBox["but",
           FontFamily->"Times"], 
          StyleBox[" ",
           FontFamily->"Times"], 
          StyleBox["do",
           FontFamily->"Times"], 
          StyleBox[" ",
           FontFamily->"Times"], 
          StyleBox["not",
           FontFamily->"Times"], 
          StyleBox[" ",
           FontFamily->"Times"], 
          StyleBox["evaluate",
           FontFamily->"Times"], 
          StyleBox[" ",
           FontFamily->"Times"], 
          StyleBox["expr",
           FontWeight->"Bold"], 
          StyleBox[" ",
           FontFamily->"Times",
           FontSlant->"Italic"], 
          StyleBox["until",
           FontFamily->"Times"], 
          StyleBox[" ",
           FontFamily->"Times"], 
          StyleBox[
           RowBox[{"f", "[", "x", "]"}],
           FontWeight->"Bold"], 
          StyleBox["  ",
           FontFamily->"Times"], 
          StyleBox["is",
           FontFamily->"Times"], 
          StyleBox[" ",
           FontFamily->"Times"], 
          StyleBox["used",
           FontFamily->"Times"]}]}]}
      },
      GridBoxAlignment->{
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[1.9599999999999997`]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}]}
   }]]],
 StyleBox["\t\t",
  FontSlant->"Italic"]
}], "Text",
 CellFrame->True,
 Background->GrayLevel[0.849989],
 CellTags->"Table 9.17"]
}, Closed]],

Cell[CellGroupData[{

Cell["9.8.6 Putting Conditions on Function Definitions", "Subsubtitle",
 CellTags->{"i:69", "c:46"}],

Cell[TextData[{
 "Special procedures are necessary when defining discontinuous functions. For \
example, consider the ",
 ButtonBox["Heaviside",
  BaseStyle->"Hyperlink",
  ButtonData:>{
    URL["http://www-groups.dcs.st-and.ac.uk/~history/Mathematicians/Heaviside.\
html"], None}],
 " step  function"
}], "Text",
 CellTags->"i:123"],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"h", "(", "x", ")"}], "=", 
    TagBox[
     StyleBox[
      RowBox[{"{", 
       StyleBox[GridBox[{
          {"0"},
          {"1"}
         }],
        ShowAutoStyles->True]}],
      ShowAutoStyles->False],
     #& ]}], TraditionalForm]]],
 " ",
 Cell[BoxData[
  FormBox[GridBox[{
     {
      RowBox[{",", " ", 
       RowBox[{"x", "<", "0"}]}]},
     {
      RowBox[{",", " ", 
       RowBox[{"x", ">", " ", "0"}]}]}
    }], TraditionalForm]]]
}], "NE2",
 CellTags->{"(9.8.1)", "i:106"}],

Cell[TextData[{
 "In order to create a user-defined version of this function in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ",  ",
 StyleBox["condition statements",
  FontSlant->"Italic"],
 " can be used:"
}], "Text",
 CellChangeTimes->{{3.458915239823676*^9, 3.4589152557315397`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"h", "[", "x_", "]"}], " ", ":=", " ", 
  RowBox[{"1", " ", "/;", " ", 
   RowBox[{"x", ">", "0"}]}]}], "\n", 
 RowBox[{
  RowBox[{"h", "[", "x_", "]"}], " ", ":=", " ", 
  RowBox[{"0", " ", "/;", " ", 
   RowBox[{"x", "<", "0"}]}]}]}], "Input",
 ShowCellTags->True,
 CellChangeTimes->{3.5030812302339487`*^9},
 CellTags->"Cell 9.128"],

Cell[TextData[{
 "The symbol ",
 StyleBox["/;",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " means \"on condition that\" and is followed by logical statements limiting \
the range of validity of the definition. Note that we have used  delayed \
equal signs ",
 StyleBox[":=",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 "  in the definitions, because the conditions cannot be evaluated until \
specific values of ",
 StyleBox["x",
  FontSlant->"Italic"],
 " are chosen."
}], "Text"],

Cell[TextData[{
 "\tAlso, note that we have not defined ",
 Cell[BoxData[
  FormBox[
   RowBox[{"h", "(", "x", ")"}], TraditionalForm]]],
 " at ",
 StyleBox["x",
  FontSlant->"Italic"],
 "=0. Normally that doesn't matter, but in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " you will not get a numerical result if you evaluate ",
 Cell[BoxData[
  FormBox[
   RowBox[{"h", "(", "0", ")"}], TraditionalForm]]],
 ". So it is probably best to define ",
 Cell[BoxData[
  FormBox[
   RowBox[{"h", "(", "0", ")"}], TraditionalForm]]],
 ", taking, say, ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"h", "(", "0", ")"}], " ", "=", " ", 
    RowBox[{"1", "/", "2"}]}], TraditionalForm]]],
 ":"
}], "Text",
 CellChangeTimes->{{3.446591747431239*^9, 3.446591763462658*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"h", "[", "0", "]"}], " ", "=", " ", 
  RowBox[{"1", "/", "2"}]}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.129"],

Cell[BoxData[
 FractionBox["1", "2"]], "Output",
 CellTags->"Cell 9.127"]
}, Open  ]],

Cell[TextData[{
 " You can now evaluate ",
 Cell[BoxData[
  FormBox[
   RowBox[{"h", "(", "x", ")"}], TraditionalForm]]],
 " anywhere on the real line. (What do you think would happen if you \
evaluated",
 Cell[BoxData[
  FormBox[
   RowBox[{" ", 
    RowBox[{"h", "(", "x", ")"}]}], TraditionalForm]]],
 " at a complex number?) In Cell ",
 ButtonBox["9.130",
  BaseStyle->"Hyperlink",
  ButtonData:>"Cell 9.130"],
 " we plot the function (with a slightly thickened line for ease of \
viewing)."
}], "Text",
 CellChangeTimes->{{3.446591770383953*^9, 3.446591792107237*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"h", "[", "x", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "2"}], ",", "2"}], "}"}], ",", 
   RowBox[{"PlotStyle", "\[Rule]", 
    RowBox[{"Thickness", "[", "0.015", "]"}]}]}], "]"}]], "Input",
 ShowCellTags->True,
 CellChangeTimes->{3.4465185737680273`*^9},
 CellTags->"Cell 9.130"],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {Hue[0.67, 0.6, 0.6], Thickness[0.015], LineBox[CompressedData["
1:eJxF1H1QywEYB/BVdpKs1RFdlvSmVqIX6yos5CVUCmeu62Wc5rZc3a4UucyE
cqibtzBvtzrCRcrLKEN2VklaaWrF1ZSRZr0s21A47vt77p577vPXc9+75565
29Ljd1iSSKSkP/13+jMdv0xMTMhI/yvd5F5gMhO+UxXgNWIgHOgdva1/gHCI
fX7nKxXhCM1Qw7nbhOOPNN0MSiac3Zy/i/NkHG5rm/rlGfsXTHuaPj1k9k/4
Hu8F2a7bDKccC9B3CE2wUZRbIGMaYQnlvVNJzxgsXhvAby00wMI0do5P1Cic
a3Ujmz84DLMFzR7t14fg07V9JWKuHn70wdv2lpsOdqdGLN90aQC+Sy/g9mq0
8Ad5pSuD0Q/3+Z0OlN3XwPZ55Qx/ix7Yj/HNr2ykCz4YOfhGmqOCZ2yqKN46
U0nsG5PbKTwa4DJ13/HP+U/gzn2Oly8GEaa4rL4T11sL7065rpQyCa/q4848
an4Ma3XfrtAzpDDd0lzFS6iGkyR0+RwbwqLIhPbWh1Ww+XCNMdyRcOPU/Uts
Wyrhd3TrE1uPV8CJcbOr1dtL4a8jhtCsFxJ435lmGcWTsFgtbFzWfxWublTK
Y1suwbdH09y1nafg16GuC5zFJ2FdXmtYTKIIZjlklu6UFcEbwymWFvWHiHzy
TCfOuoPwm1j1wqYmAXxBsUEWWJYNz+qm6cbL+bCv5m3omUQe7GWbcdafw4YF
bd5tznXRxD3YdXPJ84OZ/6Rntg8JL1ONLFgfO284nZ8K555c1cALzoAF3Ftp
rfS9cJ1r4ZGLVCGs+K7zIU8+BnM49NT74yI4bWmxtYtBDEttct8+z5LA9VXJ
kZWF1fCiXguXAywZ7K5/bAp7Xg9HSTqaYlhKeGW0g5XhngouSlYJFj7ogl/G
0KZtcOiBB+fOyFOe18BZmb7sIsd+WNVFjU9VaOGUPYs/TV4/QOT3DTlaR9bB
XlNqtKVr9DCthreSXDAEk8yW5fzeYfh7XG2S3HMUVgcnO3vmG+CMLVR7t64x
2OnUR9YkmhGuSLhybSTHBG9Zsn+NotYMVybtcgv7+QM22qywkm7+Bce3hDNo
JeNwhLVPMWX9BPz/n8O/ARxLvh4=
     "]]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  AxesOrigin->{0, 0},
  PlotRange->{{-2, 2}, {0., 1.}},
  PlotRangeClipping->True,
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02]}]], "Output",
 CellTags->"Cell 9.127"]
}, Open  ]],

Cell[TextData[{
 "Table ",
 ButtonBox["9.18",
  BaseStyle->"Hyperlink",
  ButtonData:>"Table 9.18"],
 " summarized some of the conditions one can add to function definitions. "
}], "Text"],

Cell[TextData[Cell[BoxData[GridBox[{
   {
    RowBox[{"                  ", 
     RowBox[{
      StyleBox[
       RowBox[{
       "Table", "9.18", " ", "Adding", " ", "Conditions", " ", "to", " ", 
        "Function", " ", "Definitions"}],
       FontSize->9], "\[IndentingNewLine]"}]}]},
   {
    StyleBox[GridBox[{
       {
        RowBox[{
         StyleBox[
          RowBox[{"f", "[", "x_", "]"}],
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         StyleBox[":=",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         RowBox[{
          StyleBox["expr",
           FontFamily->"Courier",
           FontWeight->"Bold"], 
          StyleBox[" ",
           FontFamily->"Courier",
           FontWeight->"Bold"], 
          StyleBox["/;",
           FontFamily->"Courier",
           FontWeight->"Bold"], 
          StyleBox["conditions",
           FontSlant->"Italic"]}]}], 
        RowBox[{
        "Adds", " ", "conditions", " ", "to", " ", "the", " ", "definition", 
         " ", "of", " ", "a", " ", "function"}]}
      },
      GridBoxAlignment->{
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[1.26]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}],
     FontFamily->"Times"]},
   {
    RowBox[{"\[IndentingNewLine]", 
     StyleBox[
      RowBox[{"some", " ", "possible", " ", 
       RowBox[{"conditions", ":"}]}],
      FontFamily->"Times"]}]},
   {
    StyleBox[GridBox[{
       {
        StyleBox[
         RowBox[{"x", "==", "y"}],
         FontFamily->"Courier",
         FontWeight->"Bold"], 
        RowBox[{"Test", " ", "whether", " ", 
         StyleBox["x",
          FontSlant->"Italic"], 
         StyleBox[" ",
          FontSlant->"Italic"], "equals", " ", 
         StyleBox["y",
          FontSlant->"Italic"]}]},
       {
        StyleBox[
         RowBox[{"x", " ", "\[NotEqual]", "y"}],
         FontFamily->"Courier",
         FontWeight->"Bold"], 
        RowBox[{"Test", " ", "whether", " ", 
         StyleBox["x",
          FontSlant->"Italic"], 
         StyleBox[" ",
          FontSlant->"Italic"], "is", " ", "unequal", " ", "to", " ", 
         StyleBox["y",
          FontSlant->"Italic"]}]},
       {
        StyleBox[
         RowBox[{"x", " ", ">", "y"}],
         FontFamily->"Courier",
         FontWeight->"Bold"], 
        RowBox[{"Test", " ", "whether", " ", 
         StyleBox["x",
          FontSlant->"Italic"], 
         StyleBox[" ",
          FontSlant->"Italic"], "is", " ", "greater", " ", "than", " ", 
         StyleBox["y",
          FontSlant->"Italic"]}]},
       {
        StyleBox[
         RowBox[{"x", " ", "\[GreaterEqual]", "y"}],
         FontFamily->"Courier",
         FontWeight->"Bold"], 
        RowBox[{"Test", " ", "whether", " ", 
         StyleBox["x",
          FontSlant->"Italic"], 
         StyleBox[" ",
          FontSlant->"Italic"], "is", " ", "greater", " ", "than", " ", "or", 
         " ", "equal", " ", "to", " ", 
         StyleBox["y",
          FontSlant->"Italic"]}]},
       {
        StyleBox[
         RowBox[{"x", " ", "<", " ", "y", 
          StyleBox["  ",
           FontSlant->"Italic"]}],
         FontFamily->"Courier",
         FontWeight->"Bold"], 
        RowBox[{"Test", " ", "whether", " ", 
         StyleBox["x",
          FontSlant->"Italic"], 
         StyleBox[" ",
          FontSlant->"Italic"], "is", " ", "less", " ", "than", " ", 
         StyleBox["y",
          FontSlant->"Italic"]}]},
       {
        StyleBox[
         RowBox[{"x", " ", "\[LessEqual]", "y"}],
         FontFamily->"Courier",
         FontWeight->"Bold"], 
        RowBox[{"Test", " ", "whether", " ", 
         StyleBox["x",
          FontSlant->"Italic"], 
         StyleBox[" ",
          FontSlant->"Italic"], "is", " ", "less", " ", "than", " ", "or", 
         " ", "equal", " ", "to", " ", 
         StyleBox["y",
          FontSlant->"Italic"]}]},
       {
        RowBox[{
         StyleBox[
          SubscriptBox["condition", 
           RowBox[{" ", "1"}]],
          FontSlant->"Italic"], 
         StyleBox["&&",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         StyleBox[
          SubscriptBox["condition", "2"],
          FontSlant->"Italic"]}], 
        RowBox[{"Test", " ", "whether", " ", "both", " ", 
         StyleBox[
          SubscriptBox["condition", 
           RowBox[{" ", "1"}]],
          FontSlant->"Italic"], " ", "and", 
         StyleBox[" ",
          FontSlant->"Italic"], 
         StyleBox[
          SubscriptBox["condition", 
           RowBox[{" ", "2"}]],
          FontSlant->"Italic"], " ", "are", " ", "true"}]},
       {
        RowBox[{
         StyleBox[
          SubscriptBox["condition", 
           RowBox[{" ", "1"}]],
          FontSlant->"Italic"], 
         StyleBox["||",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         StyleBox[
          SubscriptBox["condition", 
           RowBox[{" ", "2"}]],
          FontSlant->"Italic"]}], 
        RowBox[{"Test", " ", "whether", " ", "either", " ", 
         StyleBox[
          SubscriptBox["condition", 
           RowBox[{" ", "1"}]],
          FontSlant->"Italic"], " ", "or", 
         StyleBox[" ",
          FontSlant->"Italic"], 
         StyleBox[
          SubscriptBox["condition", 
           RowBox[{" ", "2"}]],
          FontSlant->"Italic"], " ", "is", " ", "true"}]}
      },
      GridBoxAlignment->{
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[1.26]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}],
     FontFamily->"Times"]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}}]]]], "Text",
 CellFrame->True,
 CellChangeTimes->{{3.4700855783987617`*^9, 3.4700855876211853`*^9}},
 Background->GrayLevel[0.849989],
 CellTags->{"i:111", "Table 9.18"}],

Cell[TextData[{
 "The conditions in Table ",
 ButtonBox["9.18",
  BaseStyle->"Hyperlink",
  ButtonData:>"Table 9.18"],
 " are also referred to as ",
 StyleBox["logical statements",
  FontSlant->"Italic"],
 ". Logical statements are either true or false. For instance, if ",
 Cell[BoxData[
  FormBox[
   RowBox[{"x", "=", "1"}], TraditionalForm]]],
 " and ",
 Cell[BoxData[
  FormBox[
   RowBox[{"y", "=", "0"}], TraditionalForm]]],
 ", the statement ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    RowBox[{
     StyleBox["x",
      FontSlant->"Plain"], "\[Equal]", 
     StyleBox["y",
      FontSlant->"Plain"]}],
    FontFamily->"Courier",
    FontWeight->"Bold"], TraditionalForm]]],
 " returns ",
 StyleBox["False",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ":"
}], "Text",
 CellTags->"i:80"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"x", "=", "1"}], ";", " ", 
  RowBox[{"y", "=", "0"}], ";"}], "\n", 
 RowBox[{"x", "\[Equal]", "y"}]}], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.131"],

Cell[BoxData["False"], "Output",
 CellChangeTimes->{3.44651863714491*^9},
 CellTags->"Cell 9.128"]
}, Open  ]],

Cell["\<\
We will see later that logical expressions are used in many other ways, such \
as in the control of computer programs.\
\>", "Text",
 CellChangeTimes->{{3.4465918247026367`*^9, 3.446591852095847*^9}, 
   3.541766494651024*^9}],

Cell[TextData[{
 "A second way to add conditions to function definitions is to use ",
 StyleBox["Piecewise",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ". A function defined by ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    StyleBox["Piecewise",
     FontFamily->"Courier",
     FontWeight->"Bold"], 
    StyleBox["[",
     FontFamily->"Courier",
     FontWeight->"Bold"], 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        StyleBox["val1",
         FontSlant->"Italic"], ",", 
        StyleBox["cond1",
         FontSlant->"Italic"]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        StyleBox["val2",
         FontSlant->"Italic"], ",", 
        StyleBox["cond2",
         FontSlant->"Italic"]}], "}"}], ",", "..."}], "}"}], 
    StyleBox["]",
     FontFamily->"Courier",
     FontWeight->"Bold"]}], TraditionalForm]]],
 " takes the value ",
 StyleBox["val1",
  FontSlant->"Italic"],
 " when condition ",
 StyleBox["cond1",
  FontSlant->"Italic"],
 " is met, ",
 StyleBox["val2",
  FontSlant->"Italic"],
 " when condition ",
 StyleBox["cond2",
  FontSlant->"Italic"],
 " is met, and so on. A function defined using ",
 StyleBox["Piecewise",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " can often be integrated and differentiated using ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " when the same function defined using the ",
 StyleBox["/;",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " notation cannot (see the next section on Calculus).  \n\tFor example, the \
previous step function can also be defined as"
}], "Text",
 CellChangeTimes->{{3.503080515413946*^9, 3.503080553054172*^9}, {
  3.503080594389092*^9, 3.50308061963166*^9}, {3.503080660100061*^9, 
  3.5030807600317717`*^9}, {3.503080812738996*^9, 3.503080833887941*^9}, {
  3.5030808669524593`*^9, 3.503080955265196*^9}, {3.5030809948873453`*^9, 
  3.503081100494529*^9}, {3.503081163896872*^9, 3.503081165089086*^9}, {
  3.503081422336359*^9, 3.503081440332724*^9}},
 CellTags->"i:Piecewise"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "h", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"h", "[", "x_", "]"}], " ", "=", " ", 
  RowBox[{"Piecewise", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", 
       RowBox[{"x", ">", "0"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", 
       RowBox[{"x", "<", "0"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"1", "/", "2"}], ",", 
       RowBox[{"x", "\[Equal]", "0"}]}], "}"}]}], "}"}], "]"}]}]}], "Input",
 ShowCellTags->True,
 CellChangeTimes->{{3.503081105829604*^9, 3.503081160762542*^9}},
 CellTags->"Cell 9.132"],

Cell[BoxData[
 TagBox[GridBox[{
    {"\[Piecewise]", GridBox[{
       {"1", 
        RowBox[{"x", ">", "0"}]},
       {"0", 
        RowBox[{"x", "<", "0"}]},
       {
        FractionBox["1", "2"], 
        RowBox[{"x", "\[Equal]", "0"}]},
       {"0", 
        TagBox["True",
         "PiecewiseDefault",
         AutoDelete->True]}
      },
      AllowedDimensions->{2, Automatic},
      Editable->True,
      GridBoxAlignment->{
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}},
      GridBoxItemSize->{
       "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
        "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.84]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}, "RowsIndexed" -> {}},
      Selectable->True]}
   },
   GridBoxAlignment->{
    "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
     "RowsIndexed" -> {}},
   GridBoxItemSize->{
    "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
     "RowsIndexed" -> {}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[0.35]}, 
       Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
       Offset[0.2], {
        Offset[0.4]}, 
       Offset[0.2]}, "RowsIndexed" -> {}}],
  "Piecewise",
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.50308117295891*^9, 3.503081365343425*^9},
 CellTags->"Cell 9.129"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Exercises for Sec. 9.8", "Subsubtitle",
 CellTags->{"Ex. 9.8", "c:47"}],

Cell[TextData[{
 StyleBox["(1)",
  FontWeight->"Bold"],
 " Use ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " to help",
 StyleBox[" ",
  FontSlant->"Italic"],
 "prove the following trigonometric identities:"
}], "Text"],

Cell[TextData[{
 StyleBox["(a)",
  FontWeight->"Bold"],
 "  ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{"2", " ", 
      RowBox[{
       SuperscriptBox["cos", "4"], "(", "x", ")"}]}], "+", 
     RowBox[{"2", " ", 
      RowBox[{
       SuperscriptBox["sin", "4"], "(", "x", ")"}]}], "+", 
     RowBox[{
      SuperscriptBox["sin", "2"], "(", 
      RowBox[{"2", " ", "x"}], ")"}]}], "=", "2"}], TraditionalForm]]],
 "."
}], "Text"],

Cell[TextData[{
 StyleBox["(b)",
  FontWeight->"Bold"],
 " ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    FractionBox[
     RowBox[{
      RowBox[{"sec", "(", "x", ")"}], "-", 
      RowBox[{"csc", "(", "x", ")"}]}], 
     RowBox[{
      RowBox[{"cot", "(", "x", ")"}], "+", 
      RowBox[{"tan", "(", "x", ")"}]}]], "=", 
    RowBox[{
     FractionBox[
      RowBox[{
       RowBox[{"tan", "(", "x", ")"}], "-", 
       RowBox[{"cot", "(", "x", ")"}]}], 
      RowBox[{
       RowBox[{"csc", "(", "x", ")"}], "+", 
       RowBox[{"sec", "(", "x", ")"}]}]], "."}]}], TraditionalForm]]]
}], "Text"],

Cell[TextData[{
 StyleBox["(c)",
  FontWeight->"Bold"],
 "  ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    FractionBox[
     RowBox[{
      RowBox[{"2", " ", 
       RowBox[{"sin", "(", 
        RowBox[{"2", " ", "x"}], ")"}]}], "-", 
      RowBox[{"sin", "(", 
       RowBox[{"4", " ", "x"}], ")"}]}], 
     RowBox[{"cos", "(", "x", ")"}]], "=", 
    RowBox[{"8", " ", 
     RowBox[{
      SuperscriptBox["sin", "3"], "(", "x", ")"}]}]}], TraditionalForm]]],
 "."
}], "Text"],

Cell[TextData[{
 StyleBox["(2)",
  FontWeight->"Bold"],
 " Factor the following polynomials:"
}], "Text"],

Cell[TextData[{
 StyleBox["(a)",
  FontWeight->"Bold"],
 " ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["x", "3"], "+", 
    RowBox[{"3", " ", 
     SuperscriptBox["x", "2"]}], "-", "4"}], TraditionalForm]]],
 "."
}], "Text"],

Cell[TextData[{
 StyleBox["(b)",
  FontWeight->"Bold"],
 " ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["x", "5"], "+", 
    RowBox[{"5", " ", 
     SuperscriptBox["x", "4"]}], "+", 
    RowBox[{"10", " ", 
     SuperscriptBox["x", "3"]}], "+", 
    RowBox[{"10", " ", 
     SuperscriptBox["x", "2"]}], "+", 
    RowBox[{"5", " ", "x"}], "+", "1"}], TraditionalForm]]],
 "."
}], "Text"],

Cell[TextData[{
 StyleBox["(c)",
  FontWeight->"Bold"],
 "  ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["x", "6"], "+", 
    RowBox[{"3", " ", 
     SuperscriptBox["x", "5"]}], "-", 
    RowBox[{"21", " ", 
     SuperscriptBox["x", "4"]}], "-", 
    RowBox[{"59", " ", 
     SuperscriptBox["x", "3"]}], "+", 
    RowBox[{"96", " ", 
     SuperscriptBox["x", "2"]}], "+", 
    RowBox[{"276", " ", "x"}], "+", "144"}], TraditionalForm]]],
 "."
}], "Text"],

Cell[TextData[{
 StyleBox["(3)",
  FontWeight->"Bold"],
 " Simplify the following equation using ",
 StyleBox["Mathematica,",
  FontSlant->"Italic"],
 " and use the result to find all real and complex solutions by hand:"
}], "Text"],

Cell[TextData[{
 "\t ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     FractionBox["1", "30"], "+", 
     FractionBox["4", 
      RowBox[{"21", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"3", " ", "z"}], "-", "1"}], ")"}]}]], "-", 
     FractionBox["3", 
      RowBox[{"26", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"2", " ", "z"}], "+", "1"}], ")"}]}]], "-", 
     FractionBox["41", 
      RowBox[{"455", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"5", " ", "z"}], "-", "4"}], ")"}]}]]}], "=", "0"}], 
   TraditionalForm]]],
 "."
}], "Text"],

Cell[TextData[{
 StyleBox["(4)",
  FontWeight->"Bold"],
 " Use a substitution command to evaluate the following functions at the \
specified values of the variables:"
}], "Text"],

Cell[TextData[{
 StyleBox["(a)",
  FontWeight->"Bold"],
 " ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"sin", " ", "x"}], " ", "+", " ", 
    RowBox[{"sin", "(", 
     RowBox[{"2", "x"}], ")"}], "+", " ", 
    RowBox[{"sin", "(", 
     RowBox[{"3", "x"}], ")"}], "+", 
    RowBox[{
     RowBox[{"sin", "(", 
      RowBox[{"4", "x"}], ")"}], "\[Ellipsis]"}], "+", 
    RowBox[{"sin", "(", 
     RowBox[{"10", " ", "x"}], ")"}]}], TraditionalForm]]],
 " at",
 Cell[BoxData[
  FormBox[
   RowBox[{" ", 
    RowBox[{"x", "=", 
     RowBox[{"20", " ", "\[Degree]"}]}]}], TraditionalForm]]],
 ". "
}], "Text"],

Cell[TextData[{
 StyleBox["(b)",
  FontWeight->"Bold"],
 " ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["x", "2"], " ", "+", " ", 
    RowBox[{"2", " ", "x", " ", "y"}], " ", "+", " ", 
    SuperscriptBox["y", "2"]}], TraditionalForm]]],
 "  at ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"x", "=", "1"}], ",", " ", 
    RowBox[{"y", "=", 
     RowBox[{"-", "1"}]}]}], TraditionalForm]]],
 "."
}], "Text"],

Cell[TextData[{
 StyleBox["(c)",
  FontWeight->"Bold"],
 " ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["x", "2"], "  ", "-", " ", 
    SuperscriptBox["y", "2"]}], TraditionalForm]]],
 " at ",
 Cell[BoxData[
  FormBox[
   RowBox[{"x", "=", "cosh\[Theta]"}], TraditionalForm]]],
 ", ",
 Cell[BoxData[
  FormBox[
   RowBox[{"y", "=", "sinh\[Theta]"}], TraditionalForm]]],
 ". (Simplify the result.)"
}], "Text"],

Cell[TextData[{
 StyleBox["(5)",
  FontWeight->"Bold"],
 " Define the following functions and, if asked,  plot them over the given \
range of values:"
}], "Text"],

Cell[TextData[{
 StyleBox["(a)",
  FontWeight->"Bold"],
 "  ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"f", "(", "x", ")"}], "=", 
    FractionBox["x", 
     RowBox[{
      SuperscriptBox["x", "2"], "+", "1"}]]}], TraditionalForm]]],
 ". Plot over",
 Cell[BoxData[
  FormBox[
   RowBox[{" ", 
    RowBox[{
     RowBox[{"-", "3"}], "<", "x", "<", "3"}]}], TraditionalForm]]],
 "."
}], "Text"],

Cell[TextData[{
 StyleBox["(b)",
  FontWeight->"Bold"],
 " ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"f", "(", 
     RowBox[{"x", ",", "y"}], ")"}], "=", 
    RowBox[{"tanh", "(", 
     FractionBox["x", "y"], ")"}]}], TraditionalForm]]],
 " .  Plot with a surface plot over ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"-", "1"}], "<", "x", "<", "1"}], TraditionalForm]]],
 ", ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"-", "1"}], "<", "y", "<", "1"}], TraditionalForm]]],
 ". What is happening along the line ",
 Cell[BoxData[
  FormBox[
   RowBox[{"y", "=", "0"}], TraditionalForm]]],
 "?"
}], "Text"],

Cell[TextData[{
 StyleBox["(c)",
  FontWeight->"Bold"],
 " ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"f", "(", 
     StyleBox["x",
      FontWeight->"Bold",
      FontSlant->"Plain"], ")"}], 
    StyleBox["=",
     FontWeight->"Plain"]}], TraditionalForm]]],
 "  dimension of the vector ",
 StyleBox["x",
  FontWeight->"Bold"],
 ".  Evaluate for",
 Cell[BoxData[
  FormBox[
   RowBox[{" ", 
    RowBox[{
     StyleBox["x",
      FontWeight->"Bold",
      FontSlant->"Plain"], "  ", "=", " ", 
     RowBox[{"(", 
      RowBox[{"2", ",", "4", ",", "3", ",", "2"}], ")"}]}]}], 
   TraditionalForm]]],
 ", and ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    StyleBox["x",
     FontWeight->"Bold",
     FontSlant->"Plain"], "=", 
    RowBox[{"(", 
     RowBox[{"1", ",", 
      RowBox[{"-", "1"}]}], ")"}]}], TraditionalForm]]],
 "."
}], "Text"],

Cell[TextData[{
 StyleBox["(d)",
  FontWeight->"Bold"],
 " ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"f", "(", "x", ")"}], " ", "=", " ", 
    TagBox[
     StyleBox[
      RowBox[{"{", GridBox[{
         {
          RowBox[{"x", ","}], 
          RowBox[{"x", "<", "0"}]},
         {GridBox[{
            {
             RowBox[{
              SuperscriptBox["x", "2"], ","}]},
            {
             RowBox[{
              RowBox[{"1", "/", 
               SuperscriptBox["x", "2"]}], ","}]}
           }], GridBox[{
            {
             RowBox[{
             "0", "\[LessEqual]", " ", "x", "\[LessEqual]", " ", "1"}]},
            {
             RowBox[{"x", ">", "1"}]}
           }]}
        }]}],
      ShowAutoStyles->False],
     #& ]}], TraditionalForm]]],
 "      Plot for ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"-", "3"}], "<", "x", "<", "3"}], TraditionalForm]]],
 "."
}], "Text"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["9.9 Calculus", "Subtitle",
 CellTags->{"Sec. 9.9", "c:48"}],

Cell["", "Text"],

Cell[CellGroupData[{

Cell["9.9.1 Derivatives", "Subsubtitle",
 CellTags->{"i:70", "c:49"}],

Cell[TextData[{
 "\tYou can take the derivative of an expression using the intrinsic function \
",
 StyleBox["D",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ". This function takes two arguments: ",
 StyleBox["D[expr, var]",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " is the derivative of the expression ",
 StyleBox["expr",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " with respect to the variable ",
 StyleBox["var",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ". For example, ",
 StyleBox["D[f[x],x]",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " means ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"\[DifferentialD]", "f"}], "/", 
    RowBox[{"\[DifferentialD]", "x"}]}], TraditionalForm]]],
 "."
}], "Text"],

Cell[TextData[{
 "\tFor instance,  if we define the function ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"f", "(", "x", ")"}], "=", 
    RowBox[{"tan", "(", 
     SuperscriptBox["x", "2"], ")"}]}], TraditionalForm]]],
 ", ",
 StyleBox["Mathematica ",
  FontSlant->"Italic"],
 "will evaluate the derivative with respect to ",
 StyleBox["x",
  FontSlant->"Italic"],
 ", using the chain rule:"
}], "Text",
 CellChangeTimes->{{3.514143183274761*^9, 3.514143276310143*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"f", "[", "x_", "]"}], " ", "=", " ", 
   RowBox[{"Tan", "[", 
    RowBox[{"x", "^", "2"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"D", "[", 
  RowBox[{
   RowBox[{"f", "[", "x", "]"}], ",", "x"}], "]"}]}], "Input",
 ShowCellTags->True,
 CellChangeTimes->{{3.514143191231238*^9, 3.5141431928306913`*^9}},
 CellTags->"Cell 9.133"],

Cell[BoxData[
 RowBox[{"2", " ", "x", " ", 
  SuperscriptBox[
   RowBox[{"Sec", "[", 
    SuperscriptBox["x", "2"], "]"}], "2"]}]], "Output",
 CellChangeTimes->{{3.4465186488962593`*^9, 3.446518678787118*^9}},
 CellTags->"Cell 9.131"]
}, Open  ]],

Cell[TextData[{
 "Another way to evaluate the derivative is to use a prime ', as in",
 Cell[BoxData[
  FormBox[
   StyleBox[
    RowBox[{" ", 
     RowBox[{
      RowBox[{
       StyleBox["f",
        FontSlant->"Plain"], "'"}], "[", 
      StyleBox["x",
       FontSlant->"Plain"], "]"}]}],
    FontFamily->"Courier",
    FontWeight->"Bold"], TraditionalForm]]],
 ":"
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"f", "'"}], "[", "x", "]"}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.134"],

Cell[BoxData[
 RowBox[{"2", " ", "x", " ", 
  SuperscriptBox[
   RowBox[{"Sec", "[", 
    SuperscriptBox["x", "2"], "]"}], "2"]}]], "Output",
 CellChangeTimes->{3.4465186861015253`*^9},
 CellTags->"Cell 9.132"]
}, Open  ]],

Cell["Multiple derivatives can be taken by adding more primes:", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"f", "''"}], "[", "x", "]"}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.135"],

Cell[BoxData[
 RowBox[{
  RowBox[{"2", " ", 
   SuperscriptBox[
    RowBox[{"Sec", "[", 
     SuperscriptBox["x", "2"], "]"}], "2"]}], "+", 
  RowBox[{"8", " ", 
   SuperscriptBox["x", "2"], " ", 
   SuperscriptBox[
    RowBox[{"Sec", "[", 
     SuperscriptBox["x", "2"], "]"}], "2"], " ", 
   RowBox[{"Tan", "[", 
    SuperscriptBox["x", "2"], "]"}]}]}]], "Output",
 CellChangeTimes->{3.4465186888580637`*^9},
 CellTags->"Cell 9.133"]
}, Open  ]],

Cell[TextData[{
 "or by using the notation ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    RowBox[{
     StyleBox["D",
      FontSlant->"Plain"], "[", 
     RowBox[{
      RowBox[{
       StyleBox["f",
        FontSlant->"Plain"], "[", 
       StyleBox["x",
        FontSlant->"Plain"], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{
        StyleBox["x",
         FontSlant->"Plain"], ",", 
        StyleBox["n",
         FontSlant->"Plain"]}], "}"}]}], "]"}],
    FontFamily->"Courier",
    FontWeight->"Bold"], TraditionalForm]]],
 ", where ",
 Cell[BoxData[
  FormBox[
   StyleBox["n",
    FontFamily->"Courier",
    FontWeight->"Bold",
    FontSlant->"Plain"], TraditionalForm]]],
 " is the order of the derivative:"
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"D", "[", 
  RowBox[{
   RowBox[{"f", "[", "x", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "4"}], "}"}]}], "]"}]], "Input",
 ShowCellTags->True,
 CellChangeTimes->{3.446518702755356*^9},
 CellTags->"Cell 9.136"],

Cell[BoxData[
 RowBox[{
  RowBox[{"96", " ", 
   SuperscriptBox["x", "2"], " ", 
   SuperscriptBox[
    RowBox[{"Sec", "[", 
     SuperscriptBox["x", "2"], "]"}], "4"]}], "+", 
  RowBox[{"24", " ", 
   SuperscriptBox[
    RowBox[{"Sec", "[", 
     SuperscriptBox["x", "2"], "]"}], "2"], " ", 
   RowBox[{"Tan", "[", 
    SuperscriptBox["x", "2"], "]"}]}], "+", 
  RowBox[{"256", " ", 
   SuperscriptBox["x", "4"], " ", 
   SuperscriptBox[
    RowBox[{"Sec", "[", 
     SuperscriptBox["x", "2"], "]"}], "4"], " ", 
   RowBox[{"Tan", "[", 
    SuperscriptBox["x", "2"], "]"}]}], "+", 
  RowBox[{"192", " ", 
   SuperscriptBox["x", "2"], " ", 
   SuperscriptBox[
    RowBox[{"Sec", "[", 
     SuperscriptBox["x", "2"], "]"}], "2"], " ", 
   SuperscriptBox[
    RowBox[{"Tan", "[", 
     SuperscriptBox["x", "2"], "]"}], "2"]}], "+", 
  RowBox[{"128", " ", 
   SuperscriptBox["x", "4"], " ", 
   SuperscriptBox[
    RowBox[{"Sec", "[", 
     SuperscriptBox["x", "2"], "]"}], "2"], " ", 
   SuperscriptBox[
    RowBox[{"Tan", "[", 
     SuperscriptBox["x", "2"], "]"}], "3"]}]}]], "Output",
 CellChangeTimes->{{3.446518695409091*^9, 3.4465187040596123`*^9}},
 CellTags->"Cell 9.134"]
}, Open  ]],

Cell[TextData[{
 "\t The derivative of a function is the function's slope. One sometimes \
needs to find extrema of functions, which are places where the slope is zero \
( ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{"\[DifferentialD]", "f"}], " ", "/", 
     RowBox[{"\[DifferentialD]", "x"}]}], " ", "=", " ", "0"}], 
   TraditionalForm]]],
 "). You can do this in ",
 StyleBox["Mathematica ",
  FontSlant->"Italic"],
 " by taking the derivative, and then manipulating the resulting expression \
to simplify it. For example, to find the extrema of ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["x", "2"], "/", 
    RowBox[{"(", 
     RowBox[{"1", "-", "x", "+", 
      SuperscriptBox["x", "2"]}], ")"}]}], TraditionalForm]]],
 ",  type the following: "
}], "Text",
 CellChangeTimes->{
  3.4465187126605053`*^9, {3.4465918928002234`*^9, 3.4465919023755608`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"D", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"x", "^", "2"}], "/", 
    RowBox[{"(", 
     RowBox[{"1", "-", "x", "+", 
      RowBox[{"x", "^", "2"}]}], ")"}]}], ",", "x"}], "]"}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.137"],

Cell[BoxData[
 RowBox[{
  RowBox[{"-", 
   FractionBox[
    RowBox[{
     SuperscriptBox["x", "2"], " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"-", "1"}], "+", 
       RowBox[{"2", " ", "x"}]}], ")"}]}], 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"1", "-", "x", "+", 
       SuperscriptBox["x", "2"]}], ")"}], "2"]]}], "+", 
  FractionBox[
   RowBox[{"2", " ", "x"}], 
   RowBox[{"1", "-", "x", "+", 
    SuperscriptBox["x", "2"]}]]}]], "Output",
 CellChangeTimes->{3.446518732793666*^9},
 CellTags->"Cell 9.135"]
}, Open  ]],

Cell["\<\
To see where the zeros of this function lie, you can simplify it via\
\>", "Text",
 CellChangeTimes->{{3.4465919132364607`*^9, 3.446591913592126*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Factor", "[", "%", "]"}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.138"],

Cell[BoxData[
 RowBox[{"-", 
  FractionBox[
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"-", "2"}], "+", "x"}], ")"}], " ", "x"}], 
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{"1", "-", "x", "+", 
      SuperscriptBox["x", "2"]}], ")"}], "2"]]}]], "Output",
 CellChangeTimes->{3.446518736491804*^9},
 CellTags->"Cell 9.136"]
}, Open  ]],

Cell[TextData[{
 "One can now see that the extrema are at ",
 Cell[BoxData[
  FormBox[
   RowBox[{"x", "=", "0"}], TraditionalForm]]],
 " and at ",
 Cell[BoxData[
  FormBox[
   RowBox[{"x", "=", "2"}], TraditionalForm]]],
 ". "
}], "Text"],

Cell[TextData[{
 " When evaluating the derivative of  a  function of several variables,  the \
derivative should be interpreted as a ",
 StyleBox["partial derivative. ",
  FontSlant->"Italic"],
 StyleBox[" ",
  FontWeight->"Bold",
  FontSlant->"Italic"],
 "For example, "
}], "Text"],

Cell[TextData[{
 "\t\t\t",
 StyleBox["D[g[x,y],x]",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " means  ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{"\[PartialD]", "g"}], "/", 
     RowBox[{"\[PartialD]", "x"}]}], 
    SubscriptBox["|", "y"]}], TraditionalForm]]],
 ","
}], "Text"],

Cell[TextData[{
 "the derivative of ",
 Cell[BoxData[
  FormBox["g", TraditionalForm]]],
 " with respect to ",
 Cell[BoxData[
  FormBox["x", TraditionalForm]]],
 ", holding ",
 Cell[BoxData[
  FormBox["y", TraditionalForm]]],
 " fixed."
}], "Text"]
}, Closed]],

Cell[CellGroupData[{

Cell["9.9.2 Power Series", "Subsubtitle",
 CellTags->{"i:71", "c:50"}],

Cell[TextData[{
 "The power series of a function ",
 Cell[BoxData[
  FormBox[
   RowBox[{"f", "(", "x", ")"}], TraditionalForm]]],
 ", taken with respect to a point ",
 Cell[BoxData[
  FormBox[
   RowBox[{"x", "=", "a"}], TraditionalForm]]],
 ", is a polynomial approximation to the function that  matches the value of \
the function and its derivatives at the given  point ",
 Cell[BoxData[
  FormBox["a", TraditionalForm]]],
 ":"
}], "Text"],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"f", "(", "x", ")"}], "\[TildeEqual]", 
       RowBox[{
        RowBox[{"f", "(", "a", ")"}], "+", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"x", "-", "a"}], ")"}], 
         RowBox[{
          SuperscriptBox["f", "\[Prime]"], "(", "a", ")"}]}], "+", 
        RowBox[{
         FractionBox["1", "2"], 
         SuperscriptBox[
          RowBox[{"(", 
           RowBox[{"x", "-", "a"}], ")"}], "2"], 
         RowBox[{
          SuperscriptBox["f", "\[DoublePrime]"], "(", "a", ")"}]}], "+"}]}], 
      "..."}], "+", 
     RowBox[{
      FractionBox["1", 
       RowBox[{"n", "!"}]], 
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{"x", "-", "a"}], ")"}], "n"], 
      FractionBox[
       RowBox[{
        SuperscriptBox["\[DifferentialD]", "n"], "f"}], 
       RowBox[{"\[DifferentialD]", 
        SuperscriptBox["x", "n"]}]]}]}], 
    SubscriptBox["|", 
     RowBox[{"x", "=", "a"}]], 
    RowBox[{"+", "..."}]}], TraditionalForm]]],
 " ."
}], "NE3",
 CellTags->"(9.9.1)"],

Cell[TextData[{
 "Equation ",
 ButtonBox["(9.9.1)",
  BaseStyle->"Hyperlink",
  ButtonData:>"(9.9.1)"],
 " is also called a ",
 ButtonBox["Taylor",
  BaseStyle->"Hyperlink",
  ButtonData:>{
    URL["http://www-groups.dcs.st-and.ac.uk/~history/Mathematicians/Taylor.\
html"], None}],
 " series for the function ",
 Cell[BoxData[
  FormBox[
   RowBox[{"f", "(", "x", ")"}], TraditionalForm]]],
 " about the point ",
 Cell[BoxData[
  FormBox["a", TraditionalForm]]],
 ". The \"approximately equal to\" sign ",
 Cell[BoxData[
  FormBox["\[TildeEqual]", TraditionalForm]]],
 " is used here because in general the expression works well only for ",
 Cell[BoxData[
  FormBox["x", TraditionalForm]]],
 " near ",
 Cell[BoxData[
  FormBox["a", TraditionalForm]]],
 ".  Even if the series keeps an infinite number of terms, it may not \
evaluate to ",
 Cell[BoxData[
  FormBox[
   RowBox[{"f", "(", "x", ")"}], TraditionalForm]]],
 " for all ",
 Cell[BoxData[
  FormBox["x", TraditionalForm]]],
 ", or may not even be defined. "
}], "Text",
 CellChangeTimes->{{3.45891554826684*^9, 3.4589156092288837`*^9}},
 CellTags->"i:116"],

Cell[TextData[{
 "\tFor example,  taking the series of ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["x", 
    RowBox[{"3", "/", "2"}]], TraditionalForm]]],
 " around ",
 Cell[BoxData[
  FormBox[
   RowBox[{"x", "=", "0", " "}], TraditionalForm]]],
 "produces a series that has undefined terms beyond the first. Using Eq. ",
 ButtonBox["(9.9.1)",
  BaseStyle->"Hyperlink",
  ButtonData:>"(9.9.1)"],
 ", we have"
}], "Text"],

Cell[TextData[{
 "\t",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SuperscriptBox["x", 
      RowBox[{"3", "/", "2"}]], " ", "\[TildeEqual]", 
     RowBox[{"0", "+", 
      RowBox[{"x", "\[CenterDot]", "0"}], " ", "+", " ", 
      RowBox[{
       FractionBox["1", "2"], 
       RowBox[{
        SuperscriptBox["x", "2"], "\[CenterDot]", "\[Infinity]"}]}], "+"}]}], 
    "..."}], TraditionalForm]]]
}], "Text"],

Cell[TextData[{
 "This series is practically useless, because the function ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["x", 
    RowBox[{"3", "/", "2"}]], TraditionalForm]]],
 " has a singular second derivative at the point ",
 Cell[BoxData[
  FormBox[
   RowBox[{"x", "=", "0"}], TraditionalForm]]],
 " where we are performing the expansion."
}], "Text"],

Cell[TextData[{
 "\tNevertheless, for smooth functions power series can be very useful \
approximations . To create a power series with ",
 Cell[BoxData[
  FormBox["M", TraditionalForm]]],
 " terms about the point ",
 Cell[BoxData[
  FormBox[
   RowBox[{"x", "=", "a"}], TraditionalForm]]],
 " of an expression ",
 StyleBox["expr",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 StyleBox[" ",
  FontSlant->"Italic"],
 ", the syntax is\n\t",
 StyleBox["Series[expr,{x,a,M}]",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 "\nFor instance, a four-term power series for ",
 Cell[BoxData[
  FormBox[
   SqrtBox[
    RowBox[{"x", "+", "1"}]], TraditionalForm]]],
 "  about ",
 Cell[BoxData[
  FormBox[
   RowBox[{"x", "=", "0"}], TraditionalForm]]],
 " is given by"
}], "Text",
 CellTags->"i:76"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"s", "=", 
  RowBox[{"Series", "[", 
   RowBox[{
    RowBox[{"Sqrt", "[", 
     RowBox[{"x", "+", "1"}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"x", ",", "0", ",", "4"}], "}"}]}], "]"}]}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.139"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"1", "+", 
   FractionBox["x", "2"], "-", 
   FractionBox[
    SuperscriptBox["x", "2"], "8"], "+", 
   FractionBox[
    SuperscriptBox["x", "3"], "16"], "-", 
   FractionBox[
    RowBox[{"5", " ", 
     SuperscriptBox["x", "4"]}], "128"], "+", 
   InterpretationBox[
    SuperscriptBox[
     RowBox[{"O", "[", "x", "]"}], "5"],
    SeriesData[$CellContext`x, 0, {}, 0, 5, 1],
    Editable->False]}],
  SeriesData[$CellContext`x, 0, {1, 
    Rational[1, 2], 
    Rational[-1, 8], 
    Rational[1, 16], 
    Rational[-5, 128]}, 0, 5, 1],
  Editable->False]], "Output",
 CellChangeTimes->{3.5030874063621063`*^9},
 CellTags->"Cell 9.138"]
}, Open  ]],

Cell[TextData[{
 "The resulting approximation to ",
 Cell[BoxData[
  FormBox[
   SqrtBox[
    RowBox[{"x", "+", "1"}]], TraditionalForm]]],
 "  is a special ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " object, a ",
 StyleBox["Series",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ", which can be seen by the ",
 Cell[BoxData[
  StyleBox[
   SuperscriptBox[
    RowBox[{"O", "[", "x", "]"}], "5"],
   FontWeight->"Bold"]]],
 " at the end of the expression. This indicates the order of the \
approximation: there is an error between the series and  ",
 Cell[BoxData[
  FormBox[
   SqrtBox["x"], TraditionalForm]]],
 " of the order of magnitude ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["x", "5"], TraditionalForm]]],
 ". In other words, if we reduce the value of ",
 Cell[BoxData[
  FormBox["x", TraditionalForm]]],
 " by a factor of ",
 Cell[BoxData[
  FormBox["2", TraditionalForm]]],
 ", the error in the above series approximation is reduced by a factor of ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["2", "5"], TraditionalForm]]],
 " (for ",
 Cell[BoxData[
  FormBox["x", TraditionalForm]]],
 " sufficiently close to ",
 Cell[BoxData[
  FormBox["0", TraditionalForm]]],
 ")."
}], "Text"],

Cell[TextData[{
 "\tAny  function that  is added to a series expression will ",
 StyleBox["automatically",
  FontSlant->"Italic"],
 " be expanded in a series to the same order of approximation. For example,  \
adding ",
 Cell[BoxData[
  FormBox[
   RowBox[{"1", "/", 
    RowBox[{"(", 
     RowBox[{"x", "+", "4"}], ")"}]}], TraditionalForm]]],
 " to this series results in a new series which is an approximation to  ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    FormBox[
     SqrtBox[
      RowBox[{"x", "+", "1"}]],
     TraditionalForm], "+", " ", 
    RowBox[{"1", "/", 
     RowBox[{"(", 
      RowBox[{"x", "+", "4"}], ")"}]}]}], TraditionalForm]]],
 StyleBox[" ",
  FontSlant->"Italic"],
 ":"
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"1", "/", 
   RowBox[{"(", 
    RowBox[{"x", "+", "4"}], ")"}]}], " ", "+", " ", "s"}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.140"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   FractionBox["5", "4"], "+", 
   FractionBox[
    RowBox[{"7", " ", "x"}], "16"], "-", 
   FractionBox[
    RowBox[{"7", " ", 
     SuperscriptBox["x", "2"]}], "64"], "+", 
   FractionBox[
    RowBox[{"15", " ", 
     SuperscriptBox["x", "3"]}], "256"], "-", 
   FractionBox[
    RowBox[{"39", " ", 
     SuperscriptBox["x", "4"]}], "1024"], "+", 
   InterpretationBox[
    SuperscriptBox[
     RowBox[{"O", "[", "x", "]"}], "5"],
    SeriesData[$CellContext`x, 0, {}, 0, 5, 1],
    Editable->False]}],
  SeriesData[$CellContext`x, 0, {
    Rational[5, 4], 
    Rational[7, 16], 
    Rational[-7, 64], 
    Rational[15, 256], 
    Rational[-39, 1024]}, 0, 5, 1],
  Editable->False]], "Output",
 CellChangeTimes->{3.446518775782337*^9},
 CellTags->"Cell 9.138"]
}, Open  ]],

Cell[TextData[{
 "Since ",
 StyleBox["Series",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " are special objects, they cannot be directly evaluated at particular \
values of ",
 Cell[BoxData[
  FormBox["x", TraditionalForm]]],
 ". If you try, you will get an error:"
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"s", "/.", 
  RowBox[{"x", "\[Rule]", "2"}]}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.141"],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"SeriesData", "::", "ssdn"}], "MessageName"], ":", 
  " ", "\<\"Attempt to evaluate a series at the number \[NoBreak]\\!\\(2\\)\
\[NoBreak]. Returning Indeterminate. \
\\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", \
ButtonFrame->None, ButtonData:>\\\"paclet:ref/message/SeriesData/ssdn\\\", \
ButtonNote -> \\\"SeriesData::ssdn\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.446518780142415*^9, 3.503087432123663*^9},
 CellTags->"Cell 9.139"],

Cell[BoxData["Indeterminate"], "Output",
 CellChangeTimes->{3.446518780215683*^9, 3.5030874321406517`*^9},
 CellTags->"Cell 9.139"]
}, Open  ]],

Cell[TextData[{
 "In order to evaluate the series at a particular value of ",
 Cell[BoxData[
  FormBox["x", TraditionalForm]]],
 ", it must first be transformed from a ",
 "series expression",
 " back to a normal expression with the command ",
 StyleBox["Normal",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ":"
}], "Text",
 CellTags->"i:77"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Normal", "[", "s", "]"}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.142"],

Cell[BoxData[
 RowBox[{"1", "+", 
  FractionBox["x", "2"], "-", 
  FractionBox[
   SuperscriptBox["x", "2"], "8"], "+", 
  FractionBox[
   SuperscriptBox["x", "3"], "16"], "-", 
  FractionBox[
   RowBox[{"5", " ", 
    SuperscriptBox["x", "4"]}], "128"]}]], "Output",
 CellTags->"Cell 9.140"]
}, Open  ]],

Cell[TextData[{
 "This approximation to ",
 Cell[BoxData[
  FormBox[
   SqrtBox[
    RowBox[{"x", "+", "1"}]], TraditionalForm]]],
 "  can now be evaluated. For example, in Cell ",
 ButtonBox["9.143",
  BaseStyle->"Hyperlink",
  ButtonData:>"Cell 9.143"],
 " we plot it and compare it to the original function ",
 Cell[BoxData[
  FormBox[
   SqrtBox[
    RowBox[{"x", "+", "1"}]], TraditionalForm]]],
 "."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Sqrt", "[", 
      RowBox[{"x", "+", "1"}], "]"}], ",", "%"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "1"}], ",", "2"}], "}"}], ",", 
   RowBox[{"PlotRange", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", "2"}], "}"}]}], ",", 
   RowBox[{"PlotStyle", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"RGBColor", "[", 
       RowBox[{"0", ",", "0", ",", "0"}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"RGBColor", "[", 
         RowBox[{"1", ",", "0", ",", "0"}], "]"}], ",", 
        RowBox[{"Dashing", "[", 
         RowBox[{"{", 
          RowBox[{"0.05", ",", "0.05"}], "}"}], "]"}]}], "}"}]}], "}"}]}]}], 
  "]"}]], "Input",
 ShowCellTags->True,
 CellChangeTimes->{3.446518799434868*^9},
 CellTags->"Cell 9.143"],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {RGBColor[0, 0, 0], LineBox[CompressedData["
1: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
R+NQJo9iGAbxJUk93Gc0/gUk+qOz
     "]]}, 
   {RGBColor[1, 0, 0], Dashing[{0.05, 0.05}], LineBox[CompressedData["
1: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
h2nOhjkCAhT+D/Xu6mw=
     "]]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  AxesOrigin->{0, 0},
  PlotRange->{{-1, 2}, {0, 2}},
  PlotRangeClipping->True,
  PlotRangePadding->{
    Scaled[0.02], Automatic}]], "Output",
 CellTags->"Cell 9.141"]
}, Open  ]],

Cell[TextData[{
 "The power series expansion about ",
 Cell[BoxData[
  FormBox[
   RowBox[{"x", "=", "0"}], TraditionalForm]]],
 ", shown as a dashed line, works quite well provided that ",
 StyleBox["x",
  FontSlant->"Italic"],
 " is not too different from 0.  By keeping more terms in the series, you can \
convince yourself that the power series  will only converge to the right \
answer if ",
 Cell[BoxData[
  FormBox[
   RowBox[{"|", "x", "|", 
    RowBox[{"<", "r"}]}], TraditionalForm]]],
 ",  where",
 Cell[BoxData[
  FormBox[
   RowBox[{" ", "r"}], TraditionalForm]]],
 " is the ",
 StyleBox["radius of convergence",
  FontSlant->"Italic"],
 " of the series. For this example, one can show that ",
 Cell[BoxData[
  FormBox[
   RowBox[{"r", "=", "1"}], TraditionalForm]]],
 ", so the power series only works in the range ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"-", "1"}], "<", "x", "<", "1"}], TraditionalForm]]],
 ". This is because ",
 Cell[BoxData[
  FormBox[
   SqrtBox[
    RowBox[{"x", "+", "1"}]], TraditionalForm]]],
 " has a singularity at ",
 Cell[BoxData[
  FormBox[
   RowBox[{"x", "=", 
    RowBox[{"-", "1"}]}], TraditionalForm]]],
 ", and this singularity cannot be well-represented by a polynomial expansion."
}], "Text",
 CellChangeTimes->{{3.446592031875722*^9, 3.446592032251012*^9}},
 CellTags->"i:117"],

Cell[TextData[{
 "\tActually, ",
 StyleBox["Series",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " can perform expansions that are more general than the simple polynomial \
Taylor series of Eq. ",
 ButtonBox["(9.9.1)",
  BaseStyle->"Hyperlink",
  ButtonData:>"(9.9.1)"],
 ". For example,  expanding the function ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SqrtBox[
     RowBox[{
      RowBox[{"1", "/", 
       SuperscriptBox["x", 
        RowBox[{"2", "/", "3"}]]}], "+", " ", "1"}]], " "}], 
   TraditionalForm]]],
 " about ",
 Cell[BoxData[
  FormBox[
   RowBox[{"x", "=", "0"}], TraditionalForm]]],
 " (where there is a singularity) yields the following non-polynomial \
expression:"
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Series", "[", 
  RowBox[{
   RowBox[{"Sqrt", "[", 
    RowBox[{
     RowBox[{"1", "/", 
      SuperscriptBox["x", 
       RowBox[{"2", "/", "3"}]]}], "+", "1"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "3"}], "}"}]}], "]"}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.144"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   FractionBox["1", 
    SuperscriptBox["x", 
     RowBox[{"1", "/", "3"}]]], "+", 
   FractionBox[
    SuperscriptBox["x", 
     RowBox[{"1", "/", "3"}]], "2"], "-", 
   FractionBox["x", "8"], "+", 
   FractionBox[
    SuperscriptBox["x", 
     RowBox[{"5", "/", "3"}]], "16"], "-", 
   FractionBox[
    RowBox[{"5", " ", 
     SuperscriptBox["x", 
      RowBox[{"7", "/", "3"}]]}], "128"], "+", 
   FractionBox[
    RowBox[{"7", " ", 
     SuperscriptBox["x", "3"]}], "256"], "+", 
   InterpretationBox[
    SuperscriptBox[
     RowBox[{"O", "[", "x", "]"}], 
     RowBox[{"11", "/", "3"}]],
    SeriesData[$CellContext`x, 0, {}, -1, 11, 3],
    Editable->False]}],
  SeriesData[$CellContext`x, 0, {1, 0, 
    Rational[1, 2], 0, 
    Rational[-1, 8], 0, 
    Rational[1, 16], 0, 
    Rational[-5, 128], 0, 
    Rational[7, 256]}, -1, 11, 3],
  Editable->False]], "Output",
 CellChangeTimes->{3.446518839369668*^9, 3.446592044291314*^9},
 CellTags->"Cell 9.142"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["9.9.3 Integration", "Subsubtitle",
 CellTags->{"i:72", "c:51"}],

Cell[TextData[{
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " can perform symbolic integration.  In order to evaluate the indefinite \
integral ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Integral]", 
    RowBox[{
     RowBox[{"f", "(", "x", ")"}], 
     RowBox[{"\[DifferentialD]", "x"}]}]}], TraditionalForm]]],
 " of a function ",
 Cell[BoxData[
  FormBox[
   RowBox[{"f", "(", "x", ")"}], TraditionalForm]]],
 ", use the notation ",
 StyleBox["Integrate[f[x],x]",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ". The second argument gives the variable over which the first argument is \
integrated. For example, the indefinite integral  of the hyperbolic tangent \
is "
}], "Text",
 CellTags->"i:74"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Integrate", "[", 
  RowBox[{
   RowBox[{"Tanh", "[", "x", "]"}], ",", "x"}], "]"}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.145"],

Cell[BoxData[
 RowBox[{"Log", "[", 
  RowBox[{"Cosh", "[", "x", "]"}], "]"}]], "Output",
 CellChangeTimes->{3.446518846858829*^9},
 CellTags->"Cell 9.143"]
}, Open  ]],

Cell["You can verify this result by taking its derivative:", "Text",
 CellChangeTimes->{{3.446592070539031*^9, 3.44659207083958*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"D", "[", 
  RowBox[{"%", ",", "x"}], "]"}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.146"],

Cell[BoxData[
 RowBox[{"Tanh", "[", "x", "]"}]], "Output",
 CellChangeTimes->{3.446518854234343*^9},
 CellTags->"Cell 9.144"]
}, Open  ]],

Cell[TextData[{
 "To evaluate definite integrals, you need only specify the range of \
integration along with the integration variable. For example,  to evaluate \
the integral of",
 Cell[BoxData[
  FormBox[
   RowBox[{" ", Cell[TextData[Cell[BoxData[
     FormBox[
      RowBox[{
       SuperscriptBox["cos", "2"], "x"}], TraditionalForm]]]]]}], 
   TraditionalForm]]],
 " from ",
 Cell[BoxData[
  FormBox["0", TraditionalForm]]],
 " to",
 Cell[BoxData[
  FormBox[
   RowBox[{" ", 
    RowBox[{"2", "\[Pi]"}]}], TraditionalForm]]],
 ", use"
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Integrate", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Cos", "[", "x", "]"}], "^", "2"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", 
     RowBox[{"2", " ", "Pi"}]}], "}"}]}], "]"}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.147"],

Cell[BoxData["\[Pi]"], "Output",
 CellChangeTimes->{3.44651885794036*^9},
 CellTags->"Cell 9.145"]
}, Open  ]],

Cell[TextData[{
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " is generally very careful when evaluating integrals to make sure that they \
converge properly. When there is a question as to the existence of the \
result, ",
 StyleBox["Mathematica ",
  FontSlant->"Italic"],
 " will often supply ranges of free parameters in the integrand for which the \
integral exists. For example, ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " recognizes that  ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubsuperscriptBox["\[Integral]", "0", "\[Infinity]"], 
    RowBox[{
     FractionBox["1", 
      RowBox[{
       SuperscriptBox["x", "a"], "+", "1"}]], 
     RowBox[{"\[DifferentialD]", "x"}]}]}], TraditionalForm]]],
 " exists only if ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"Re", " ", "a"}], ">", "1"}], TraditionalForm]]],
 ":"
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Integrate", "[", 
  RowBox[{
   RowBox[{"1", "/", 
    RowBox[{"(", 
     RowBox[{"1", " ", "+", " ", 
      RowBox[{"x", "^", "a"}]}], ")"}]}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "Infinity"}], "}"}]}], "]"}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.148"],

Cell[BoxData[
 RowBox[{"ConditionalExpression", "[", 
  RowBox[{
   FractionBox[
    RowBox[{"\[Pi]", " ", 
     RowBox[{"Csc", "[", 
      FractionBox["\[Pi]", "a"], "]"}]}], "a"], ",", 
   RowBox[{
    RowBox[{"Re", "[", "a", "]"}], ">", "1"}]}], "]"}]], "Output",
 CellChangeTimes->{3.446518880198205*^9, 3.4589159870097*^9, 
  3.503082309150773*^9, 3.5030824907037973`*^9, 3.503087627250813*^9},
 CellTags->"Cell 9.147"]
}, Open  ]],

Cell[TextData[{
 "Here, we encounter a conditional statement for the first time. This \
statement takes two arguments: ",
 StyleBox["ConditionalExpression[",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 StyleBox["result, logical expression",
  FontSlant->"Italic"],
 StyleBox["]",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ". That is, the first argument is returned if ",
 StyleBox["logical expression",
  FontSlant->"Italic"],
 " is true. If it is false the result is undefined (new in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " 8.0 -- in previous versions, an ",
 StyleBox["If",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " statement was employed here).  In other words, if we substitute ",
 Cell[BoxData[
  FormBox[
   RowBox[{"a", " ", "\[Rule]", "  ", 
    RowBox[{"-", "1"}]}], TraditionalForm]]],
 ", then ",
 StyleBox["Mathematica ",
  FontSlant->"Italic"],
 " can't find the integral and it returns the symbol ",
 StyleBox["Undefined",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " . However, for ",
 Cell[BoxData[
  FormBox[
   RowBox[{"a", " ", ">", "0"}], TraditionalForm]]],
 " the second argument is returned:"
}], "Text",
 CellChangeTimes->{
  3.446592107366131*^9, {3.503082328020032*^9, 3.503082464770879*^9}, {
   3.503082579330531*^9, 3.5030825795102043`*^9}, {3.5030826625846157`*^9, 
   3.50308266509004*^9}, {3.503087630572775*^9, 3.503087633677145*^9}, {
   3.503087792643059*^9, 3.503087851157501*^9}, {3.503087889685882*^9, 
   3.503087890131557*^9}, {3.504276285424746*^9, 3.504276291531245*^9}, {
   3.5417666070193644`*^9, 3.541766633612206*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"%", "/.", 
   RowBox[{"a", "\[Rule]", 
    RowBox[{"-", "1"}]}]}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"%%", "/.", 
  RowBox[{"a", "\[Rule]", "7"}]}]}], "Input",
 ShowCellTags->True,
 CellChangeTimes->{{3.503087605237904*^9, 3.503087614856843*^9}},
 CellTags->"Cell 9.149"],

Cell[BoxData["Undefined"], "Output",
 CellChangeTimes->{3.446518922295916*^9, 3.5030824956736803`*^9, 
  3.503087639878834*^9},
 CellTags->"Cell 9.148"],

Cell[BoxData[
 RowBox[{
  FractionBox["1", "7"], " ", "\[Pi]", " ", 
  RowBox[{"Csc", "[", 
   FractionBox["\[Pi]", "7"], "]"}]}]], "Output",
 CellChangeTimes->{3.446518922295916*^9, 3.5030824956736803`*^9, 
  3.503087639894165*^9},
 CellTags->"Cell 9.148"]
}, Open  ]],

Cell[TextData[{
 "Note that errors in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "'s integral evaluations crop up from time to time, so it is always best to \
carefully check your results. For instance, this integral was not properly \
evaluated in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " 7.0 , but the error has been corrected in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " 8.0."
}], "Text",
 CellChangeTimes->{{3.458916179414768*^9, 3.458916370592677*^9}, {
   3.458916402033482*^9, 3.4589164424845533`*^9}, {3.458916478519395*^9, 
   3.458916483504467*^9}, {3.4589207500506144`*^9, 3.45892080438931*^9}, {
   3.503082504377018*^9, 3.503082557550344*^9}, {3.503082686876174*^9, 
   3.503082707000557*^9}, {3.503087673337264*^9, 3.503087728874296*^9}, {
   3.50427639668503*^9, 3.5042764019305*^9}, 3.504276451136948*^9}],

Cell["\<\
Of course, there are many convergent integrals for which there is no analytic \
answer in terms of pre-defined functions. A simple example is \
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Integrate", "[", 
  RowBox[{
   RowBox[{"Exp", "[", 
    RowBox[{"-", 
     RowBox[{"Exp", "[", 
      RowBox[{"x", "^", "2"}], "]"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "Infinity"}], "}"}]}], "]"}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.150"],

Cell[BoxData[
 RowBox[{
  SubsuperscriptBox["\[Integral]", "0", "\[Infinity]"], 
  RowBox[{
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{"-", 
     SuperscriptBox["\[ExponentialE]", 
      SuperscriptBox["x", "2"]]}]], 
   RowBox[{"\[DifferentialD]", "x"}]}]}]], "Output",
 CellChangeTimes->{3.446518928372836*^9},
 CellTags->"Cell 9.149"]
}, Open  ]],

Cell[TextData[{
 "However, ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " can evaluate integrals like this numerically, as we will discuss in ",
 ButtonBox["Sec. 9.11",
  BaseStyle->"Hyperlink",
  ButtonData:>"Sec. 9.11"],
 "."
}], "Text"],

Cell[TextData[Cell[BoxData[GridBox[{
   {
    StyleBox[
     RowBox[{"Table", " ", "9.19", " ", "Calculus", " ", "in", " ", 
      StyleBox["Mathematica",
       FontSlant->"Italic"]}],
     FontSize->9]},
   {GridBox[{
      {
       StyleBox[
        RowBox[{"D", "[", 
         RowBox[{"f", ",", "x"}], "]"}],
        FontFamily->"Courier",
        FontWeight->"Bold"], 
       StyleBox[
        RowBox[{"The", " ", 
         RowBox[{"(", "partial", ")"}], " ", "derivative", " ", "of", " ", 
         StyleBox["f",
          FontSlant->"Italic"], 
         StyleBox[" ",
          FontSlant->"Italic"], "with", " ", "respect", " ", "to", " ", 
         StyleBox["x",
          FontSlant->"Italic"]}],
        FontFamily->"Times"]},
      {
       StyleBox[
        RowBox[{"Integrate", "[", 
         RowBox[{"f", ",", "x"}], "]"}],
        FontWeight->"Bold"], 
       StyleBox[
        RowBox[{"The", " ", 
         RowBox[{"(", "indefinite", ")"}], " ", "integral", " ", 
         RowBox[{"of", 
          StyleBox["f",
           FontSlant->"Italic"]}], " ", "with", " ", "respect", " ", "to", 
         " ", 
         StyleBox["x",
          FontSlant->"Italic"]}],
        FontFamily->"Times"]},
      {
       StyleBox[
        RowBox[{"Integrate", "[", 
         RowBox[{"f", ",", 
          RowBox[{"{", 
           RowBox[{"x", ",", "xmin", ",", "xmax"}], "}"}]}], "]"}],
        FontWeight->"Bold"], 
       StyleBox[
        RowBox[{"The", " ", "definite", " ", "integral", " ", "of", " ", 
         StyleBox["f",
          FontSlant->"Italic"], 
         StyleBox[" ",
          FontSlant->"Italic"], "from", " ", 
         StyleBox["xmin",
          FontSlant->"Italic"], 
         StyleBox[" ",
          FontSlant->"Italic"], "to", " ", 
         StyleBox["xmax",
          FontSlant->"Italic"]}],
        FontFamily->"Times"]},
      {
       StyleBox[
        RowBox[{"Series", "[", 
         RowBox[{"f", ",", 
          RowBox[{"{", 
           RowBox[{"x", ",", 
            SubscriptBox["x", "o"], ",", "n"}], "}"}]}], "]"}],
        FontWeight->"Bold"], 
       StyleBox[
        RowBox[{
        "The", " ", "power", " ", "series", " ", "of", " ", "order", " ", 
         StyleBox["n",
          FontSlant->"Italic"], " ", "for", " ", 
         StyleBox["f",
          FontSlant->"Italic"], 
         StyleBox[" ",
          FontSlant->"Italic"], "with", " ", "respect", " ", "to", " ", 
         StyleBox["x",
          FontSlant->"Italic"], " ", "around", 
         FormBox[
          StyleBox[
           SubscriptBox["x", "o"],
           FontFamily->"Times"],
          TraditionalForm]}],
        FontFamily->"Times"]},
      {
       RowBox[{
        StyleBox["Normal",
         FontWeight->"Bold"], 
        StyleBox["[",
         FontWeight->"Bold"], 
        StyleBox["series",
         FontFamily->"Times",
         FontSlant->"Italic"], 
        StyleBox["]",
         FontWeight->"Bold"]}], 
       StyleBox[
        RowBox[{
        "Convert", " ", "a", " ", "power", " ", "series", " ", "into", " ", 
         "a", " ", "normal", " ", "expression"}],
        FontFamily->"Times"]},
      {
       StyleBox[
        RowBox[{"Limit", "[", 
         RowBox[{"f", ",", 
          RowBox[{"x", Cell["\[Rule]"], " ", 
           SubscriptBox["x", "o"]}]}], "]"}],
        FontWeight->"Bold"], 
       StyleBox[
        RowBox[{"Take", " ", "the", " ", "limit", " ", "of", " ", 
         StyleBox["f",
          FontSlant->"Italic"], 
         StyleBox[" ",
          FontSlant->"Italic"], "as", " ", 
         StyleBox["x",
          FontSlant->"Italic"], 
         StyleBox[" ",
          FontSlant->"Italic"], "approaches", 
         FormBox[
          StyleBox[
           SubscriptBox["x", "o"],
           FontFamily->"Times"],
          TraditionalForm]}],
        FontFamily->"Times"]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[1.26]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}]}
  }]]]], "Text",
 CellFrame->True,
 Background->GrayLevel[0.849989]]
}, Closed]],

Cell[CellGroupData[{

Cell["Exercises for Sec. 9.9", "Subsubtitle",
 CellTags->{"Ex. 9.9", "c:52"}],

Cell[TextData[{
 StyleBox["(1)",
  FontWeight->"Bold"],
 " Find all local extrema of the following polynomial:  ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["x", "4"], "+", 
    RowBox[{"5", " ", 
     SuperscriptBox["x", "3"]}], "-", 
    RowBox[{"3", " ", 
     SuperscriptBox["x", "2"]}], "+", "2"}], TraditionalForm]]],
 "."
}], "Text"],

Cell[TextData[{
 StyleBox["(2)",
  FontWeight->"Bold"],
 " Find all local extrema of the following function of ",
 StyleBox["x",
  FontSlant->"Italic"],
 " and ",
 StyleBox["y",
  FontSlant->"Italic"],
 ", and classify these extrema as either minima, maxima or saddlepoints: \n\t\
\t\t ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"f", "(", 
     RowBox[{"x", ",", "y"}], ")"}], "=", 
    RowBox[{
     RowBox[{"y", " ", 
      SuperscriptBox["x", "2"]}], "+", 
     RowBox[{
      SuperscriptBox["y", "2"], " ", "x"}], "-", 
     RowBox[{"2", " ", 
      RowBox[{"x", "(", 
       RowBox[{"y", "+", "2"}], ")"}]}]}]}], TraditionalForm]]],
 "."
}], "Text"],

Cell["\<\
Find the value of the function at each extremum. (Hint: A high-resolution \
contour plot is helpful. )\
\>", "Text"],

Cell[TextData[{
 StyleBox["(3)",
  FontWeight->"Bold"],
 " Find the following indefinite integrals, and prove by differentiating the \
result that ",
 StyleBox["Mathematica ",
  FontSlant->"Italic"],
 "did the integral properly. (Some of the results may be in terms of special \
functions, whose definitions need not concern you at this time. You may need \
to manipulate the results in order to return them to their original form \
after differentiating the integrals.)"
}], "Text"],

Cell[TextData[{
 StyleBox["(a)",
  FontWeight->"Bold"],
 "  ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Integral]", 
    RowBox[{
     FractionBox[
      SuperscriptBox["x", "3"], 
      RowBox[{
       SuperscriptBox["sin", "2"], "(", "x", ")"}]], 
     RowBox[{"\[DifferentialD]", "x"}]}]}], TraditionalForm]]],
 "."
}], "Text"],

Cell[TextData[{
 StyleBox["(b)",
  FontWeight->"Bold"],
 " ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Integral]", 
    RowBox[{
     RowBox[{
      SuperscriptBox["x", "a"], " ", 
      RowBox[{
       SuperscriptBox["log", "3"], "(", "x", ")"}]}], 
     RowBox[{"\[DifferentialD]", "x"}]}]}], TraditionalForm]]],
 "."
}], "Text"],

Cell[TextData[{
 StyleBox["(c)",
  FontWeight->"Bold"],
 "  ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Integral]", 
    RowBox[{
     SuperscriptBox["\[ExponentialE]", 
      RowBox[{"-", 
       SuperscriptBox["x", "3"]}]], 
     RowBox[{"\[DifferentialD]", "x"}]}]}], TraditionalForm]]],
 "."
}], "Text"],

Cell[TextData[{
 StyleBox["(4)",
  FontWeight->"Bold"],
 " Evaluate the following definite integrals:"
}], "Text"],

Cell[TextData[{
 StyleBox["(a)",
  FontWeight->"Bold"],
 " ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubsuperscriptBox["\[Integral]", 
     RowBox[{"-", "\[Infinity]"}], "\[Infinity]"], 
    RowBox[{
     FractionBox[
      RowBox[{"cos", "(", 
       RowBox[{"p", " ", "x"}], ")"}], 
      RowBox[{
       SuperscriptBox["a", "2"], "+", 
       SuperscriptBox["x", "2"]}]], 
     RowBox[{"\[DifferentialD]", "x"}]}]}], TraditionalForm]]],
 " , assuming that ",
 StyleBox["p ",
  FontSlant->"Italic"],
 " and ",
 StyleBox["a",
  FontSlant->"Italic"],
 " are real."
}], "Text"],

Cell[TextData[{
 StyleBox["(b)",
  FontWeight->"Bold"],
 " ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubsuperscriptBox["\[Integral]", "0", 
     RowBox[{"2", " ", "\[Pi]"}]], 
    RowBox[{
     RowBox[{"cos", "(", 
      RowBox[{"z", " ", 
       RowBox[{"sin", "(", "x", ")"}]}], ")"}], 
     RowBox[{"\[DifferentialD]", "x"}]}]}], TraditionalForm]]],
 " , assuming that ",
 StyleBox["z",
  FontSlant->"Italic"],
 " is real."
}], "Text"],

Cell[TextData[{
 StyleBox["(c)",
  FontWeight->"Bold"],
 "  ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubsuperscriptBox["\[Integral]", "0", "\[Infinity]"], 
    RowBox[{
     RowBox[{"x", " ", 
      SuperscriptBox["\[ExponentialE]", 
       RowBox[{"-", 
        SuperscriptBox["x", "4"]}]]}], 
     RowBox[{"\[DifferentialD]", "x"}]}]}], TraditionalForm]]],
 "."
}], "Text"],

Cell[TextData[{
 StyleBox["(5)",
  FontWeight->"Bold"],
 " Find the power series expansion to 6th order around ",
 StyleBox["x=0",
  FontSlant->"Italic"],
 " of the function ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"f", "(", "x", ")"}], "=", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"x", "+", "1"}], ")"}], 
     RowBox[{"ln", "(", 
      RowBox[{"x", "+", "1"}], ")"}]}]}], TraditionalForm]]],
 " . Plot the resulting series on the same graph as ",
 StyleBox["f",
  FontSlant->"Italic"],
 "(",
 StyleBox["x",
  FontSlant->"Italic"],
 ") for ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"-", "1"}], "<", "x", "<", "2"}], TraditionalForm]]],
 ". Repeat for the 100th-order series. Can you tell from these plots what is \
the radius of convergence of this power series?"
}], "Text"],

Cell[TextData[{
 StyleBox["(6)",
  FontWeight->"Bold"],
 " A particle moves in one dimension. Its velocity as a function of time is \
given by the function   ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"v", "(", "t", ")"}], "=", 
    RowBox[{
     RowBox[{
      RowBox[{"-", "4"}], " ", 
      SuperscriptBox["t", "3"]}], "+", 
     SuperscriptBox["t", "2"], "+", "1"}]}], TraditionalForm]]],
 ", where ",
 Cell[BoxData[
  FormBox["t", TraditionalForm]]],
 " is measured in seconds."
}], "Text"],

Cell[TextData[{
 StyleBox["(a)",
  FontWeight->"Bold"],
 " Find and plot the particle's position ",
 Cell[BoxData[
  FormBox[
   RowBox[{"x", "(", "t", ")"}], TraditionalForm]]],
 " for ",
 Cell[BoxData[
  FormBox[
   RowBox[{"0", "<", "t", "<", "2"}], TraditionalForm]]],
 " seconds, assuming that the particle is at ",
 Cell[BoxData[
  FormBox[
   RowBox[{"x", "=", 
    RowBox[{"-", "1"}]}], TraditionalForm]]],
 " at ",
 Cell[BoxData[
  FormBox[
   RowBox[{"t", "=", "0"}], TraditionalForm]]],
 "."
}], "Text"],

Cell[TextData[{
 StyleBox["(b)",
  FontWeight->"Bold"],
 " Find the maximum positive excursion, ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["x", "max"], TraditionalForm]]],
 "."
}], "Text"],

Cell[TextData[{
 StyleBox["7(a)",
  FontWeight->"Bold"],
 " Assuming that the particle in Exercise (6) has a mass of ",
 Cell[BoxData[
  FormBox[
   RowBox[{"5", " ", "kg"}], TraditionalForm]]],
 ", plot the total force ",
 Cell[BoxData[
  FormBox[
   RowBox[{"F", "(", "t", ")"}], TraditionalForm]]],
 " on the particle for ",
 Cell[BoxData[
  FormBox[
   RowBox[{"0", "<", "t", "<", "2"}], TraditionalForm]]],
 " seconds."
}], "Text"],

Cell[TextData[{
 StyleBox["(b)",
  FontWeight->"Bold"],
 " Find the work done by the force as a function of time,  ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"W", "(", "t", ")"}], "=", 
    RowBox[{
     SubsuperscriptBox["\[Integral]", "0", "t"], 
     RowBox[{
      RowBox[{
       RowBox[{"F", "(", "t", ")"}], " ", 
       RowBox[{"v", "(", "t", ")"}]}], 
      RowBox[{"\[DifferentialD]", "t"}]}]}]}], TraditionalForm]]],
 "."
}], "Text"],

Cell[TextData[{
 StyleBox["(c)",
  FontWeight->"Bold"],
 " Show that for this particle the work ",
 Cell[BoxData[
  FormBox[
   RowBox[{"W", "(", "t", ")"}], TraditionalForm]]],
 " equals the change in kinetic energy of the particle ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    StyleBox[
     RowBox[{"\[CapitalDelta]", 
      StyleBox["K",
       FontSlant->"Italic"]}]], "=", 
    RowBox[{
     FractionBox["1", "2"], " ", 
     RowBox[{"m", "[", 
      RowBox[{
       SuperscriptBox[
        RowBox[{"v", "(", "t", ")"}], "2"], "-", 
       SuperscriptBox[
        RowBox[{"v", "(", "0", ")"}], "2"]}], "]"}]}]}], TraditionalForm]]],
 ":"
}], "Text"],

Cell[TextData[{
 "\t\t\t\t",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"W", "(", "t", ")"}], " ", "=", " "}], TraditionalForm]]],
 StyleBox["\[CapitalDelta]",
  FontFamily->"Symbol",
  FontSlant->"Italic"],
 StyleBox["K(t)",
  FontSlant->"Italic"],
 ", "
}], "Text"],

Cell[" (This is called the work-kinetic-energy theorem.)", "Text",
 CellTags->"i:118"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["9.10 Analytic Solution of Algebraic Equations", "Subtitle",
 CellTags->{"Sec. 9.10", "i:99", "c:53"}],

Cell["", "Text"],

Cell[CellGroupData[{

Cell[TextData[{
 "9.10.1 ",
 StyleBox["Solve",
  FontFamily->"Courier",
  FontWeight->"Bold",
  FontSlant->"Plain"],
 " and ",
 StyleBox["NSolve",
  FontFamily->"Courier",
  FontWeight->"Bold",
  FontSlant->"Plain"]
}], "Subsubtitle",
 CellTags->{"i:83", "c:54"}],

Cell[CellGroupData[{

Cell["One Equation in a Single Variable", "Section",
 CellTags->"c:55"],

Cell[TextData[{
 "Say you want to find the solution for ",
 StyleBox["x",
  FontSlant->"Italic"],
 " to an equation such as  ",
 StyleBox["f",
  FontSlant->"Italic"],
 "(",
 StyleBox["x)",
  FontSlant->"Italic"],
 " = 0. If an analytic solution exists, ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " can usually find it using the ",
 StyleBox["Solve",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " function. The syntax for this function is as follows:"
}], "Text",
 CellChangeTimes->{{3.4589241660925083`*^9, 3.45892416768382*^9}}],

Cell[TextData[{
 "\t\t",
 StyleBox["Solve[",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 StyleBox["f",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 StyleBox["[",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 StyleBox["x",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 StyleBox["]== ",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 StyleBox["0",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 StyleBox[",",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 StyleBox["x",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 StyleBox["]",
  FontFamily->"Courier",
  FontWeight->"Bold"]
}], "Text",
 CellTags->"i:81"],

Cell[TextData[{
 "The first argument is the equation to be solved,  and the second argument \
is the variable ",
 StyleBox["x ",
  FontSlant->"Italic"],
 "which is being solved for. "
}], "Text",
 CellChangeTimes->{{3.458924192109317*^9, 3.458924192706811*^9}, {
  3.458924224806287*^9, 3.458924240232976*^9}}],

Cell[TextData[{
 " \tNote the double equal signs in the equation ",
 StyleBox["f[x]== 0",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ".  Here we encounter yet another meaning of \"equals\". In this case, the \
equation ",
 StyleBox["f[x]== 0",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 "  expresses a question: is the left-hand side ",
 Cell[BoxData[
  FormBox[
   RowBox[{"f", "(", "x", ")"}], TraditionalForm]]],
 StyleBox[" ",
  FontSlant->"Italic"],
 " equal to the right-hand side ",
 Cell[BoxData[
  FormBox["0", TraditionalForm]]],
 "? It is called a ",
 StyleBox["logical statement ",
  FontSlant->"Italic"],
 "because the result is either ",
 StyleBox["True",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " or ",
 StyleBox["False",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ". For example, the statement",
 Cell[BoxData[
  FormBox[
   RowBox[{" ", 
    RowBox[{"1", " ", "==", " ", "0", " "}]}], TraditionalForm]],
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " will return ",
 StyleBox["False",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 "; and the statement ",
 StyleBox["Simplify[(x+1)^2 == x^2 + 2x + 1]",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " yields ",
 StyleBox["True",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ". (Try it!) You have seen logical statements before: in Sec. ",
 ButtonBox["9.8.6",
  BaseStyle->"Hyperlink",
  ButtonData:>"c:46"],
 " they were used to place conditions on function definitions "
}], "Text",
 CellChangeTimes->{{3.446592280500053*^9, 3.446592342627235*^9}, 
   3.458924278272716*^9},
 CellTags->"i:78"],

Cell[TextData[{
 "\tIf  you were to use a single equal sign to define the equation ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"f", "(", "x", ")"}], " ", "=", " ", "0"}], TraditionalForm]]],
 ", you would be assigning the value 0 to the function ",
 Cell[BoxData[
  FormBox["f", TraditionalForm]]],
 " when its argument takes on the value ",
 Cell[BoxData[
  FormBox["x", TraditionalForm]]],
 ", which is not what we want to do here. "
}], "Text",
 CellChangeTimes->{{3.446592229755042*^9, 3.4465922455223637`*^9}}],

Cell[TextData[{
 "\tAs a simple example of the function ",
 StyleBox["Solve",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ", let's find the roots of the cubic polynomial ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["x", "3"], " ", "+", " ", 
    RowBox[{"2", " ", 
     SuperscriptBox["x", "2"]}], " ", "-", "x", " ", "-", " ", "2."}], 
   TraditionalForm]]],
 " To do so type and evaluate"
}], "Text",
 CellChangeTimes->{{3.446592261794427*^9, 3.446592263197014*^9}, {
  3.4465923804061947`*^9, 3.446592391871882*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"x", "^", "3"}], " ", "+", " ", 
     RowBox[{"2", " ", 
      RowBox[{"x", "^", "2"}]}], " ", "-", " ", "x", " ", "-", "2"}], 
    "\[Equal]", "0"}], ",", "x"}], "]"}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.151"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", 
     RowBox[{"-", "2"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", 
     RowBox[{"-", "1"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "1"}], "}"}]}], "}"}]], "Output"]
}, Open  ]],

Cell[TextData[{
 "The result is the three solutions for ",
 Cell[BoxData[
  FormBox["x", TraditionalForm]]],
 ", written as a list of replacements. You can check that these are in fact \
the solutions by substituting the list back into the polynomial:"
}], "Text",
 CellChangeTimes->{{3.4465924019175043`*^9, 3.446592402314489*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"x", "^", "3"}], " ", "+", " ", 
   RowBox[{"2", " ", 
    RowBox[{"x", "^", "2"}]}], " ", "-", " ", "x", " ", "-", " ", "2"}], " ", 
  "/.", "%"}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.152"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0", ",", "0", ",", "0"}], "}"}]], "Output"]
}, Open  ]],

Cell[TextData[{
 "\tWhile analytic solutions to cubic and even quartic polynomials can be \
found, solutions to higher order polynmials can usually only be found \
numerically. Nevertheless, ",
 StyleBox["Mathematica ",
  FontSlant->"Italic"],
 "will take a stab, returning some strange-looking stuff:"
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"x", "^", "5"}], " ", "+", " ", 
     RowBox[{"x", "^", "2"}], " ", "+", " ", "1"}], " ", "\[Equal]", "0"}], 
   ",", "x"}], "]"}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.153"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", 
     RowBox[{"Root", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"1", "+", 
         SuperscriptBox["#1", "2"], "+", 
         SuperscriptBox["#1", "5"]}], "&"}], ",", "1"}], "]"}]}], "}"}], ",", 
   
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", 
     RowBox[{"Root", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"1", "+", 
         SuperscriptBox["#1", "2"], "+", 
         SuperscriptBox["#1", "5"]}], "&"}], ",", "2"}], "]"}]}], "}"}], ",", 
   
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", 
     RowBox[{"Root", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"1", "+", 
         SuperscriptBox["#1", "2"], "+", 
         SuperscriptBox["#1", "5"]}], "&"}], ",", "3"}], "]"}]}], "}"}], ",", 
   
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", 
     RowBox[{"Root", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"1", "+", 
         SuperscriptBox["#1", "2"], "+", 
         SuperscriptBox["#1", "5"]}], "&"}], ",", "4"}], "]"}]}], "}"}], ",", 
   
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", 
     RowBox[{"Root", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"1", "+", 
         SuperscriptBox["#1", "2"], "+", 
         SuperscriptBox["#1", "5"]}], "&"}], ",", "5"}], "]"}]}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.446592415473938*^9},
 CellTags->"Cell 9.152"]
}, Open  ]],

Cell[TextData[{
 "What we have here is a list of numerical values for the solutions, found \
using a ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " function called ",
 StyleBox["Root ",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 "whose specialty is polynomial root finding. (The ",
 StyleBox["Solve",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " function calls ",
 StyleBox["Root",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " when it recognizes a polynomial equation.) In this form the result is not \
much use to anyone, but you can get numerical values for the roots by \
applying the ",
 StyleBox["N",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " function to this list:"
}], "Text",
 CellChangeTimes->{{3.4465924315179462`*^9, 3.4465924317972918`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"N", "[", "%", "]"}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.154"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", 
     RowBox[{"-", "1.1938591113212231`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", 
     RowBox[{
      RowBox[{"-", "0.15458967671833224`"}], "-", 
      RowBox[{"0.8280741332013`", " ", "\[ImaginaryI]"}]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", 
     RowBox[{
      RowBox[{"-", "0.15458967671833224`"}], "+", 
      RowBox[{"0.8280741332013`", " ", "\[ImaginaryI]"}]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", 
     RowBox[{"0.7515192323789438`", "\[InvisibleSpace]", "-", 
      RowBox[{"0.784615921039448`", " ", "\[ImaginaryI]"}]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", 
     RowBox[{"0.7515192323789438`", "\[InvisibleSpace]", "+", 
      RowBox[{"0.784615921039448`", " ", "\[ImaginaryI]"}]}]}], "}"}]}], 
  "}"}]], "Output"]
}, Open  ]],

Cell[TextData[{
 "Alternatively, you can avoid the weird intermediate stuff by using the \
function ",
 StyleBox["NSolve[f[x]== 0,x]",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ", which basically stands for ",
 StyleBox["N[Solve[f[x]==0,x]]",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ".  This takes you directly to the numerical form of the solution: "
}], "Text",
 CellChangeTimes->{{3.446592438980032*^9, 3.446592458960971*^9}},
 CellTags->"i:82"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NSolve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"x", "^", "5"}], " ", "+", " ", 
     RowBox[{"x", "^", "2"}], " ", "+", " ", "1"}], " ", "\[Equal]", "0"}], 
   ",", "x"}], "]"}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.155"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", 
     RowBox[{"-", "1.1938591113212231`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", 
     RowBox[{
      RowBox[{"-", "0.15458967671833224`"}], "-", 
      RowBox[{"0.8280741332013`", " ", "\[ImaginaryI]"}]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", 
     RowBox[{
      RowBox[{"-", "0.15458967671833224`"}], "+", 
      RowBox[{"0.8280741332013`", " ", "\[ImaginaryI]"}]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", 
     RowBox[{"0.7515192323789438`", "\[InvisibleSpace]", "-", 
      RowBox[{"0.784615921039448`", " ", "\[ImaginaryI]"}]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", 
     RowBox[{"0.7515192323789438`", "\[InvisibleSpace]", "+", 
      RowBox[{"0.784615921039448`", " ", "\[ImaginaryI]"}]}]}], "}"}]}], 
  "}"}]], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Coupled Equations in Several Variables", "Section",
 CellTags->"c:56"],

Cell[TextData[{
 "\t",
 StyleBox["Solve",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " and ",
 StyleBox["NSolve",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " can also be used to solve coupled systems of equations. Now the arguments \
are"
}], "Text"],

Cell[TextData[{
 "\t\t",
 StyleBox["Solve[",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 "{",
 StyleBox["eqns",
  FontSlant->"Italic"],
 "}",
 StyleBox[",",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 "{",
 StyleBox["vars",
  FontSlant->"Italic"],
 "}",
 StyleBox["]",
  FontFamily->"Courier",
  FontWeight->"Bold"]
}], "Text"],

Cell[TextData[{
 "where {",
 StyleBox["eqns",
  FontSlant->"Italic"],
 "} is a list of equations, and {",
 StyleBox["vars",
  FontSlant->"Italic"],
 "} is the list of variables to be solved for. For example,  the coupled \
system of linear equations"
}], "Text"],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{"x", "+", "y", "+", "z"}], "=", "0"}], ",", " "}], 
   TraditionalForm]]],
 "\t\t\t\t\t\t\n",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"z", "+", 
     RowBox[{"2", "y"}]}], "=", "4"}], TraditionalForm]]],
 ", \t\t\t\t\t\t\n",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{"z", "+", "3"}], "=", "2"}], ","}], TraditionalForm]]]
}], "NE4",
 TextAlignment->Left,
 TextJustification->0,
 CellTags->"(9.10.1)"],

Cell["has the following solution:", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"x", "+", "y", "+", "z"}], "\[Equal]", "0"}], ",", 
     RowBox[{
      RowBox[{"x", "+", 
       RowBox[{"2", "y"}]}], " ", "\[Equal]", " ", "4"}], ",", 
     RowBox[{
      RowBox[{"z", "+", "3"}], "\[Equal]", "2"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "y", ",", "z"}], "}"}]}], "]"}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.156"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"x", "\[Rule]", 
     RowBox[{"-", "2"}]}], ",", 
    RowBox[{"y", "\[Rule]", "3"}], ",", 
    RowBox[{"z", "\[Rule]", 
     RowBox[{"-", "1"}]}]}], "}"}], "}"}]], "Output"]
}, Open  ]],

Cell[TextData[{
 "Tip: if you forget to use the double equal sign, and instead use a single \
equal sign, remember that you have now assigned the right-hand side to the ",
 "left-hand",
 " side. Sometimes ",
 StyleBox["Mathematica ",
  FontSlant->"Italic"],
 "will not allow such an assignment, as in",
 StyleBox[" ",
  FontSlant->"Italic"],
 Cell[BoxData[
  FormBox[
   RowBox[{" ", 
    StyleBox[
     RowBox[{
      RowBox[{
       StyleBox["x",
        FontSlant->"Plain"], "+", "3"}], "=", 
      StyleBox["y",
       FontSlant->"Plain"]}],
     FontFamily->"Courier",
     FontWeight->"Bold"]}], TraditionalForm]]],
 ". (Try it: you will get an error.) However, if your equation takes a form \
such as ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    RowBox[{
     StyleBox["x",
      FontSlant->"Plain"], "=", 
     RowBox[{
      StyleBox["y",
       FontSlant->"Plain"], "-", "3"}]}],
    FontFamily->"Courier",
    FontWeight->"Bold"], TraditionalForm]]],
 ", ",
 StyleBox["Mathematica ",
  FontSlant->"Italic"],
 "will assign",
 StyleBox[" ",
  FontSlant->"Italic"],
 Cell[BoxData[
  FormBox[
   RowBox[{"y", "-", "3"}], TraditionalForm]]],
 " to ",
 Cell[BoxData[
  FormBox["x", TraditionalForm]]],
 ".  Now the result of evaluating  ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    RowBox[{
     StyleBox["x",
      FontSlant->"Plain"], "==", 
     RowBox[{
      StyleBox["y",
       FontSlant->"Plain"], "-", "3"}]}],
    FontFamily->"Courier",
    FontWeight->"Bold"], TraditionalForm]]],
 " will  be the logical result ",
 StyleBox["True",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ", because ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " substitutes for the value of ",
 Cell[BoxData[
  FormBox["x", TraditionalForm]]],
 ". To stop this from happening,  you need to clear the value of ",
 StyleBox["x ",
  FontSlant->"Italic"],
 " using ",
 StyleBox["Remove[x]",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " or ",
 StyleBox["Clear[x]",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 "."
}], "Text",
 CellFrame->True,
 Background->GrayLevel[0.849989]],

Cell[TextData[{
 "\tAs another example of coupled equations, consider a system of masses \
connected by springs. Such systems are often used to model the behavior of \
elastic materials. For instance, the compression of an elastic rod standing \
on its end on a table can be modeled by a system of ",
 Cell[BoxData[
  FormBox[
   RowBox[{"M", "+", "1"}], TraditionalForm]]],
 " one-dimensional coupled harmonic oscillators at positions ",
 Cell[BoxData[
  FormBox[
   RowBox[{"y", "=", 
    SubscriptBox["y", "i"]}], TraditionalForm]]],
 ". The first mass is at ",
 Cell[BoxData[
  FormBox[
   RowBox[{"y", "=", 
    RowBox[{
     SubscriptBox["y", "0"], "=", "0"}]}], TraditionalForm]]],
 ", and the location of subsequent masses is determined by the force balance \
equations"
}], "Text",
 CellTags->"i:107"],

Cell[TextData[{
 "\t",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"0", "=", 
     RowBox[{
      RowBox[{"-", 
       RowBox[{"k", "(", 
        RowBox[{
         SubscriptBox["y", "i"], "-", 
         SubscriptBox["y", 
          RowBox[{"i", "-", "1"}]]}], ")"}]}], "+", 
      RowBox[{"k", "(", 
       RowBox[{
        SubscriptBox["y", 
         RowBox[{"i", "+", "1"}]], "-", 
        SubscriptBox["y", "i"]}], ")"}], "-", " ", 
      RowBox[{"m", " ", "g"}]}]}], ",", " ", 
    RowBox[{"i", "=", "1"}], ",", "2", ",", "3", ",", 
    RowBox[{
     RowBox[{"...", "M"}], "-", "1"}]}], TraditionalForm]]],
 ". "
}], "Text"],

Cell["\<\
The last mass, at the top of the chain, has no mass above it,  so its \
equilibrium equation is different:\
\>", "Text",
 CellChangeTimes->{{3.446592541737834*^9, 3.44659254661594*^9}}],

Cell[TextData[{
 "\t",
 Cell[BoxData[
  FormBox[
   RowBox[{"0", "=", 
    RowBox[{
     RowBox[{"-", 
      RowBox[{"k", "(", 
       RowBox[{
        SubscriptBox["y", "M"], "-", 
        SubscriptBox["y", 
         RowBox[{"M", "-", "1"}]], "-", "a"}], ")"}]}], " ", "-", " ", 
     RowBox[{"m", " ", "g"}]}]}], TraditionalForm]]],
 ","
}], "Text"],

Cell[TextData[{
 "where ",
 Cell[BoxData[
  FormBox[
   RowBox[{"a", " "}], TraditionalForm]]],
 "is the equilibrium displacement between the masses in the absence of \
gravity. "
}], "Text"],

Cell[TextData[{
 "\tYou can use ",
 StyleBox["Solve",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " to determine the equilibrium positions of the masses in such a system.  \
First,  choose a value of ",
 Cell[BoxData[
  FormBox["M", TraditionalForm]]],
 " and define the position of the lowest mass, sitting at ",
 Cell[BoxData[
  FormBox[
   RowBox[{"y", "=", "0"}], TraditionalForm]]],
 ":"
}], "Text",
 CellChangeTimes->{
  3.446592567318049*^9, {3.4589246941278343`*^9, 3.4589246970200367`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"M", "=", "20"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"y", "[", "0", "]"}], " ", "=", " ", "0"}], ";"}]}], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.157"],

Cell[TextData[{
 "Next,  make a table of equations for the other masses, ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"i", "=", "1"}], ",", "..", ",", 
    RowBox[{"M", "-", "1"}]}], TraditionalForm]]]
}], "Text",
 CellChangeTimes->{3.4465925737730627`*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"eqns", " ", "=", " ", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"0", "\[Equal]", 
      RowBox[{
       RowBox[{"-", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"2", 
           RowBox[{"y", "[", "i", "]"}]}], "-", 
          RowBox[{"y", "[", 
           RowBox[{"i", "-", "1"}], "]"}], "-", 
          RowBox[{"y", "[", 
           RowBox[{"i", "+", "1"}], "]"}]}], ")"}]}], "-", " ", 
       RowBox[{"m", " ", 
        RowBox[{"g", "/", "k"}]}]}]}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1", ",", 
       RowBox[{"M", "-", "1"}]}], "}"}]}], "]"}]}], ";"}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.158"],

Cell["To this list you must add the equation for the last mass:", "Text",
 CellChangeTimes->{{3.446592581452362*^9, 3.446592581829583*^9}, {
  3.5141436116542263`*^9, 3.514143621847628*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"eqns", " ", "=", " ", 
   RowBox[{"Append", "[", " ", 
    RowBox[{"eqns", ",", 
     RowBox[{"0", "\[Equal]", 
      RowBox[{
       RowBox[{"-", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"y", "[", "M", "]"}], "-", 
          RowBox[{"y", "[", 
           RowBox[{"M", "-", "1"}], "]"}], "-", " ", "a"}], " ", ")"}]}], "-",
        " ", 
       RowBox[{"m", " ", 
        RowBox[{"g", "/", "k"}]}]}]}]}], "]"}]}], ";"}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.159"],

Cell["\<\
 Finally,  define the list of variables, and solve the equations:\
\>", "Text",
 CellChangeTimes->{3.446592586307283*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"vars", " ", "=", " ", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"y", "[", "i", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1", ",", "M"}], "}"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"soln", " ", "=", " ", 
   RowBox[{"Solve", "[", 
    RowBox[{"eqns", ",", " ", "vars"}], "]"}]}], ";"}]}], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.160"],

Cell[TextData[{
 "Although we suppressed the output in order to save space, you can check \
that ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " actually solved the coupled equations analytically. For more complicated \
problems, it is usually better to solve the problem numerically, providing \
values for the parameters in the equations before a solution is attempted."
}], "Text",
 CellChangeTimes->{{3.4465925982774982`*^9, 3.446592598666202*^9}}],

Cell[TextData[{
 "\tIn Cell ",
 ButtonBox["9.161",
  BaseStyle->"Hyperlink",
  ButtonData:>"Cell 9.161"],
 " we plot the positions of the masses using a ",
 StyleBox["ListPlot",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ", taking ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"g", "=", "9.8"}], " ", ",", " ", 
    RowBox[{"m", "=", "0.1"}], ",", 
    RowBox[{
     RowBox[{Cell[""], "k"}], "=", "10"}], ",", " ", 
    RowBox[{"a", " ", "=", " ", "0.2"}]}], TraditionalForm]]],
 ":"
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"g", "=", "9.8"}], ";", 
  RowBox[{"m", "=", "0.01"}], ";", 
  RowBox[{"k", "=", "10"}], ";", 
  RowBox[{"a", "=", "0.2"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"pos", " ", "=", " ", 
   RowBox[{
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"0", ",", 
        RowBox[{"y", "[", "i", "]"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"i", ",", "0", ",", "M"}], "}"}]}], "]"}], "/.", 
    RowBox[{"soln", "[", 
     RowBox[{"[", "1", "]"}], "]"}]}]}], ";"}], "\n", 
 RowBox[{"ListPlot", "[", 
  RowBox[{"pos", ",", 
   RowBox[{"PlotStyle", "\[Rule]", 
    RowBox[{"PointSize", "[", "0.02", "]"}]}], ",", 
   RowBox[{"PlotLabel", "->", "\"\<equilibrium positions\>\""}], ",", 
   RowBox[{"Axes", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"False", ",", "True"}], "}"}]}]}], "]"}]}], "Input",
 ShowCellTags->True,
 CellChangeTimes->{3.44778184760594*^9},
 CellTags->"Cell 9.161"],

Cell[BoxData[
 GraphicsBox[
  {Hue[0.67, 0.6, 0.6], PointSize[0.02], PointBox[CompressedData["
1:eJxTTMoPSmViYGAQBWIQjROs+njJN6nAHsZdvqzyuKbVJDjf95Z0TaLRUjif
d+neg+Jqm+H8jIlva+xN98H5ojfPfQ9+fBTOX8b8vEfj7Vk433bJ/X18cy7D
+Ycva6dKProB5ycIRFhuOXEPzufX3TT3/fJHcH5ZxArTs9bP4PzCrr4nn+Rf
wflfD6WsSgh5B+ezNU517s75COdfX1xgy3X9M5z/9uRhp7WZ3+B8v899wSUq
P+H8T/KX8uPZ/8D59/x7p+cJ/bcHAPvnUw0=
    "]]},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{False, True},
  PlotLabel->FormBox["\"equilibrium positions\"", TraditionalForm],
  PlotRange->Automatic,
  PlotRangeClipping->True]], "Output",
 CellChangeTimes->{3.4477818483286858`*^9},
 CellTags->"Cell 9.160"]
}, Open  ]],

Cell["\<\
The rod is compressed near the bottom because of the weight of the masses \
above it. The reader is invited to vary the parameters in this problem, to \
answer the following questions:\
\>", "Text"],

Cell[TextData[{
 "\tHow does the overall height of the rod depend on the combination ",
 Cell[BoxData[
  FormBox[
   RowBox[{"m", " ", 
    RowBox[{"g", "/", "k"}]}], TraditionalForm]]],
 "? How does it depend on ",
 Cell[BoxData[
  FormBox["a", TraditionalForm]]],
 "?  How does it depend on the number of masses ",
 Cell[BoxData[
  FormBox["M", TraditionalForm]]],
 "? (For this simple system, these questions can also be easily addressed \
analytically. Some examples in the exercises are given for which  the answers \
are not quite so obvious.)"
}], "Text"]
}, Closed]],

Cell[CellGroupData[{

Cell["Linear Equations and Under-Determined Systems", "Section",
 CellTags->"c:57"],

Cell[TextData[{
 "\tNote that the ",
 ButtonBox["equations (9.10.1)",
  BaseStyle->"Hyperlink",
  ButtonData:>"(9.10.1)"],
 " are linear, and so can be written as a matrix equation "
}], "Text"],

Cell[TextData[{
 "\t",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     StyleBox["L",
      FontWeight->"Bold",
      FontSlant->"Plain"], "\[CenterDot]", 
     RowBox[{"(", 
      RowBox[{"x", ",", "y", ",", "z"}], ")"}]}], "=", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"0", ",", "4", ",", 
       RowBox[{"2", "-", "3"}]}], ")"}], "=", 
     RowBox[{"(", 
      RowBox[{"0", ",", "4", ",", 
       RowBox[{"-", "1"}]}], ")"}]}]}], TraditionalForm]]],
 ", "
}], "Text"],

Cell[TextData[{
 "where ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    StyleBox["L",
     FontWeight->"Bold",
     FontSlant->"Plain"], "=", 
    RowBox[{"(", "\[NoBreak]", GridBox[{
       {"1", "1", "1"},
       {"0", "2", "1"},
       {"0", "0", "1"}
      },
      GridBoxAlignment->{
       "Columns" -> {{Decimal}}, "ColumnsIndexed" -> {}, 
        "Rows" -> {{Baseline}}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}]}], 
   TraditionalForm]]],
 ".This matrix has a nonzero determinant, and therefore a unique solution can \
be found by the matrix inversion technique discussed in ",
 ButtonBox["Sec. 9.5",
  BaseStyle->"Hyperlink",
  ButtonData:>"Sec. 9.5"],
 ". Consider, however, the case of a matrix with zero determinant, such as \
the matrix ",
 StyleBox["g ",
  FontWeight->"Bold"],
 " that appeared in ",
 ButtonBox["Eq. (9.5.10)",
  BaseStyle->"Hyperlink",
  ButtonData:>"(9.5.10)"],
 ". Matrix inversion does not work for such a matrix, because when the \
determinant of ",
 StyleBox["g",
  FontWeight->"Bold"],
 " is zero, a solution need not exist, and if it exists it will not be \
unique. Nevertheless, one can apply ",
 StyleBox["Solve",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " to the system to find the solution(s), if any:"
}], "Text",
 CellChangeTimes->{3.446592660167107*^9}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"g", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "4", ",", "6"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "6", ",", "9"}], "}"}]}], "}"}]}], ";"}], "\n", 
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"g", ".", 
     RowBox[{"{", 
      RowBox[{"x", ",", "y", ",", "z"}], "}"}]}], "==", 
    RowBox[{"{", 
     RowBox[{"1", ",", "1", ",", "1"}], "}"}]}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "y", ",", "z"}], "}"}]}], "]"}]}], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.162"],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output"]
}, Open  ]],

Cell[TextData[{
 "In this case, no solution exists because the three equations are \
self-contradictory.  However, for other equations involving ",
 StyleBox["g",
  FontWeight->"Bold"],
 " there can be an infinite number of solutions (the system is",
 StyleBox[" under-determined",
  FontSlant->"Italic"],
 "):"
}], "Text",
 CellTags->"i:85"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"g", ".", 
     RowBox[{"{", 
      RowBox[{"x", ",", "y", ",", "z"}], "}"}]}], "\[Equal]", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "3"}], "}"}]}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "y", ",", "z"}], "}"}]}], "]"}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.163"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Solve", "::", "\<\"svars\"\>"}], ":", 
  " ", "\<\"Equations may not give solutions for all \\\"solve\\\" variables.\
\"\>"}]], "Message"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{"x", "\[Rule]", 
    RowBox[{"1", "-", 
     RowBox[{"2", " ", "y"}], "-", 
     RowBox[{"3", " ", "z"}]}]}], "}"}], "}"}]], "Output"]
}, Open  ]],

Cell[TextData[{
 "Now  the three equations for",
 StyleBox[" x",
  FontSlant->"Italic"],
 ", ",
 StyleBox["y",
  FontSlant->"Italic"],
 ",",
 " and ",
 StyleBox["z ",
  FontSlant->"Italic"],
 "are identical and so there are more unknowns than there are independent \
equations,  leading to a range of possible values for ",
 StyleBox["x, y, ",
  FontSlant->"Italic"],
 " and ",
 StyleBox["z",
  FontSlant->"Italic"],
 ". "
}], "Text"]
}, Closed]],

Cell[CellGroupData[{

Cell["Nonlinear Equations", "Section",
 CellTags->"c:58"],

Cell[TextData[{
 "\tThere are many ",
 StyleBox["nonlinear ",
  FontSlant->"Italic"],
 "equations with perfectly good solutions that can't be found analytically \
using ",
 StyleBox["Solve",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ", or numerically using ",
 StyleBox["NSolve",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ". ",
 StyleBox["Solve",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " and ",
 StyleBox["NSolve",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " only work on certain simple types of equations like polynomial equations \
or linear equations. An example where both ",
 StyleBox["Solve",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " and ",
 StyleBox["NSolve",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " fail is the equation"
}], "Text",
 CellTags->"i:110"],

Cell[TextData[{
 "\t",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"cos", " ", "x"}], "=", " ", 
    RowBox[{
     SuperscriptBox["\[ExponentialE]", "x"], "."}]}], TraditionalForm]]]
}], "Text"],

Cell[TextData[{
 "If you try to solve this equation using ",
 StyleBox["Solve",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " or ",
 StyleBox["NSolve",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " you will get an error:"
}], "Text",
 CellChangeTimes->{{3.446592770437759*^9, 3.446592782852481*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Cos", "[", "x", "]"}], " ", "\[Equal]", " ", 
    RowBox[{"Exp", "[", "x", "]"}]}], ",", "x"}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"NSolve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Cos", "[", "x", "]"}], " ", "\[Equal]", " ", 
    RowBox[{"Exp", "[", "x", "]"}]}], ",", "x"}], "]"}]}], "Input",
 ShowCellTags->True,
 CellChangeTimes->{{3.51414372239051*^9, 3.514143733068459*^9}},
 CellTags->"Cell 9.164"],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"Solve", "::", "nsmet"}], "MessageName"], ":", 
  " ", "\<\"This system cannot be solved with the methods available to Solve. \
\\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", \
ButtonFrame->None, ButtonData:>\\\"paclet:ref/Solve\\\", ButtonNote -> \
\\\"Solve::nsmet\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.4465927514591713`*^9, 3.5141437356770153`*^9},
 CellTags->"Cell 9.164"],

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Cos", "[", "x", "]"}], "\[Equal]", 
    SuperscriptBox["\[ExponentialE]", "x"]}], ",", "x"}], "]"}]], "Output",
 CellChangeTimes->{3.4465927515833893`*^9, 3.514143735693771*^9},
 CellTags->"Cell 9.164"],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"NSolve", "::", "nsmet"}], "MessageName"], ":", 
  " ", "\<\"This system cannot be solved with the methods available to \
NSolve. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", \
ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/NSolve\\\", ButtonNote -> \
\\\"NSolve::nsmet\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.4465927514591713`*^9, 3.514143735767741*^9},
 CellTags->"Cell 9.164"],

Cell[BoxData[
 RowBox[{"NSolve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Cos", "[", "x", "]"}], "\[Equal]", 
    SuperscriptBox["\[ExponentialE]", "x"]}], ",", "x"}], "]"}]], "Output",
 CellChangeTimes->{3.4465927515833893`*^9, 3.5141437357816963`*^9},
 CellTags->"Cell 9.164"]
}, Open  ]],

Cell["\<\
In the next section, we will consider numerical methods for solving general \
nonlinear equations. \
\>", "Text"],

Cell[TextData[Cell[BoxData[GridBox[{
   {
    StyleBox[
     RowBox[{
     "Table", " ", "9.20", "  ", "Three", " ", "different", " ", "Types", "  ",
       "of", " ", "Equations"}],
     FontSize->9]},
   {GridBox[{
      {
       StyleBox[
        RowBox[{"x", "=", "y"}],
        FontWeight->"Bold"], 
       RowBox[{
        StyleBox["Immediately",
         FontFamily->"Times"], 
        StyleBox[" ",
         FontFamily->"Times"], 
        StyleBox["evaluate",
         FontFamily->"Times"], 
        StyleBox[" ",
         FontFamily->"Times"], 
        StyleBox["y",
         FontFamily->"Courier",
         FontWeight->"Bold"], 
        StyleBox[" ",
         FontFamily->"Times",
         FontSlant->"Italic"], 
        StyleBox["and",
         FontFamily->"Times"], 
        StyleBox[" ",
         FontFamily->"Times"], 
        StyleBox["assign",
         FontFamily->"Times"], 
        StyleBox[" ",
         FontFamily->"Times"], 
        StyleBox["result",
         FontFamily->"Times"], 
        StyleBox[" ",
         FontFamily->"Times"], 
        StyleBox["to",
         FontFamily->"Times"], 
        StyleBox[" ",
         FontFamily->"Times"], 
        StyleBox["x",
         FontFamily->"Courier",
         FontWeight->"Bold"]}]},
      {
       StyleBox[
        RowBox[{"x", ":=", "y"}],
        FontWeight->"Bold"], 
       RowBox[{
        StyleBox["Evaluate",
         FontFamily->"Times"], 
        StyleBox[" ",
         FontFamily->"Times"], 
        StyleBox["and",
         FontFamily->"Times"], 
        StyleBox[" ",
         FontFamily->"Times"], 
        StyleBox["assign",
         FontFamily->"Times"], 
        StyleBox[" ",
         FontFamily->"Times"], 
        StyleBox["y",
         FontFamily->"Courier",
         FontWeight->"Bold"], 
        StyleBox[" ",
         FontFamily->"Times",
         FontSlant->"Italic"], 
        StyleBox["to",
         FontFamily->"Times"], 
        StyleBox[" ",
         FontFamily->"Times"], 
        StyleBox["x",
         FontFamily->"Courier",
         FontWeight->"Bold"], 
        StyleBox["  ",
         FontFamily->"Times"], 
        StyleBox["only",
         FontFamily->"Times"], 
        StyleBox[" ",
         FontFamily->"Times"], 
        StyleBox["after",
         FontFamily->"Times"], 
        StyleBox[" ",
         FontFamily->"Times"], 
        StyleBox["x",
         FontFamily->"Courier",
         FontWeight->"Bold"], 
        StyleBox["  ",
         FontFamily->"Times",
         FontSlant->"Italic"], 
        StyleBox["is",
         FontFamily->"Times"], 
        StyleBox[" ",
         FontFamily->"Times"], 
        StyleBox["evaluated",
         FontFamily->"Times"]}]},
      {
       StyleBox[
        RowBox[{"x", "==", "y"}],
        FontWeight->"Bold"], 
       RowBox[{
        StyleBox["Test",
         FontFamily->"Times"], 
        StyleBox[" ",
         FontFamily->"Times"], 
        StyleBox["whether",
         FontFamily->"Times"], 
        StyleBox[" ",
         FontFamily->"Times"], 
        StyleBox["x",
         FontFamily->"Courier",
         FontWeight->"Bold"], 
        StyleBox[" ",
         FontFamily->"Times",
         FontSlant->"Italic"], 
        StyleBox["and",
         FontFamily->"Times"], 
        StyleBox[" ",
         FontFamily->"Times"], 
        StyleBox["y",
         FontFamily->"Courier",
         FontWeight->"Bold"], 
        StyleBox[" ",
         FontFamily->"Times",
         FontSlant->"Italic"], 
        StyleBox["are",
         FontFamily->"Times"], 
        StyleBox[" ",
         FontFamily->"Times"], 
        StyleBox["equal",
         FontFamily->"Times"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[1.26]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}]}
  }]]]], "Text",
 CellFrame->True,
 Background->GrayLevel[0.849989],
 CellTags->"i:109"],

Cell[TextData[StyleBox["",
 FontSize->9]], "Text"],

Cell[TextData[Cell[BoxData[GridBox[{
   {
    RowBox[{
     StyleBox[
      RowBox[{
       RowBox[{
       "Table", "9", ".21", " ", "Solving", " ", "Equations", " ", "for", " ",
         "All", " ", "Roots"}], ",", " ", 
       RowBox[{"Analytically", " ", "and", " ", "Numerically"}]}],
      FontSize->9], "\[IndentingNewLine]"}]},
   {
    StyleBox[GridBox[{
       {
        StyleBox[
         RowBox[{"Solve", "[", 
          RowBox[{
           RowBox[{"lhs", "==", "rhs"}], ",", "x"}], "]"}],
         FontFamily->"Courier",
         FontWeight->"Bold"], 
        RowBox[{
         RowBox[{"Solve", " ", "an", " ", "equation"}], ",", 
         RowBox[{
         "giving", " ", "a", " ", "list", " ", "of", " ", "replacements", " ",
           "for", " ", 
          StyleBox["x",
           FontFamily->"Courier",
           FontWeight->"Bold"], 
          StyleBox[" ",
           FontSlant->"Italic"]}]}]},
       {
        RowBox[{
         StyleBox["x",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         StyleBox[" ",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         StyleBox["/.",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         StyleBox[" ",
          FontSlant->"Italic"], 
         StyleBox["solution",
          FontSlant->"Italic"]}], 
        RowBox[{
        "Use", " ", "the", " ", "list", " ", "of", " ", "replacements", " ", 
         "to", " ", "get", " ", "values", " ", "for", " ", 
         StyleBox["x",
          FontFamily->"Courier",
          FontWeight->"Bold"]}]},
       {
        RowBox[{"\[IndentingNewLine]", 
         RowBox[{
          StyleBox[
           RowBox[{"NSolve", "[", 
            RowBox[{
             RowBox[{"lhs", "==", "rhs"}], ",", "x"}], "]"}],
           FontFamily->"Courier",
           FontWeight->"Bold"], "\[IndentingNewLine]", "or", "\n", 
          StyleBox[
           RowBox[{"N", "[", 
            RowBox[{"Solve", "[", 
             RowBox[{
              RowBox[{"lhs", "==", "rhs"}], ",", "x"}], "]"}], "]"}],
           FontFamily->"Courier",
           FontWeight->"Bold"]}]}], 
        RowBox[{"\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{
         "Solve", " ", "certain", " ", "simple", " ", "types", " ", "of", " ",
           "equations", " ", "numerically"}]}]}
      },
      GridBoxAlignment->{
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[1.26]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}],
     FontFamily->"Times"]}
  }]]]], "Text",
 CellFrame->True,
 Background->GrayLevel[0.849989]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Exercises for Sec. 9.10", "Subsubtitle",
 CellTags->{"Ex. 9.10", "c:59"}],

Cell[TextData[{
 StyleBox["(1)",
  FontWeight->"Bold"],
 " Figure ",
 ButtonBox["9.4",
  BaseStyle->"Hyperlink",
  ButtonData:>"Fig. 9.4"],
 " shows several masses suspended in equilibrium from a mobile, with the \
length ratios of the crossbars shown. Assuming that the crossbars and strings \
have negligible mass, that mass 1 is 2 kg, and mass 6 is 1 kg,  find the \
values for the unknown masses ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["m", "2"], TraditionalForm]]],
 ",",
 Cell[BoxData[
  FormBox[
   SubscriptBox["m", "3"], TraditionalForm]]],
 ",\[Ellipsis]",
 Cell[BoxData[
  FormBox[
   SubscriptBox["m", "5"], TraditionalForm]]],
 ". (Hint: Recall that in equilibrium the torques from each weight must \
balance: torque = perpendicular force \[Times] lever arm length.) Use a \
pencil and paper to set up this problem. Don't try to do everything at the \
keyboard!"
}], "Text"],

Cell[BoxData[Cell[GraphicsData["CompressedBitmap", "\<\
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
16SCfcD08uxedH+XG97eO2N7Rv0PEF1x/Q==\
\>"], "Graphics",
  Evaluatable->False,
  ImageSize->{330.438, 137.75},
  ImageMargins->0,
  ImageRegion->{{0, 1}, {0, 1}}]], "Picture"],

Cell["Fig. 9.4", "Caption",
 CellTags->"Fig. 9.4"],

Cell[TextData[{
 StyleBox["(2)",
  FontWeight->"Bold"],
 " Find the current ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["I", "1"], TraditionalForm]]],
 " running through resistor ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["R", "1"], TraditionalForm]]],
 " in the circuit of Fig. ",
 ButtonBox["9.5",
  BaseStyle->"Hyperlink",
  ButtonData:>"Fig. 9.5"],
 " :"
}], "Text"],

Cell[BoxData[Cell[GraphicsData["CompressedBitmap", "\<\
eJztfQe8XVWV/jPvvveSvJaX3ntCEgIJEJKQAIkoTUE60pMQSugI6IzTfOoo
goyFERiRjmAddaxYKKKOjuNYUFGUqU4TpRMRBPK/Z92z19pnn/Wtvc95D3/8
x3d/yX3nnr32Kt9eu7dDt1yy7fTztlxy1tYtcw+8aMuF287aevHcAy64qPmq
/WVtbe2bm//nz23Lnne0tbmvHc1/3tfW7CsLG3n70n57TOtF87OqlZjNXw+o
QaPaBgcH12Xv2vlJ3rW1t91zzz3ZT/ofvst+/cJj29ag1+7TfCbJK/Swtdnr
juwHPTWyp72KT6uzp08lSqBoa3IVfar2/NupnP1fheiIQSc/rUnUoLsFYfMz
zwPJfUYpGuyuaNCRSNfI6TZu3Fii8+V2JNKl4ixWLmDEA3VXcqo2A3JPgxis
VGzz6Qrv9vBFZvEcRXsx9L+q2LGQqDoIIf+TxVpphLXnYT73MJ4WNsqwOEsR
h8wukK5RoGuGNypFL9LtzkB8ogpqiziRd0V+0I40sGM0mESL2xknWV3PosVI
q2VsapdJAtXVAnZhVl1xkjX1LNrJ8N5lRtiYhHihZ2e0o40wiFDgjhCwgG4n
o4z16fasB90STvMlKM3HFEnoqZuJlyA7ephkKT/tVU/JpUi1hUh4b+UYPShg
J2bVGydZV89Ay0ldsa0Vsf014mW0fUYYRChwOAhYQGc1Eny6tfWg2xml9FwU
0M9ePJ+fxiFj5qOA8cxe2gd71zNhOTOYh6RNQMbMNvXrYKYN5qIRz0Psa/rz
LoZfzjZ8b1LNeBONMIdQzP/G1+Thw7W+Hly7clrN5Kcp/BTImMYBk5XkbGcu
lJxTi5zp3YZ6Sq5gVtP5aZrybipSfEoxmtEWLscIAvYZgglep44BC1xhoqGf
37+w7ND4ae7j85vq8XNZQMNlUk7nZxNN7nDw8+n2rQf77ux6kxBgc5hkMj/N
5tSfhIqnmXGSjUPQOSHHjzNKjXlGaWaVNnONsPGJelmlZSqPl9eDbhVKij5O
Ldil7kMOAuvhAWa1IE6yfz2L9mQG/UjGIiYZx08LkZWwdSoNkn5E8oohmJCQ
5mMNv1lciUe8WFwAZGW/exJlWa3cXiP/HVAPxjUoWUYjm2HfBcaAPSrpdC2N
kxxUz0AZnxzLTzsr75Yhs+DQAexfwhg102it4Tq++zUM11me6H6NRFdfarhi
lxG23MgiVryD60G3jpOiAxm2AqUWHO6T1m0Hx12BiDsQ+5r+vJ75NfhpN+Xd
SpHbKMgF6uxq0JOtrx6Cvobzuthas3XFkON2qc6UhWTvtcmFlTXjvaoePNTw
H5097clPq/gpkLE7CqiZNvso+Drb/Ga8q2u15rRPBydmAnVT6Q6pZ9YGdmWZ
klqrxHQE5deH1xNMSBAw6/lpHT8Fxq1FAa+pJ5x+1vTCkbgjcUfiDj3ul7In
qi0vr8fgi9lTFwUWC4W31+P3BaLqCKmoxB+Vc/Br0ubfS4cgiYozbVqspvqf
56dhZPo5nWo0GxBA/9bhF0MEbxsCX3oa83+d1WiFvj7fq7OnHiWBaeZyDAW0
uj/eR5JreLzi/dlTp8JvDOf89qL9wy08oRM4JqeLDZ9qCymyONlv1BnNftfM
uNdmT9Sa6+ZytgvlsubnHcMiRussdUpZ0SgEDOZLOi4bqmiXBLGk6uK47xku
kT69jMEQ8buHKsNaaNCLCuArhiq1i92lT4/5V8MnoZ9Dh8y0MwdL64oOeLxc
ePP5ncMik54mcmjNtowwhWMgIqN6Xg08VaQ1DNimtcRkj8XhguolajmMileq
YG6tzI00Jwa92dMtdeCIlRVXFRNkFJdWOZ3D4/oqwuHQ//uKBQs93VCFcx9H
uzpeRlXSuS8RsCtZ7ljO39dVETQOgfNeDoB1zPurCBowfP7KYZY1HnF59zAL
kjUiww3XRAMuscKa9qktGs7rXjFUZ5OJ5neZ+aW9HueE/HI5y4VzQUGMD1RR
QxZiXI7MShjC1+gqoSFrRC5r5fHm56bKDBKGsN/SytlNkkrVgSyMoZ+VlqHN
TExp+l5VhfNs5Pf0vUcVVnOKBlZaKDrHMNDHnr53q8J5XlGrShbNL8attLJ7
fhWLdg05n5DHzjkK5dyiSivDiMfzC7Fey/AUuiKMfVwVpeGSQI14Z9VCMSSA
epeQ/MRiOLTr7a3M2fy8T2VRzTi9n/znebL7+3ia/6cSQYO72oOttlupv3Fy
0ZS5XG79afa0MHsq9RdOrlIAzMh116rRNyrAdbb0br7qbenSfBrTktB8KnUB
NplFxjQU+obsmwYAZvNTacRhcxEbWe33R9kTKTWXY5cGnDZXQclaA/qGnJEf
pjXJF3gCHaIdjNybQ/1ONZGDa28vZouX8dNgyHtrETm4tHCTEkCStdGv5Qox
yXiTKj41c7nl5Frm2sxJHujSrWDtqmeX5TIKKhIJf22r1p+Gip9exA12DTYx
9N2MFm2MocHBEtszimzherNT2a+1thlx3Aulzh+rQpu4+ongcKUoPQD4DKFT
WwStJC4kWQ5ne0vp5pO/eMCxIlvfGGq0jV9oHj+a03prC6QWXRYeprAfd1+O
VkJgWwwBN9Kl5fqtrVxYFvhylHoB3SWhOmcXvUBGcYKIhP347P0ByAteH/I+
x4T2ZYjPaUpAf/Z1ELtZyYxzYqhq0jSAtip04xQ6h0JspPvCUNPzGOEX2EnO
VIQOIKFayXNBKOV8BP2zCAfyy0nZ08EMc0n58w2YnzVy7lnMPFDnwEQYz2NN
XLsq+7jQVq+upS5B+1tkJSkyRRFwEMe9IEXU6xC+25nP2SzqEH53fjJvAPJT
BshnK0ZrZcUhgEcm79wUBS9Gxvu7ANy7H6GkOId94ggiaYQKJekiJcEMJLzB
zDQ0Djf1SxIP0mqqF81J/KFRDPk12lk5nc+3v0XcjHo0SMHs99kpar8BpSA1
yrQM+AOk+HlKQJ/C4Fgk8sx0nOONtwmKKzWf7zOyzflKEdSr6PlaI6m3JdtA
zjgFYfG97JsKeCqFNBylm5kE3MVFoVrV/l2UtBeyDqeguKelF2jxxNM2BxHD
7+ep6idR85n0c/PyfhN6U55UWhPqdNaYBiepgH6zpydZOVWBpKBJ4F+kSXf2
Q9ifngLNhQhYUq6TRTY4PcZmT9J2T0qA8xVgtUxOQrvEzniMcxSg/E6Noz1T
T8GtydqTsVS/UA/nPoSbVgmSQlqA9G9iOpyH5Gk7D7uKGp7LqJ7L75KEOnBj
iTBFKcFEhwQG27jYCXLkuYq7N6VsSdaejJ3BfvsjBOOZHCCZcHOKFFdRxirU
KQoddWp/bJQVUsIG3C5EwG5K0Xkb0nkGF2j3mwVu0Ki4BBGflK5NqfU1Q1GS
0vAnLO10hekbOPSUFOFn5uhrbVGngZ8y3awBSLIHAcPs98kpGp1hJg61wX6K
8P4ZB4io0mjLTObzAL/7Z346KYx4GjAoM94h5LthH3NOyPgPGGidGGqidY1H
sUVaE/DnXK78nA3U2VLQrOyJ+r0PcsSfIaEnhHy2JJYE0xW6fohNfLJN8oPW
YNQGf0sazlICtEGHB1mUeNrxoRTX+NEcxk2I+DkHCkrwn5/4BaTfAjs21OoU
TlHSYaLC7F8QkPfrJdRxoYyTEb5zkMh/ZZE/RXFLqXiSgS8JcuMcPh7/agDq
O9OHFTV6GDWQU0tgn2gCEQQQLr9gID6ePfWxSHqnC6Cg+Wzxf/K7jylSulk8
kRwTcjzeQHWhAt4Ai6yBahbm1n/62bv5bOF8dKj0cQjnnZQAKmP+u4hzUAX5
A+zu3SyOURIvWZ9mXcaxAE2lMFGyX0v97OsLPQJZGkOaFCGH/Z/E4lhLmyV5
2gS9haNYK9eYLzUNVrfUlanb5RznCRP6xXoZIyLP4XyxZ5gHdi7KSEVfzko6
khlQg7s3lJIA/E7M4knDgz8acMvw28mgP6KomBczCw3ng7K/q7yimGxbWlSs
w0wAinGvF+qccrQSY/diqR+rqxYqKdx8fiI3X2tM5hP0zcfW5FZp5jw8+Sn7
KykRKEBT13+evV/tua+j2LtlzSaGIYi9QHHkgORqxfsoBi3y8wqmkpv3s2pr
mDRXaDNLW8QaPM4pKYtnx3PEBNwLIt0udT+913nCE9J2Hqv2mJGcHygq6yHF
+YBCv64o1NrviefH57IGjyISwWoCYyVHAXxNSbxcqLSQZanQI6ikub4opZ1T
nd591Ivm9JrC2vjyEsqcWSzgEaMMuYGF+5nY8ZGdKkv46SOs0HQvhmtOtQ57
9WbF53DEhxH016s6OAo5dkF0CBjcxgEzPAYuNK91pI83m8m/yU/w3JabONoY
hXdnUblyAfYhJpjOuK3xFAJD1jNzbkGY6OvO7NFaZDcHKktVnReM/kGgLog0
W6qLvT0xo4dDXRl9jj6cyJ+m4yaWzuXi7JZSUviRtA304jG3KzEoIDwbK/vr
6wxKq+kxtecYkW9lQ7S1yNpSjaWKuOZHHD9ojzWR7/USzbHR1ojkxp7FMEdT
BK75lASC2wfkDEEBoSwrPMEyovvZSNrkmCmz2OrbmIccJyUqjuLMC1Vr9xRy
Cx60xJ+i6/QVL7kG8zbM6Oy7nc2aZnC9vah+4A5NiptRASemuUVG2ceV552K
ts2w3M5zGT6A9FcUqdRMn4qS7LaSIQFLKd0aRc1zoICZgZi8JQxnDqR6DgK+
hCySQwA/bJrQltcpmpKBRdRpymsLt7hDS3zZb3UXMxCftNzmI6zqfsjg6xV/
apODd/yy3i9y3MeVZv54S+49FzBigvbdng86LTo5FHqNQC7njt2ILAp9JPsL
D1bN27pwKnBcUV7AgsbkqbZqVU+NQty2Nm+jpzYHIr3TVNvEgw5riXDrVbTU
H2Autygpp7GHG7Vo5UNQ27htGk50SxEncnL+O8gb9PvjRZPLhcD1fnL4Mkv2
X4QSTsqMDyIw5UTpIEA2Cos9cAeQpN8rmfg65iznE7ympbCsCRgX1xAu+nQN
C4co+z29gqt7P1HUNSC5jkPHhFq7pTaamyUgbS2r9LeFulJETJkA3Cij/GRg
TcmNrjV8UHP1Q1vGvh4ldXfcUniKXLj7lXMQcZFjkj/FDOSUyGsV89r01uWh
fnrFe5FjWcZtyKLUE+L1/ayOqbXV8e8UkwMlrvED/LpGPDWI8SoPCOLdFzcV
njY3oGa3Nv+UzYCVJKMcH/g3iHgsG3FIWEj0J2pNxBM8NXe0KqCW/nLW+GdM
vXpDRVJXD/XG1bTOOXSKuzE5FtNnuM1nvEjuo80R7peLD1rMVxuFQ9gLyP6+
2kOkwU5h2wybq1KbyH5pygbaSScb9NLtar1U6Oc0zDWGbZsE34IGTOYYcO/C
C7p+si1cO8U2z7api6bGxU0YZaSz1iiDZ+sGbvU7FniVbqjW5vTNIwwmagY0
CgaA1JOjT5/nJ9m9P073mYNb8mG/SHyaepzdSK6Gz/McV7rYh3HBoynUlq93
T19tNb6on18jZGSD1Egd9DejBKkGT7UN6J5B7qRdoDRHoXM3d2mlk0/nz2I4
Wo1ufw8oSrnJOhSlmoHQl7Nzn2Ni7ZorzRLtgi9avaW1P2jpW2t/hjsrcTDf
akVPqfhPjFs33FfX/NYX5AeE5/UPUqvVedmA4mWtTrV3DwPMNFPjdo7mtJNU
fFbP3huYx9/pGpTy37Qq8mV075nK8t3Rw2ExnMGWqoQG4M6Jqbs91zgY+zY0
hq46fQjqyiVT4m4xHYh8xlCFagFPM/t9sQ6LQcplpdXMIWi1q5F/fQZPMWdD
yUWImZtqCTzVVpfKK7lXb3uyBoTlrDoiKeZuihUU4ykm2QdrAG8eCLLCjIr6
WQWt3xfbzXAUSUTDADhLN6eixlpHjuj2RBKexPpRW53a5dTZlN24ojOlzFxd
SWrX0TBpBz+tYdd6ApmwLlTDbYvwGxRaKsAxvKCdJF3/uYl+M1s38GavZHXM
m4J6W2zKleMaw00e10XsHYIhxwhop4oRpXRJtYV3ozjtytIeRfSPKfRt/n1b
unZaQ7uH41hXpCzQFXzMiPIYMzbUGovUEtC0ZbEEgrWUh1g+mqIB9NJxRQ2I
eJEhUuPxCMdcH9NAH1oQJWYYUGvL1prPaA1YFuURZiyaUQeaVnG+K9RRagbp
+GhLqOHyoubzU4j+4Wq6wJHNcbVV287F4K+Z+boUXVyNFGv0VUhHonraoPo1
U5WK5kAxeiLRTiei8vUMfJuYwX3Tv6omeYCrGTsPE59nOAkeQjXRGiw09d6R
fA1cqy7w54tmxQo/URIM4Tyku9ZeWGk4prUWBcxPTKNUNbRBvtWJUMrqJstZ
JW8bQEh7RK7bkaV0v2HPeCSFmZylqo0XSCuOYm9HJI+miLJK7lQYpTtl7ep/
LEUdWJnKfV2yWO9JpJ80BNfWFQW7PyK5wU8xUdJyWWsAJDA+blA9VU2gXP8j
Pe3HkIHba/DW+EwriiLip/0yvAR3TNR6AxEZ9oFrSbXxi4q6yJGUeyMpshv+
YUTyTA3JqQdhr0+0XlaQ/NpA9VlfU79PFNOUMNrI7yYx+UOKfhTwOyXAqChl
VAEeFiQm/oqJn0uRonUMKbwjqHBRIljnF/mJIPNFvzRi+JyTUCK0aUuRnAMj
8xD/i0TtSOF9Poo9riigwRxbZxU1Qv9aHXK+IBE06ei53UGxRusOjlESKpOP
fUW2on9p+OJ1SFHp6/1XkUVpkOsiI8+Jfb+oYl+paygT9d1FjqLXRjWOZpqM
bfwHswhcU7f09cDSTH+5IuPfEks3+i6N7sLlJV1FAWL4K3TD9RaQ2P4viS5K
3y8PZcgaBEnifzYz4/4hC7g4a2yRo1h6QMjCWt/WG+hVan3rLOF8eE+yVrK0
sb8uNtaCTymchpaEcJpXtI55miwBHl+MAy3dL2RhrZaWSu/fq1hayrdwibho
HStM3MEQsUw9ocixdoEHjn6QluF/FhUu2Qz3XMjMcFCwl+oGa4/KtCKXVDtL
HaUz+IV0Fv6nqFdplO50ZNq0IgvohKWBkq2GpdJHgo0NrWAv1c5bkdZi+EOc
nSik1F6RLW6zi3G0NqiuxWbDUumBW81o4ltqMm9G1ommsAtBhKtCjpvYWNlC
+EgRoD3COCcb1skwzaMx63ZX+WrWhbsbkXW7hRxPNDSV8Ter20x8V6p86YWM
W0rfnuKsCOOcgKxbWGQBrds15HicYZ1swrXGVojvLiFf2VYvm7vgaBGxWK6r
hkahiVLGtojFzqoW1Ub9iceY7OnemNHL1CSl5AMzHbJqIEg/beOqQLNUFVRh
UkeS/ZtFxJaEnK2DOcAsVsAcjO/q4uBpI2BKT2T9fTXETkHkaXOjIvcblb1i
Myc6mFkW5l+P+PNmZAWYWBfOtoOV8l7qOUBgCYLIjWaiUskRHGVkMf9qtbIu
cvZSTJBRLsfPlyouWGq+pwG7HoqhbP4k5ndXrlNk87Q0VWjslZbzST/rLhO4
UhV4hoJPQcYM9tu+ogzSRXbRvCfkbB1dNq3IHqyQJgJt/6Lmru/PGQVdmPY8
GbKPK5WvCFXdxvZUUOzLSDFaWag1ScNZrezXO1VdNLZTK6pG9nyIdSkJSj0Z
cGK63Dtylm6ZSYtZmaXbCp593BjwZaF+2jLaNA3IHz/myXBy36HKSOhQjk/X
4PMGrD7Lj3r6ufcl/exF4BSgbYMvKPQ5pNAn2DdK2GuL39MEUaRPRjgnIB6u
WCjJDRcVZX9J+GcMCb4TfpwllJRM2I4BtJKtIp8potFQBWk7VQDncKtC9kt2
ZdE1LLScS1vLqZ1nAK4AvlxVMQHO3pgB9yYyulQxQOsXwbt0aRGDdU9GycZg
L5fUBMAKIpBbgTTFqAwK9yghU0r5/pKiQu2GQtJ+CZi+E+mXeoWcbJou1R2p
exe7Y9rfnVgcXGEbo49cagvYtMOXS+Yl7C617KGY70EayyIt8lHKm+/WAY5t
5gVK3GkksJ8670IquvtxtczTE8jM/jb/vxfnqXExfWET70qkINwF6h+g4YhL
qiVsSNeGa4HixOivTU0lJwcFeEk1ay5lQFFiMLu0zAC12DdpPkNFrb2foerZ
35Lq9vkMyXpTnKORlu1ctg5w6RQrTINDLpI1+aJOfXWibrQIvVTVRA8RedHU
G2VInoDAvDTU3z6uZRiVbxS4A6EfDNWzj8NpcysxKumj7bAsCbZm0KTnNtWg
uiMhPf3NAa21mqUOr7ac/+ZQWzgXJ2uN6InGFr5Q0dFkS+MtoVw54kqWjZHX
a8stP11RLryb68ZQDXesWFjWZb9l5OPHFeV3GVxvUlXQuEyvLV9WopekuUPb
S80sbRyuLb+HoKporT4uQS/DWDLR9eJJk0MQ5/4epKWeCzn796ULWS67n35Y
R1qHyt4+57O+NN19NxvA+izm6d5cVRNrM51Pd4OqJ5kg835VhcOmbaxQk6na
gHJhTBc6HCHY/lYqulOPEV6EDANXA+XtyOZTX4vlYLz60k5PTpNGgQeH/Kof
Ij1kaaT9znq0+6pwC47yLnt/JW7WOea+wWCreiVZxyOHHQ7mcDp9OJhTCmJY
9CbAD4ZFgpwvMMKvNj+QQtVzsSZBJlyDgO/q7HdTSOl70v83Iv11/EDkHgqP
1XlauB6Mi5L9XZuzCaZWw40uLmr2N9wblr2bT79aYxveJ2adzFwDn1iJyi5a
QUXdJtlArm14aqCABXnwcGu8G2tMy8a0zv4erLuQ0NPiF1OnhNqmdaBPl9pt
zkKy95r7r4T89XEu7bgdvx3g3rt3vt9rhw6FcbP/c4fgkZR830MZDHjkrhLQ
KOZ4nX4FB4xCJkFb4b5NGEOai0kIlCtuAMcqtmIF50MZi11pYNLBkRocKXi3
+MVUOrn1pQ8jdRlhuxhhHUHJ6j4Z7fKIbzu9rDHkVB4LXyRsVyN/X4IC4G76
pRwA++PwMCl4qAKMUVpYFwFEYQHq5DVsx1IUU7ZKLqsMk9yq0c15aGlRZJJZ
UoBZdiRkm4XAPbPfPYk8FhlZqNvgvzjR/ccaWWixoaPeTR0ytHuhxJ2PAuC9
AwtQgHY8jLfiVQmA5z/KAU+l9ZUJGAQw/qMOyTrDA+YbYQPReHHv6zW8Y74R
NlAzXmnxKERR1k0GAQDF9cgb4NUWA1yIyC0/4T1FjNtcFDCR40KS0rLVYTN6
bxY+h42Bh5bPigMxh0kmIWOEpLRmdtjM2sfw7JlGmTglGi9xqxfw3lm+HX5b
fVIsklYcVMwLxOKfdMD2ZYKZCOopRRJ6AnOXQgDWVwiBvlMF2lBmBQzagMyQ
6yJmxEkgBGBF2YwYgb7hZ5jMjZxXHHPc6QgPdyuDlitm+Fj5zml59Mw6kV4s
6DZy4TWZ1XK37pYKr4Ckwe860LvSpjGotnQBv6Nr+nLkl+Mrl9gwhnYztFRT
sDyvFKO0P68+JPsZrjmQ6PdzDB7jjTBYXQdO3W849bxh4FHaIlkfzlew28od
BQuVdwFfaf6MY+KFxXeajaXdolBxGSoEFf4rDXy0G4g0jBfU5OErajWbS8tQ
gV8tSpRlde5KG3zrQ7s/Sr4ejgkPPQ5IGsV3gSaLUcAYFDCMDnQAkiGLAJax
b8MTtWSAQU5RWlZ8p8FUOoQK2iG1SRDg74b0nSr7faDhKF2JDotO4s5kWTx8
HZckynIDf1rmSD252xo8LJ02UB1uuCE0oDsA0cnSMHiidUDSKL4LBC0vkpDn
lc4zsO0sZ4pvMauA/kCkxigUsAuzapgmaEDAAyOlPoMkpVMiKmHQ/Hwr0bnp
GCpjRiiLr1m9Io+nOaoVzzoI3WWELEzz3hWGTVpcv6c6NKdqfr7NiUZXzdCi
5FWKMZ0coM0M7s5xS+eTQIWk3fltBB6p1IXiagHaDB35uXa6IgWUzmSxFW6Y
CgfF3kE5XWkLklZzJpRfWsI4Ot8rLH4+XXpiSav2O0WHoXfaiYzriqH0tLGu
PM0WIiydyWRzbJgcg9Sj79KBTFCANH++y6IopHQgUwKLNm2oue5pZWny/IB/
Ygs0AelZZk+l0Gk+f78IULpbaPyaDv39hBKUtS+d4gSlSbP9vqLC6QAIix8W
WaRnPWERBFSyOr2VJQca/aiocnrlHbCAuTe99lqjJLzFXoMgvRcmPYD7ixCk
dw3c+qSg9f/jKhk5fShhrQJP8/knZjZOH/gB7H9aBCe9/6ct3mp+floFnPQB
SHH9n5l4pA9+y6znz4oQpA8vrisqlZqN0ydpREAQ8EBR5XSr16OAAITSESk1
OaZikj6VKyWYnA6peUJFjkEB9CAqlCqm4Ho917WwMU5aSsdfqsIHTDzSdd5b
0bn5+Umus9odq5abpeK839Q53a+FYxBAtb5xkJ3NsdxM+WEMhfQCX5PQ5rdT
hlbgSwPnB0UM0uvQfXUNvxfDwNX0ftZvPn8qIm4DW263XWWZVzrH7xQx2Avl
709GOEo7NyjGvhUDJfWM9Y+laFAuUv7BhExWJfxtDfZtbXHzNuTmxYr7j0Tk
S2ftm6yzdMHoZwwhmdX7hgnKfhz60RSOoLz+WgyZ/RORuT2ihKh7r2mWDLx/
OMJRerVfLWaPg5GvfiiZYxBwZwylVydmj1tTNCj7710mZIdw6G312N9ZxO8w
ZMwHI+xfyYp8OQbYEYmA3RQRKcMvXzIxOpJDb0nhWMboC0Y+KEk7KpH4hogu
cmZ4EPDZYukCN6pdnyKgXBx/DvGj7+M49MZE9kE367Mx70jd7viBiHyZl3Bn
bvmGEs0mJolhdRAnhpycFbC4LoVFAHfTnk8nmlsJm7+J6HIwCvg0su7aFI4B
xp9F+ZyiwINR358kquhYzXAozQIyRnxVRJdXsV98HiF3TYSFDGTDs/BsvK5O
ERAMBjVthNKGgteViboEZc4XEHjvi/A7hMGrVEZb+cgnfk9E/KEs/g6z1CQG
VMnGADqU+dxRxOQklAJ/HeH4GtYxSKvPGSCUHOC19KjPoccS6TV6on+xaOBx
jFEs02n82vxGAJEdWze/HOYD5gdYLlYC7AgDsFiRcDhbEth0JGMUK+EDFrBU
ORyFxkrhIxBKdyCOGkqvNlCKVTlH6G7wlSJkhyB1Yu0Hl4BB+4VovlylsLGW
3MQaDZLgYpYmY38UGrPyKI54ZxE3uFol1m49WkmWZnJ+pQpkqNeauUWs3XmM
YpEmYwNDG+tnHMuuflcRo40Io5tTOJYxutPAqJR11hsYxfo5r9WzTmDe3oxQ
rOsK+N3N/OR6XthBj3UwjwP2ZsCkAidXtR1koBfrScsVE0EAzKO/5BgHMqax
QZPjdUzh8ZkCMVylGRsDOQHpf4dRhD3MkayFt7EBnROZyxeREmLgK5CBsSG6
k8IA5xyfz1XXeqWP6gmxn4FJbFSOvqcgQ+UOW7jKP2YofcvGA7kbFhZZH0/h
OMmASS6F3WD4QWwQl74nIrPFjiBgPZv6iRQBE5h8O+II73mNjbPTt7VX4DeK
Pw3m2++CblrzOTZRQN8DCLDthiyiT2IvK/l/a+leF6x+A6xndIH7IIFBgR8b
cKfvPoQesHYD0yd5c69h3u8MCQn1WVIxIIvsn9elSSmTBFc3ggsYkz5ZQd9j
DbheUCQ06fZLhCtW5dI33GHwAhcVMtYdq9boW04q3NGiK/CpU1HTt3WWxo6W
DCcItggCgGLtPPqG684D62QANtag2tECqIBSR5FPnRbjjpYCEZQ6WdBBiSjF
+gsCPkRJrHsV08Ua7QKvoDS6yKdOX4S+XxZDSe6uTZ3uig2p7zABEsNkROzG
CMcXYkZ0F5kmlBix7jPdNtifBxCpz0yKXxJ6GFsSw4ZagH0eWwd2O7MVW2So
Jzaa4C4g9AHqVqS4uP5q7SBVDk8EMDZO9TgH6KfVAF8LfFJm+GKDRk/kHNkv
dshlI/67Qi7rygl8NZzUOmNn7qrEDN+iEh3Ffv4OvPfCK9xKih2FFGurNrvx
lAJWD+It5VpZIRmTiQ19bvdEunc9xdQARh+DFIuN9zqRzpWzMOsoEyney0rA
Qee2avMkv0EB8DgaqR3KWsmkbWyo/umAffZLuydGs8m1LoMB09RDW2NzLbR2
iy4RkqtfApKwCMl+SeNeKjpyLzmDNTaDcl+rDGjz70TRQOlDQO1gUcezK8c8
wC3X0zwQOkHAo89n7idVKxN3qsyb755TUrIZ5EbgtPo1huGPGIJImiFb+hHn
PoYU9D9eyx4QxIwlQXWdJzAruNE9rYt5LBsVK6OhkujA/yz1JiJuNbrixxhR
YkWvrbyWZm5/cfYpJAe9Gs+wAVyPRnxrwyxbbMd6qjkKUW0CkgyGaI5ivrEm
FFTN2jvtFyGuWSGgTzRiguGrI40osfaQbQFp1MtxOxX5bf4pKzKkdyTCvDak
cMNyt46K3LoDR3tlTBOui4v1QqC6It7VTX6R7qpQv2awzveREd65gfdkH2eb
36hdDMqg7HesswKNgp0CGgUlo2aw3U8UdW7kqvr8gHx4hmCF1OgIBdFvrTmf
H8LTCvYTZAaAMIv8OEua11KmSRReD5H9tQ7+i03nkjXaJUNwm+9jrNUyxBQe
oxfrGJM2dB3PWsRCponCQ0uzv9ppTqRrbFAn6o73eMco+ynsaFcZeeFhZr5z
oF/GYRZCOtAkNj6SUIfBRP011DD7zGQGsRHE6jU+PDr6l6ZKM5AlsVFDu9XX
EJT0qeiHKKwRhsmmrulGho4NlFZvke6BAn5VRI/smsbJGBspr6kISRFXgqf2
TkZcYgPj1fXazUgOyZb5UHqTqIt5aywbLb7NV+6mHL9YcMen+OW7dcxdbHah
urXwpPNHmFUXO4GMu8gRyVMRg9hUVFRXv3IiBisMZB5RclnzPRios/rLfiXs
GnH+SFDzeQpQJPsdm9JKKE3kCHhtpQG5HLZKDmMLOkXw5NbaCSWOAc+beayS
AfAMrAHPHqcBPEEwtnAh0j0qNom1dbLoUhZugbWVNtpbBlOaTFAsHG/IiU00
02gRDUzJJVm7cnpJIxjcqw3nPAeQwH5mHltwQaNn45QAeMbTkzF1ZUIVDmTA
sbjYigQaZhzIXq000uNJQ7Hy6y6kjF8wOZfT+rfNZzlwseKSjacYzTGGdsTZ
DWpmH8cN9nhrI0zf8JD07TF14fSzVsrDKz9kpChpwVCf4Qu/iWmsFTR4VLao
rH8juKMbSkFB33BEX0wZa5jSYAA1HlNQQNIKsx5gW/b76Zh29IK0s/Lu0Ba5
hBAVDR2bfckBkxUWvCiAaWOYkaTRerYrEP+k1UNjDCTBiDBQ0D8a0gVVrW8r
rrd5lhNLbXTq0FLKwSZOhaU5Suzf1VFIYySVe9Kipk4D0+dYJ20Q01MiNoO3
3BBScQnQc5wQQCdp/EL3rrA8SIn9fLoGK/kpaf1UuwETmEPtialg9WIrrivS
1tilqACvJ6uwAEmJvUMJ6E3PLOTXe7CSsVG+HQaOBT39Bn9EnVLHFg0fZYSx
MbwXTJxk8R3QaQwjsQYxig0IO/8Iujwiv1wh9CpR2oJxklKiBbXCagO02Kjx
C5yXA5QCOkox6qrswzFi0xR2gshyA+I9kD1tQDFiEwuWc4qJJxpUsdVRdlZ8
no05GZHEZvqCskabsW9+TmGC2ERdtEC9y9PUmqlyB9T6Ltp83mSwji1lsusX
b3NaoxhN5wavvam9Lzyocu9kuk5+koOxTmW62Ex5tL3xDT+mn8Xl3OqtRvTY
Eia7Afb1ICD7KweMnY6ixZa3SLsTDDP6dt4T0GVWyQ2aZzDSsfUp0nugiPcq
4sGt22cMyU7YKP1qRQ1I7aT0RPcbZNDdw8nnZAVV02mJ6RLD+9Lsm86Z/jPW
XrZMwmuOt9TNoJehiH+BAuAGRLnZ8DR+ipVfl7NBgwb6t7aoBrOZ5+zT4GI1
+9+EN+z2Zf+1iZAlQEj2+9TEFIyVTWLSmxHH25QAaVF1cEoThFCvWD0oiryF
2d7GbPuVPNN8Fg/byqSxGl0EvdVIxA8yv3EtRk5aeYrFefNQF36LYn+JQLyV
tdImBJah/LaJo8XabqLD2zgVbuHY4z2hhXxEr7YwXaz1KVLebiTBzUW5GqSL
kcWuOTbU3Qyi6aUoTW7S1fS5yDWXm/kp1q25yLPAvZPr3t+RmP2vY3l+VRwZ
WHdrlLRzHmDbKhAcc4HXccAUNupyVvYGfnL37/ouBwfg5VYlqGas6w310phd
X1KzWEaCaHLfayD8JOYXG6G4UE+5ycz5nUbGEqfQ2i3a+PoiH3E/mU9IdIfY
KINmT1u+hJHs+SvW4AP8BDdewBuX4JFBsZGxC7k0nFRUSWN2LWu4l27WyUwQ
GwS8QPWrghrvQrnhmqIamsMdn5h8sVG8C0RAyScnVgFsbWVNY6PP5ws8MdUC
97J1IZLY4LsIH8UkIjQtj8qt3y6zDXVT73kIS03JhMJvte7lJzJBbNLnvJxB
MBrWYHrX/HMt5uxX85kUvMxA8YaijtoyU+sYr9i82HnIQwRIaj1SP+AdXITc
yFrtyU/Qv2NzhOei7K8tCh7QUyqhbRNoSk+xmVVRzW2C8z23+ezak36yvs1I
D2kR7pFTaU2U45A1QTaJpe45nGCdiOQaJrklUK2EMdQqtjjgHObchUiuRrxv
LWqlueqxTBJbRXE2SJns92iOdI2RftKpArdfuRN+gjHHJM2kQUMkV3HSSC9S
pqFhuyWWGmcjHAWB9yHetxcVIS4nsZqxVRdnGfCHEyvZuyuNhLg9oG9Ja32X
xh/Lw0cnG6xjhcJZDIK2OuW9CDtynR6Fn1ydualuEbqN06AHkUgj6+e650rn
N4gZW1JwplcGFrTuRTGuMNB/kB0LDRhnv2P18Zm6jbLhELbkRH7AEo4LpeFT
ahuEq6Wyv1Z76udGhXGGES/WwjsTGSw7TS9n94LowNHnWOtWBo2heDhm+iDH
PZs1jDUd4XSAJl4rUf4ymkbxVRWoJExZVaGNfMPkI3BkIEwAO98spmLiacF8
Hz+9NZ5AWrszaXkFZbtuelVMB6quxmQBbx6GFLnA4FFxsYUYfQnCZWjLJ+7n
aHAc6WLWJjZuscMwvHW3WOvu0qACpZAMVE366w2esVFDOPdOynTmMYiHH/on
KFrNpQ/aPXBj8ui+F77RMDXptJy24gj4fYpcWoD4Jk7qpNULWgDdvEMtkEGE
Vmw0GfL+nsJR22H4FwZesXkPKJyux6Q1HnAKKDZ5A3nT5T/jmXfSCgbIzF0U
6jubW0bve9WbDJRiU3xQOF35OVEJgN4Qm8yEoug620lKgGAYm9aDvP9BwXBC
TucPi7zFwDA2Pw2F08VDU7P3b0OgxabbIW9357hfVU3Jvt7OoMVmsyFvWp8x
M3sPZ+Zq603LL2YxbyqjagP8NSV1Z2Rfb0F6t1Wb8KduDpW51yISbckD2QdL
l1hGSRU6l6UQirGsnsD2bkXlOdnXmxLxjOXTBB1oPcWC7D1c5BArnhOk0Pdm
xi5WmaRydPNwQ50bryQvqZ5P5ShzNbEGSSrHExMxibUmKskjC2Ktx1SOqdNG
w4UYHDuN9QQqCSCIYr2VVI6px57FOhip8uBZb7EeaSUBBFGsi53KMfVMvlgf
N1UePJwwNshSSQBBFBs1SuWYeqZkbNimkjyyIDZEmMqxdTNNvem1VBnu6NJS
wsYGfisJIFhio9upHFOPjB0uiLSzcClabNahkoDOYecY+P6wqixXVY1wHOE4
wnGE4wjHEY4vDY5zWk/NwD9+sXg3PyO8R3iP8B7hPcL7xeNNId9OYpF9TuPY
9Pv7ihSrT/jSYGFiQV9/1or91RGiPxQiCbrh9x90E/0pLjSeHScfzEdLRsj/
L5BfFThB9n80fRcXzo7NvifG+Tix2Ydm6yXOTgrJhCKzLSk2vNT4vLQT+A+I
/CVSrv4BBskL+to68val9rbtZf8PIg21Qw==\
\>"], "Picture",
  Evaluatable->False,
  ImageSize->{216.625, 201.312},
  ImageMargins->0,
  ImageRegion->{{0, 1}, {0, 1}}]], "Picture"],

Cell["Fig. 9.5", "Caption",
 CellTags->"Fig. 9.5"],

Cell[TextData[{
 "where ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["V", "1"], TraditionalForm]]],
 " = 12V, ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["V", "2"], TraditionalForm]]],
 " = 8V, ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["R", "1"], TraditionalForm]]],
 " = 20",
 StyleBox["\[CapitalOmega]",
  FontFamily->"Symbol"],
 ", ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["R", "2"], TraditionalForm]]],
 " = 15",
 StyleBox["\[CapitalOmega]",
  FontFamily->"Symbol"],
 ", ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["R", "3"], TraditionalForm]]],
 " = 3",
 StyleBox["\[CapitalOmega]",
  FontFamily->"Symbol"],
 ", ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["R", "4"], TraditionalForm]]],
 " = 6",
 StyleBox["\[CapitalOmega]",
  FontFamily->"Symbol"],
 ", ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["R", "5"], TraditionalForm]]],
 " = 12",
 StyleBox["\[CapitalOmega], ",
  FontFamily->"Symbol"],
 " and ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["R", "6"], TraditionalForm]]],
 " = 2 ",
 StyleBox["\[CapitalOmega]",
  FontFamily->"Symbol"],
 ". \n",
 StyleBox["(3)",
  FontWeight->"Bold"],
 " Solve the following coupled equations analytically, finding all solutions \
(real and complex):"
}], "Text"],

Cell[TextData[{
 "\t",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{
      SuperscriptBox["x", "2"], "+", 
      RowBox[{"2", " ", "y"}]}], "=", "0"}], ","}], TraditionalForm]]]
}], "Text"],

Cell[TextData[{
 "\t",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SuperscriptBox["y", "2"], "+", 
     RowBox[{"2", " ", "x"}]}], "=", "0"}], TraditionalForm]]]
}], "Text"],

Cell["Find numerical values for the solutions.", "Text"],

Cell[TextData[{
 StyleBox["(4)",
  FontWeight->"Bold"],
 " An elastic band is  fixed between posts a distance ",
 Cell[BoxData[
  FormBox["L", TraditionalForm]]],
 " apart in the horizontal ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", "x", ")"}], TraditionalForm]]],
 " direction. A simple model for the deformation of the band in the presence \
of gravity is as a system of equal masses ",
 Cell[BoxData[
  FormBox["m", TraditionalForm]]],
 " coupled by springs, each with spring constant ",
 Cell[BoxData[
  FormBox["k", TraditionalForm]]],
 ". In the absence of gravity, the masses are at positions ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    StyleBox[
     SubscriptBox[
      StyleBox["r",
       FontSlant->"Plain"], 
      StyleBox["i",
       FontWeight->"Plain"]],
     FontWeight->"Bold"], 
    StyleBox["=",
     FontWeight->"Plain"], 
    StyleBox[
     RowBox[{"(", 
      RowBox[{
       RowBox[{"i", " ", "a"}], " ", ",", "0"}], ")"}],
     FontWeight->"Plain"]}], TraditionalForm]]],
 ", ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"i", "=", "0"}], ",", "1", ",", "2", ",", "...", ",", "M"}], 
   TraditionalForm]]],
 ", where ",
 Cell[BoxData[
  FormBox[
   RowBox[{"a", "=", 
    RowBox[{
     RowBox[{"L", "/", "M"}], Cell["."]}]}], TraditionalForm]]],
 "The  first and last mass in the chain are fixed at ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox[
     StyleBox["r",
      FontWeight->"Bold",
      FontSlant->"Plain"], "o"], "=", 
    RowBox[{"{", 
     RowBox[{"0", ",", "0"}], "}"}]}], TraditionalForm]]],
 " and ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox[
     StyleBox["r",
      FontWeight->"Bold",
      FontSlant->"Plain"], "M"], "=", 
    RowBox[{"{", 
     RowBox[{"L", ",", "0"}], "}"}]}], TraditionalForm]]],
 ".  In between the masses are located according to the force-balance \
equations"
}], "Text",
 CellTags->"i:88"],

Cell[TextData[{
 "\t",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"(", 
     RowBox[{"0", ",", "0"}], ")"}], "=", 
    RowBox[{
     RowBox[{"-", " ", 
      RowBox[{"k", "(", 
       RowBox[{
        StyleBox[
         SubscriptBox[
          StyleBox["r",
           FontSlant->"Plain"], 
          RowBox[{
           StyleBox["i",
            FontWeight->"Plain",
            FontSlant->"Italic"], " "}]],
         FontWeight->"Bold"], "-", 
        SubscriptBox[
         StyleBox["r",
          FontWeight->"Bold",
          FontSlant->"Plain"], 
         RowBox[{"i", "-", "1"}]]}], ")"}]}], "+", 
     RowBox[{"k", "(", 
      RowBox[{
       SubscriptBox[
        StyleBox["r",
         FontWeight->"Bold",
         FontSlant->"Plain"], 
        RowBox[{"i", "+", "1"}]], "-", 
       SubscriptBox[
        StyleBox["r",
         FontWeight->"Bold",
         FontSlant->"Plain"], "i"]}], ")"}], "-", 
     RowBox[{"m", " ", "g", " ", 
      RowBox[{"(", 
       RowBox[{"0", ",", "1"}], ")"}]}]}]}], TraditionalForm]]]
}], "Text"],

Cell[TextData[{
 "Find and plot the shape of the band in equilibrium by solving for the \
positions of the masses and creating a ",
 StyleBox["ListPlot",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ". Solve for the case ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"M", "=", "30"}], ",", " ", 
    RowBox[{"m", "=", 
     RowBox[{"k", "=", 
      RowBox[{"a", "=", "1"}]}]}]}], TraditionalForm]]],
 " and ",
 Cell[BoxData[
  FormBox[
   RowBox[{"g", "=", 
    RowBox[{"1", "/", "50"}]}], TraditionalForm]]],
 ". (Hint: ",
 StyleBox["Solve",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " can handle vector equations of the form ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0", ",", "0"}], "}"}], "=", " ", 
    RowBox[{
     RowBox[{"2", 
      StyleBox[
       SubscriptBox[
        StyleBox["r",
         FontSlant->"Plain"], 
        StyleBox["i",
         FontWeight->"Plain"]],
       FontWeight->"Bold"]}], 
     StyleBox[" ",
      FontWeight->"Bold"], "-", 
     SubscriptBox[
      StyleBox["r",
       FontWeight->"Bold",
       FontSlant->"Plain"], 
      RowBox[{"i", "-", "1"}]], "-", 
     SubscriptBox[
      StyleBox["r",
       FontWeight->"Bold",
       FontSlant->"Plain"], 
      RowBox[{"i", "+", "1"}]], "+", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"m", " ", 
        RowBox[{"g", "/", "k"}]}], ")"}], "  ", 
      RowBox[{"(", 
       RowBox[{"0", ",", "1"}], ")"}], 
      StyleBox[" ",
       FontWeight->"Bold"]}]}]}], TraditionalForm]]],
 "without having to break the equation up into components However, the \
variables to be solved for cannot be vectors. Instead, define ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    RowBox[{
     StyleBox[
      RowBox[{
       StyleBox["r",
        FontSlant->"Plain"], "[", 
       StyleBox["i",
        FontSlant->"Plain"], "]"}],
      FontWeight->"Bold"], 
     StyleBox["=",
      FontWeight->"Bold"], 
     RowBox[{
      StyleBox["{",
       FontWeight->"Bold"], 
      RowBox[{
       StyleBox[
        RowBox[{
         StyleBox["x",
          FontSlant->"Plain"], "[", 
         StyleBox["i",
          FontSlant->"Plain"], "]"}],
        FontWeight->"Bold"], ",", 
       StyleBox[
        RowBox[{
         StyleBox["y",
          FontSlant->"Plain"], "[", 
         StyleBox["i",
          FontSlant->"Plain"], "]"}],
        FontWeight->"Bold"]}], 
      StyleBox["}",
       FontWeight->"Bold"]}]}],
    FontFamily->"Courier"], TraditionalForm]]],
 ", and create a list of variables ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    RowBox[{
     StyleBox["{",
      FontWeight->"Bold"], 
     StyleBox[
      RowBox[{
       StyleBox[
        RowBox[{
         StyleBox["x",
          FontSlant->"Plain"], "[", 
         StyleBox["i",
          FontSlant->"Plain"], "]"}],
        FontWeight->"Bold"], ",", 
       StyleBox[
        RowBox[{
         StyleBox["y",
          FontSlant->"Plain"], "[", 
         StyleBox["i",
          FontSlant->"Plain"], "]"}],
        FontWeight->"Bold"]}],
      FontWeight->"Plain"], 
     StyleBox["}",
      FontWeight->"Bold"]}],
    FontFamily->"Courier"], TraditionalForm]]],
 "using a ",
 StyleBox["Table",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " command. (Be sure to ",
 StyleBox["Flatten",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " the table, so that the list is in the right format to be used in ",
 StyleBox["Solve",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ".)"
}], "Text"],

Cell[TextData[{
 StyleBox["(5)",
  FontWeight->"Bold"],
 " A rod or plate differs from the elastic band model used in the previous \
problem in that atoms in a rod are stacked in crystal planes, and repel \
one-another if they are too closely-spaced.  These two effects, which were \
not included in the previous problem, provide added strength against external \
shearing forces on the rod.  Here we will determine the effect of gravity on \
a horizontal rod. The rod consists of two horizontal layers of atoms whose \
positions are given, in the absence of gravity, by ",
 Cell[BoxData[
  FormBox[
   RowBox[{" ", 
    FormBox[
     RowBox[{
      StyleBox[
       SubscriptBox[
        StyleBox["R",
         FontSlant->"Plain"], 
        StyleBox["i",
         FontWeight->"Plain",
         FontSlant->"Italic"]],
       FontWeight->"Bold"], 
      StyleBox["=",
       FontWeight->"Plain"], 
      StyleBox[" ",
       FontWeight->"Plain"], 
      RowBox[{
       RowBox[{
        StyleBox[
         RowBox[{"(", 
          RowBox[{"i", "-", "1"}], ")"}],
         FontWeight->"Plain"], 
        StyleBox[" ",
         FontWeight->"Plain"], 
        StyleBox["p",
         FontWeight->"Bold",
         FontSlant->"Plain"]}], "+", 
       RowBox[{
        RowBox[{"Mod", "[", 
         RowBox[{"i", ",", "2"}], "]"}], " ", 
        StyleBox["q",
         FontWeight->"Bold",
         FontSlant->"Plain"]}]}]}],
     TraditionalForm]}], TraditionalForm]]],
 " , ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"i", "=", "1"}], ",", "2", ",", "3", ",", "...", ",", "M"}], 
   TraditionalForm]]],
 ", where ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    StyleBox["p",
     FontWeight->"Bold",
     FontSlant->"Plain"], 
    StyleBox["=",
     FontWeight->"Plain"], 
    StyleBox[
     RowBox[{"a", "(", 
      RowBox[{
       RowBox[{"1", "/", "2"}], ",", "0"}], ")"}],
     FontWeight->"Plain"]}], TraditionalForm]]],
 " and ",
 Cell[BoxData[
  FormBox[
   RowBox[{" ", 
    FormBox[
     RowBox[{
      StyleBox["q",
       FontWeight->"Bold",
       FontSlant->"Plain"], "=", 
      RowBox[{"a", "(", 
       RowBox[{"0", ",", " ", 
        SqrtBox[
         RowBox[{"3", "/", "2"}]]}], ")"}]}],
     TraditionalForm]}], TraditionalForm]]],
 ". The rod is shown in Cell ",
 ButtonBox["9.165",
  BaseStyle->"Hyperlink",
  ButtonData:>"Cell 9.165"],
 ", taking ",
 Cell[BoxData[
  FormBox[
   RowBox[{"M", "=", 
    RowBox[{"81", Cell[""]}]}], TraditionalForm]]],
 "and ",
 Cell[BoxData[
  FormBox[
   RowBox[{"a", "=", 
    RowBox[{"1", "/", "4"}]}], TraditionalForm]]],
 " (i.e. ",
 Cell[BoxData[
  FormBox[
   RowBox[{"L", "=", "10"}], TraditionalForm]]],
 "):"
}], "Text",
 CellTags->"i:89"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Clear", "[", "\"\<Global`*\>\"", "]"}], ";", " ", 
  RowBox[{"M", "=", "81"}], ";", 
  RowBox[{"a", "=", 
   RowBox[{"1", "/", "4"}]}], ";"}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.165"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"p", "=", 
   RowBox[{"a", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"1", "/", "2"}], ",", "0"}], "}"}]}]}], ";", " ", 
  RowBox[{"q", "=", 
   RowBox[{"a", 
    RowBox[{"{", 
     RowBox[{"0", ",", 
      RowBox[{
       RowBox[{"Sqrt", "[", "3", "]"}], "/", "2"}]}], "}"}]}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"R", "[", "i_", "]"}], " ", "=", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"i", "-", "1"}], ")"}], " ", "p"}], " ", "+", " ", 
    RowBox[{
     RowBox[{"Mod", "[", 
      RowBox[{"i", ",", "2"}], "]"}], " ", "q"}]}]}], ";"}], "\n", 
 RowBox[{"ListPlot", "[", 
  RowBox[{
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"R", "[", "i", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1", ",", "M"}], "}"}]}], "]"}], ",", 
   RowBox[{"PlotStyle", "\[Rule]", 
    RowBox[{"PointSize", "[", "0.02", "]"}]}], ",", 
   RowBox[{"PlotRange", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "1"}], ",", "11"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "1"}], ",", "1"}], "}"}]}], "}"}]}], ",", 
   RowBox[{"AspectRatio", "\[Rule]", 
    RowBox[{"1", "/", "6"}]}], ",", 
   RowBox[{"Ticks", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"Automatic", ",", "None"}], "}"}]}]}], "]"}]}], "Input",
 ShowCellTags->True,
 CellChangeTimes->{3.446592824781494*^9},
 CellTags->"Cell 9.166"],

Cell[BoxData[
 GraphicsBox[
  {Hue[0.67, 0.6, 0.6], PointSize[0.02], PointBox[CompressedData["
1:eJxdy7lKQ1EQgOFjXOJu9n27ie9x7wPYaGUtWNtb5Xl8AOvT21haWliksBAR
EQmiIhHONzAMw8efXVydXZZCCKc/+3tXc3Nyvri+vcv/vpiHZO7z1B/wR/wJ
X+DP+Av+ir/h7/gH/okv8S88FKmvFSmX8HV8A9/Et/Ayvo3v4Lv4Hr6PH+CH
+BFeSX1ewat4Fa/hNbyO1/EG3sCbeBNv4S28jbfxDt7Bu3gX7+E9vI/38QE+
wIf4EB/hI3yMj/FJ6sUk9Tke8ZDRZ/R4xMOUfkqPRzzM6Gf0eMTD8b9/AzKc
7Tw=
    "]]},
  AspectRatio->NCache[
    Rational[1, 6], 0.16666666666666666`],
  Axes->True,
  PlotRange->{{-1, 11}, {-1, 1}},
  PlotRangeClipping->True,
  Ticks->{Automatic, None}]], "Output",
 CellTags->"Cell 9.166"]
}, Open  ]],

Cell[TextData[{
 "The first two and last two masses in the rod are assumed to be attached to \
walls, so only the masses with ",
 Cell[BoxData[
  FormBox[
   RowBox[{"3", "\[LessEqual]", " ", "i", "\[LessEqual]", " ", 
    RowBox[{"M", "-", "2"}]}], TraditionalForm]]],
 " are allowed to move. All the masses are assumed to interact via a simple \
nearest-neighbor interaction. For neighbors ",
 Cell[BoxData[
  FormBox["i", TraditionalForm]]],
 " and ",
 Cell[BoxData[
  FormBox["j", TraditionalForm]]],
 " separated by displacement vector ",
 Cell[BoxData[
  FormBox[
   StyleBox["r",
    FontWeight->"Bold"], TraditionalForm]]],
 ", we assume that the force between them is ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    StyleBox["F",
     FontWeight->"Bold",
     FontSlant->"Plain"], 
    StyleBox["=",
     FontWeight->"Plain"], 
    RowBox[{
     StyleBox["-",
      FontWeight->"Plain"], 
     RowBox[{
      StyleBox[
       SubscriptBox["k", 
        RowBox[{"i", " ", "j"}]],
       FontWeight->"Plain"], "(", 
      RowBox[{
       StyleBox["r",
        FontWeight->"Bold",
        FontSlant->"Plain"], 
       StyleBox["-",
        FontWeight->"Plain"], 
       RowBox[{
        StyleBox["a",
         FontWeight->"Plain"], 
        StyleBox[" ",
         FontWeight->"Plain"], 
        StyleBox[
         OverscriptBox[
          StyleBox["r",
           FontWeight->"Bold",
           FontSlant->"Plain"], "^"],
         FontWeight->"Bold"]}]}], ")"}]}]}], TraditionalForm]]],
 ", where ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["k", 
    RowBox[{"i", " ", "j"}]], TraditionalForm]]],
 " is the spring constant:"
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"F", "[", 
   RowBox[{"i_", ",", "j_", " ", ",", "r_"}], "]"}], " ", ":=", " ", 
  RowBox[{
   RowBox[{"-", 
    RowBox[{"k", "[", 
     RowBox[{"i", ",", "j"}], "]"}]}], 
   RowBox[{"(", 
    RowBox[{"r", " ", "-", " ", 
     RowBox[{"a", " ", 
      RowBox[{
       StyleBox["r",
        FontWeight->"Bold"], "/", 
       SqrtBox[
        StyleBox[
         RowBox[{"r", ".", "r"}],
         FontWeight->"Bold"]]}]}]}], ")"}]}]}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.167"],

Cell[TextData[{
 " This is an isotropic spring force with a resting length ",
 Cell[BoxData[
  FormBox["a", TraditionalForm]]],
 ", so that in equilibrium the atoms are spaced by ",
 Cell[BoxData[
  FormBox["a", TraditionalForm]]],
 ", in the absence of other forces. However, this force is nonlinear in the \
displacement ",
 Cell[BoxData[
  FormBox[
   StyleBox["r",
    FontWeight->"Bold",
    FontSlant->"Plain"], TraditionalForm]]],
 ", since the unit vector ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    StyleBox[
     OverscriptBox[
      StyleBox["r",
       FontWeight->"Bold",
       FontSlant->"Plain"], "^"],
     FontWeight->"Bold"], 
    StyleBox["=",
     FontWeight->"Plain"], 
    RowBox[{
     StyleBox["r",
      FontWeight->"Bold",
      FontSlant->"Plain"], "/", 
     SqrtBox[
      RowBox[{
       StyleBox["r",
        FontWeight->"Bold",
        FontSlant->"Plain"], "\[CenterDot]", 
       StyleBox["r",
        FontWeight->"Bold",
        FontSlant->"Plain"]}]]}]}], TraditionalForm]]],
 ". ",
 StyleBox["Solve",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " will not be able to find a solution for force equilibrium for the \
fully-nonlinear equations. Therefore, we assume that the atoms are only \
slightly displaced from equilibrium, and Taylor-expand the force about the \
equilibrium positions ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[
    StyleBox["R",
     FontWeight->"Bold",
     FontSlant->"Plain"], 
    RowBox[{"i", " "}]], TraditionalForm]]],
 " to obtain linear equations in the displacement from the force-free \
equilibrium. That is , we write ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox[
     StyleBox["r",
      FontWeight->"Bold",
      FontSlant->"Plain"], 
     RowBox[{"i", " "}]], "=", " ", 
    RowBox[{
     SubscriptBox[
      StyleBox["R",
       FontWeight->"Bold",
       FontSlant->"Plain"], 
      RowBox[{"i", " "}]], "+", "  ", 
     RowBox[{"(", 
      RowBox[{
       SubscriptBox["\[CapitalDelta]x", 
        RowBox[{"i", " "}]], ",", " ", 
       SubscriptBox["\[CapitalDelta]y", 
        RowBox[{"i", " "}]]}], ")"}]}]}], TraditionalForm]]],
 ", and Taylor expand ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    StyleBox["F",
     FontWeight->"Bold",
     FontSlant->"Plain"], "(", 
    RowBox[{
     SubscriptBox[
      StyleBox["r",
       FontWeight->"Bold",
       FontSlant->"Plain"], 
      RowBox[{"i", " "}]], "-", 
     SubscriptBox[
      StyleBox["r",
       FontWeight->"Bold",
       FontSlant->"Plain"], "j"]}], ")"}], TraditionalForm]]],
 " for small ",
 Cell[BoxData[
  FormBox[
   RowBox[{" ", 
    RowBox[{"(", 
     RowBox[{
      SubscriptBox["\[CapitalDelta]x", 
       RowBox[{"i", " "}]], ",", " ", 
      SubscriptBox["\[CapitalDelta]y", 
       RowBox[{"i", " "}]]}], ")"}]}], TraditionalForm]]],
 ". This is accomplished below, and the result is called ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    StyleBox[
     RowBox[{"\[Delta]", 
      StyleBox["F",
       FontWeight->"Bold",
       FontSlant->"Plain"]}]], "(", 
    RowBox[{"i", ",", "j"}], ")"}], TraditionalForm]]],
 ":"
}], "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"r", "[", "i_", "]"}], " ", "=", " ", 
   RowBox[{
    RowBox[{"R", "[", "i", "]"}], " ", "+", " ", 
    RowBox[{"\[Lambda]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"\[CapitalDelta]x", "[", "i", "]"}], ",", 
       RowBox[{"\[CapitalDelta]y", "[", "i", "]"}]}], "}"}]}]}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"\[Delta]F", "[", 
    RowBox[{"i_", ",", "j_"}], "]"}], " ", "=", " ", 
   RowBox[{"Simplify", "[", 
    RowBox[{
     RowBox[{"Normal", "[", 
      RowBox[{"Series", "[", 
       RowBox[{
        RowBox[{"F", "[", 
         RowBox[{"i", ",", "j", ",", 
          RowBox[{
           RowBox[{"r", "[", "i", "]"}], "-", 
           RowBox[{"r", "[", "j", "]"}]}]}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"\[Lambda]", ",", "0", ",", "1"}], "}"}]}], "]"}], "]"}], "/.", 
     RowBox[{"\[Lambda]", "\[Rule]", "1"}]}], "]"}]}], ";"}]}], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.168"],

Cell[TextData[{
 "The total force on the ",
 Cell[BoxData[
  FormBox[
   RowBox[{"i", " ", "th"}], TraditionalForm]]],
 " atom ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox[
     StyleBox["F",
      FontWeight->"Bold",
      FontSlant->"Plain"], "tot"], "(", "i", ")"}], TraditionalForm]]],
 " , assuming that this atom is not at the ends,  is due to its four nearest \
neighbors (one on each side in the same row, and the two nearest atoms along \
diagonals in the other row):"
}], "Text"],

Cell[TextData[{
 "\t\t",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{
      SubscriptBox[
       StyleBox["F",
        FontWeight->"Bold",
        FontSlant->"Plain"], "tot"], "(", "i", ")"}], "=", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"0", ",", 
        RowBox[{
         RowBox[{"-", "m"}], " ", "g"}]}], ")"}], " ", "+", " ", 
      RowBox[{
       StyleBox[
        RowBox[{"\[Delta]", 
         StyleBox["F",
          FontWeight->"Bold",
          FontSlant->"Plain"]}]], " ", 
       RowBox[{"(", 
        RowBox[{"i", ",", 
         RowBox[{"i", "-", "2"}]}], ")"}]}], "+", 
      RowBox[{
       StyleBox[
        RowBox[{"\[Delta]", 
         StyleBox["F",
          FontWeight->"Bold",
          FontSlant->"Plain"]}]], " ", 
       RowBox[{"(", 
        RowBox[{"i", ",", 
         RowBox[{"i", "-", "1"}]}], ")"}]}], " ", "+", 
      RowBox[{
       StyleBox[
        RowBox[{"\[Delta]", 
         StyleBox["F",
          FontWeight->"Bold",
          FontSlant->"Plain"]}]], "(", 
       RowBox[{"i", ",", 
        RowBox[{"i", "+", "1"}]}], ")"}], " ", "+", " ", 
      RowBox[{
       StyleBox[
        RowBox[{"\[Delta]", 
         StyleBox["F",
          FontWeight->"Bold",
          FontSlant->"Plain"]}]], " ", 
       RowBox[{"(", 
        RowBox[{"i", ",", 
         RowBox[{"i", "+", "2"}]}], ")"}]}]}]}], " ", ",", " "}], 
   TraditionalForm]]],
 "for  ",
 Cell[BoxData[
  FormBox[
   RowBox[{"3", "\[LessEqual]", " ", "i", " ", "\[LessEqual]", " ", 
    RowBox[{"M", "-", "2"}]}], TraditionalForm]]],
 "."
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Ftot", "[", "i_", "]"}], " ", ":=", " ", 
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0", ",", 
      RowBox[{
       RowBox[{"-", "m"}], " ", "g"}]}], "}"}], " ", "+", "   ", 
    RowBox[{"\[Delta]F", "[", 
     RowBox[{"i", ",", 
      RowBox[{"i", "-", "2"}]}], "]"}], "+", 
    RowBox[{"\[Delta]F", "[", 
     RowBox[{"i", ",", 
      RowBox[{"i", "-", "1"}]}], "]"}], " ", "+", 
    RowBox[{"\[Delta]F", "[", 
     RowBox[{"i", ",", 
      RowBox[{"i", "+", "1"}]}], "]"}], " ", "+", " ", 
    RowBox[{"\[Delta]F", "[", 
     RowBox[{"i", ",", 
      RowBox[{"i", "+", "2"}]}], "]"}]}], "  ", "/;", " ", 
   RowBox[{"3", "\[LessEqual]", " ", "i", "\[LessEqual]", " ", 
    RowBox[{"M", "-", "2"}]}]}]}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.169"],

Cell["The masses on the ends are fixed to the walls, so ", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"\[CapitalDelta]x", "[", "i_", "]"}], ":=", 
  RowBox[{"0", " ", "/;", " ", 
   RowBox[{
    RowBox[{"i", "\[Equal]", "1"}], " ", "||", 
    RowBox[{"i", "\[Equal]", "2"}], "||", 
    RowBox[{"i", "\[Equal]", 
     RowBox[{"M", "-", "1"}]}], "||", 
    RowBox[{"i", "\[Equal]", "M"}]}]}]}], "\n", 
 RowBox[{
  RowBox[{"\[CapitalDelta]y", "[", "i_", "]"}], ":=", 
  RowBox[{"0", " ", "/;", " ", 
   RowBox[{
    RowBox[{"i", "\[Equal]", "1"}], " ", "||", 
    RowBox[{"i", "\[Equal]", "2"}], "||", 
    RowBox[{"i", "\[Equal]", 
     RowBox[{"M", "-", "1"}]}], "||", 
    RowBox[{"i", "\[Equal]", "M"}]}]}]}]}], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.170"],

Cell[TextData[{
 StyleBox["(a)",
  FontWeight->"Bold"],
 " Solve the coupled equilibrium equations ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox[
      StyleBox["F",
       FontWeight->"Bold",
       FontSlant->"Plain"], "tot"], "(", "i", ")"}], "=", 
    RowBox[{"{", 
     RowBox[{"0", ",", "0"}], "}"}]}], TraditionalForm]]],
 " for the variables ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      SubscriptBox["\[CapitalDelta]x", 
       RowBox[{"i", " "}]], ",", " ", 
      SubscriptBox["\[CapitalDelta]y", 
       RowBox[{"i", " "}]]}], ")"}], ",", " ", 
    RowBox[{"i", "=", "3"}], ",", "...", ",", 
    RowBox[{"M", "-", "2"}]}], TraditionalForm]]],
 ", and plot the shape of the rod. (Hint: Create a table of the equations, \
and a list of variables. Apply ",
 StyleBox["Flatten",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " to the tables to remove internal brackets in the lists, so that the syntax \
matches that required in ",
 StyleBox["Solve",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ". Assume that the ends of the rod are clamped, so that ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"(", 
     RowBox[{"\[CapitalDelta]x", ",", "\[CapitalDelta]y"}], ")"}], "=", 
    RowBox[{"(", 
     RowBox[{"0", ",", "0"}], ")"}]}], TraditionalForm]]],
 " for the end masses. ) Take ",
 Cell[BoxData[
  FormBox[
   RowBox[{"m", "=", 
    RowBox[{
     SubscriptBox["k", 
      RowBox[{"i", " ", "j"}]], "=", "1"}]}], TraditionalForm]]],
 ", and ",
 Cell[BoxData[
  FormBox[
   RowBox[{"g", "=", 
    RowBox[{"5.", " ", "\[Cross]", " ", 
     SuperscriptBox["10", 
      RowBox[{"-", "5"}]]}]}], TraditionalForm]]],
 "."
}], "Text"],

Cell[TextData[{
 StyleBox["(b)",
  FontWeight->"Bold"],
 " Plot the maximum vertical displacement of the rod,  ",
 Cell[BoxData[
  FormBox[
   RowBox[{"max", " ", "[", 
    RowBox[{"|", "\[CapitalDelta]y", "|"}], "]"}], TraditionalForm]]],
 ", vs. ",
 Cell[BoxData[
  FormBox["g", TraditionalForm]]],
 " by choosing five ",
 Cell[BoxData[
  FormBox[
   RowBox[{" ", 
    RowBox[{Cell[TextData[Cell[BoxData[
      FormBox["g", TraditionalForm]]]]], "-"}]}], TraditionalForm]]],
 "values in the range ",
 Cell[BoxData[
  FormBox[
   RowBox[{"0", "\[LessEqual]", " ", "g", "\[LessEqual]", " ", 
    SuperscriptBox["10", 
     RowBox[{"-", "4"}]]}], TraditionalForm]]],
 ".  "
}], "Text"],

Cell[TextData[{
 StyleBox["(c)",
  FontWeight->"Bold"],
 " Plot ",
 Cell[BoxData[
  FormBox[
   RowBox[{"max", " ", "[", 
    RowBox[{"|", "\[CapitalDelta]y", "|"}], "]"}], TraditionalForm]]],
 " vs. ",
 Cell[BoxData[
  FormBox["M", TraditionalForm]]],
 " for ",
 Cell[BoxData[
  FormBox[
   RowBox[{"g", "=", 
    RowBox[{"5.", " ", "\[Cross]", " ", 
     SuperscriptBox["10", 
      RowBox[{"-", "5"}]]}]}], TraditionalForm]]],
 ",  ",
 Cell[BoxData[
  FormBox[
   RowBox[{"m", "=", "1"}], TraditionalForm]]],
 ",  ",
 Cell[BoxData[
  FormBox[
   RowBox[{"a", "=", 
    RowBox[{"1", "/", "4"}]}], TraditionalForm]]],
 ",  and ",
 Cell[BoxData[
  FormBox[
   RowBox[{"k", "=", "1"}], TraditionalForm]]],
 ". Take ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"M", "=", "10"}], ",", "20", ",", "30", ",", "40"}], 
   TraditionalForm]]],
 ". (This changes the length of the rod without affecting its intensive \
properties such as elasticity). How does the maximum sag scale with the \
length of the rod?"
}], "Text"],

Cell[TextData[{
 StyleBox["(d)",
  FontWeight->"Bold"],
 " Plot the shape of the rod for the same parameters as in part (a), but now \
assume that one of the springs has failed, so that"
}], "Text"],

Cell[TextData[{
 "\t(i) ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["k", 
     RowBox[{"10", ",", " ", "11", " "}]], "=", 
    RowBox[{
     SubscriptBox["k", 
      RowBox[{"11", ",", "10"}]], "=", "0"}]}], TraditionalForm]]],
 " (break between atoms 10 and 11 in the top and bottom rows)."
}], "Text"],

Cell[TextData[{
 "\t(ii) ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["k", 
     RowBox[{"10", ",", " ", "12", " "}]], "=", 
    RowBox[{
     SubscriptBox["k", 
      RowBox[{"12", ",", "10"}]], "=", "0"}]}], TraditionalForm]]],
 " (break within the same row)."
}], "Text"],

Cell[TextData[{
 "The large difference between these two cases points out the importance to \
the shear strength of  the diagonal interactions between atoms in different \
layers . These interactions provide a ",
 StyleBox["cantilever",
  FontSlant->"Italic"],
 " effect : the diagonal springs are compressed or stretched as the rod sags, \
providing a restoring force that is  missing when there is only one row, or \
when a diagonal spring is broken.  [See Exercise (1), Sec. ",
 ButtonBox["1.5",
  BaseStyle->"Hyperlink",
  ButtonData:>{"Chapter1.nb", "Ex. 1.5"}],
 ") for an analytic treatment of this problem.]"
}], "Text",
 CellTags->"i:112"],

Cell[TextData[{
 StyleBox["(6)",
  FontWeight->"Bold"],
 " Repeat Exercise (5) for a rod that is clamped horizontally to a wall only \
at the left end, with the other end free to sag in gravity. Plot the shape of \
the rod for ",
 Cell[BoxData[
  FormBox[
   RowBox[{"M", "=", "40"}], TraditionalForm]]],
 ", ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"k", "=", "1"}], ",", 
    RowBox[{"m", "=", "1"}], ",", " ", 
    RowBox[{"a", "=", 
     RowBox[{"1", "/", "4"}]}], ","}], TraditionalForm]]],
 " and ",
 Cell[BoxData[
  FormBox[
   RowBox[{"g", "=", 
    RowBox[{"5", "\[Cross]", " ", 
     SuperscriptBox["10", 
      RowBox[{"-", "6"}]]}], " "}], TraditionalForm]]],
 ", and determine how the maximum sag scales with the length of the rod for \
",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"M", "=", "10"}], ",", "20", ",", "30", ",", "40"}], 
   TraditionalForm]]],
 ". [See Exercise (7)(c), Sec. ",
 ButtonBox["4.2",
  BaseStyle->"Hyperlink",
  ButtonData:>{"Chapter4.nb", "Ex. 4.2"}],
 ", for the analytic solution to this problem.]"
}], "Text"],

Cell[TextData[{
 StyleBox["(7)",
  FontWeight->"Bold"],
 " A  linear model of a solid two-dimensional pyramid consists of the \
following coupled mass-spring system. The masses have equilibrium  positions \
shown in Cell ",
 ButtonBox["9.171",
  BaseStyle->"Hyperlink",
  ButtonData:>"Cell 9.171"],
 ", given by the equations ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    StyleBox[
     SubscriptBox[
      StyleBox["R",
       FontSlant->"Plain"], 
      StyleBox[
       RowBox[{"i", " ", "j"}],
       FontWeight->"Plain"]],
     FontWeight->"Bold"], 
    StyleBox["=",
     FontWeight->"Plain"], 
    StyleBox[" ",
     FontWeight->"Plain"], 
    RowBox[{
     RowBox[{
      StyleBox["i",
       FontWeight->"Plain"], 
      StyleBox[" ",
       FontWeight->"Plain"], 
      StyleBox["p",
       FontWeight->"Bold",
       FontSlant->"Plain"]}], "+", 
     RowBox[{"j", " ", 
      StyleBox["q",
       FontWeight->"Bold",
       FontSlant->"Plain"]}]}]}], TraditionalForm]]],
 ", ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"i", "=", "0"}], ",", "1", ",", "2", ",", 
    RowBox[{"...", "10"}]}], TraditionalForm]]],
 " and ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"j", "=", "0"}], ",", "1", ",", "2", ",", 
    RowBox[{
     RowBox[{"...", "10"}], "-", "i"}]}], TraditionalForm]]],
 ", where ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    StyleBox["p",
     FontWeight->"Bold",
     FontSlant->"Plain"], 
    StyleBox["=",
     FontWeight->"Plain"], 
    StyleBox[
     RowBox[{"(", 
      RowBox[{"1", ",", "0"}], ")"}],
     FontWeight->"Plain"]}], TraditionalForm]]],
 " and ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    StyleBox["q",
     FontWeight->"Bold",
     FontSlant->"Plain"], "=", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"1", "/", "2"}], ",", " ", 
      SqrtBox[
       RowBox[{"3", "/", "2"}]]}], ")"}]}], TraditionalForm]]],
 ". However, they are subjected to gravity, and therefore the pyramid \
compresses under its own weight; see Fig. ",
 ButtonBox["9.6",
  BaseStyle->"Hyperlink",
  ButtonData:>"Fig. 9.6"],
 ". "
}], "Text",
 CellTags->"i:90"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"p", "=", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0"}], "}"}]}], ";", " ", 
  RowBox[{"q", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"1", "/", "2"}], ",", " ", 
     RowBox[{
      RowBox[{"Sqrt", "[", "3", "]"}], "/", "2"}]}], "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"R", "[", 
    RowBox[{"i_", ",", "j_"}], "]"}], " ", "=", " ", 
   RowBox[{
    RowBox[{"i", " ", "p"}], " ", "+", " ", 
    RowBox[{"j", " ", "q"}]}]}], ";"}], "\n", 
 RowBox[{"ListPlot", "[", 
  RowBox[{
   RowBox[{"Flatten", "[", 
    RowBox[{
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"R", "[", 
          RowBox[{"i", ",", "j"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"j", ",", "0", ",", 
           RowBox[{"10", "-", "i"}]}], "}"}]}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", "0", ",", "10"}], "}"}]}], "]"}], ",", "1"}], "]"}],
    ",", 
   RowBox[{"PlotStyle", "\[Rule]", 
    RowBox[{"PointSize", "[", "0.035", "]"}]}], ",", 
   RowBox[{"PlotRange", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"0", ",", "10"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", "10"}], "}"}]}], "}"}]}], ",", 
   RowBox[{"AspectRatio", "\[Rule]", "1"}]}], "]"}]}], "Input",
 ShowCellTags->True,
 CellChangeTimes->{3.446592870731773*^9},
 CellTags->"Cell 9.171"],

Cell[BoxData[
 GraphicsBox[
  {Hue[0.67, 0.6, 0.6], PointSize[0.035], PointBox[CompressedData["
1:eJxtkTFLxDAYhoN0KJihF2IItdTr6aqO4pRw4iLecoPcfOLs7uTuP/H2+w2u
7g6OoovjgYtKvwh5aqCEl+R7nye0W97Ob7aUUtOf73f/f72Gx8vF2936I/T5
U/KX5E24P50evTwVUQZif74tuYjvxyfPej6SXMb+vpWs487Z7GEVvORK5ncl
mxiurs8vDvckW+nrYvLJfTfwTT7Jt4i5bwlfDd8Kvga+Fr4OvirtKvFzvxJ+
Gn4V/Az8LPwc/Dz8Svho+FTwMfCx8HHw8fCpB/835xvwLfgOfA9+DX4DftrT
cuB58GrwGvDawXvz/hr9Dfpb9I/R36CvRd8Yfd2gL5/vMD/B/AT393H/4O/8
Gxhr4dM=
    "]]},
  AspectRatio->1,
  Axes->True,
  PlotRange->{{0, 10}, {0, 10}},
  PlotRangeClipping->True]], "Output",
 CellTags->"Cell 9.171"]
}, Open  ]],

Cell[TextData[{
 StyleBox["(a)",
  FontWeight->"Bold"],
 "For ",
 Cell[BoxData[
  FormBox[
   RowBox[{"m", "=", 
    RowBox[{"k", "=", "1"}]}], TraditionalForm]]],
 " and ",
 Cell[BoxData[
  FormBox[
   RowBox[{"g", "=", "0.2"}], TraditionalForm]]],
 " find the equilibrium shape, assuming that the masses in the base are \
fixed, by solving for the equilibrium position of the masses using the same \
spring force as in the previous problem with interior masses connected to \
their 6 nearest neighbors, and linearizing the equations in small \
displacements from equilibrium. (The solution is shown in Fig. ",
 ButtonBox["9.6",
  BaseStyle->"Hyperlink",
  ButtonData:>"Fig. 9.6"],
 " for ",
 Cell[BoxData[
  FormBox[
   RowBox[{"g", "=", "0.1"}], TraditionalForm]]],
 ". )"
}], "Text"],

Cell[GraphicsData["PostScript", "\<\
%!
%%Creator: Mathematica
%%AspectRatio: 1 
MathPictureStart
/Mabs {
Mgmatrix idtransform
Mtmatrix dtransform
} bind def
/Mabsadd { Mabs
3 -1 roll add
3 1 roll add
exch } bind def
%% Graphics
%%IncludeResource: font Courier
%%IncludeFont: Courier
/Courier findfont 10  scalefont  setfont
% Scaling calculations
-2.77556e-17 0.1 0.000999001 0.0999001 [
[.2 -0.0115 -3 -9 ]
[.2 -0.0115 3 0 ]
[.4 -0.0115 -3 -9 ]
[.4 -0.0115 3 0 ]
[.6 -0.0115 -3 -9 ]
[.6 -0.0115 3 0 ]
[.8 -0.0115 -3 -9 ]
[.8 -0.0115 3 0 ]
[1 -0.0115 -6 -9 ]
[1 -0.0115 6 0 ]
[-0.0125 .2008 -6 -4.5 ]
[-0.0125 .2008 0 4.5 ]
[-0.0125 .4006 -6 -4.5 ]
[-0.0125 .4006 0 4.5 ]
[-0.0125 .6004 -6 -4.5 ]
[-0.0125 .6004 0 4.5 ]
[-0.0125 .8002 -6 -4.5 ]
[-0.0125 .8002 0 4.5 ]
[-0.0125 1 -12 -4.5 ]
[-0.0125 1 0 4.5 ]
[ 0 0 0 0 ]
[ 1 1 0 0 ]
] MathScale
% Start of Graphics
1 setlinecap
1 setlinejoin
newpath
0 g
.25 Mabswid
[ ] 0 setdash
.2 .001 m
.2 .00725 L
s
[(2)] .2 -0.0115 0 1 Mshowa
.4 .001 m
.4 .00725 L
s
[(4)] .4 -0.0115 0 1 Mshowa
.6 .001 m
.6 .00725 L
s
[(6)] .6 -0.0115 0 1 Mshowa
.8 .001 m
.8 .00725 L
s
[(8)] .8 -0.0115 0 1 Mshowa
1 .001 m
1 .00725 L
s
[(10)] 1 -0.0115 0 1 Mshowa
.125 Mabswid
.05 .001 m
.05 .00475 L
s
.1 .001 m
.1 .00475 L
s
.15 .001 m
.15 .00475 L
s
.25 .001 m
.25 .00475 L
s
.3 .001 m
.3 .00475 L
s
.35 .001 m
.35 .00475 L
s
.45 .001 m
.45 .00475 L
s
.5 .001 m
.5 .00475 L
s
.55 .001 m
.55 .00475 L
s
.65 .001 m
.65 .00475 L
s
.7 .001 m
.7 .00475 L
s
.75 .001 m
.75 .00475 L
s
.85 .001 m
.85 .00475 L
s
.9 .001 m
.9 .00475 L
s
.95 .001 m
.95 .00475 L
s
.25 Mabswid
0 .001 m
1 .001 L
s
0 .2008 m
.00625 .2008 L
s
[(2)] -0.0125 .2008 1 0 Mshowa
0 .4006 m
.00625 .4006 L
s
[(4)] -0.0125 .4006 1 0 Mshowa
0 .6004 m
.00625 .6004 L
s
[(6)] -0.0125 .6004 1 0 Mshowa
0 .8002 m
.00625 .8002 L
s
[(8)] -0.0125 .8002 1 0 Mshowa
0 1 m
.00625 1 L
s
[(10)] -0.0125 1 1 0 Mshowa
.125 Mabswid
0 .05095 m
.00375 .05095 L
s
0 .1009 m
.00375 .1009 L
s
0 .15085 m
.00375 .15085 L
s
0 .25075 m
.00375 .25075 L
s
0 .3007 m
.00375 .3007 L
s
0 .35065 m
.00375 .35065 L
s
0 .45055 m
.00375 .45055 L
s
0 .5005 m
.00375 .5005 L
s
0 .55045 m
.00375 .55045 L
s
0 .65035 m
.00375 .65035 L
s
0 .7003 m
.00375 .7003 L
s
0 .75025 m
.00375 .75025 L
s
0 .85015 m
.00375 .85015 L
s
0 .9001 m
.00375 .9001 L
s
0 .95005 m
.00375 .95005 L
s
.25 Mabswid
0 0 m
0 1 L
s
0 0 m
1 0 L
1 1 L
0 1 L
closepath
clip
newpath
.03 w
0 .001 Mdot
.02758 .06475 Mdot
.06968 .12362 Mdot
.12149 .17819 Mdot
.17823 .23042 Mdot
.23623 .28275 Mdot
.29302 .33766 Mdot
.34746 .39731 Mdot
.39951 .46322 Mdot
.45 .53612 Mdot
.5 .61598 Mdot
.1 .001 Mdot
.13033 .05528 Mdot
.17434 .10613 Mdot
.22682 .15558 Mdot
.28329 .20598 Mdot
.34036 .25956 Mdot
.39588 .31831 Mdot
.44899 .38363 Mdot
.5 .45625 Mdot
.55 .53612 Mdot
.2 .001 Mdot
.235 .04839 Mdot
.28173 .09448 Mdot
.33512 .14173 Mdot
.39106 .19246 Mdot
.44658 .24875 Mdot
.5 .31216 Mdot
.55101 .38363 Mdot
.60049 .46322 Mdot
.3 .001 Mdot
.34069 .04404 Mdot
.39056 .08792 Mdot
.44489 .13518 Mdot
.5 .18815 Mdot
.55342 .24875 Mdot
.60412 .31831 Mdot
.65254 .39731 Mdot
.4 .001 Mdot
.44685 .04196 Mdot
.5 .08581 Mdot
.55511 .13518 Mdot
.60894 .19246 Mdot
.65964 .25956 Mdot
.70698 .33766 Mdot
.5 .001 Mdot
.55315 .04196 Mdot
.60944 .08792 Mdot
.66488 .14173 Mdot
.71671 .20598 Mdot
.76377 .28275 Mdot
.6 .001 Mdot
.65931 .04404 Mdot
.71827 .09448 Mdot
.77318 .15558 Mdot
.82177 .23042 Mdot
.7 .001 Mdot
.765 .04839 Mdot
.82566 .10613 Mdot
.87851 .17819 Mdot
.8 .001 Mdot
.86967 .05528 Mdot
.93032 .12362 Mdot
.9 .001 Mdot
.97242 .06475 Mdot
1 .001 Mdot
% End of Graphics
MathPictureEnd
\
\>"], "Picture",
 ImageSize->{228.75, 228.75},
 ImageMargins->{{43, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 
  1}},ImageCache->GraphicsData["CompressedBitmap", "\<\
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
SlI7xW8lMw3/ApQtBLo=\
\>"],ImageRangeCache->{{{0, 284.938}, {284.938, 0}} -> {0, 0, 0, 0}}],

Cell["Fig. 9.6 Solution for g=0.1.", "Caption",
 CellTags->"Fig. 9.6"],

Cell[TextData[{
 StyleBox["(b)",
  FontWeight->"Bold"],
 " Plot how the height of the pyramid depends on ",
 Cell[BoxData[
  FormBox["g", TraditionalForm]]],
 " over the range ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"-", "0.2"}], "<", "g", "<", "0.2"}], TraditionalForm]]],
 ", for ",
 Cell[BoxData[
  FormBox[
   RowBox[{"m", "=", 
    RowBox[{"k", "=", "1"}]}], TraditionalForm]]],
 "."
}], "Text"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["9.11 Numerical Analysis", "Subtitle",
 CellTags->{"Sec. 9.11", "c:60"}],

Cell[TextData[{
 "In this section, we examine a few of the elementary numerical procedures \
commonly used by scientists and engineers: numerical solution of algebraic \
equations, numerical integration, interpolation, and fitting.  In university \
courses on numerical methods it was once ",
 StyleBox["de rigeur",
  FontSlant->"Italic"],
 " to spend a considerable amount of time discussing the theory behind these \
procedures. However, hardly anyone writes their own codes to perform these \
tasks anymore.   Here, we focus on the ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " intrinsic functions that perform these operations. Some of the basic \
techniques, such as Newton's method and least-squares fitting, are considered \
in the exercises. "
}], "Text"],

Cell[CellGroupData[{

Cell["9.11.1 Numerical Solution of Algebraic Equations", "Subsubtitle",
 CellTags->"c:61"],

Cell[TextData[{
 " \tIn order to solve the equation ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"f", "(", "x", ")"}], " ", "=", " ", "0"}], TraditionalForm]]],
 " numerically,  it is often a good idea to plot the function ",
 Cell[BoxData[
  FormBox[
   RowBox[{"f", "(", "x", ")"}], TraditionalForm]]],
 " in order to see whether solutions exist for real ",
 Cell[BoxData[
  FormBox["x", TraditionalForm]]],
 ".  Take, for example,  ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"f", "(", "x", ")"}], " ", "=", " ", 
    RowBox[{
     RowBox[{"cos", "(", "x", ")"}], " ", "-", " ", 
     SuperscriptBox["\[ExponentialE]", "x"]}]}], TraditionalForm]]],
 ".  A plot of this function is shown in Cell ",
 ButtonBox["9.172",
  BaseStyle->"Hyperlink",
  ButtonData:>"Cell 9.172"],
 "."
}], "Text",
 CellTags->"i:86"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Cos", "[", "x", "]"}], "-", 
    RowBox[{"Exp", "[", "x", "]"}]}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "6"}], ",", "6"}], "}"}], ",", 
   RowBox[{"PlotRange", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "1.1"}], ",", "1.1"}], "}"}]}]}], "]"}]], "Input",
 ShowCellTags->True,
 CellChangeTimes->{
  3.446592965820681*^9, {3.446593078756248*^9, 3.446593079046009*^9}, 
   3.446593229307701*^9, {3.458925100545404*^9, 3.458925126975078*^9}, 
   3.458925164898569*^9},
 CellTags->"Cell 9.172"],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {Hue[0.67, 0.6, 0.6], LineBox[CompressedData["
1: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
MaVhWqztRMgzAkwL9bdGGdJwuIjUoksxAWUb2IMy+jTcP0SvWV9CgMrL/JCs
dTQ8NPBbj0NywjbntWtW07D+VYp9TikBXFju00tFGv7y+tR68+cEeO/uuG4i
R8PZ+2sqhkkeagpf1SxGw7XXM+fOvSDAynpH/WEqDe9RKhuaIrmm+/eFYQoN
u1c/u+1QRsC6Yy+kz/2mYsLb+ks1yRnDZ98uzFFx8fxphlQ5AcIeqq6BLCq+
n03PP06y/3Q/VWiMimW8Lq5KIZnlnVhyv5+Kbb5vt6kj+eiPfXaruqjY3E3X
aILkBn++v4UtVPwjwWn0D8lbuGpy9T9SsdfCwE6ulwTkh161wNVU/D2j0/n/
4zLCG+YsKqh4atulbUySg+MnkruLqXhUafFTLcnzslnGLo+pOHR75bokkt0y
7MdZmVTsv4JvrwPJceUTRp+SqXggI/6QIMk1LVeT3sZSMTcTNRWS8c0w+Di5
YVTce+NP8XaSl/1NNIsOoGK2azVPNbk/5jJqWT7XqJgim9S0nuQr68p+Hfei
Yt/YXL54cn9zdu88uPsUFXftkn01Ruajw5H+ZJ0zOb+KzshqkpeuuHDLHqHi
pwmmoQ5k/tbGcByWrKjY89rrgltkvsNqRITbjanY2/+JVwqpj/KeDPdXm6l4
8IWZQgypn1H2murM9VTcFB1m4VNIgLGShae3IhXfcGRbSZL6O7+lt85eloq3
i7zXaMonIO3AaaUdolTMbIu7dymPgIWA0A6JJQE80LhV5z6pd5UUGa0/CwL4
zyaLU2LZBFiXPro9OiuASyXrjfwySf8Zfq9X9lUAb1fY2KNM1kvfr4NR6d0C
uK5q/KFTGgECEiNjd1oFML02UjqarC/XHf8SbavJ7w2/SVcmEqCQs/3nQoYA
TvvDph+LJmDPm6YDg4kC+Lj+5TOKkaR/dR4tqIsWwP3pBi100g86uH2PJt8Q
wF66SzxCdwgIdSt/u/U4yRLmZfW+5H7475JWthXA2nO7l0uQfjN6r/M8bZ8A
rvmpddHyMgFGtcTKvu0CeJOT8e+EC6Qe1NYF+i8XwCkl8RTPE2S8RlVf3KQE
sIfWDkfkRMZ72FJ3n5AATqxsbOM6RsDTkDOjKxb5sVOFOp+DLRkPM8+0po8f
7w7htbXfQ0D7Y0UaVxo/bo7b4hCvQYDLLObySeDHfjnPHKpVCfim5/aHGcmP
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
9dtF0oyOzEH6CsPuhGgGSkv9/zMH/wMvQmoI
     "]]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  AxesOrigin->{0, 0},
  PlotRange->{{-6, 6}, {-1.1, 1.1}},
  PlotRangeClipping->True,
  PlotRangePadding->{
    Scaled[0.02], Automatic}]], "Output",
 CellTags->"Cell 9.172"]
}, Open  ]],

Cell[TextData[{
 "You can see that there are in fact several solutions. One is at ",
 Cell[BoxData[
  FormBox[
   RowBox[{"x", "=", "0"}], TraditionalForm]]],
 ", and there are others at ",
 Cell[BoxData[
  FormBox[
   RowBox[{"x", "<", "0"}], TraditionalForm]]],
 ".  In order to find a numerical approximation to any one of these \
solutions, use the function ",
 StyleBox["FindRoot",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ". This syntax for this function is \n",
 StyleBox["FindRoot[eqn,{var,guess}]",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ",where ",
 StyleBox["eqn",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 StyleBox[" ",
  FontSlant->"Italic"],
 "is the equation being solved ( ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    RowBox[{
     RowBox[{
      StyleBox["f",
       FontSlant->"Plain"], "[", 
      StyleBox["x",
       FontSlant->"Plain"], "]"}], "==", "0"}],
    FontWeight->"Bold"], TraditionalForm]],
  FontFamily->"Courier"],
 StyleBox[" ",
  FontFamily->"Courier"],
 "in this example),  ",
 StyleBox["var",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 StyleBox[" ",
  FontSlant->"Italic"],
 " is the variable being solved for (",
 StyleBox["x",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " in this case), and ",
 StyleBox[" ",
  FontSlant->"Italic"],
 StyleBox["guess",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 StyleBox[" ",
  FontSlant->"Italic"],
 "is an initial guess for the value of ",
 StyleBox["x",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " that solves the equation. (Note the double equal sign syntax in the \
equation ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    RowBox[{
     RowBox[{
      StyleBox["f",
       FontSlant->"Plain"], "[", 
      StyleBox["x",
       FontSlant->"Plain"], "]"}], "==", "0"}],
    FontFamily->"Courier",
    FontWeight->"Bold"], TraditionalForm]]],
 " , just as in the intrinsic functions ",
 StyleBox["Solve",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " and ",
 StyleBox["NSolve",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ".) ",
 StyleBox["FindRoot ",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 "will then attempt to find the solution closest to the given initial guess.  \
For example, if you choose for our initial guess ",
 Cell[BoxData[
  FormBox[
   RowBox[{"x", "=", 
    RowBox[{"-", "2"}]}], TraditionalForm]]],
 ", you obtain the following result:"
}], "Text",
 CellChangeTimes->{{3.458925184895825*^9, 3.458925222639819*^9}},
 CellTags->"i:84"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FindRoot", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"Cos", "[", "x", "]"}], " ", "-", 
     RowBox[{"Exp", "[", "x", "]"}]}], "\[Equal]", "0"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "2"}]}], "}"}]}], "]"}]], "Input",
 ShowCellTags->True,
 CellChangeTimes->{{3.446593071354909*^9, 3.4465931019827747`*^9}, {
  3.446593220552599*^9, 3.4465932414771843`*^9}},
 CellTags->"Cell 9.173"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"x", "\[Rule]", 
   RowBox[{"-", "1.2926957193733983`"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.446592994090086*^9, {3.446593103276376*^9, 3.446593118380541*^9}, {
   3.446593242098961*^9, 3.446593251292789*^9}, 3.454437780754615*^9},
 CellTags->"Cell 9.173"]
}, Open  ]],

Cell[TextData[{
 StyleBox["FindRoot",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " uses ",
 ButtonBox["Newton's",
  BaseStyle->"Hyperlink",
  ButtonData:>{
    URL["http://www-groups.dcs.st-and.ac.uk/~history/Mathematicians/Newton.\
html"], None}],
 " method to quickly obtain the solution. It is not particularly important to \
understand how Newton's method works (some programming ideas are needed to \
explain it: see the Exercises).  However, it is important to know how well \
the solution works. We can find out by substituting it back into the function \
",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"cos", " ", "x"}], "-", " ", 
    RowBox[{"exp", " ", "x"}]}], TraditionalForm]]],
 ":"
}], "Text",
 CellTags->"i:125"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Cos", "[", "x", "]"}], " ", "-", " ", 
   RowBox[{"Exp", "[", "x", "]"}]}], " ", "/.", "%"}]], "Input",
 ShowCellTags->True,
 CellChangeTimes->{{3.446593115989243*^9, 3.4465931163088207`*^9}, 
   3.446593249496879*^9},
 CellTags->"Cell 9.174"],

Cell[BoxData["5.551115123125783`*^-17"], "Output",
 CellChangeTimes->{
  3.446593011895277*^9, {3.446593109442775*^9, 3.446593120690781*^9}, {
   3.446593245739256*^9, 3.44659325347819*^9}, 3.454437783475848*^9},
 CellTags->"Cell 9.174"]
}, Open  ]],

Cell[TextData[{
 "There is a very small error, as expected in any numerical solution. But the \
accuracy is  as high as one can expect to achieve in a computer system where ",
 StyleBox["$MachinePrecision",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " is 16, ie. 16-digit numerical precision. The accuracy of the solution can \
be adjusted by using several options.  ",
 StyleBox["AccuracyGoal",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 "  is an option that sets the wished-for number of digits of accuracy in \
both the position of the root, and the value of the function at the root.   \
",
 StyleBox["PrecisionGoal",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " specifies the wished-for number of digits of accuracy in the position of \
the root only. ",
 StyleBox["WorkingPrecision ",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 "specifies the numerical precision to be used in the internal computations. \
The default settings for  ",
 StyleBox["AccuracyGoal",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " and ",
 StyleBox["PrecisionGoal",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " are ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    StyleBox["WorkingPrecision",
     FontFamily->"Courier",
     FontWeight->"Bold"], "/", "2"}], TraditionalForm]]],
 ". amd the default setting for ",
 StyleBox["WorkingPrecision",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " is ",
 StyleBox["$MachinePrecision",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ". ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " will perform the rootfinding to arbitrary precision, depending on the \
value of ",
 StyleBox["WorkingPrecision",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ".   For instance, "
}], "Text",
 CellChangeTimes->{{3.446593205977626*^9, 3.446593217189908*^9}, 
   3.44659325865937*^9, {3.454438535590404*^9, 3.4544389629789267`*^9}, {
   3.454439101661253*^9, 3.45443915267695*^9}, {3.454439200135178*^9, 
   3.4544392025669603`*^9}, {3.454439294603435*^9, 3.454439351318914*^9}, {
   3.454439381994273*^9, 3.454439390447177*^9}, {3.4544417989776*^9, 
   3.454441833496641*^9}},
 CellTags->"i:102"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FindRoot", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"Cos", "[", "x", "]"}], " ", "-", 
     RowBox[{"Exp", "[", "x", "]"}]}], "\[Equal]", "0"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "2"}], ",", 
     RowBox[{"-", "2.1"}]}], "}"}], ",", 
   RowBox[{"WorkingPrecision", "\[Rule]", "100"}]}], "]"}]], "Input",
 ShowCellTags->True,
 CellChangeTimes->{{3.446593132035542*^9, 3.4465931355059423`*^9}, 
   3.4465931837825613`*^9, {3.4465932702166033`*^9, 3.4465932735977097`*^9}, {
   3.454437810740704*^9, 3.454437815784507*^9}, {3.454437859949296*^9, 
   3.4544378914487963`*^9}, {3.454437945589484*^9, 3.454437988146188*^9}, {
   3.454438026963118*^9, 3.454438037682527*^9}, {3.454438123126786*^9, 
   3.4544382987816133`*^9}, {3.454438436058316*^9, 3.4544384889735107`*^9}, {
   3.454438968605299*^9, 3.4544390499405823`*^9}, {3.454439863199252*^9, 
   3.4544399463064137`*^9}},
 CellTags->"Cell 9.175"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"x", "\[Rule]", 
   RowBox[{
   "-", "1.2926957193733983811681891215906070494730212309702479188363692949799\
433742058258443321066909913903202696562559356524`100."}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.446593035671626*^9, 3.4465931362323017`*^9, 3.446593185422619*^9, 
   3.4465932742010317`*^9, 3.454437823549033*^9, {3.454437862782497*^9, 
   3.4544378921407013`*^9}, {3.4544379577766*^9, 3.4544379885111113`*^9}, {
   3.4544380285559473`*^9, 3.4544380380823603`*^9}, 3.4544380969260798`*^9, {
   3.454438140938137*^9, 3.454438149715056*^9}, 3.454438181527549*^9, {
   3.454438213772698*^9, 3.454438249063965*^9}, {3.454438280925042*^9, 
   3.454438301159811*^9}, {3.454438440789646*^9, 3.454438490162294*^9}, {
   3.45443898638794*^9, 3.454439051374283*^9}, {3.4544398644994087`*^9, 
   3.454439947227972*^9}},
 CellTags->"Cell 9.175"]
}, Open  ]],

Cell["This solution is more accurate than the previous solution:", "Text",
 CellChangeTimes->{{3.446593278988158*^9, 3.446593279531008*^9}, {
  3.4544389766834106`*^9, 3.454438977154293*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Cos", "[", "x", "]"}], "-", 
   RowBox[{"Exp", "[", "x", "]"}]}], "/.", "%"}]], "Input",
 ShowCellTags->True,
 CellChangeTimes->{{3.446593142090208*^9, 3.446593142400625*^9}, 
   3.4465932838055162`*^9, {3.4544381859581213`*^9, 3.454438186318996*^9}, {
   3.454438996361511*^9, 3.454438996497919*^9}},
 CellTags->"Cell 9.176"],

Cell[BoxData[
 RowBox[{"-", 
  "1.0018775211804644251474482`9.765643682705342*^-90"}]], "Output",
 CellChangeTimes->{
  3.4465930548934526`*^9, 3.446593143562991*^9, 3.446593191179913*^9, 
   3.446593284783154*^9, {3.454437866806755*^9, 3.454437894531299*^9}, {
   3.454437960526146*^9, 3.454437991830649*^9}, {3.454438031749296*^9, 
   3.4544380414979057`*^9}, 3.4544381524376993`*^9, {3.45443818725082*^9, 
   3.454438251727418*^9}, {3.454438283548126*^9, 3.454438303534936*^9}, {
   3.4544384442366343`*^9, 3.454438464725421*^9}, {3.454438990616248*^9, 
   3.454439056819292*^9}, {3.454439867566288*^9, 3.454439950206512*^9}},
 CellTags->"Cell 9.176"]
}, Open  ]],

Cell[TextData[{
 "Note that two initial guesses were used in Cell ",
 ButtonBox["9.175",
  BaseStyle->"Hyperlink",
  ButtonData->"Cell 9.175"],
 ". This option allows root finding on a function without taking its \
derivative (using a variant of the secant method). This can be useful in \
applications where such derivatives are not defined. We will see examples of \
such functions in coming chapters (for instance, Chapter 1, Cell ",
 ButtonBox["1.77",
  BaseStyle->"Hyperlink",
  ButtonData->{"Chapter1.nb", "Cell 1.77"}],
 "). "
}], "Text",
 CellChangeTimes->{{3.454439418838915*^9, 3.454439440623344*^9}, {
  3.454439472445121*^9, 3.4544395443633204`*^9}, {3.454439574499913*^9, 
  3.454439585713469*^9}, {3.454439616067387*^9, 3.454439772477639*^9}, {
  3.45444032543762*^9, 3.454440357659061*^9}, {3.4544404084780607`*^9, 
  3.4544404169370813`*^9}, {3.454440539115232*^9, 3.454440551373434*^9}, {
  3.454440587735787*^9, 3.4544405877636433`*^9}, {3.4544415184684687`*^9, 
  3.454441571880237*^9}}],

Cell[TextData[{
 "\tTo find another solution, you must supply another guess. ",
 StyleBox["FindRoot",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " only finds one solution at a time:"
}], "Text",
 CellChangeTimes->{{3.446593295235237*^9, 3.44659329556675*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FindRoot", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Cos", "[", "x", "]"}], "-", 
    RowBox[{"Exp", "[", "x", "]"}]}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "5"}]}], "}"}]}], "]"}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.177"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"x", "\[Rule]", 
   RowBox[{"-", "4.7212923566932625`"}]}], "}"}]], "Output"]
}, Open  ]],

Cell[TextData[{
 "\tThere are also complex solutions to this equation, and ",
 StyleBox["FindRoot",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " will find them if an appropriate initial guess is supplied:"
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FindRoot", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Cos", "[", "x", "]"}], " ", "-", " ", 
    RowBox[{"Exp", "[", "x", "]"}]}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"3", " ", "+", " ", 
      RowBox[{"3", " ", "I"}]}]}], "}"}]}], "]"}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.178"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"x", "\[Rule]", 
   RowBox[{"2.7950802199126548`", "\[InvisibleSpace]", "+", 
    RowBox[{"3.4875082071327816`", " ", "\[ImaginaryI]"}]}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.4465933187020893`*^9},
 CellTags->"Cell 9.178"]
}, Open  ]],

Cell[TextData[{
 StyleBox["When using ",
  FontWeight->"Bold"],
 StyleBox["FindRoot",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 StyleBox[", it is important to remember that ",
  FontWeight->"Bold"],
 StyleBox["no unknown constants",
  FontWeight->"Bold",
  FontSlant->"Italic"],
 StyleBox[" can appear in the equation",
  FontWeight->"Bold"],
 " : after all, we are performing a ",
 StyleBox["numerical ",
  FontSlant->"Italic"],
 "solution so ",
 StyleBox["only",
  FontSlant->"Italic"],
 " numbers can appear in the equation."
}], "Text"],

Cell[TextData[{
 "\tFor example, the equation ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{"a", " ", "x"}], " ", "+", " ", "b"}], "=", "0"}], 
   TraditionalForm]]],
 "  has a perfectly good analytic solution ",
 Cell[BoxData[
  FormBox[
   RowBox[{"x", "=", 
    RowBox[{
     RowBox[{"-", "b"}], "/", "a"}]}], TraditionalForm]]],
 ",  but ",
 StyleBox["FindRoot ",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 "will not work unless specific numerical values for ",
 Cell[BoxData[
  FormBox["a", TraditionalForm]]],
 " and ",
 Cell[BoxData[
  FormBox["b", TraditionalForm]]],
 " are given:"
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FindRoot", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"a", " ", "x"}], " ", "+", " ", "b"}], " ", "\[Equal]", "0"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "1"}], "}"}]}], "]"}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.179"],

Cell[BoxData[
 RowBox[{
  RowBox[{"FindRoot", "::", "\<\"nlnum\"\>"}], ":", 
  " ", "\<\"\\!\\(\\*StyleBox[\\\"\\\\\\\"The function value \\\\\\\"\\\", \\\
\"MT\\\"]\\)\[NoBreak]\\!\\(\\*StyleBox[\\!\\({\\(\\(1.`\\\\ a\\)\\) + b}\\), \
\\\"MT\\\"]\\)\[NoBreak]\\!\\(\\*StyleBox[\\\"\\\\\\\" is not a list of \
numbers with dimensions \\\\\\\"\\\", \
\\\"MT\\\"]\\)\[NoBreak]\\!\\(\\*StyleBox[\\!\\({1}\\), \\\"MT\\\"]\\)\
\[NoBreak]\\!\\(\\*StyleBox[\\\"\\\\\\\" at \\\\\\\"\\\", \\\"MT\\\"]\\)\
\[NoBreak]\\!\\(\\*StyleBox[\\!\\({x}\\), \
\\\"MT\\\"]\\)\[NoBreak]\\!\\(\\*StyleBox[\\\"\\\\\\\" = \\\\\\\"\\\", \\\"MT\
\\\"]\\)\[NoBreak]\\!\\(\\*StyleBox[\\!\\({1.`}\\), \
\\\"MT\\\"]\\)\[NoBreak]\\!\\(\\*StyleBox[\\\"\\\\\\\".\\\\\\\"\\\", \\\"MT\\\
\"]\\) \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", \
ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/FindRoot\\\", ButtonNote -> \
\\\"FindRoot::nlnum\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.4465933212852707`*^9, 3.448632124245162*^9},
 CellTags->"Cell 9.179"],

Cell[BoxData[
 RowBox[{"FindRoot", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"a", " ", "x"}], "+", "b"}], "\[Equal]", "0"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "1"}], "}"}]}], "]"}]], "Output",
 CellChangeTimes->{3.4465933213505*^9, 3.448632124295767*^9},
 CellTags->"Cell 9.179"]
}, Open  ]],

Cell[TextData[{
 "\t",
 StyleBox["FindRoot",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " can also  find a numerical solution to coupled equations in several \
variables. For example, the coupled equations "
}], "Text"],

Cell[TextData[{
 " ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{"cos", "(", 
      RowBox[{"x", " ", "y"}], ")"}], "+", 
     RowBox[{"y", " ", 
      SuperscriptBox["\[ExponentialE]", "x"]}]}], "=", "0"}], 
   TraditionalForm]]],
 "\n ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SuperscriptBox["y", "2"], "-", "y", "+", "x"}], "=", "0"}], 
   TraditionalForm]]]
}], "NE5",
 CellTags->"(9.11.1)"],

Cell["have the following solution:", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FindRoot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"Cos", "[", 
        RowBox[{"x", " ", "y"}], "]"}], "+", " ", 
       RowBox[{"y", " ", 
        RowBox[{"Exp", "[", "x", "]"}]}]}], " ", "\[Equal]", "0"}], ",", 
     RowBox[{
      RowBox[{
       RowBox[{"y", "^", "2"}], " ", "-", " ", "y", " ", "+", " ", "x"}], " ",
       "\[Equal]", "0"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"y", ",", 
     RowBox[{"-", "1"}]}], "}"}]}], "]"}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.180"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"x", "\[Rule]", 
    RowBox[{"-", "1.6148080268769736`"}]}], ",", 
   RowBox[{"y", "\[Rule]", 
    RowBox[{"-", "0.8655797402118169`"}]}]}], "}"}]], "Output",
 CellChangeTimes->{3.4465933327627373`*^9},
 CellTags->"Cell 9.180"]
}, Open  ]],

Cell[TextData[{
 "\tThis is only one of several solutions. To find these other solutions, you \
need guesses that are close to the exact solutions. Such guesses can be made \
only if you know something about the functions. The following graphical \
method is useful in this regard: Plot the zero of each equation separately in \
the ",
 Cell[BoxData[
  FormBox[
   RowBox[{"x", "-", "y"}], TraditionalForm]]],
 " plane using  a ",
 StyleBox["ContourPlot",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 "; then superimpose the zeros to find solutions to the coupled system."
}], "Text",
 CellChangeTimes->{{3.4465933416199636`*^9, 3.446593349038118*^9}, {
  3.4486321627265177`*^9, 3.4486321634082527`*^9}},
 CellTags->"i:87"],

Cell[TextData[{
 "\tThe solution to ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{"cos", "(", 
      RowBox[{"x", " ", "y"}], ")"}], "+", 
     RowBox[{"y", " ", 
      SuperscriptBox["\[ExponentialE]", "x"]}]}], "=", "0"}], 
   TraditionalForm]]],
 " is a set of curves ",
 Cell[BoxData[
  FormBox[
   RowBox[{"y", "(", "x", ")"}], TraditionalForm]]],
 " in the ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{"x", ",", "y"}], ")"}], TraditionalForm]]],
 "- plane, which can be determined by asking for the zero contour of the \
function ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"cos", "(", 
     RowBox[{"x", " ", "y"}], ")"}], "+", 
    RowBox[{"y", " ", 
     SuperscriptBox["\[ExponentialE]", "x"]}]}], TraditionalForm]]],
 ", as shown in Cell ",
 ButtonBox["9.181",
  BaseStyle->"Hyperlink",
  ButtonData:>"Cell 9.181"],
 "."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ContourPlot", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Cos", "[", 
     RowBox[{"x", " ", "y"}], "]"}], " ", "+", " ", 
    RowBox[{"y", " ", 
     RowBox[{"Exp", "[", "x", "]"}]}]}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "3"}], ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"y", ",", 
     RowBox[{"-", "3"}], ",", "3"}], "}"}], ",", 
   RowBox[{"Contours", "\[Rule]", 
    RowBox[{"{", "0", "}"}]}], ",", 
   RowBox[{"PlotPoints", "\[Rule]", "40"}], ",", 
   RowBox[{"ContourShading", "\[Rule]", " ", "False"}]}], "]"}]], "Input",
 ShowCellTags->True,
 CellChangeTimes->{
  3.446333394165378*^9, {3.446593367127179*^9, 3.44659339812265*^9}},
 CellTags->"Cell 9.181"],

Cell[BoxData[
 GraphicsBox[GraphicsComplexBox[CompressedData["
1:eJyUvXd4FcX3+J9ykxt6R+lIryKiNIFdeu9IU3ovUhVRegcRpAgISBFQmkiv
BmbpvZfQe+iEhIRASCDfmHtfs589+eV5P7/8c59XZsvsnDNnzpw5O/tR5/7N
uvn5+Pgcz+Tj89+v5y/I4rfxswONnh0I1Lz48pRFl6cEaH7+X3Ejl+ZKGzN9
sTGTv+api/47wVfz1f9OX+SjuVni9d8rODzxenGapyeeH6O5xJDOhYd0fq35
2H+HP4vS3LPwfwe81ByY+BuuuXZi/Z5qHvvf5Qo/0Lz7v+Iv7tj1SazvZc0n
Ep//pOYB/x2+cbPmHRUT2dDlnuM17/NcT/Nfnvtp7uOpj+ZPPPXV/Cr+v78X
mtt5nlezlJv8RX4w8oORH4z8YOQHIz8Y+cHID0Z+MPKDkR+M/GDkByM/GPnp
+njlByM/GPnByE+Xe+UHIz8Y+cHID0Z+MPKDkV9y/UzKTf4iPxj5wcgPRn4w
8oORH4z8YOQHIz8Y+cHID0Z+MPKDkZ+uj1d+MPKDkR+M/HS5V34w8oORH4z8
YOQHIz8Y+SVnF2U/k3KTv8gPRn4w8oORH4z8YOQHIz8Y+cHID0Z+MPKDkR+M
/HR9vPKDkR+M/GDkp8u98oORH4z8YOQHIz8Y+cHID7Y87WEkN65JOyn7nZSj
/EWeMPKEkSeMPGHkCSNPGHnCyBNGnjDyhJEnjDx1fbzyhJEnjDxh5KnLvfKE
kSeMPGHkCSNPGHnCyBNGnsn5JXKck3ZT9kMpR/mLPGHkCSNPGHnCyBNGnjDy
hJEnjDxh5AkjT10frzxh5AkjTxh56nKvPGHkCSNPGHnCyBNGnjDyhJEnnM/T
XpqRr/RT5Lgn7ajsh1KOsPxFvjDyhZEvjHxh5AsjXxj5wsgXRr4w8tX18coX
Rr4w8oWRry73yhdGvjDyhZEvjHxh5AsjXxj5wsg3uXmD9EOlXyPHSWlnZT+V
cpW/yBdGvjDyhZEvjHxh5AsjXxj5wshX18crXxj5wsgXRr663CtfGPnCyBdG
vjDyhZEvjHxh5Asj3+TmgXJeIf1U6ffIcVPaXdlPpVzlL/KFkS+MfGHkCyNf
GPnCyBdGvroeXvnCyBdGvjDy1eVe+cLIF0a+MPKFkS+MfGHkCyNfGPnC4z3t
qRl5y3minHdIP1b6QXIclXZX9lMpV1j+Im8YecPIG0beMPKGkTeMvHV9vPKG
kTeMvGHkrcu98oaRN4y8YeQNI28YecPIG0beMPKGkTf8wNPempG/jAvIeaac
t0i/V/pNcpyVdln2YylnWP4ifxj5w8gfRv4w8oeRv66PV/4w8oeRP4z8dblX
/jDyh5E/jPxh5A8jfxj5w8gfRv4w8oeRf3JxPBkXknEGOW+V8x7pN0s/S47L
0o7Lfi7lLn+RP4z8YeQPI38Y+ev6eOUPI38Y+cPIX5d75Q8jfxj5w8gfRv4w
8oeRP4z8YeQPI38Y+cN1PPLQjD7IOKCMK8k4hZznynmS9KulHybHbWnXZT+X
coflL/oAow8w+gCjD7o+Xn2A0QcYfYDRB13u1QcYfYDRBxh9gNEHGH2A0QcY
fYDRBxh9gNEHGH2AL3rkZSYX15dxYhl3lHEsGQeR82g575J+uvTr5LgvxwFp
F6ReyF/0A0Y/YPRD18erHzD6AaMfMPqhy736AaMfMPoBox8w+gGjHzD6AaMf
MPoBox8w+gGjHzD6AU/0yFMz+iLXDWQcWsY1ZVxMxlXkPFzO26SfL/1A6RfI
cULaCakXsPxFX2D0RdfHqy8w+gKjLzD6osu9+gKjLzD6AqMvMPoCoy8w+gKj
LzD6AqMvMPoCoy8w+gKjL3A5j7w1oz9ynUmuW8g4uIyjyjicjNvIeb6cF8p5
g/QjpV8hxxVpR6SewPIX/dH18eoPjP7A6A+M/uhyr/7A6A+M/sDoD4z+wOgP
jP7A6A+M/sDoD4z+wOgPjP7A6A+M/sCPPPqgeb5HXzSjX3LdUq6DyXUVGZeX
cV0ZB5RxIxlnkPNQOS+Rfqr0U+S4JO2O1CNY/qJfMPoFo18w+qXLvfoFo18w
+gWjXzD6BaNfMPoFo18w+gWjXzD6BaNfMPoFo18w+gWjXzD6Bdfz6JNm9E2u
i8t1VrluJ9d95LqBjDPLuKSMY8k4h5z3ynmQ9IOl3yPHNWmnpF7p+ohfHV/z
so6veVnH1yj36hus42te1vE1L+v4mpd1fM3LOr7mZR1f87KOr3lZx9e8rONr
XkbfYPQNRt9g9A1G32D0DUbfYPRN5M1ITpKHIdf15TqxXGeU61RyXUPGwWXc
VMbVZJxFzrvlvEv62dKPkuOitGNSz2D5i/7B6J8u9+ofjP7B6B+M/sHoH4z+
wegfjP7B6B+M/sHoH4z+wegfjP7B6B+M/sHoH4z+iTwtyUnyfmQeicxLkOva
cl1UrqPJdRcZp5dxXBnXk3EeOc+X8zrpt0s/TI6b0q5JPYPlL/qn/+/VPxj9
g9E/GP2D0T8Y/YPRPxj9g9E/GP2D0T8Y/YPRPxj9g9E/GP2D0T8Y/RN5gZKT
5JnJvCWZByPzKOQ6vFy3let8cl1IrhvIOLKMK8q4kowjyHmi9PulnybHUWnX
pJ7B8hf9g9E/GP2D0T8Y/YPRPxj9g9E/GP2D0T8Y/YPRPxj9g9E/GP2D0T8Y
/YPRP5GHKjlJXqPMk5N5VzJvR+Z9yDwBua4s1yHlOpVct5BxbBnHlHErGZeQ
80w5L5B+mxxHpV2TeqbLxa+2f17W9s/L2v55Wds/L2v752Vt/7ys7Z+Xtf3z
srZ/Xtb2z8va/nlZ2z8va/vnZW3/vKztn5e1/fOytn9e1vbPyUnyaGVepszz
k3liMs9I5qXIPAa57i3XReU6mVw3kXFzGSeVcTAZ15DzUDlPkH6bHEelXZN6
Bstf9A9G/2D0D0b/YPQPRv9g9A9G/2D0D0b/YPQPRv9g9A9G/2D0D0b/RJ69
5CR52zIPWOaVyrxEmdcm86Bk3ozMs5Dr8HJdVq7TyXUaGZeXcVcZR5NxDzkv
lfME6bfJcVTaNalnsPxF/2D0D0b/YPQPRv9g9A9G/2D0D0b/YPQPRv9g9A9G
/2D0D0b/xHsdkpO8JyDzzmUes8yDlXmUMu9O5mnJvB6Z9yHzAOS6sFwXlOtA
Ms4v47YyzibjIHJeKucJ0m+T46i0a1LPYPmL/sHoH4z+wegfjP7B6B+M/sHo
H4z+wegfjP7B6B+M/sHoX3LvEcn3UuR7DjJvXuZdy7xdmecp8wJlHpnMM5J5
JzIPQa5Dy3VHua4k1wlkXFfG3WQcRM5L5TxB+m1yHJV2TeqZ/EXfYPQNRt9g
9A1G32D0DUbfYPQNRt9g9A1G32D0Lbn30uR7TvK9Gfkehszjl3ngMm9Y5pnK
vESZtybzmGRei8xrkOvYcp1SrjvJdQIZx5VxNRnnkPNOOQ+QfpkcJ6Xdknol
f9EvGP2C0S8Y/YLRLxj9gtEvGP2C0S8Y/UruvUb5npx870q+xyPfA5HvEci8
c5mnLPNaZd6jzIOTeVEyL0bmQch1brluKdeZ5DqAjMvKOJmMW8h5pPTrpZ8l
xz1pl6QeyV/0CUafYPQJRp9g9AlGn2D0CUaf5Huw1AP9gdEf+Z6XfE9Ivmci
30uQeewy71nmxco8SZk3J/OmZJ6MzIOQ69pyHVKuE8m4vYyjyriWjDPIeZ/0
w6VfJMctaWeknsDyF/2B0R8Y/YHRHxj9gdEfGH3hPugLjL7A6AuMvsj3kOR7
K/I9B5kXL/OmZR6tzKuUeXUyj0rmyci8B7lOLdcR5bqOjLPLuKeMQ8m4gJyn
Sb9Z+jVyHJJ2ROoFLH/RFxh9gdEXGH2B0Q+ug37A6AeMfsDoB4x+wOgHjH7I
9yRkHr3Mq5Z5tjLPUubVybwpmQcj8xbkurJc55PrLjIOLuOSMk4k5+1yHiX9
XOmXyHFF2gmpB7D8RT9g9ANGP2D0g/PQDxj9gNEPGP2A0Q8Y/YDRD72u79UP
+V6FzLOXedcy71bmWco8OpkXJfNYZJ6BXPeV63ByXUTGqWXcUMZx5Lxaznuk
nyr9DDluSLsg9QCWv+gHjD7wf/QBRh9g9AFGH2D0AUYfYPRB53V49QFGH2D0
Qebdy7xrmWcr8yhlXpzMY5J5JnLdX67DynUxuU4h48YyjifjKnLeK+cp0s+U
foMcF6QdkHKHkT92AvnDyB9G/jDyh5E/jPxh5K/zeLzyh5E/jPxh5C/z7GVe
tcyblXmQMm9N5hXJPA+57i7XQeW6lFwnkHFbGUeTcQ45L5XzCuknSj9A2n0Y
+cPIHz8T+cPIH0b+MPKHkT+M/GHkr/O2vPKHkT+M/GHkDyN/mUcv86Rl3qvM
U5R5ZDKvR+ZZyHVvuQ4p14VknF7GTWVcS8Yh5DxSzgtg5A8jfxh5Mw9F3jDy
hpE3jLxh5A0jbxh567w8r7xh5A0jbxh5w8gbRt4yD17mNcs8VJknKPO2ZB6N
zGuQ68xy3U+uw8i4uIxbyjiTjBPAyBtG3jDyhpE3cSvkDSNvGHnDyBtG3jDy
hpG3zrv0yhtG3jDyhpE3jLxh5A0jb5m3LvOMZR6ozMuTeVIyb0XmEch1XbnO
Jtc9ZFxaxhFh5A0jbxh5w8iXODfyhZEvjHxh5AsjXxj5wshX59F65QsjXxj5
wsgXRr4w8oWRr3wPQeaNy7xemWcp895kHpLMC5Hr9HLdVK5jyXUGGPnCyBdG
vjDyhZEv62TIF0a+MPKFkS+MfGHkCyNfnRftlS+MfGHkCyNfGPnCyBdGvjDy
le8ByDxtmTcr8xhlXpnM85F5F3IdXK5LwsgXRr4w8oWRL4x8YeTLurvYV0/L
Fxb7fGn5wmJfIS1fWOxbYop9LUyxz4Ep3ns3xXvP8j1X+R6jfC9Nvkck3/NI
kocv86JlnqrMG5R5XDKvRuY5iHVnuU4o13lk3F7GZc0iie3ltvjNnFhff81d
E8/307wpsT6+mr17mmrOlnh+pIK3Jx4foXlN4vM+13wosT4uKxELB+r7w9wf
5v7wsMTfaAVzf5j7w9wf5pd6yF/qA1MfmPrA1AemPjD1gWW7y3aQ9ZC/1Ae+
kag/bxRMfWDqA1Of5OQu5SDbQdbDSNTHWAVTH5j6wNQnOT2Tcpft/keiPN8p
mPvD3B/m/jD3T06vuT8sf7k/zP1h7g9zf1g+h7yu/OX6MNeHpRxku8h6yuvK
X64P0/5Sz6ScZbvLdpD1lveBZT+X/UzqudQzKXcpB2m3pB2R/Vj2I6nH0u5J
OyTtAMf/7WGD42GOhzk+red++niY42HqC1NfefxAT3vo42GOh2lPWX7eIy9d
DtPeMPKWx3/ukbs+HuZ4GP2Qx8/zHKePhzkeRq9g2jMmcdyM1+fDnA9zPsz5
/3iew0QeMOfDnA+jhzDXa+9pV309GHnBXA/mevL89B656vNh5A1zPoxey/M9
foRLnw+jDzDXg7mePH+Qp576fBj9gDkfph/J8wt62lGfD6MvMNeDuR6MPLz+
kv7l//izchzHL6Y+nIe/K8dZjqe+HI8/LMdFjud5OB79TW4cw/+Vdo/r8fxc
D/9Y2jWOx5/i+PuJ9X2UxN/jeMo5fmti+Q19fPHE+pxPwhxfLZH363LYKZ+Q
YKfcQoIpZz4i/T65z7D0w+S+tdIvkvueSr9F7rMlxzW575Ich+S+O3JcoZz2
pZz2hWlPmPaDaS+Y60o/Xe6rLf1muU+z9GPlvr/Sr6Qc/ZV+n/Q7pF8i9zGT
foPc10qO85Sjv3Lcppz2ppz2hmlvmPaGaW+YfiL9cbkftpwvyP2x5fxB7pMt
5xFy32Xp10u/knJY7hMo5SP3kZN+m9xXTPpZlCMPyvMm/t7TTPvDtD9M+8O0
f3J2m/aX+x/Lfi/nS3J/azl/kvtdy/kUek58Q7a/3IdR+t1ynz7pF1OOPks/
lnLam3LaG6a9Ydobpr2d42BIcHLjHu0t9yOWdlTOD+V+03K+iB0hfiTnXXIf
UzlvkvtcynmN3AdRzjsop70ppz1h2hOmPWHa0+knhAQn5xfQnjwn7Uk58TU5
r5X79sp5qdznVc4r5T6gct5HOfom52Xch/ahnPaBaR+Y9knOL0LvJMv9i2Vc
Qe5nLOfrcl9jOW+X++DKebfcJ1XOiymnvWT7wLQPTPvAtA8s7Tgs9/uVcR25
/6+MN8j9gGX8Qe4PLOMRcp9gGZfg/+gL/6c9YNoDpj1g2gPGnsj4g9wfV/od
cr9cGR+R++fKeIncT1fGT+T+ujKeIvfblfEV2on/80t7wbQXTHvBtBeMfeH6
2B8ZX5H7zcq4rdx/VsZ75H60Mv4j96eV8SC5X21ycUDaV8aLKKe9KKe9YNpL
toeMD8n9NqWfL+NRcj9WGZ+S+7MmF+elfWT8So5LMM/L8TwvzPMmN4+U80Ce
V85bkovT87wyfib9QLmuIOeZslzOM+U8KLl50v/y6/+X3/m//KT/Ne7/r3Hv
f9n9/2UHk5s3JzdPlPMY6VdLv0/6Lc5xOiTY6aeEBFM/ODk7RDn1f5C4zrZf
fLfNntdSTv1h6g9Tf5j6w9Qfpv4w9Yepr6yfvN+7RD6v7wfzfLM8+qxZvt9F
Oc8rmeM5X77fI+PRlNNeMO3F8bC8now3sw7pjB9G6eeHqZ+M18p8QOKxMPFU
xkWYcuKjlMPYMRlfJf7J8TDjimTim9gtGQ8lXsnxMHYc5nmJR1J/WMQX9fq5
jH9SLvxiE33leOoHUz9ZzvnUV8ZTKcfuyviqLIcZf2X8Uu4rTDnjEe3Cejzl
rMfDrMfDXA8953yY82HOl/NOGZ+S+2JTzv1g7gdzP5j7yfiY3GebfkR+Asz1
Ya4Pc30ZD5L7unNf7gdzPz2P8t4P5n4w95PxELlvPO3I9fU8zHt9mOvDXF/G
E+R3CeR8U+7bqud13vvB3A/mevQjztfzPu/5MOfD2BPGCc7X80Lv+TDny/mS
/L4Gdovr6Xmk93ow15PzDdlOcl9a2o3rSX9c6o2Uq9zXFrvB9aS/LOPesl/J
fiDXLaTdkP1a9jvZT6QeS72TeiHlLOWWnF2SdkbaAdlvZb+S/YD6wNQHpj4w
eiDtJHlL1A+mfjD1g6kfTP1g6gdTP5j6wdRPXp88Kv38XmZcwH9Ajxnfne8D
u+R6nyniZjpfjPEMP5rxCb8Uppx5DuWSGS9g+T1MuY72//c6MHZd1tPzfCHB
zvy9kGBn/l5IsDN/LyTYGRcPCXbGbUOCnfl7IcH6/T2vv6vf3/Oyfn/Py/r9
PS/r9/e8rN/f8zLXx9+F8U+5H0w5/inlMPWBsXPkq2OnyG+GyYfF34EpJ5+S
cnho4vUZ38mP89Hs0U9/66fEdgiwOB72tIdL/3I8zPEw58njYPlLPeR95XXh
ZYnP/Uol91yuRL0gjuZjdU/sj29V8cT7xevfI4nlcUl+OR5O7jryOJh6yXrA
PA/PQTvI54J5PjPxN1LRPjDXgzn+ZuL/wzV/najPyw3Ohzkfpj4w9YF5Hpjr
10jUtzDNnvcwIvT9YO73MFG/owye06OvfibP4elPAZo99jXQ5P4ZE/XebTbx
nOf1M93e9RxfzRwvy6lnWGI97HKu19lzP613MOU8F9ejnHaHZ3ieW8vNY7fw
6+1+AlNOO3E/yqkPTLnUA8qTu25y9eD//P6v/3N//s/94ZceOWs9T64dk2v3
5J4zuXbhvpSjX3CLxN9o3c+S04vk9Ij6US71gPrA9HuY+8PUT5ZLvUVPtyVe
P0bBXF+WY6c+TDw/Vv2YWPH32k7BlGPHOJ9yrstx8P+6TnL35f/88tzcl+eG
ZTsm95zJtQv3pxz9oJ3h/6UnsNSr5OQGoy+yX9Iv0GeY8v/Vj2DqA6Mv2B30
Gab8f9kpebwnvzLcgLHnnE85XNZTf4PngXkemOs99sjNhPd52tGkHQt4ntvk
OS942k2z5/3OAJN6w+gD4wXHl/e0iz4eduZR2HZA5tfxnMjb81xBIp/IPl/m
JXD96YkXuqTl5E4UwBHN+KvIxZnPYds95lHog8wj4XyY848k/p7VekB9OJ76
wM7vb9v5WcjV+T1ue5zgOOonz5N5RpzvjP+7dH0o5znlOCrzmbgv95H+qbyP
bGeZd5bccyFn6TfI/B/0gvpL/1fKSeqdzBuUesD1mV9Q7swPtPVQ6q3Ml5Hj
ocwrpZ9hb5ln83/n94F9xXq3vT7N8TDHO9/DstdzaXdnHNle35XPzfHOvBp7
fZT2dX5/0iXyxuy8Vfgrj/+r48bSfsrjTyT+f7m+H4z8ZTn+NvWlnPrBlHM8
7UE5egtTzvG0D+W0H0w5x1O/aoly2q3rB3N9mPOd5UFJxhfn+k/S9RnGB/QU
+47+eI8zqZ8zXmR/r4H6wdTPGX9ya72XfqMzv9Hu19ST+kk/jnLGYcrRI8kc
/ybx/Ge6fG7i/R8nYY7HnlOOvYexp5I5X/rt2EFph6Tfjl2j/nJ8gbkfjD4j
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
u9QLOfCL3GDsHPdB37kP8wAY+y7X8+V3FWDsP/4D9lG+HyT3j6E/IR+5XxaM
HuC3w6z3M87T32H8etqdOA/Me3I8H+fBzP/p7x59eKfjx3IfA7kOSD/D3tE/
8PfoH5yP/Dlf7jfkzMd5qe0T9RvsGSdN7IrMt2ccRC7y+5+cx3PIfHnm9Tpu
5rU36CH2CKZ/yHVT9IznQM+kPqPH6K3UX/oF47XUV+aTjL/yvVfaD0YftV3y
6hvtQDyDPCz0jfZlfMH+ok+0H/4n+uOdz+n3OmgfxkH0Ab2BiTMy3vF/9Jtx
DEbe8r0P9Ivz6Q/8n+OpD/0G5j7oMec9v3e0xL799nepLsX8PezPXyN1HKxp
9SwLZg+2xzXsdOa5lVvUfeqyVsbfi5vVzt53r865ZmM/aGl/R5U42ewH8Yuj
bvpaO4bXPLy0h70v9qW5R/OnGmd/J7Vu8xWzSx2wv4uKXb+1/4z/s6UJ89aJ
LceMzBqr15HQ69z1/16Tv9Vbld7/r6JzfovT8/jFeZ5mGmXaecjMh9SkqMGX
d0Qrlf/Z+Y1pfbSdYz6UO+SMurUqUnWv133z2by+4ru2vmaJ9X98MyFVhMq7
akPHbu3t9x7x4xqPf/XBygXP1bP+e6JbXvTXeoEfbNTvFtx812Mtl78rX/ks
V/sHqtm0XkuvLgow6S/YkaP7Xn50/Nt7qvGlq+3mnXPr95CJM0yfUbbNhof6
fR5zlrvPtRcL7hmt3vsWiM7uNuknXK/igrVfN6r20Jj0/Oj0xmsCTOwn9dl0
fNvcyrOfGmvnzF23s7/LpB9R/y7NnwVPqhduROz8IaZFG3/tx/H8eeb2uz6g
cKRR4pU1IEUHPxO9of1Gfrrg0PCe0caMy52G/DrC10RP5t7oU3DHBh8TuSOP
QP/sfxb78K1xOMfYmcvOxxvIXe97XHLE/Jfl3xujB/b94sig9/r/DZ9U2Oeb
852+DufdmlTp7KeDfc1US37Msjc0Vtery6cRAQ12vtXPQT0yRb8o/kEel/nF
22c9Hv0do9th/sTH9w4l+CG02w8DHmTqvf61bmee63xc5pwnSrvNjTm3fNN3
XzT9zZz2KOz8o8cvjZ5LqtfOc8htbftsVtU6paOM5aFlb331MMAqs67Yhc6r
Xhmb56y/vyvc34qbe2d0ir6vjdxpst04f97X6nmr6ymfDTFGvzXlU055/l5Z
X8ediin/ztgSUHxlz7A3auOp9L1/bxNgFvgpVY3mjx6oKSHnSp2d6zZ/tQZ9
vnLsfaPOznjjxWeBZpHQ9/HB5x8ZDYrl7Pn8YYKdajv+WvfNCXZ1Uuq7OV64
zCq7UmZMM+e50e9Eu9x9fwswx4/uUiW+4VPjdcGvBw+3/M3hj2cMmNsmwggc
lT3on/Yus+y388qdyxNufPtT07Dyf/mZFX17Fm+fIcrId/zv4/XL+Ztlvlo1
7uvdL43IW9HbWy7xNePeLh736EW08eTNklzb8/qZUwKGPRsz/JUx5usS7y9l
9zV/zDF6UPp2bwzfPl+t2lnIx6wy6djUAp1ijbNHF4+ev8rHHJ7r2pXgsBjj
ZpMNvYKmvde/k17ebDyie7xR8HjP51+Gxxmrm296bSx9Z0ysnHldmVQ+5o08
Rq2RrjjD9/iZsj9u9jXHnrse2/lMnLF8RtfbrW8m+N9lNz3PXDLWuNvr4BdX
xvqZO0vW3jtvR4zhlyYwaF8VlzkhTcXLK795a5TvVaNz2fb+5i8FDtaIe/HG
yJPTJ3ZSlgCzmM/i23MqvTEWLSr846PoAPO7RsHP+z6KNoo8K9Eldp/bfNO8
9vjDv702Pv+q3LvMt+39rdpvOHJ6RLzbqpJ/T4c6jez3H7B7T15/svL0Zrd1
5ouLNcp/Yu/bNHn61aVD08Tp8arYkhnHBt8OTLKf1cUvfip1f1+gvm67v+pV
az7fzssaWqd9pUnVA6yl95/uSPE8Xs8n15Q6v/2PU3a8Wu97/bJJ+yX77Xyy
LiOzHnUP9rFSTAvfXP9iQJL9pnpHdvgpz+r32i/ouWnvd4vaRinsWpWBnTot
eWjvr3B337P1oavtPKoy+9q9SFnupaoYV2npntVvk+zn1KfaLw27//V/9nNa
e2Llk8Mv9H4LNTZEnvpy+nO1aMof5X767ICeDzWt0WrQtPL2/k16/XXGiaEH
HjzW64lWtuC8zd8/UvuX1urXesNFvV43L6JIgaA7dn4+7bF2/6zv8tW/r/2N
GR9O/Df7yFC9XtilfoPeW7KE6nnT+pIpckxpclP7L1ODv11ZI98lVTxzxh2P
5tj7M2Bfvr5U+POD+U/o8bKrNWf6+fJH9PiYd8TXdYuEHtDjzc2IJ/37uTbq
8aVW+buFan62To8fH91YX2BRutVajwIKnCu1PcUd7ReMrV6qcbWgu9ovaPPJ
5dZPCt3T43rhtMdGjln30Ggx98GBoffi7Twbr34dOVl1TqqGz4zRM37av2/E
K/0c/YttO3/kdmCS/RmuduuaomW/N/r+UR8urHLrVYyR4+Ps3X232PszfL/U
f+umWkn361mSrfCW5SfijH4L2ow6Neyl9gP0vuplZ90Lu/zeGFs58vi7p3FJ
9ltYtSXP0VSd7XyKQrMmtpnUIMFvK/omPmVonDq+eH7rdOnd1ukmK5b+fjbQ
yl2514vJcwOsBm965vpnp4/1T55boy6W8rf+uBDW5OPVAdar4A+bD5gWp4LO
9W31JH3C/CN7pUv1xj9VodW6rP5jj4+1vlaVnXvXPlBRWzJlzHg00GpWdsie
NfXvqJcrv2rffE+Alabp2C3vU99VE778LM2buMdGrapffxZ37Kra9vOEtVFd
oozpUR22tHhwRg1fl2V96fm+5uFK6fpuW/yvSvmo2JQ9r/zMuI7Hmszsv12N
PlcizeSGLnPE5BevL13erCa4m7/aV8TfqpWi2LQc50ONx4VmN40d8VIdfray
w4e73xtf9yi962aBCPVmyY21X7VymxfDPnqacco5VSrtxVw1YyPVk0bfnHj7
j72f4LkBsbf9Xif9/mbrAwtvmuFuM82cyWkv9rf3X2C+3qtlx2OfRrvNees7
neteOkI1+i5FZJOBfqZf7kefpN4VrhYczTLhXIkA81iq+G9SJfCyC0+Htagb
YC5/WW2oeSJcxQ5anvFE+0Bzdsuhm1aFhKsd07qcLjvbfv9hX6bWWQqtDTRv
nf6u9m//hqsJP/ZtNvdogNmrxsz9PQe+Ujl6fNDoB7fb/HJO2h9SbYlQt5s1
PTnvvY9Zu+GB1ea0CDVkw6iSxbr6mrVvLWn/TWd7v5j0Ya0XT99pvw+P/m45
t27wlDpuM7BoupV/tbTjwWUWrZjQuXigxW//TG9P99n2Tt0Y1SHd35UDrbdD
tp9rmvW9qjd7xrWCdwKssGLbv50zzG397F81Y7+AAGvJ2M1bxpb3sTbu7npk
92N/a+kPcZ+/MRPs8bRyD1MN97MWp9rjLjfA1xpaKjKVq6qftSunf75Cr1zW
lG+3t5q08J3ase2nOqmXuKw9QQ3ntivwXl0Zni0qV5dAK/DB67JFpsYql++9
vL4PHqnV0ee3D7kYqYJ6lG096MVDNenE/fO1gqJUoT+31l8zIkL/do3fFZ51
erQannHjrKqtwlTru5X7ndv6TjVdFPDjiFeP1N6YZjOXJ4xXf9ZOFRHZ+LGq
tbB501Gb/a2H/1ZM2WDXPeVzK2/W2ev8rYFrX6a4pu6pPHuDe5Xa7GelXXb8
k6/+vK+W9V7aYHCRG0bJ8ZX6TB59TzVzP247JeMjY/f5vMtCBl9XXRcEpz74
NNyom3ftn9+FXVC7TrRberVThNElT6UzLRtcUFM3/zksVZ1II3eucZuHpz6n
pjc9mjn1n2+NIeVdtboWOqzm7C5Xa36HWKP64rN9h6U/pL66mOPp+THvjK4f
VR2dZeB+Vfh93/lN1sQbm0tku6X896ojt91l/F74mDuzxXWsdXu3qvhVrjk+
zwOsD3JP+WXz4btGk2qL41uGu6zSKX54/9Xee0azo79Pqxvjb/l92yH227P3
jTu5Q7oMrOxrTd6WZrnPykdG/U5d+1z5/Z0KfVylwtX1z42L3StufNYuWn3Q
PvMXl8NfGe2qv13z3afRqrnn19hdKVvl5b6B1v5ur498euStsXXA4e9OWZFq
/rB3l3O5Yo0mYTvfHNweqfp2zZm3UvZY4+cn47o83epvTS5XqnKF2e90PGfs
R1VaNp3uNusc+njH5DNR6v5G/49mt3CbE/fNK3itX6TaVj0y6MxNt7kh0467
XXbb+x+8uN/7dLcD9v4Hr34vMabw/KT7b46MeF46fS/7vaEhzQZ1OPxHgLX7
VM72DYrHJ9kv80Xkv5euGPZ+mbOOVzDqtvK3yo4KnNKgQ9L9M9s9G3h91Tj7
exWb8//1+9V/49TufPcz/+GTdP/LnBk6Xtp43c6TWF5uedcaqWJVlhQ1fNvv
Sbr/5Y+VG15uWdv2M6Y2+rro6vaRasmiK93/nfo4yf6X3zWN2+936qWq+n2+
Ge2v/bcPwvpiE87b7yUNK1/v6At3hLrrvvzqZVDS/S6tabeKFfjWXq+u1216
SOtDT9QPjS+VnTze3q/y5x3fuFrv2234Vi1+5cKXz/T+k6lvXf18VQF7/8nv
uw27nq7uIzVo+Mx8cw17P8raXWbsPHbxrJEi97S1Z9c/1M9bvE4G39g7/2f9
cXutHK3K3FO9K86PvLrb3k9y+bg1rb+dc93efypP2mNTDt03ti6tnnLIlluq
xLS+teLD7P0hmSe2b5ghexHf88r9T503Xe/Y+/9umLD3ltngXZL9G3s0rPBP
atc+PT/PsCfj1cxplUo9JueSzD5J90NsM3RMg0oD7htPB389pFh1e7/Dzsvu
nZrzr73/7tMN6c1qh96q1pnKb1vxPNwY2mXsz382eKPWZJ57uGXHSOP1mm+f
p1jitgZF7u26MWuM0frTu31yGHb++dI9+U6srhBgPZkxum6Pf+z9ercuHV+r
TPFY484L/6CMu+39orpPX9EgW3U/K+7k1xfuzY83Nnb/pcXDsj5Wux+PBcQO
9DU//TT0gwpX36lCF5YvabXYz1zeoPqi9p1j1b6gowdmXvY3z73/e5NZzW3l
fDrQt6Q70Fx37eefZrSz34+feiHt+b8yBVoVH9Udv6uR21w3J2Lynuz2/nof
nf/p5Kp79vvbr4eUnJD1cpwqkCuy7clcbivDR7Gbhw+LVw1vPc6dZo3L2pS6
/d8TT8SruXvyzB3T02XNzFEgfP71cJVve6Wo72/7m3OLvhly7Xy4uty45Oki
OVxm+dL7fjkyOcB6XOOdeX1/oPXxtquTshSOUhvKfN+pyyJ7P7zWfmVWFN2S
MH6Uuxd6o1aoylnh2PDUw6PU/HJDsn5f676afmbK/g1/RKlN3/TqWDLlLe3H
o0drVwzZH/Ao4fzbqWNi3CGqdYGgk08mRil34Z/Hf3Hkorowe+uq6d3t/e9S
Ne8VHpfQX893zfB46qkzYl/ZKNWi88yY/P+4zdaBX50sey1cpfm4+4Usf9n7
P/Q4u7qE+WWAOWdKjblN00SrkFHnb97bHmgG1V/fo1OC/1FqZ8ZuNRLmxcMG
L7i5vIi9/9yPlUrEDekdoQqm6Hj/qeVrNgpIU3H8CTu/vcuirbuyLDqg7QJ6
X2hKr3+vtrf3j7vVYk3Dr8tHqFkxS8PMu/Z+cumK34yafz7p/nHT/6rre6XM
U5V9+qulEyqeTrJ/XPdBMR9diXygmhsFZ5Ux7ur8QfrR5o0pQ5b3v61evM5c
b9riZ0ni97ef1Bx55FmIzqOrsqdfu1MtTqmNgzd1fP+1vT8cerm75qAOX3Te
pFp85JM5WNn7xWFvJqfdf//6+DtGtUqxHc89tPeLIz58en3pry7st/ePK/yk
rNF432O9PvWP2fNdmegnCfP7emvDwpPuF+f2LZVpwoEII82S1/e+7/dWrxev
WRDw/mqBGG2XkHetjv3Hbgm0949LsWFkmm417O/fZp358+fpmscY88yAH0Zc
SLp/3NIvO/Y/2iTWOFiqSOe2Kul+cr5js22NThFnxPYJjWp8yd4/juc9XKBA
r0+bxOv5VNOnnV4uyuVjvmx0wOgcn3R/ufPhr3tOm+9jVv9hZOi675Pmk7ep
/2GOlMt9zYFmo1Effpo0n7zf1GU/zD/kZ35fx2/XnU1J88nVuhsjZvm7zD3/
nPtjlGXvL7egRvfNfS+8VmfV1Hvn9wWY+z44d+7idHv/uJCJR++cvW7v97F5
xuR6tT9O8Kd7np4zbbifaQ34ssNfe8LV6xmfnSz+OMH/rt9h1fW94WrdmFpp
K2QJ1PkS83LvjKh1zG2e2Ljja7+xkUnyAcsd6nnu4I9u81b7zHWz10m6v1v+
384///Cw23w8ZEyXrAn+eaa7H7TOODzAPBsdkvXh4XD17LcaWWZWCjTvla56
2rIiEnhpj463fcztJwJ+3Fbbzt/e03hflRpfR6ifvvj9zOePfc09L879lrZe
hOr/7Vd+oXn8zFlbTk9tcjRcVbv6sOaqri7zg/X1/7n5wN5/rPeTx0aepvZ+
Yf92W9jmrNte/9/c8+nck1/Y+4WxnrT+h9vZB68NMPsOPdz4wGOXdWpJ5U1P
O7itucMn7+zZxc+637Nh0JdFfK2H7u8WzFrib62ZPynN+uvxqkh1vxYB+d1W
lfrNfz3961v18LtfFlc6E2ilXTxyYfp3b1V/V/ebn7R4pmKb5PmsR9ZI1f3E
F83bGM/UlJKL3D1yRKo8m6rNKFc0Uu3+6UTJ9JvDVZFHvxQbcPGlet3so8fH
EuxkiaAvej3+LUIdDPApkOWs22y+veCe0OBwNazbhu1xsS5zdjnXkWUfxamm
O68+7/fYbb0c+6bS2VnvVdjy5ZmPDwiwGmeY0uDZKV/9u9y8+FmD935W1Wwd
zhWY7GPlb1Rx7ie1E+Yn7xcu27/1vUoxZGq3Xo/c1tIpL1oMWB2j5k3c+vGI
1S/UP0/OxITWe6kG1ul1cuflKNU2Mib9pcsvVHS1vl1T3opVzdY1Kl7psydq
cvUyR081ik2YJ1/IPWTRE9V0SfSyy9t8rd97LbnaaGmomtfpVMG4hP70rNjV
5Vb+B6qAj+u3Hy+5rYaZ62d4/+ttlfqXn7McGu62Pt4w6835s/b+WV2atrl9
dXqM6jFhXvU6g46qCwO3fJMt5qU6dqVX2Mpty1XYgcMD2y8KV2vL/GEc37rc
CH86runnB8NUdlejXWOzHjU+Da6x71r0YzWuRfM+2b4OMe7WHmusmRiqTo7s
8vvoBXeM+55f5Xt/RvMzbUKNKRe33Y0rcEvfv++YTPvKDbut7uYt22Xz2KdG
i153i0wfdkV91ezm+rBML4zgj9uW73HwktpybdcvKzOGGevGfRH1dGqIWvdD
1urXv3hl5Pztm9r5/M+on3a0zx/mijZ8i5wuM2zRKeW60O3zx5VeGzcOr0gz
sN0J1T3o8pG9jV1m2bVXVlw6s1n9XDT7392+CzCPt/k39Hq+jWrjzzF7S792
ma1HpBh0rcUmtTLDyb4TXrmtqm37dy2a4Y6x9oLvjzfCAq1MWz9uf/nuHcO6
c/LLDPXdVo1u017/9dsdY2D2ys2XBflbVdwnLxWKDTUuhYyPzJXHz5pd/3LO
rlUfGn5Npy5fW97Pivr33MCmuR4aMZULlS/Y1cdaO6bsztwfPzH2nDi2enJa
H8sc+Wj29CtPjLMFH6buVSRelSzQevuaq0+N0tXTfVCjUJwaEjf6y/f/vDAq
lHpYctaIhPFh5/jAnDleGv0WDF+2usxr5Ts40By7O8pI9Vd4+n11XqkuJ7sP
frzntVGtSbGw8qFuq/HjOnEfnH9jDEx9923/U4HWkRsZ7654GmM8mdSkwIzv
otSKS5Ue3+wUY5zYMbXRqt1R6lye940+OfHGaD/m+Ym6ZoC1tUOD66f+ijV2
HCo4qc53LmvYkbiPTiyMM9ZW8/vu47d+VsF0y/Y9mPneqFfh8IpZM3ytOQV/
jhz5pY/Z5NdRB3wb+VrlUrQ5uPAnH/OrXVU7H7jjY7Xy/Jo51wyc9tXbCFWq
fo6w5R18zMu/HUnzUbqXqubhlsXGlfExvwzzM8Ov2/uDEY/5NTh+ZNWVPqZq
2PhWhbzxqtKpXM1qBCYcaxjnSy6MUzvCpv4TWsHf9GsbuPb+x29VvuWhwx/9
4DKLdRg1f+1tt7WvXIpy43sHmOsDGhi/rgq01nh+zck1VqX5dlyCf9wn94CF
MW5zZYWxZ6uMtPNjb+6vtb5QQKRqPCXbrl1v3OaTUu2aXAu287eZF4zyu3ti
QqEoFR23u1gP10W9Lhx6v+Vfq09FqjfpXO1eqgT/7Ztm2dc/jVA5P9xf7vto
t1lv9/Meb8/Y+3n17PPxxron7P280lZptaP47/b+XaO+7Hzyce83qleVZ/Mm
D7D377rd+9Kmve/cpuv2xm8KfWLnW73b5N9g4357/65Vj3NUz5swPmQ/Yx3b
stRt5v7u7+fPmkYkPN++L2rOcZs7W7bJcH+nnT94LcuMvpvLvVR9wrKl/Hlv
vLGm2JE++aq/VDcHpc89bI79/c6ZnZstO7zjjZH1bOQnj67a+3EVyrt+zwZX
0v23TkX2ru1qFWgGuKPKtvorWm3fMu3S9e6B5tnQiE6XMtrjMftxnTr74kaZ
OLfZbPG7kl2iw5Psv5UmfnXf7+Jd5l9Z4q/86RujVmRedPDr3AGm0fvag5OH
7f23Crftp1IcDFfrP/o89OgUlzm0zi+fuBN4bWD/tA8SuOjFJSc+yfde3b2U
eavrUoB14EapbRkn+VqLe5yc/nsB+32jQvnKVNmx+p3KOrGNarfIZUW2XVI9
ZeH3qve0mwNzpItUj4ptj93xMM44ua9U5N8pI1XpymdSN38VZ0wq1inLmBfh
6u7tjb9vfRJo9ng4a+U3EQnj70Kj7M2wQHP/6Okvq6SKUJve9lqwsLjbHJHi
1bP9xez862rlc6hj5SLVyEpxlSOfu82Cl7dULFopUsV9snrKlWduM+PFEq0K
J/gv38/p1eJZT7f5U7F/h1UdYu+nRb5TkKvI83xnA6z+v/nO/PtQ0n2cGhXJ
s7vyR35WdIsuU43MUarT9p98l31h76+1dVmRD/rfCTSfdcr9fFB8uMqVMt+i
MaX9zWM1sl07Ghuu/pnetNLZavb3Wfd8uM+a45tgs6q2nPjTWnu/rdd7q0XX
T7jeJxk/Lxsyxd9cub5v3f+4xKq6X11N4KLHGpxYu9BldRnW0d1ufYIf3jP0
1xfz7XzxvLFpHs4aG6fMDPsKtEsY934tsbh95qb2/lnjfz9cKG8ht/X2fdjv
Yxva+x4ErH2Yd1G7AOvXiZXLxZ91W20vFo1ruMdlpbtV5dz9gHhVoM7qwOOp
A6yZx8JSrjtl74f18kbYxXYf+lkftmj67vyPvtbnZzKVSpXKzg+/subl+vyN
/K0lMTe/HVTRx/okx5JJUeXt/PAjEwdkLPJ/9mPrsW7Jp+N+fKlqDwrLXefo
e+NBukULzpT3tVJMjN9ba6GPWWP6mTPZytr7M5N//OuXXa6MvuJjfr70curT
U32sFMWGhLYu6qv3t3oy/HlIuhy+Zrp9C+Z/f9He7ypD2LDJQYfi1bRfs576
419fM/PBGu6Vk+z9rcife/frmks/JPiPu4qW7dtk+HuV8dDHA680tfe3SrU/
xbufS/uZQVXuVz581d7vasGLXNNvVXinNge327zlqb2/1dRFGR9NSfAf9537
+Viq97EqpuqZsTcn+5v+5S4fet7Q3s9qxJ1iz9xH3ip3u6s1wou4zAfBda2q
4+39q8j/uf3VXLNbS3s/K/ewN+f6rHGZT3Jkq/FBeNL9rXqkOdBu6YpnOn/Q
/famT6fJD3W8beaasHZPlL1f1aQLYbO7bLyr8xGvfPTjvDWd7ffZJnQ9dlPF
XtN5gj2WFW479Hf7fbXNz+sX7tHL/t7TJyOPT7y60dJ2fF/ebrGl9wRrOz3x
g+j83+zfof3w0mmtIgvbbNX12VPj88LPD9rfb3rR/je/VEVC9fzqwQyja9W1
9vebLv1wvkvZo8/18Yc6/vVw5vx3xqE1n/pe2hOhwuYWbzQm1G2GhX06J+C0
nX9+2aXOfNg2Wv38Zu8vY38JNN8+qHv5D9Pen6nLgUvTL6hXqnjnPrWf3LL3
Y+rnW3z2Z3GB5qkJna8PX5V0f6avDv4Tn71UoLV0X46qP24IsBr6lVlbb3Gg
VadR9QKrrgRYeS/fjiv9faD117umB60Tdhy05r5Vr3+umXQ/pgzzG5fuHxqp
7oxo1D9l3ofq6JEa6X8pae9z8euh6Eq7FkeoyNsHahUZmuDv19qYI/5dhKp1
v8byuNXh6s3rUS3Sh0aoQ/0yn+vdOkZdTvv7mqyZn6kq6kG/P0rGqKCcf/W4
Xcbeb2n6L1saTtoQpiqsbvpZzbqv1cxBa8dVDH6ugg/derw91ytVOH22bSUX
vVCN3o+7O3jTK7W53M7L+bK+UJNLTZjerJOPdeL45MXGhw9VvcdN+1Su4WOt
cPfP37q8vf9S39mTplbN9FidHl3yctejcWq571cbjs56rNZFt8xya0+gVePJ
y7l1mt9RH9ec8nuF6oHWksX76g1Yc0d1nDFq9f0Eu7Tts65j7g26qw6/HVBz
XMUAy9rfcHPoYHv/pTlF+k0aFHxPZfp+XviOT/2t4c2sx21K2vlt4wcuLbry
9n01ee53AzPc8bNe/Fm04q5h91XKFyXz7U7vZ03OeS7z/VqhKmvmDyYt+8zP
qp9lbVDjj0J1nCLzhpMjlo25oLZMHTDK79twI33vwRlqjrmoam+7MurlxpfG
uPh8i9PuO6fjEBf6Vfzx92zHVNePqpctM/+1sXvk+ELh548rVazJoU+qvjFK
3s6dKv3KY6r0qMc/HKgbY5R4kD53+kxH1ab3HYZG5Y8xLpYesmRcy6P6PcQ0
f68wDo04pM5F51edm781NgWk3tN10mFVacy2FkaeOGNW68FnepQ8qCZ8PPpC
H99448uiIaFVTu5VTfd32b/6kY+ZufbCU0Pf71arskUeLpPKz9yrfEL8XLvU
3nKu7Lnq+JlpSr34aPygnar18nP55xb3N0eN+qX45XXblH/1TWtLLfM3M1ae
kWnVrK06jnli6LDplyauV3mXTjgeuiTAnF2vfIs5Lzao8JP9SrZOEWhWb1k5
5t6t9WrriMql4hP61YKzE2t+vHKd6lTl358O1w40XcP6+JWuu16P++UL3Ri4
OM1a1fd4zL4HCX7Csn+KZb9y72/Vrm7Tcg3LuM3nNT7IX/G3ter0zGcXPj/q
No8/mdj56frVqm2VP943TfDr/u21odXotWt0vxpzo8nQ17PuGiW6Npw5dlyg
9cln2VbuMu8ateY1m9nlm0DrwYOHuT5sfteYkXd3kbhtAVaVHPcf/B1315iS
Ol2+M6lc1m85N1RKu/u+sTF9l7LXK9jfh2vj03dV1g3RatGzT177ffdK72/Q
OWva17MXvzV++7vb27Z/Blovc8771PrgrVG2SEzA6B6Blqvo8NWXW781MtZZ
1b7dLvt7cvr9gpzPG2+76zZn5WtwpFIVe7+jg7mmpG3zMOl7XzsyHtw6dZ3b
+nxmzjEnywdY6uNXKftkcFvjvjm3bccke78jxvUT7S/naZDOfh/t73n9945q
57aGnju0ck5Z228ITFliZ9DIQOvj0dNvj7wdYJ3NePvppVL2fke8P7HwwbOV
2x7a+y497X+q7s3sCe2Y58WOSpXs/ZBW/1wubsyCpO/B7Rn9OGjJFXtfopq9
bhTJmeCftD3pNy9LM3t/JPJBo0tUTxfU29d6lWrtr2k2+Fl9+p1LOSDEx+pe
eMO764/s9+jJX/2l5oPvo/fa79UvdQe9LZ/Z1+rbqHmT1wvt9+x7jVGTv/nZ
3j+J/Oy5u/NnLlfYx6o9rH3beS/9rR1981xfUTte5Wv55pvGVew8Hc9pLqus
qjC4ySfx2h592Te1sTw4Xn00IbXrx3v2PgCX2wUParkv0Gryq9+4CWnt9/y+
WPHNxgKDYtXFD3qPc09wWw9vP6xq5Xqrfk3x08xjys6bpv36Vy15bc3jGJXd
WLri8Rd2HnWOV/sWBr9/rpZundVp/oaXyvff3kfUW3v/JPKCB0+I/KLxuJeq
2+CNtZ51sPerX9/5aZm/4yPV74Ur5h3YKFz59Nh6qsE/dt4P8z6/yz2HTSse
rp6OPLjgw9ZJ91Mql2psm5UbnqoCDxqla13/jSo381nK70Lt9/0XDY0O6H3u
gao+9enbqnPiVZel355Kc+Sh6td80N53PvFq3b/VIrsXfKTXB09cjHu7v9Ed
VTVnwSXd3yf4rSVqpPG/ZX9/7Xrz37JkLHtXTRzrXpllu8vKkzL37y2v31Vf
3i14L9UQlzXqYIvyeTLfUyu2fv7H7dnvjBvNmkW/7bhfBXc4/+fPv743bl0q
cKLyx/tUXP4Sj2Z87mM2jQ2bUaK1pdp1yDFsQCcfc3zhXN/Xu6VUow2vpv0x
3Nfsf9q1Nvruv9qvjKgz4swHe3apXll7vLyzwM+8mPN0hml1dui4YrFKt1f9
EbBdHdx0c1W5UJeVau3DcfNO3jMqZ8p75clgl1Xn2+hD52reN469aldhdIbX
+n0M5pM9ZzT9vGmrV3q9eMyKcdOXbY0xUrRudiDitxj1rnjRu0NPuMz74Yvv
7av8Wp1aUvNCUJZA80y/mO1Df7K/v/Sodni59lfs70X82e5K7RWnw1XAtQ1b
tn/uMgcfD8g+oZHLmhi4vaQV77Y+/DB1uca9ku6nVD203vUh56PU0MXD2g+s
eUd9k6JBWJ6HUar6l73vjK13V23t1n388EtR6ov29YcNbXFPte64c+jz3VGq
+eph5SpsuqsuT+t1teapKJWixbTKhQfeTvK9pbB2KU+/CYtSRyttP1rh0zuq
SZdiZ+8kXH9c7N+7t8+/oT6YeC+u5SN7f6Wyhd6ubXU2SrlcX9U40feKqhke
V3Tkjig1ckiPEQsnX1VZzDFfTjkapSrlbzuu3pAbqm+njlX6JFzv/I+nVxv9
r6neX1cu2ueivd/StgGpbqQeGKWifnsycMXUEFV6TGzNKrOjVMH8ufvf+9N+
/539lSbWPT4g9S236XO1a6awn+z9ldhvqc6w8z+PHhNopu8TcaPmK3u/Jd5P
vOK+eCrnhUDz1ZGsK/JVvGU82tc7fdYrd1WdtT2tJplvG3vP3cw39Cd7vyVz
dYZphULuqMxvly+5/fltvR/Th119jwQVv2ecrDS1250tt1XbmgeLHR9tf29g
ft8DLy4feWxMbPw0sEjUVZ0X9m7ViSPHblxR839ffOFp7edGfIbDtTZku6x+
nzGvSaeqUcbCau2rTQiw91c6nn7EB5dbn1FZzi6tUml3gn8Qt3xgx9Jb9Tym
7bJGr4Zc2KwK/9S2Vtm7LtNYNbRq8X6b1KcP+uXaPNBtnTrfd4p76B2j1pEV
0SlH+1tl5r3yXdY5VOet91medWir56HGtlcrKt+Z5WdtXnj3bt0FD4zJb8ps
ePOZr/Vt9M7rr7Y+MnZs+HLqrNM+Vq2CI5f/3e2x0W1d3eezZ9r7IV1+eu3Y
0xLvVIFNodU2VQ8zmhbMEnTzZpxqOT/rxZRr7P2Qqqca/Xfl714YJ7fUd604
bu+XNH1Aq/iOg2NVXVX9wPoO9v5IY9t2yN18Xbixqlbz1i8K2fsl5Wv5zz/F
dr9WATneLXiRyt4fabfv7eLXRkUZHbtbv/afbO+XFJfrj1fBbnu/JNYbenx7
/MyIXZFGunR722RaFGB9mHvs5kIV7f2Rvq63+lTm12+N6NknT975zd+6UKhp
0am73hnDa1faObGVv5Ut4Nr8cRns/ZF2NL/w4sf+7415j+O+jKlt75805Fbm
bWkW+1nffO0XvSNzvOFXYe2Jv3rZ+yUxr19/pM6hSu19zYKxBedOypl0f6Qn
4yPSVh/mZ3Yt+U3+2tOS7o/UuFOTKR9s8jd7zDg8pFd2e3+kvKO+X3Jzhtua
dWdxlqo77P2PruXPF/3VgwDz36O3UxceYO+PdH1zi2HnogKt+KLbl9VpZe93
9Oqvs4VvTgk0B8/dXKV3iL0/Uqd1HYsvz5f0/VAreHidy2UDzXONJ16b0C7Q
WnUl/5Z0sfZ87pOHDTb6lXebFWcc3zW4tr1f0qbh3QZHHwuwKmSv8m72cnt/
pCILa785FuE2o/oVe/CDsvdLqrHHvWScn/2+KfILqrfnh06zE/zahqtGZ81h
75fUY2OuSuNSR6h0PhN8esX5memiqlxpmyVC5Y7bt+tIiJ+54HLLc59b9n5J
se9GLBi8N1zd3T9t58j1LnOQleXbzAnsczbIt/Bml+naua7Q9d3hqmS5+4sK
/r8m7v0r6TuO47ggyqp15nCgyGIWSZ5N3WZmutw+37YsaxmnacujC6TZQeZt
7HSaGWN2JpMKmacz88xuZ5Qds2NppZw0eX8OkV1MqTl2NiemyQg0FVC8hMj8
ad/9Fc/XL6/HAI34MVR/u1jvBO77Ziw004iHZ0I2MLe6wMtnJI3EkH7S+l/4
cp2ASlygWau++J+ndPdR7vCTB0vdV74hDMylESFV9yo+feqEyyldDs5vgcTf
+0qu9+30wYurG/+SXgrGGnt/zdZpP8Qnp2y0p9GwtHty9PhCAJ7Kv38w2kzF
bf+kSvKDgrGs+0Tv4+ULUD0mmGDNvgRHlPpXef8oJPpkCQWFs6C3NegMZ8fB
oqtwNBtuIEHaliy6ehxkBw+Zq113UKO/4koXbwz0LT2sYx9QcEu/7NWkKBsI
e4Pi5Rm9KLfydqfbZAfGDw3LTNW/I3UwTxZTawO+ihmxV0DHN3Po8tqJIYjC
+w7Yk/rRZ5+/nj2qsAKzdZ1gV74NLVMcFzSvGAS2kapQb5pBr9nyBqLf6YXk
rpN6SckCsqQ+qd/dZgTeng37h4qCcESsiJ+9eQQN7rhya3UTBbORvbZu8jlK
TXg2u2rGDy3sP98e94+iyDnhPZ9oEWKdnRovvECnJuoLuts98CF1+M2nnhnE
1A+FsRPpWBRr/mrk+3lkFVeHRw9Mw/iZzTFfVs2hDAYj1/QHDQfsrFvTxVtA
qzT8QbV4CsbCjG0svxdxOqwSCpOGPcbWn3ezfGh7i1NlDyU9mMJwVdP676Zh
5C1/ZdNhOhG/qbVif6kLHh3jRM7cohM3w59P6tpJr0Wl1IG6g/RYPgJfcZmC
9Ff2Xmu3GFd7QDFctq0wjk5Q/XnzWaUBOKW5NGH50s6uOvIur2hXEFZwzQ2U
UN9/P7QdBmlZzoml3r6Srr0YZoTrTdr3sqVuuEpkC7nP5iBuMN7e0e5G5aHS
vJWY9DvE3J9i6z5xwbY+kahGSSfYnnLt4UzS42g7atWIG0lf4u7KiE7aOTf0
pHU/RoJF1JgFpzO9pAdwSJf3bVGGG2mOFEgy+H0QxykJSWeYoOdkpjKmfAoS
ddqasPs3wOvlOOqTXSB5WDY/y30JSsISWXzUhVZsebA2zUHB8kvOusaQAOIb
rlqVbnCD1nT+zqLZh1hf5wRSsRsM7I/NlRYfShQvHpiikP/EfwFjvbjU
   
   "], {{{}, {}}, {{}, 
     TagBox[
      TooltipBox[
       {GrayLevel[0], Opacity[0.4], 
        LineBox[{4293, 4916, 4292, 4716, 4715, 4846, 4845, 4582, 4850, 4851, 
         4847, 4849, 4848, 4496, 4298, 4776, 4777, 4775, 4387, 4853, 4854, 
         4852, 4434, 4352, 4297, 4720, 4719, 4856, 4855, 4390, 4857, 4858, 
         4721, 4299}], LineBox[CompressedData["
1:eJwV0Ekyg2EUheGb6PtgBaoo7cROSKNXIXNRFYQ9YK7ZAStgAWKg30Qw08RE
E08Gb73n3O/ef/APFTbTxURE5HGdinjrj7ji4kDEBmb0fdTNKjgajJjVh3Hm
fYTTvIY83vUbe1tyCRn9mw942u0h33o/lrPyKOZwoec4gTvvJ/q8PIZz9+Oc
4QLW8aHf29uRt/GLH1Qb33CbxJ8eXOdP8wf7u3IZzeZNeDZv5w60oA2tqJk/
2d+zm8OknuUJXsSlnQVO4tHeqb4kT6FLXuFOXuZXvKBPX+Vu7kUPvhr/Fv+x
SDTo
         "]], LineBox[CompressedData["
1:eJwV00VbVVEYhuGNohiogN1dA1tAVLBnJvbE7sL+G3ZetmJ3d3crGChgNzq1
vbzX4OH53nevtc/Ze3Hqj8nKnBETRVGSP0UJUVSYFEUv8BwFyMcXfR4/w2M8
xRN81lfgBBxIjKLhFaNoP5eXh5nLmofyavkRctFcLqNvxqvkHDxEU7m0vgmv
lLuYH/B8bqxrhBVyhnyf53FDXQMsl9Pludgmf/K97uk6y3e4E9/lj/pbfBvX
cRM38EFfjt/zVvv3WR8vl8UQuZQ8mJfJHc3XeDZf1s3hNFzRdeCr/M59SnMZ
7NUNsm4Pl5IHmuPMmbxUTjXPQrb81r6SupnyAHk39+ddXELf19wPfdAbS3Qp
rmVhi/zG/thwfrxJ3qmfih3YKBfqi4ez5fXydv3E8M6wTn6mL+b6xfgoiuHs
8Dz6rTw6fAZOy5sTwz+M8wvPHc6XKyA5fB+sNPcM58W9+JH7duVu6IIe6B7O
zfWM8F65M3dCOnKtT+UOSEFHpGGxdUtxKjw751iXHN6tz2wp7+YWPBIjUIQv
qGjNKE7gJCTiu/zY/n327A/nhFa6sRiDb/iKqtaO40pcBZXxQ86z94g9R3EI
rXWHw29Dv9aaCXJ1XqA7GH4fqCYX1z+xZo15vPkXfqJAd9KatuYT3IanYDJq
WVsTC/XHcQw15FjX8u3bYJ5k/oPfeK27ZM1lXECy7iK/0p/n9vI5bsczMB31
3aNeeMf6sziDunJJ1+rwIvk0TqG2XEL/0v02m6eZ/+Ev4lz/D+hInHY=
         "]], 
        LineBox[CompressedData["
1:eJwV00lQDmAcx/HHHaNeaaduCAc6MM2EomxjO1haLJUohiNhjLMtu4OtnGzT
GFrIkuVgcMMgawsOZqgYM4aLz3P4zvf/+z3/5523esqt2rZ867AQwit8HxVC
UnII15NCKEuEcIMTcjJ+OOvlPvRglrN+HtBftLtdno3TuolyHnbIn+UiPsPl
uuHmCh4tt5orzW08Rk7BoM+7pGvQFeOsbo28Fu3yOk7VpaFDviwPuZMu/+Qr
8k79HJzTrZerUINqZOhuOttg3oha7JI78dh8izPt3Oa78h3ejc3mLdiEetQh
y94knoyv5rn2vnBJvIur+l++U7buN7fIXfpcOQdT5D1ytfmReZ75m3k+78U1
3R/3VuhWxs/FE91TPMBDjLD3106Ds3/cF392czGazBP4mb3x8e+CPLzXt+uy
uUAeyx1yM4/DR9yXP/EHHDOfwHGkyIXuPOf98kEcQH/8neprsQh1qEev/pTz
QzyVG3kaX+CT3MNL7C3FMsxEo/5wvIOjOILF9gbjO0GRnVR+ixycR5udTM53
9oLvyS/jZ+Md0jDDWXp8i9iHGnkVVqMUZfHtuzfSWXl8d3ht7tK9ie87vnsk
zK26bh5AibkUTc6a4/+LbjovxAL8B2aQeh8=
         "]], 
        LineBox[{4350, 4655, 4558, 4987, 4989, 4988, 4486, 4993, 4994, 4990, 
         4992, 4991, 4656, 4560, 4995, 4997, 4996, 4488, 5001, 5002, 4998, 
         5000, 4999, 4657, 4658}], LineBox[CompressedData["
1:eJwVzjkv5VEYwOHjG9iqyYTYRjODZAqJUIptRqGm0dDYx75e2zVjSdQyIzHo
RESjEuswloiCT0AQSiESEs8tnvzO+55zc/9ptU1VjXEhhCjnCSEUJYbwlWTn
aq3hgXu+211yQb45QeeYpYL1pBDi9RtpbJjT9SNL3i+zSIV9OX/sP/DXboEy
u1LKnEv56S7PXOdcz5n5misKzb+1QCtj30bUnOv9tPMMOUwxyS9O3fe4H9Nu
PdGJ2P/wFh/CF33VqI5z7L7Lu1Ht1CMdsR9ljM8ME2GI/+47vBvRdj3UfvsB
Bsmmj156OHD/SbPYdz70m386zA/nPW3TXc30psW5lWaamLcrdxdhzfzi2zPs
nnXVvGM/SLrdljbYbWujluiN/R23PPlNqj7qivvN2LeTYlfMO8QYUD8=
         "]]},
       "0"],
      Annotation[#, 0, "Tooltip"]& ], {}, {}}}],
  AspectRatio->1,
  Frame->True,
  PlotRange->{{-3, 3}, {-3, 3}},
  PlotRangeClipping->True,
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02]}]], "Output",
 CellTags->"Cell 9.181"]
}, Open  ]],

Cell["\<\
We have turned off contour shading so that only the zero contour  is shown. \
\>", "Text",
 CellChangeTimes->{{3.4463335223567333`*^9, 3.446333622126781*^9}, {
   3.446593407815037*^9, 3.446593408119152*^9}, 3.4465935919830914`*^9}],

Cell[TextData[{
 "\t To find solutions to the coupled equations ",
 ButtonBox["(9.11.1)",
  BaseStyle->"Hyperlink",
  ButtonData->"(9.11.1)"],
 " you must now plot the zero contour of the  function in the second \
equation,  ",
 Cell[BoxData[
  FormBox[
   RowBox[{"x", " ", "+", " ", 
    SuperscriptBox["y", "2"], " ", "-", " ", "y"}], TraditionalForm]]],
 "  (see Cell ",
 ButtonBox["9.182",
  BaseStyle->"Hyperlink",
  ButtonData:>"Cell 9.182"],
 "; this time we plot the contour as a thick red line to distinguish it from \
the first set of curves):"
}], "Text",
 CellChangeTimes->{{3.4465934308365297`*^9, 3.4465934712401867`*^9}, {
   3.446593519747723*^9, 3.446593519768873*^9}, 3.514143835880473*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ContourPlot", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"x", "+", 
     RowBox[{"y", "^", "2"}], " ", "-", " ", "y"}], "\[Equal]", "0"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "3"}], ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"y", ",", 
     RowBox[{"-", "3"}], ",", "3"}], "}"}], ",", 
   RowBox[{"PlotPoints", "\[Rule]", "40"}], ",", 
   RowBox[{"ContourShading", "\[Rule]", " ", "False"}], ",", 
   RowBox[{"ContourStyle", "\[Rule]", " ", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"RGBColor", "[", 
       RowBox[{"1", ",", "0", ",", "0"}], "]"}], ",", 
      RowBox[{"Thickness", "[", "0.012", "]"}]}], "}"}]}]}], "]"}]], "Input",
 ShowCellTags->True,
 CellChangeTimes->{
  3.446333407685933*^9, {3.446333660075194*^9, 3.446333667568348*^9}},
 CellTags->"Cell 9.182"],

Cell[BoxData[
 GraphicsBox[GraphicsComplexBox[CompressedData["
1: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
Qa5/Z+mr2iQvasf/AztCO7g=
   "], {{}, {}, 
    TagBox[
     TooltipBox[
      {RGBColor[1, 0, 0], Thickness[0.012], LineBox[CompressedData["
1:eJwl1GecCAQYBvA7t5fj9p1zw7m93HaHrEoZjVMiEpKGumtqEWW2NWwNGoiQ
klEho0KlRZq0J6I9VP/79eH/vJ+fD8+bPaq5sSkwICCgm2i5rQgimBBCCSOc
CCKJIpoYWhNLG9oSRzwJJJJEMimkkkY70mlPBplkkU0HcuhILnnkU0AhRRRT
QilllNOJCiqpopoaaqmjM/U00IWuLZ05ge70oCe96M2JnMTJ9OEUTqUv/ejP
AE7jdM7gTBoZyFmczSDOYTBDOJehDOM8hnM+IxjJKC5gNBcyhou4mEu4lLFc
xuU00cwVXMlVXM01XMs4ruN6buBGbmI8E7iZiUziFm5lMlOYyjSmM4PbuJ07
uJO7uJt7mMm93Mf9PMAsZjOHucxjPgtYyIM8xMM8wiIW8yiP8ThPsISlLONJ
lrOCp1jJKlbzNGt4hmdZy3OsYz0b2MjzvMCLbGIzW3iJrWxjOzt4mVd4lZ3s
Yjev8TpvsIc3eYu3eYd32cs+3mM/7/MBH/IRH/MJBzjIp3zG53zBl3zF13zD
t3zH9/zAIQ5zhB85yjF+4md+4Vd+43f+4E/+4m+O8w//0jL+QFoRRDAhhBJG
OBFEEkU0MbQmlja0JY54EkgkiWRSSCWNdqTTngwyySKbDuTQkVzyyKeAQooo
poRSyiinExVUUkU1NdRSR2fqaaALXQP//3n/AYCAiRM=
        "]]},
      RowBox[{
        RowBox[{"x", "-", "y", "+", 
          SuperscriptBox["y", "2"]}], "\[Equal]", "0"}]],
     Annotation[#, $CellContext`x - $CellContext`y + $CellContext`y^2 == 0, 
      "Tooltip"]& ]}],
  AspectRatio->1,
  Frame->True,
  PlotRange->{{-3, 3}, {-3, 3}},
  PlotRangeClipping->True,
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02]}]], "Output",
 CellTags->"Cell 9.182"]
}, Open  ]],

Cell[TextData[{
 "Here we have used the somewhat simpler notation ",
 StyleBox["f[x,y]==0",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " in the first argument of ",
 StyleBox["ContourPlot",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " to find the zero contour. Finally, by superimposing the two plots, we can \
find simultaneous solutions to both equations, as shown in Cell ",
 ButtonBox["9.183",
  BaseStyle->"Hyperlink",
  ButtonData:>"Cell 9.183"],
 "."
}], "Text",
 CellChangeTimes->{{3.4465936005260897`*^9, 3.4465936602022247`*^9}, {
  3.448632216604857*^9, 3.448632301074326*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Show", "[", 
  RowBox[{"%", ",", "%%"}], "]"}]], "Input",
 ShowCellTags->True,
 CellChangeTimes->{3.446333416494425*^9},
 CellTags->"Cell 9.183"],

Cell[BoxData[
 GraphicsBox[{GraphicsComplexBox[CompressedData["
1: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
Qa5/Z+mr2iQvasf/AztCO7g=
    "], {{}, {}, 
     TagBox[
      TooltipBox[
       {RGBColor[1, 0, 0], Thickness[0.012], LineBox[CompressedData["
1:eJwl1GecCAQYBvA7t5fj9p1zw7m93HaHrEoZjVMiEpKGumtqEWW2NWwNGoiQ
klEho0KlRZq0J6I9VP/79eH/vJ+fD8+bPaq5sSkwICCgm2i5rQgimBBCCSOc
CCKJIpoYWhNLG9oSRzwJJJJEMimkkkY70mlPBplkkU0HcuhILnnkU0AhRRRT
QilllNOJCiqpopoaaqmjM/U00IWuLZ05ge70oCe96M2JnMTJ9OEUTqUv/ejP
AE7jdM7gTBoZyFmczSDOYTBDOJehDOM8hnM+IxjJKC5gNBcyhou4mEu4lLFc
xuU00cwVXMlVXM01XMs4ruN6buBGbmI8E7iZiUziFm5lMlOYyjSmM4PbuJ07
uJO7uJt7mMm93Mf9PMAsZjOHucxjPgtYyIM8xMM8wiIW8yiP8ThPsISlLONJ
lrOCp1jJKlbzNGt4hmdZy3OsYz0b2MjzvMCLbGIzW3iJrWxjOzt4mVd4lZ3s
Yjev8TpvsIc3eYu3eYd32cs+3mM/7/MBH/IRH/MJBzjIp3zG53zBl3zF13zD
t3zH9/zAIQ5zhB85yjF+4md+4Vd+43f+4E/+4m+O8w//0jL+QFoRRDAhhBJG
OBFEEkU0MbQmlja0JY54EkgkiWRSSCWNdqTTngwyySKbDuTQkVzyyKeAQooo
poRSyiinExVUUkU1NdRSR2fqaaALXQP//3n/AYCAiRM=
         "]]},
       RowBox[{
         RowBox[{"x", "-", "y", "+", 
           SuperscriptBox["y", "2"]}], "\[Equal]", "0"}]],
      Annotation[#, $CellContext`x - $CellContext`y + $CellContext`y^2 == 0, 
       "Tooltip"]& ]}], GraphicsComplexBox[CompressedData["
1:eJyUvXd4FcX3+J9ykxt6R+lIryKiNIFdeu9IU3ovUhVRegcRpAgISBFQmkiv
BmbpvZfQe+iEhIRASCDfmHtfs589+eV5P7/8c59XZsvsnDNnzpw5O/tR5/7N
uvn5+Pgcz+Tj89+v5y/I4rfxswONnh0I1Lz48pRFl6cEaH7+X3Ejl+ZKGzN9
sTGTv+api/47wVfz1f9OX+SjuVni9d8rODzxenGapyeeH6O5xJDOhYd0fq35
2H+HP4vS3LPwfwe81ByY+BuuuXZi/Z5qHvvf5Qo/0Lz7v+Iv7tj1SazvZc0n
Ep//pOYB/x2+cbPmHRUT2dDlnuM17/NcT/Nfnvtp7uOpj+ZPPPXV/Cr+v78X
mtt5nlezlJv8RX4w8oORH4z8YOQHIz8Y+cHID0Z+MPKDkR+M/GDkByM/GPnp
+njlByM/GPnByE+Xe+UHIz8Y+cHID0Z+MPKDkV9y/UzKTf4iPxj5wcgPRn4w
8oORH4z8YOQHIz8Y+cHID0Z+MPKDkZ+uj1d+MPKDkR+M/HS5V34w8oORH4z8
YOQHIz8Y+SVnF2U/k3KTv8gPRn4w8oORH4z8YOQHIz8Y+cHID0Z+MPKDkR+M
/HR9vPKDkR+M/GDkp8u98oORH4z8YOQHIz8Y+cHID7Y87WEkN65JOyn7nZSj
/EWeMPKEkSeMPGHkCSNPGHnCyBNGnjDyhJEnjDx1fbzyhJEnjDxh5KnLvfKE
kSeMPGHkCSNPGHnCyBNGnsn5JXKck3ZT9kMpR/mLPGHkCSNPGHnCyBNGnjDy
hJEnjDxh5AkjT10frzxh5AkjTxh56nKvPGHkCSNPGHnCyBNGnjDyhJEnnM/T
XpqRr/RT5Lgn7ajsh1KOsPxFvjDyhZEvjHxh5AsjXxj5wsgXRr4w8tX18coX
Rr4w8oWRry73yhdGvjDyhZEvjHxh5AsjXxj5wsg3uXmD9EOlXyPHSWlnZT+V
cpW/yBdGvjDyhZEvjHxh5AsjXxj5wshX18crXxj5wsgXRr663CtfGPnCyBdG
vjDyhZEvjHxh5Asj3+TmgXJeIf1U6ffIcVPaXdlPpVzlL/KFkS+MfGHkCyNf
GPnCyBdGvroeXvnCyBdGvjDy1eVe+cLIF0a+MPKFkS+MfGHkCyNfGPnC4z3t
qRl5y3minHdIP1b6QXIclXZX9lMpV1j+Im8YecPIG0beMPKGkTeMvHV9vPKG
kTeMvGHkrcu98oaRN4y8YeQNI28YecPIG0beMPKGkTf8wNPempG/jAvIeaac
t0i/V/pNcpyVdln2YylnWP4ifxj5w8gfRv4w8oeRv66PV/4w8oeRP4z8dblX
/jDyh5E/jPxh5A8jfxj5w8gfRv4w8oeRf3JxPBkXknEGOW+V8x7pN0s/S47L
0o7Lfi7lLn+RP4z8YeQPI38Y+ev6eOUPI38Y+cPIX5d75Q8jfxj5w8gfRv4w
8oeRP4z8YeQPI38Y+cN1PPLQjD7IOKCMK8k4hZznynmS9KulHybHbWnXZT+X
coflL/oAow8w+gCjD7o+Xn2A0QcYfYDRB13u1QcYfYDRBxh9gNEHGH2A0QcY
fYDRBxh9gNEHGH2AL3rkZSYX15dxYhl3lHEsGQeR82g575J+uvTr5LgvxwFp
F6ReyF/0A0Y/YPRD18erHzD6AaMfMPqhy736AaMfMPoBox8w+gGjHzD6AaMf
MPoBox8w+gGjHzD6AU/0yFMz+iLXDWQcWsY1ZVxMxlXkPFzO26SfL/1A6RfI
cULaCakXsPxFX2D0RdfHqy8w+gKjLzD6osu9+gKjLzD6AqMvMPoCoy8w+gKj
LzD6AqMvMPoCoy8w+gKjL3A5j7w1oz9ynUmuW8g4uIyjyjicjNvIeb6cF8p5
g/QjpV8hxxVpR6SewPIX/dH18eoPjP7A6A+M/uhyr/7A6A+M/sDoD4z+wOgP
jP7A6A+M/sDoD4z+wOgPjP7A6A+M/sCPPPqgeb5HXzSjX3LdUq6DyXUVGZeX
cV0ZB5RxIxlnkPNQOS+Rfqr0U+S4JO2O1CNY/qJfMPoFo18w+qXLvfoFo18w
+gWjXzD6BaNfMPoFo18w+gWjXzD6BaNfMPoFo18w+gWjXzD6Bdfz6JNm9E2u
i8t1VrluJ9d95LqBjDPLuKSMY8k4h5z3ynmQ9IOl3yPHNWmnpF7p+ohfHV/z
so6veVnH1yj36hus42te1vE1L+v4mpd1fM3LOr7mZR1f87KOr3lZx9e8rONr
XkbfYPQNRt9g9A1G32D0DUbfYPRN5M1ITpKHIdf15TqxXGeU61RyXUPGwWXc
VMbVZJxFzrvlvEv62dKPkuOitGNSz2D5i/7B6J8u9+ofjP7B6B+M/sHoH4z+
wegfjP7B6B+M/sHoH4z+wegfjP7B6B+M/sHoH4z+iTwtyUnyfmQeicxLkOva
cl1UrqPJdRcZp5dxXBnXk3EeOc+X8zrpt0s/TI6b0q5JPYPlL/qn/+/VPxj9
g9E/GP2D0T8Y/YPRPxj9g9E/GP2D0T8Y/YPRPxj9g9E/GP2D0T8Y/RN5gZKT
5JnJvCWZByPzKOQ6vFy3let8cl1IrhvIOLKMK8q4kowjyHmi9PulnybHUWnX
pJ7B8hf9g9E/GP2D0T8Y/YPRPxj9g9E/GP2D0T8Y/YPRPxj9g9E/GP2D0T8Y
/YPRP5GHKjlJXqPMk5N5VzJvR+Z9yDwBua4s1yHlOpVct5BxbBnHlHErGZeQ
80w5L5B+mxxHpV2TeqbLxa+2f17W9s/L2v55Wds/L2v752Vt/7ys7Z+Xtf3z
srZ/Xtb2z8va/nlZ2z8va/vnZW3/vKztn5e1/fOytn9e1vbPyUnyaGVepszz
k3liMs9I5qXIPAa57i3XReU6mVw3kXFzGSeVcTAZ15DzUDlPkH6bHEelXZN6
Bstf9A9G/2D0D0b/YPQPRv9g9A9G/2D0D0b/YPQPRv9g9A9G/2D0D0b/RJ69
5CR52zIPWOaVyrxEmdcm86Bk3ozMs5Dr8HJdVq7TyXUaGZeXcVcZR5NxDzkv
lfME6bfJcVTaNalnsPxF/2D0D0b/YPQPRv9g9A9G/2D0D0b/YPQPRv9g9A9G
/2D0D0b/xHsdkpO8JyDzzmUes8yDlXmUMu9O5mnJvB6Z9yHzAOS6sFwXlOtA
Ms4v47YyzibjIHJeKucJ0m+T46i0a1LPYPmL/sHoH4z+wegfjP7B6B+M/sHo
H4z+wegfjP7B6B+M/sHoX3LvEcn3UuR7DjJvXuZdy7xdmecp8wJlHpnMM5J5
JzIPQa5Dy3VHua4k1wlkXFfG3WQcRM5L5TxB+m1yHJV2TeqZ/EXfYPQNRt9g
9A1G32D0DUbfYPQNRt9g9A1G32D0Lbn30uR7TvK9Gfkehszjl3ngMm9Y5pnK
vESZtybzmGRei8xrkOvYcp1SrjvJdQIZx5VxNRnnkPNOOQ+QfpkcJ6Xdknol
f9EvGP2C0S8Y/YLRLxj9gtEvGP2C0S8Y/UruvUb5npx870q+xyPfA5HvEci8
c5mnLPNaZd6jzIOTeVEyL0bmQch1brluKdeZ5DqAjMvKOJmMW8h5pPTrpZ8l
xz1pl6QeyV/0CUafYPQJRp9g9AlGn2D0CUaf5Huw1AP9gdEf+Z6XfE9Ivmci
30uQeewy71nmxco8SZk3J/OmZJ6MzIOQ69pyHVKuE8m4vYyjyriWjDPIeZ/0
w6VfJMctaWeknsDyF/2B0R8Y/YHRHxj9gdEfGH3hPugLjL7A6AuMvsj3kOR7
K/I9B5kXL/OmZR6tzKuUeXUyj0rmyci8B7lOLdcR5bqOjLPLuKeMQ8m4gJyn
Sb9Z+jVyHJJ2ROoFLH/RFxh9gdEXGH2B0Q+ug37A6AeMfsDoB4x+wOgHjH7I
9yRkHr3Mq5Z5tjLPUubVybwpmQcj8xbkurJc55PrLjIOLuOSMk4k5+1yHiX9
XOmXyHFF2gmpB7D8RT9g9ANGP2D0g/PQDxj9gNEPGP2A0Q8Y/YDRD72u79UP
+V6FzLOXedcy71bmWco8OpkXJfNYZJ6BXPeV63ByXUTGqWXcUMZx5Lxaznuk
nyr9DDluSLsg9QCWv+gHjD7wf/QBRh9g9AFGH2D0AUYfYPRB53V49QFGH2D0
Qebdy7xrmWcr8yhlXpzMY5J5JnLdX67DynUxuU4h48YyjifjKnLeK+cp0s+U
foMcF6QdkHKHkT92AvnDyB9G/jDyh5E/jPxh5K/zeLzyh5E/jPxh5C/z7GVe
tcyblXmQMm9N5hXJPA+57i7XQeW6lFwnkHFbGUeTcQ45L5XzCuknSj9A2n0Y
+cPIHz8T+cPIH0b+MPKHkT+M/GHkr/O2vPKHkT+M/GHkDyN/mUcv86Rl3qvM
U5R5ZDKvR+ZZyHVvuQ4p14VknF7GTWVcS8Yh5DxSzgtg5A8jfxh5Mw9F3jDy
hpE3jLxh5A0jbxh567w8r7xh5A0jbxh5w8gbRt4yD17mNcs8VJknKPO2ZB6N
zGuQ68xy3U+uw8i4uIxbyjiTjBPAyBtG3jDyhpE3cSvkDSNvGHnDyBtG3jDy
hpG3zrv0yhtG3jDyhpE3jLxh5A0jb5m3LvOMZR6ozMuTeVIyb0XmEch1XbnO
Jtc9ZFxaxhFh5A0jbxh5w8iXODfyhZEvjHxh5AsjXxj5wshX59F65QsjXxj5
wsgXRr4w8oWRr3wPQeaNy7xemWcp895kHpLMC5Hr9HLdVK5jyXUGGPnCyBdG
vjDyhZEv62TIF0a+MPKFkS+MfGHkCyNfnRftlS+MfGHkCyNfGPnCyBdGvjDy
le8ByDxtmTcr8xhlXpnM85F5F3IdXK5LwsgXRr4w8oWRL4x8YeTLurvYV0/L
Fxb7fGn5wmJfIS1fWOxbYop9LUyxz4Ep3ns3xXvP8j1X+R6jfC9Nvkck3/NI
kocv86JlnqrMG5R5XDKvRuY5iHVnuU4o13lk3F7GZc0iie3ltvjNnFhff81d
E8/307wpsT6+mr17mmrOlnh+pIK3Jx4foXlN4vM+13wosT4uKxELB+r7w9wf
5v7wsMTfaAVzf5j7w9wf5pd6yF/qA1MfmPrA1AemPjD1gWW7y3aQ9ZC/1Ae+
kag/bxRMfWDqA1Of5OQu5SDbQdbDSNTHWAVTH5j6wNQnOT2Tcpft/keiPN8p
mPvD3B/m/jD3T06vuT8sf7k/zP1h7g9zf1g+h7yu/OX6MNeHpRxku8h6yuvK
X64P0/5Sz6ScZbvLdpD1lveBZT+X/UzqudQzKXcpB2m3pB2R/Vj2I6nH0u5J
OyTtAMf/7WGD42GOhzk+red++niY42HqC1NfefxAT3vo42GOh2lPWX7eIy9d
DtPeMPKWx3/ukbs+HuZ4GP2Qx8/zHKePhzkeRq9g2jMmcdyM1+fDnA9zPsz5
/3iew0QeMOfDnA+jhzDXa+9pV309GHnBXA/mevL89B656vNh5A1zPoxey/M9
foRLnw+jDzDXg7mePH+Qp576fBj9gDkfph/J8wt62lGfD6MvMNeDuR6MPLz+
kv7l//izchzHL6Y+nIe/K8dZjqe+HI8/LMdFjud5OB79TW4cw/+Vdo/r8fxc
D/9Y2jWOx5/i+PuJ9X2UxN/jeMo5fmti+Q19fPHE+pxPwhxfLZH363LYKZ+Q
YKfcQoIpZz4i/T65z7D0w+S+tdIvkvueSr9F7rMlxzW575Ich+S+O3JcoZz2
pZz2hWlPmPaDaS+Y60o/Xe6rLf1muU+z9GPlvr/Sr6Qc/ZV+n/Q7pF8i9zGT
foPc10qO85Sjv3Lcppz2ppz2hmlvmPaGaW+YfiL9cbkftpwvyP2x5fxB7pMt
5xFy32Xp10u/knJY7hMo5SP3kZN+m9xXTPpZlCMPyvMm/t7TTPvDtD9M+8O0
f3J2m/aX+x/Lfi/nS3J/azl/kvtdy/kUek58Q7a/3IdR+t1ynz7pF1OOPks/
lnLam3LaG6a9Ydobpr2d42BIcHLjHu0t9yOWdlTOD+V+03K+iB0hfiTnXXIf
UzlvkvtcynmN3AdRzjsop70ppz1h2hOmPWHa0+knhAQn5xfQnjwn7Uk58TU5
r5X79sp5qdznVc4r5T6gct5HOfom52Xch/ahnPaBaR+Y9knOL0LvJMv9i2Vc
Qe5nLOfrcl9jOW+X++DKebfcJ1XOiymnvWT7wLQPTPvAtA8s7Tgs9/uVcR25
/6+MN8j9gGX8Qe4PLOMRcp9gGZfg/+gL/6c9YNoDpj1g2gPGnsj4g9wfV/od
cr9cGR+R++fKeIncT1fGT+T+ujKeIvfblfEV2on/80t7wbQXTHvBtBeMfeH6
2B8ZX5H7zcq4rdx/VsZ75H60Mv4j96eV8SC5X21ycUDaV8aLKKe9KKe9YNpL
toeMD8n9NqWfL+NRcj9WGZ+S+7MmF+elfWT8So5LMM/L8TwvzPMmN4+U80Ce
V85bkovT87wyfib9QLmuIOeZslzOM+U8KLl50v/y6/+X3/m//KT/Ne7/r3Hv
f9n9/2UHk5s3JzdPlPMY6VdLv0/6Lc5xOiTY6aeEBFM/ODk7RDn1f5C4zrZf
fLfNntdSTv1h6g9Tf5j6w9Qfpv4w9Yepr6yfvN+7RD6v7wfzfLM8+qxZvt9F
Oc8rmeM5X77fI+PRlNNeMO3F8bC8now3sw7pjB9G6eeHqZ+M18p8QOKxMPFU
xkWYcuKjlMPYMRlfJf7J8TDjimTim9gtGQ8lXsnxMHYc5nmJR1J/WMQX9fq5
jH9SLvxiE33leOoHUz9ZzvnUV8ZTKcfuyviqLIcZf2X8Uu4rTDnjEe3Cejzl
rMfDrMfDXA8953yY82HOl/NOGZ+S+2JTzv1g7gdzP5j7yfiY3GebfkR+Asz1
Ya4Pc30ZD5L7unNf7gdzPz2P8t4P5n4w95PxELlvPO3I9fU8zHt9mOvDXF/G
E+R3CeR8U+7bqud13vvB3A/mevQjztfzPu/5MOfD2BPGCc7X80Lv+TDny/mS
/L4Gdovr6Xmk93ow15PzDdlOcl9a2o3rSX9c6o2Uq9zXFrvB9aS/LOPesl/J
fiDXLaTdkP1a9jvZT6QeS72TeiHlLOWWnF2SdkbaAdlvZb+S/YD6wNQHpj4w
eiDtJHlL1A+mfjD1g6kfTP1g6gdTP5j6wdRPXp88Kv38XmZcwH9Ajxnfne8D
u+R6nyniZjpfjPEMP5rxCb8Uppx5DuWSGS9g+T1MuY72//c6MHZd1tPzfCHB
zvy9kGBn/l5IsDN/LyTYGRcPCXbGbUOCnfl7IcH6/T2vv6vf3/Oyfn/Py/r9
PS/r9/e8rN/f8zLXx9+F8U+5H0w5/inlMPWBsXPkq2OnyG+GyYfF34EpJ5+S
cnho4vUZ38mP89Hs0U9/66fEdgiwOB72tIdL/3I8zPEw58njYPlLPeR95XXh
ZYnP/Uol91yuRL0gjuZjdU/sj29V8cT7xevfI4nlcUl+OR5O7jryOJh6yXrA
PA/PQTvI54J5PjPxN1LRPjDXgzn+ZuL/wzV/najPyw3Ohzkfpj4w9YF5Hpjr
10jUtzDNnvcwIvT9YO73MFG/owye06OvfibP4elPAZo99jXQ5P4ZE/XebTbx
nOf1M93e9RxfzRwvy6lnWGI97HKu19lzP613MOU8F9ejnHaHZ3ieW8vNY7fw
6+1+AlNOO3E/yqkPTLnUA8qTu25y9eD//P6v/3N//s/94ZceOWs9T64dk2v3
5J4zuXbhvpSjX3CLxN9o3c+S04vk9Ij6US71gPrA9HuY+8PUT5ZLvUVPtyVe
P0bBXF+WY6c+TDw/Vv2YWPH32k7BlGPHOJ9yrstx8P+6TnL35f/88tzcl+eG
ZTsm95zJtQv3pxz9oJ3h/6UnsNSr5OQGoy+yX9Iv0GeY8v/Vj2DqA6Mv2B30
Gab8f9kpebwnvzLcgLHnnE85XNZTf4PngXkemOs99sjNhPd52tGkHQt4ntvk
OS942k2z5/3OAJN6w+gD4wXHl/e0iz4eduZR2HZA5tfxnMjb81xBIp/IPl/m
JXD96YkXuqTl5E4UwBHN+KvIxZnPYds95lHog8wj4XyY848k/p7VekB9OJ76
wM7vb9v5WcjV+T1ue5zgOOonz5N5RpzvjP+7dH0o5znlOCrzmbgv95H+qbyP
bGeZd5bccyFn6TfI/B/0gvpL/1fKSeqdzBuUesD1mV9Q7swPtPVQ6q3Ml5Hj
ocwrpZ9hb5ln83/n94F9xXq3vT7N8TDHO9/DstdzaXdnHNle35XPzfHOvBp7
fZT2dX5/0iXyxuy8Vfgrj/+r48bSfsrjTyT+f7m+H4z8ZTn+NvWlnPrBlHM8
7UE5egtTzvG0D+W0H0w5x1O/aoly2q3rB3N9mPOd5UFJxhfn+k/S9RnGB/QU
+47+eI8zqZ8zXmR/r4H6wdTPGX9ya72XfqMzv9Hu19ST+kk/jnLGYcrRI8kc
/ybx/Ge6fG7i/R8nYY7HnlOOvYexp5I5X/rt2EFph6Tfjl2j/nJ8gbkfjD4j
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
u9QLOfCL3GDsHPdB37kP8wAY+y7X8+V3FWDsP/4D9lG+HyT3j6E/IR+5XxaM
HuC3w6z3M87T32H8etqdOA/Me3I8H+fBzP/p7x59eKfjx3IfA7kOSD/D3tE/
8PfoH5yP/Dlf7jfkzMd5qe0T9RvsGSdN7IrMt2ccRC7y+5+cx3PIfHnm9Tpu
5rU36CH2CKZ/yHVT9IznQM+kPqPH6K3UX/oF47XUV+aTjL/yvVfaD0YftV3y
6hvtQDyDPCz0jfZlfMH+ok+0H/4n+uOdz+n3OmgfxkH0Ab2BiTMy3vF/9Jtx
DEbe8r0P9Ivz6Q/8n+OpD/0G5j7oMec9v3e0xL799nepLsX8PezPXyN1HKxp
9SwLZg+2xzXsdOa5lVvUfeqyVsbfi5vVzt53r865ZmM/aGl/R5U42ewH8Yuj
bvpaO4bXPLy0h70v9qW5R/OnGmd/J7Vu8xWzSx2wv4uKXb+1/4z/s6UJ89aJ
LceMzBqr15HQ69z1/16Tv9Vbld7/r6JzfovT8/jFeZ5mGmXaecjMh9SkqMGX
d0Qrlf/Z+Y1pfbSdYz6UO+SMurUqUnWv133z2by+4ru2vmaJ9X98MyFVhMq7
akPHbu3t9x7x4xqPf/XBygXP1bP+e6JbXvTXeoEfbNTvFtx812Mtl78rX/ks
V/sHqtm0XkuvLgow6S/YkaP7Xn50/Nt7qvGlq+3mnXPr95CJM0yfUbbNhof6
fR5zlrvPtRcL7hmt3vsWiM7uNuknXK/igrVfN6r20Jj0/Oj0xmsCTOwn9dl0
fNvcyrOfGmvnzF23s7/LpB9R/y7NnwVPqhduROz8IaZFG3/tx/H8eeb2uz6g
cKRR4pU1IEUHPxO9of1Gfrrg0PCe0caMy52G/DrC10RP5t7oU3DHBh8TuSOP
QP/sfxb78K1xOMfYmcvOxxvIXe97XHLE/Jfl3xujB/b94sig9/r/DZ9U2Oeb
852+DufdmlTp7KeDfc1US37Msjc0Vtery6cRAQ12vtXPQT0yRb8o/kEel/nF
22c9Hv0do9th/sTH9w4l+CG02w8DHmTqvf61bmee63xc5pwnSrvNjTm3fNN3
XzT9zZz2KOz8o8cvjZ5LqtfOc8htbftsVtU6paOM5aFlb331MMAqs67Yhc6r
Xhmb56y/vyvc34qbe2d0ir6vjdxpst04f97X6nmr6ymfDTFGvzXlU055/l5Z
X8ediin/ztgSUHxlz7A3auOp9L1/bxNgFvgpVY3mjx6oKSHnSp2d6zZ/tQZ9
vnLsfaPOznjjxWeBZpHQ9/HB5x8ZDYrl7Pn8YYKdajv+WvfNCXZ1Uuq7OV64
zCq7UmZMM+e50e9Eu9x9fwswx4/uUiW+4VPjdcGvBw+3/M3hj2cMmNsmwggc
lT3on/Yus+y388qdyxNufPtT07Dyf/mZFX17Fm+fIcrId/zv4/XL+Ztlvlo1
7uvdL43IW9HbWy7xNePeLh736EW08eTNklzb8/qZUwKGPRsz/JUx5usS7y9l
9zV/zDF6UPp2bwzfPl+t2lnIx6wy6djUAp1ijbNHF4+ev8rHHJ7r2pXgsBjj
ZpMNvYKmvde/k17ebDyie7xR8HjP51+Gxxmrm296bSx9Z0ysnHldmVQ+5o08
Rq2RrjjD9/iZsj9u9jXHnrse2/lMnLF8RtfbrW8m+N9lNz3PXDLWuNvr4BdX
xvqZO0vW3jtvR4zhlyYwaF8VlzkhTcXLK795a5TvVaNz2fb+5i8FDtaIe/HG
yJPTJ3ZSlgCzmM/i23MqvTEWLSr846PoAPO7RsHP+z6KNoo8K9Eldp/bfNO8
9vjDv702Pv+q3LvMt+39rdpvOHJ6RLzbqpJ/T4c6jez3H7B7T15/svL0Zrd1
5ouLNcp/Yu/bNHn61aVD08Tp8arYkhnHBt8OTLKf1cUvfip1f1+gvm67v+pV
az7fzssaWqd9pUnVA6yl95/uSPE8Xs8n15Q6v/2PU3a8Wu97/bJJ+yX77Xyy
LiOzHnUP9rFSTAvfXP9iQJL9pnpHdvgpz+r32i/ouWnvd4vaRinsWpWBnTot
eWjvr3B337P1oavtPKoy+9q9SFnupaoYV2npntVvk+zn1KfaLw27//V/9nNa
e2Llk8Mv9H4LNTZEnvpy+nO1aMof5X767ICeDzWt0WrQtPL2/k16/XXGiaEH
HjzW64lWtuC8zd8/UvuX1urXesNFvV43L6JIgaA7dn4+7bF2/6zv8tW/r/2N
GR9O/Df7yFC9XtilfoPeW7KE6nnT+pIpckxpclP7L1ODv11ZI98lVTxzxh2P
5tj7M2Bfvr5U+POD+U/o8bKrNWf6+fJH9PiYd8TXdYuEHtDjzc2IJ/37uTbq
8aVW+buFan62To8fH91YX2BRutVajwIKnCu1PcUd7ReMrV6qcbWgu9ovaPPJ
5dZPCt3T43rhtMdGjln30Ggx98GBoffi7Twbr34dOVl1TqqGz4zRM37av2/E
K/0c/YttO3/kdmCS/RmuduuaomW/N/r+UR8urHLrVYyR4+Ps3X232PszfL/U
f+umWkn361mSrfCW5SfijH4L2ow6Neyl9gP0vuplZ90Lu/zeGFs58vi7p3FJ
9ltYtSXP0VSd7XyKQrMmtpnUIMFvK/omPmVonDq+eH7rdOnd1ukmK5b+fjbQ
yl2514vJcwOsBm965vpnp4/1T55boy6W8rf+uBDW5OPVAdar4A+bD5gWp4LO
9W31JH3C/CN7pUv1xj9VodW6rP5jj4+1vlaVnXvXPlBRWzJlzHg00GpWdsie
NfXvqJcrv2rffE+Alabp2C3vU99VE778LM2buMdGrapffxZ37Kra9vOEtVFd
oozpUR22tHhwRg1fl2V96fm+5uFK6fpuW/yvSvmo2JQ9r/zMuI7Hmszsv12N
PlcizeSGLnPE5BevL13erCa4m7/aV8TfqpWi2LQc50ONx4VmN40d8VIdfray
w4e73xtf9yi962aBCPVmyY21X7VymxfDPnqacco5VSrtxVw1YyPVk0bfnHj7
j72f4LkBsbf9Xif9/mbrAwtvmuFuM82cyWkv9rf3X2C+3qtlx2OfRrvNees7
neteOkI1+i5FZJOBfqZf7kefpN4VrhYczTLhXIkA81iq+G9SJfCyC0+Htagb
YC5/WW2oeSJcxQ5anvFE+0Bzdsuhm1aFhKsd07qcLjvbfv9hX6bWWQqtDTRv
nf6u9m//hqsJP/ZtNvdogNmrxsz9PQe+Ujl6fNDoB7fb/HJO2h9SbYlQt5s1
PTnvvY9Zu+GB1ea0CDVkw6iSxbr6mrVvLWn/TWd7v5j0Ya0XT99pvw+P/m45
t27wlDpuM7BoupV/tbTjwWUWrZjQuXigxW//TG9P99n2Tt0Y1SHd35UDrbdD
tp9rmvW9qjd7xrWCdwKssGLbv50zzG397F81Y7+AAGvJ2M1bxpb3sTbu7npk
92N/a+kPcZ+/MRPs8bRyD1MN97MWp9rjLjfA1xpaKjKVq6qftSunf75Cr1zW
lG+3t5q08J3ase2nOqmXuKw9QQ3ntivwXl0Zni0qV5dAK/DB67JFpsYql++9
vL4PHqnV0ee3D7kYqYJ6lG096MVDNenE/fO1gqJUoT+31l8zIkL/do3fFZ51
erQannHjrKqtwlTru5X7ndv6TjVdFPDjiFeP1N6YZjOXJ4xXf9ZOFRHZ+LGq
tbB501Gb/a2H/1ZM2WDXPeVzK2/W2ev8rYFrX6a4pu6pPHuDe5Xa7GelXXb8
k6/+vK+W9V7aYHCRG0bJ8ZX6TB59TzVzP247JeMjY/f5vMtCBl9XXRcEpz74
NNyom3ftn9+FXVC7TrRberVThNElT6UzLRtcUFM3/zksVZ1II3eucZuHpz6n
pjc9mjn1n2+NIeVdtboWOqzm7C5Xa36HWKP64rN9h6U/pL66mOPp+THvjK4f
VR2dZeB+Vfh93/lN1sQbm0tku6X896ojt91l/F74mDuzxXWsdXu3qvhVrjk+
zwOsD3JP+WXz4btGk2qL41uGu6zSKX54/9Xee0azo79Pqxvjb/l92yH227P3
jTu5Q7oMrOxrTd6WZrnPykdG/U5d+1z5/Z0KfVylwtX1z42L3StufNYuWn3Q
PvMXl8NfGe2qv13z3afRqrnn19hdKVvl5b6B1v5ur498euStsXXA4e9OWZFq
/rB3l3O5Yo0mYTvfHNweqfp2zZm3UvZY4+cn47o83epvTS5XqnKF2e90PGfs
R1VaNp3uNusc+njH5DNR6v5G/49mt3CbE/fNK3itX6TaVj0y6MxNt7kh0467
XXbb+x+8uN/7dLcD9v4Hr34vMabw/KT7b46MeF46fS/7vaEhzQZ1OPxHgLX7
VM72DYrHJ9kv80Xkv5euGPZ+mbOOVzDqtvK3yo4KnNKgQ9L9M9s9G3h91Tj7
exWb8//1+9V/49TufPcz/+GTdP/LnBk6Xtp43c6TWF5uedcaqWJVlhQ1fNvv
Sbr/5Y+VG15uWdv2M6Y2+rro6vaRasmiK93/nfo4yf6X3zWN2+936qWq+n2+
Ge2v/bcPwvpiE87b7yUNK1/v6At3hLrrvvzqZVDS/S6tabeKFfjWXq+u1216
SOtDT9QPjS+VnTze3q/y5x3fuFrv2234Vi1+5cKXz/T+k6lvXf18VQF7/8nv
uw27nq7uIzVo+Mx8cw17P8raXWbsPHbxrJEi97S1Z9c/1M9bvE4G39g7/2f9
cXutHK3K3FO9K86PvLrb3k9y+bg1rb+dc93efypP2mNTDt03ti6tnnLIlluq
xLS+teLD7P0hmSe2b5ghexHf88r9T503Xe/Y+/9umLD3ltngXZL9G3s0rPBP
atc+PT/PsCfj1cxplUo9JueSzD5J90NsM3RMg0oD7htPB389pFh1e7/Dzsvu
nZrzr73/7tMN6c1qh96q1pnKb1vxPNwY2mXsz382eKPWZJ57uGXHSOP1mm+f
p1jitgZF7u26MWuM0frTu31yGHb++dI9+U6srhBgPZkxum6Pf+z9ercuHV+r
TPFY484L/6CMu+39orpPX9EgW3U/K+7k1xfuzY83Nnb/pcXDsj5Wux+PBcQO
9DU//TT0gwpX36lCF5YvabXYz1zeoPqi9p1j1b6gowdmXvY3z73/e5NZzW3l
fDrQt6Q70Fx37eefZrSz34+feiHt+b8yBVoVH9Udv6uR21w3J2Lynuz2/nof
nf/p5Kp79vvbr4eUnJD1cpwqkCuy7clcbivDR7Gbhw+LVw1vPc6dZo3L2pS6
/d8TT8SruXvyzB3T02XNzFEgfP71cJVve6Wo72/7m3OLvhly7Xy4uty45Oki
OVxm+dL7fjkyOcB6XOOdeX1/oPXxtquTshSOUhvKfN+pyyJ7P7zWfmVWFN2S
MH6Uuxd6o1aoylnh2PDUw6PU/HJDsn5f676afmbK/g1/RKlN3/TqWDLlLe3H
o0drVwzZH/Ao4fzbqWNi3CGqdYGgk08mRil34Z/Hf3Hkorowe+uq6d3t/e9S
Ne8VHpfQX893zfB46qkzYl/ZKNWi88yY/P+4zdaBX50sey1cpfm4+4Usf9n7
P/Q4u7qE+WWAOWdKjblN00SrkFHnb97bHmgG1V/fo1OC/1FqZ8ZuNRLmxcMG
L7i5vIi9/9yPlUrEDekdoQqm6Hj/qeVrNgpIU3H8CTu/vcuirbuyLDqg7QJ6
X2hKr3+vtrf3j7vVYk3Dr8tHqFkxS8PMu/Z+cumK34yafz7p/nHT/6rre6XM
U5V9+qulEyqeTrJ/XPdBMR9diXygmhsFZ5Ux7ur8QfrR5o0pQ5b3v61evM5c
b9riZ0ni97ef1Bx55FmIzqOrsqdfu1MtTqmNgzd1fP+1vT8cerm75qAOX3Te
pFp85JM5WNn7xWFvJqfdf//6+DtGtUqxHc89tPeLIz58en3pry7st/ePK/yk
rNF432O9PvWP2fNdmegnCfP7emvDwpPuF+f2LZVpwoEII82S1/e+7/dWrxev
WRDw/mqBGG2XkHetjv3Hbgm0949LsWFkmm417O/fZp358+fpmscY88yAH0Zc
SLp/3NIvO/Y/2iTWOFiqSOe2Kul+cr5js22NThFnxPYJjWp8yd4/juc9XKBA
r0+bxOv5VNOnnV4uyuVjvmx0wOgcn3R/ufPhr3tOm+9jVv9hZOi675Pmk7ep
/2GOlMt9zYFmo1Effpo0n7zf1GU/zD/kZ35fx2/XnU1J88nVuhsjZvm7zD3/
nPtjlGXvL7egRvfNfS+8VmfV1Hvn9wWY+z44d+7idHv/uJCJR++cvW7v97F5
xuR6tT9O8Kd7np4zbbifaQ34ssNfe8LV6xmfnSz+OMH/rt9h1fW94WrdmFpp
K2QJ1PkS83LvjKh1zG2e2Ljja7+xkUnyAcsd6nnu4I9u81b7zHWz10m6v1v+
384///Cw23w8ZEyXrAn+eaa7H7TOODzAPBsdkvXh4XD17LcaWWZWCjTvla56
2rIiEnhpj463fcztJwJ+3Fbbzt/e03hflRpfR6ifvvj9zOePfc09L879lrZe
hOr/7Vd+oXn8zFlbTk9tcjRcVbv6sOaqri7zg/X1/7n5wN5/rPeTx0aepvZ+
Yf92W9jmrNte/9/c8+nck1/Y+4WxnrT+h9vZB68NMPsOPdz4wGOXdWpJ5U1P
O7itucMn7+zZxc+637Nh0JdFfK2H7u8WzFrib62ZPynN+uvxqkh1vxYB+d1W
lfrNfz3961v18LtfFlc6E2ilXTxyYfp3b1V/V/ebn7R4pmKb5PmsR9ZI1f3E
F83bGM/UlJKL3D1yRKo8m6rNKFc0Uu3+6UTJ9JvDVZFHvxQbcPGlet3so8fH
EuxkiaAvej3+LUIdDPApkOWs22y+veCe0OBwNazbhu1xsS5zdjnXkWUfxamm
O68+7/fYbb0c+6bS2VnvVdjy5ZmPDwiwGmeY0uDZKV/9u9y8+FmD935W1Wwd
zhWY7GPlb1Rx7ie1E+Yn7xcu27/1vUoxZGq3Xo/c1tIpL1oMWB2j5k3c+vGI
1S/UP0/OxITWe6kG1ul1cuflKNU2Mib9pcsvVHS1vl1T3opVzdY1Kl7psydq
cvUyR081ik2YJ1/IPWTRE9V0SfSyy9t8rd97LbnaaGmomtfpVMG4hP70rNjV
5Vb+B6qAj+u3Hy+5rYaZ62d4/+ttlfqXn7McGu62Pt4w6835s/b+WV2atrl9
dXqM6jFhXvU6g46qCwO3fJMt5qU6dqVX2Mpty1XYgcMD2y8KV2vL/GEc37rc
CH86runnB8NUdlejXWOzHjU+Da6x71r0YzWuRfM+2b4OMe7WHmusmRiqTo7s
8vvoBXeM+55f5Xt/RvMzbUKNKRe33Y0rcEvfv++YTPvKDbut7uYt22Xz2KdG
i153i0wfdkV91ezm+rBML4zgj9uW73HwktpybdcvKzOGGevGfRH1dGqIWvdD
1urXv3hl5Pztm9r5/M+on3a0zx/mijZ8i5wuM2zRKeW60O3zx5VeGzcOr0gz
sN0J1T3o8pG9jV1m2bVXVlw6s1n9XDT7392+CzCPt/k39Hq+jWrjzzF7S792
ma1HpBh0rcUmtTLDyb4TXrmtqm37dy2a4Y6x9oLvjzfCAq1MWz9uf/nuHcO6
c/LLDPXdVo1u017/9dsdY2D2ys2XBflbVdwnLxWKDTUuhYyPzJXHz5pd/3LO
rlUfGn5Npy5fW97Pivr33MCmuR4aMZULlS/Y1cdaO6bsztwfPzH2nDi2enJa
H8sc+Wj29CtPjLMFH6buVSRelSzQevuaq0+N0tXTfVCjUJwaEjf6y/f/vDAq
lHpYctaIhPFh5/jAnDleGv0WDF+2usxr5Ts40By7O8pI9Vd4+n11XqkuJ7sP
frzntVGtSbGw8qFuq/HjOnEfnH9jDEx9923/U4HWkRsZ7654GmM8mdSkwIzv
otSKS5Ue3+wUY5zYMbXRqt1R6lye940+OfHGaD/m+Ym6ZoC1tUOD66f+ijV2
HCo4qc53LmvYkbiPTiyMM9ZW8/vu47d+VsF0y/Y9mPneqFfh8IpZM3ytOQV/
jhz5pY/Z5NdRB3wb+VrlUrQ5uPAnH/OrXVU7H7jjY7Xy/Jo51wyc9tXbCFWq
fo6w5R18zMu/HUnzUbqXqubhlsXGlfExvwzzM8Ov2/uDEY/5NTh+ZNWVPqZq
2PhWhbzxqtKpXM1qBCYcaxjnSy6MUzvCpv4TWsHf9GsbuPb+x29VvuWhwx/9
4DKLdRg1f+1tt7WvXIpy43sHmOsDGhi/rgq01nh+zck1VqX5dlyCf9wn94CF
MW5zZYWxZ6uMtPNjb+6vtb5QQKRqPCXbrl1v3OaTUu2aXAu287eZF4zyu3ti
QqEoFR23u1gP10W9Lhx6v+Vfq09FqjfpXO1eqgT/7Ztm2dc/jVA5P9xf7vto
t1lv9/Meb8/Y+3n17PPxxron7P280lZptaP47/b+XaO+7Hzyce83qleVZ/Mm
D7D377rd+9Kmve/cpuv2xm8KfWLnW73b5N9g4357/65Vj3NUz5swPmQ/Yx3b
stRt5v7u7+fPmkYkPN++L2rOcZs7W7bJcH+nnT94LcuMvpvLvVR9wrKl/Hlv
vLGm2JE++aq/VDcHpc89bI79/c6ZnZstO7zjjZH1bOQnj67a+3EVyrt+zwZX
0v23TkX2ru1qFWgGuKPKtvorWm3fMu3S9e6B5tnQiE6XMtrjMftxnTr74kaZ
OLfZbPG7kl2iw5Psv5UmfnXf7+Jd5l9Z4q/86RujVmRedPDr3AGm0fvag5OH
7f23Crftp1IcDFfrP/o89OgUlzm0zi+fuBN4bWD/tA8SuOjFJSc+yfde3b2U
eavrUoB14EapbRkn+VqLe5yc/nsB+32jQvnKVNmx+p3KOrGNarfIZUW2XVI9
ZeH3qve0mwNzpItUj4ptj93xMM44ua9U5N8pI1XpymdSN38VZ0wq1inLmBfh
6u7tjb9vfRJo9ng4a+U3EQnj70Kj7M2wQHP/6Okvq6SKUJve9lqwsLjbHJHi
1bP9xez862rlc6hj5SLVyEpxlSOfu82Cl7dULFopUsV9snrKlWduM+PFEq0K
J/gv38/p1eJZT7f5U7F/h1UdYu+nRb5TkKvI83xnA6z+v/nO/PtQ0n2cGhXJ
s7vyR35WdIsuU43MUarT9p98l31h76+1dVmRD/rfCTSfdcr9fFB8uMqVMt+i
MaX9zWM1sl07Ghuu/pnetNLZavb3Wfd8uM+a45tgs6q2nPjTWnu/rdd7q0XX
T7jeJxk/Lxsyxd9cub5v3f+4xKq6X11N4KLHGpxYu9BldRnW0d1ufYIf3jP0
1xfz7XzxvLFpHs4aG6fMDPsKtEsY934tsbh95qb2/lnjfz9cKG8ht/X2fdjv
Yxva+x4ErH2Yd1G7AOvXiZXLxZ91W20vFo1ruMdlpbtV5dz9gHhVoM7qwOOp
A6yZx8JSrjtl74f18kbYxXYf+lkftmj67vyPvtbnZzKVSpXKzg+/subl+vyN
/K0lMTe/HVTRx/okx5JJUeXt/PAjEwdkLPJ/9mPrsW7Jp+N+fKlqDwrLXefo
e+NBukULzpT3tVJMjN9ba6GPWWP6mTPZytr7M5N//OuXXa6MvuJjfr70curT
U32sFMWGhLYu6qv3t3oy/HlIuhy+Zrp9C+Z/f9He7ypD2LDJQYfi1bRfs576
419fM/PBGu6Vk+z9rcife/frmks/JPiPu4qW7dtk+HuV8dDHA680tfe3SrU/
xbufS/uZQVXuVz581d7vasGLXNNvVXinNge327zlqb2/1dRFGR9NSfAf9537
+Viq97EqpuqZsTcn+5v+5S4fet7Q3s9qxJ1iz9xH3ip3u6s1wou4zAfBda2q
4+39q8j/uf3VXLNbS3s/K/ewN+f6rHGZT3Jkq/FBeNL9rXqkOdBu6YpnOn/Q
/famT6fJD3W8beaasHZPlL1f1aQLYbO7bLyr8xGvfPTjvDWd7ffZJnQ9dlPF
XtN5gj2WFW479Hf7fbXNz+sX7tHL/t7TJyOPT7y60dJ2fF/ebrGl9wRrOz3x
g+j83+zfof3w0mmtIgvbbNX12VPj88LPD9rfb3rR/je/VEVC9fzqwQyja9W1
9vebLv1wvkvZo8/18Yc6/vVw5vx3xqE1n/pe2hOhwuYWbzQm1G2GhX06J+C0
nX9+2aXOfNg2Wv38Zu8vY38JNN8+qHv5D9Pen6nLgUvTL6hXqnjnPrWf3LL3
Y+rnW3z2Z3GB5qkJna8PX5V0f6avDv4Tn71UoLV0X46qP24IsBr6lVlbb3Gg
VadR9QKrrgRYeS/fjiv9faD117umB60Tdhy05r5Vr3+umXQ/pgzzG5fuHxqp
7oxo1D9l3ofq6JEa6X8pae9z8euh6Eq7FkeoyNsHahUZmuDv19qYI/5dhKp1
v8byuNXh6s3rUS3Sh0aoQ/0yn+vdOkZdTvv7mqyZn6kq6kG/P0rGqKCcf/W4
Xcbeb2n6L1saTtoQpiqsbvpZzbqv1cxBa8dVDH6ugg/derw91ytVOH22bSUX
vVCN3o+7O3jTK7W53M7L+bK+UJNLTZjerJOPdeL45MXGhw9VvcdN+1Su4WOt
cPfP37q8vf9S39mTplbN9FidHl3yctejcWq571cbjs56rNZFt8xya0+gVePJ
y7l1mt9RH9ec8nuF6oHWksX76g1Yc0d1nDFq9f0Eu7Tts65j7g26qw6/HVBz
XMUAy9rfcHPoYHv/pTlF+k0aFHxPZfp+XviOT/2t4c2sx21K2vlt4wcuLbry
9n01ee53AzPc8bNe/Fm04q5h91XKFyXz7U7vZ03OeS7z/VqhKmvmDyYt+8zP
qp9lbVDjj0J1nCLzhpMjlo25oLZMHTDK79twI33vwRlqjrmoam+7MurlxpfG
uPh8i9PuO6fjEBf6Vfzx92zHVNePqpctM/+1sXvk+ELh548rVazJoU+qvjFK
3s6dKv3KY6r0qMc/HKgbY5R4kD53+kxH1ab3HYZG5Y8xLpYesmRcy6P6PcQ0
f68wDo04pM5F51edm781NgWk3tN10mFVacy2FkaeOGNW68FnepQ8qCZ8PPpC
H99448uiIaFVTu5VTfd32b/6kY+ZufbCU0Pf71arskUeLpPKz9yrfEL8XLvU
3nKu7Lnq+JlpSr34aPygnar18nP55xb3N0eN+qX45XXblH/1TWtLLfM3M1ae
kWnVrK06jnli6LDplyauV3mXTjgeuiTAnF2vfIs5Lzao8JP9SrZOEWhWb1k5
5t6t9WrriMql4hP61YKzE2t+vHKd6lTl358O1w40XcP6+JWuu16P++UL3Ri4
OM1a1fd4zL4HCX7Csn+KZb9y72/Vrm7Tcg3LuM3nNT7IX/G3ter0zGcXPj/q
No8/mdj56frVqm2VP943TfDr/u21odXotWt0vxpzo8nQ17PuGiW6Npw5dlyg
9cln2VbuMu8ateY1m9nlm0DrwYOHuT5sfteYkXd3kbhtAVaVHPcf/B1315iS
Ol2+M6lc1m85N1RKu/u+sTF9l7LXK9jfh2vj03dV1g3RatGzT177ffdK72/Q
OWva17MXvzV++7vb27Z/Blovc8771PrgrVG2SEzA6B6Blqvo8NWXW781MtZZ
1b7dLvt7cvr9gpzPG2+76zZn5WtwpFIVe7+jg7mmpG3zMOl7XzsyHtw6dZ3b
+nxmzjEnywdY6uNXKftkcFvjvjm3bccke78jxvUT7S/naZDOfh/t73n9945q
57aGnju0ck5Z228ITFliZ9DIQOvj0dNvj7wdYJ3NePvppVL2fke8P7HwwbOV
2x7a+y497X+q7s3sCe2Y58WOSpXs/ZBW/1wubsyCpO/B7Rn9OGjJFXtfopq9
bhTJmeCftD3pNy9LM3t/JPJBo0tUTxfU29d6lWrtr2k2+Fl9+p1LOSDEx+pe
eMO764/s9+jJX/2l5oPvo/fa79UvdQe9LZ/Z1+rbqHmT1wvt9+x7jVGTv/nZ
3j+J/Oy5u/NnLlfYx6o9rH3beS/9rR1981xfUTte5Wv55pvGVew8Hc9pLqus
qjC4ySfx2h592Te1sTw4Xn00IbXrx3v2PgCX2wUParkv0Gryq9+4CWnt9/y+
WPHNxgKDYtXFD3qPc09wWw9vP6xq5Xqrfk3x08xjys6bpv36Vy15bc3jGJXd
WLri8Rd2HnWOV/sWBr9/rpZundVp/oaXyvff3kfUW3v/JPKCB0+I/KLxuJeq
2+CNtZ51sPerX9/5aZm/4yPV74Ur5h3YKFz59Nh6qsE/dt4P8z6/yz2HTSse
rp6OPLjgw9ZJ91Mql2psm5UbnqoCDxqla13/jSo381nK70Lt9/0XDY0O6H3u
gao+9enbqnPiVZel355Kc+Sh6td80N53PvFq3b/VIrsXfKTXB09cjHu7v9Ed
VTVnwSXd3yf4rSVqpPG/ZX9/7Xrz37JkLHtXTRzrXpllu8vKkzL37y2v31Vf
3i14L9UQlzXqYIvyeTLfUyu2fv7H7dnvjBvNmkW/7bhfBXc4/+fPv743bl0q
cKLyx/tUXP4Sj2Z87mM2jQ2bUaK1pdp1yDFsQCcfc3zhXN/Xu6VUow2vpv0x
3Nfsf9q1Nvruv9qvjKgz4swHe3apXll7vLyzwM+8mPN0hml1dui4YrFKt1f9
EbBdHdx0c1W5UJeVau3DcfNO3jMqZ8p75clgl1Xn2+hD52reN469aldhdIbX
+n0M5pM9ZzT9vGmrV3q9eMyKcdOXbY0xUrRudiDitxj1rnjRu0NPuMz74Yvv
7av8Wp1aUvNCUJZA80y/mO1Df7K/v/Sodni59lfs70X82e5K7RWnw1XAtQ1b
tn/uMgcfD8g+oZHLmhi4vaQV77Y+/DB1uca9ku6nVD203vUh56PU0MXD2g+s
eUd9k6JBWJ6HUar6l73vjK13V23t1n388EtR6ov29YcNbXFPte64c+jz3VGq
+eph5SpsuqsuT+t1teapKJWixbTKhQfeTvK9pbB2KU+/CYtSRyttP1rh0zuq
SZdiZ+8kXH9c7N+7t8+/oT6YeC+u5SN7f6Wyhd6ubXU2SrlcX9U40feKqhke
V3Tkjig1ckiPEQsnX1VZzDFfTjkapSrlbzuu3pAbqm+njlX6JFzv/I+nVxv9
r6neX1cu2ueivd/StgGpbqQeGKWifnsycMXUEFV6TGzNKrOjVMH8ufvf+9N+
/539lSbWPT4g9S236XO1a6awn+z9ldhvqc6w8z+PHhNopu8TcaPmK3u/Jd5P
vOK+eCrnhUDz1ZGsK/JVvGU82tc7fdYrd1WdtT2tJplvG3vP3cw39Cd7vyVz
dYZphULuqMxvly+5/fltvR/Th119jwQVv2ecrDS1250tt1XbmgeLHR9tf29g
ft8DLy4feWxMbPw0sEjUVZ0X9m7ViSPHblxR839ffOFp7edGfIbDtTZku6x+
nzGvSaeqUcbCau2rTQiw91c6nn7EB5dbn1FZzi6tUml3gn8Qt3xgx9Jb9Tym
7bJGr4Zc2KwK/9S2Vtm7LtNYNbRq8X6b1KcP+uXaPNBtnTrfd4p76B2j1pEV
0SlH+1tl5r3yXdY5VOet91medWir56HGtlcrKt+Z5WdtXnj3bt0FD4zJb8ps
ePOZr/Vt9M7rr7Y+MnZs+HLqrNM+Vq2CI5f/3e2x0W1d3eezZ9r7IV1+eu3Y
0xLvVIFNodU2VQ8zmhbMEnTzZpxqOT/rxZRr7P2Qqqca/Xfl714YJ7fUd604
bu+XNH1Aq/iOg2NVXVX9wPoO9v5IY9t2yN18Xbixqlbz1i8K2fsl5Wv5zz/F
dr9WATneLXiRyt4fabfv7eLXRkUZHbtbv/afbO+XFJfrj1fBbnu/JNYbenx7
/MyIXZFGunR722RaFGB9mHvs5kIV7f2Rvq63+lTm12+N6NknT975zd+6UKhp
0am73hnDa1faObGVv5Ut4Nr8cRns/ZF2NL/w4sf+7415j+O+jKlt75805Fbm
bWkW+1nffO0XvSNzvOFXYe2Jv3rZ+yUxr19/pM6hSu19zYKxBedOypl0f6Qn
4yPSVh/mZ3Yt+U3+2tOS7o/UuFOTKR9s8jd7zDg8pFd2e3+kvKO+X3Jzhtua
dWdxlqo77P2PruXPF/3VgwDz36O3UxceYO+PdH1zi2HnogKt+KLbl9VpZe93
9Oqvs4VvTgk0B8/dXKV3iL0/Uqd1HYsvz5f0/VAreHidy2UDzXONJ16b0C7Q
WnUl/5Z0sfZ87pOHDTb6lXebFWcc3zW4tr1f0qbh3QZHHwuwKmSv8m72cnt/
pCILa785FuE2o/oVe/CDsvdLqrHHvWScn/2+KfILqrfnh06zE/zahqtGZ81h
75fUY2OuSuNSR6h0PhN8esX5memiqlxpmyVC5Y7bt+tIiJ+54HLLc59b9n5J
se9GLBi8N1zd3T9t58j1LnOQleXbzAnsczbIt/Bml+naua7Q9d3hqmS5+4sK
/r8m7v0r6TuO47ggyqp15nCgyGIWSZ5N3WZmutw+37YsaxmnacujC6TZQeZt
7HSaGWN2JpMKmacz88xuZ5Qds2NppZw0eX8OkV1MqTl2NiemyQg0FVC8hMj8
ad/9Fc/XL6/HAI34MVR/u1jvBO77Ziw004iHZ0I2MLe6wMtnJI3EkH7S+l/4
cp2ASlygWau++J+ndPdR7vCTB0vdV74hDMylESFV9yo+feqEyyldDs5vgcTf
+0qu9+30wYurG/+SXgrGGnt/zdZpP8Qnp2y0p9GwtHty9PhCAJ7Kv38w2kzF
bf+kSvKDgrGs+0Tv4+ULUD0mmGDNvgRHlPpXef8oJPpkCQWFs6C3NegMZ8fB
oqtwNBtuIEHaliy6ehxkBw+Zq113UKO/4koXbwz0LT2sYx9QcEu/7NWkKBsI
e4Pi5Rm9KLfydqfbZAfGDw3LTNW/I3UwTxZTawO+ihmxV0DHN3Po8tqJIYjC
+w7Yk/rRZ5+/nj2qsAKzdZ1gV74NLVMcFzSvGAS2kapQb5pBr9nyBqLf6YXk
rpN6SckCsqQ+qd/dZgTeng37h4qCcESsiJ+9eQQN7rhya3UTBbORvbZu8jlK
TXg2u2rGDy3sP98e94+iyDnhPZ9oEWKdnRovvECnJuoLuts98CF1+M2nnhnE
1A+FsRPpWBRr/mrk+3lkFVeHRw9Mw/iZzTFfVs2hDAYj1/QHDQfsrFvTxVtA
qzT8QbV4CsbCjG0svxdxOqwSCpOGPcbWn3ezfGh7i1NlDyU9mMJwVdP676Zh
5C1/ZdNhOhG/qbVif6kLHh3jRM7cohM3w59P6tpJr0Wl1IG6g/RYPgJfcZmC
9Ff2Xmu3GFd7QDFctq0wjk5Q/XnzWaUBOKW5NGH50s6uOvIur2hXEFZwzQ2U
UN9/P7QdBmlZzoml3r6Srr0YZoTrTdr3sqVuuEpkC7nP5iBuMN7e0e5G5aHS
vJWY9DvE3J9i6z5xwbY+kahGSSfYnnLt4UzS42g7atWIG0lf4u7KiE7aOTf0
pHU/RoJF1JgFpzO9pAdwSJf3bVGGG2mOFEgy+H0QxykJSWeYoOdkpjKmfAoS
ddqasPs3wOvlOOqTXSB5WDY/y30JSsISWXzUhVZsebA2zUHB8kvOusaQAOIb
rlqVbnCD1nT+zqLZh1hf5wRSsRsM7I/NlRYfShQvHpiikP/EfwFjvbjU
    
    "], {{{}, {}}, {{}, 
      TagBox[
       TooltipBox[
        {GrayLevel[0], Opacity[0.4], 
         LineBox[{4293, 4916, 4292, 4716, 4715, 4846, 4845, 4582, 4850, 4851, 
          4847, 4849, 4848, 4496, 4298, 4776, 4777, 4775, 4387, 4853, 4854, 
          4852, 4434, 4352, 4297, 4720, 4719, 4856, 4855, 4390, 4857, 4858, 
          4721, 4299}], LineBox[CompressedData["
1:eJwV0Ekyg2EUheGb6PtgBaoo7cROSKNXIXNRFYQ9YK7ZAStgAWKg30Qw08RE
E08Gb73n3O/ef/APFTbTxURE5HGdinjrj7ji4kDEBmb0fdTNKjgajJjVh3Hm
fYTTvIY83vUbe1tyCRn9mw942u0h33o/lrPyKOZwoec4gTvvJ/q8PIZz9+Oc
4QLW8aHf29uRt/GLH1Qb33CbxJ8eXOdP8wf7u3IZzeZNeDZv5w60oA2tqJk/
2d+zm8OknuUJXsSlnQVO4tHeqb4kT6FLXuFOXuZXvKBPX+Vu7kUPvhr/Fv+x
SDTo
          "]], LineBox[CompressedData["
1:eJwV00VbVVEYhuGNohiogN1dA1tAVLBnJvbE7sL+G3ZetmJ3d3crGChgNzq1
vbzX4OH53nevtc/Ze3Hqj8nKnBETRVGSP0UJUVSYFEUv8BwFyMcXfR4/w2M8
xRN81lfgBBxIjKLhFaNoP5eXh5nLmofyavkRctFcLqNvxqvkHDxEU7m0vgmv
lLuYH/B8bqxrhBVyhnyf53FDXQMsl9Pludgmf/K97uk6y3e4E9/lj/pbfBvX
cRM38EFfjt/zVvv3WR8vl8UQuZQ8mJfJHc3XeDZf1s3hNFzRdeCr/M59SnMZ
7NUNsm4Pl5IHmuPMmbxUTjXPQrb81r6SupnyAHk39+ddXELf19wPfdAbS3Qp
rmVhi/zG/thwfrxJ3qmfih3YKBfqi4ez5fXydv3E8M6wTn6mL+b6xfgoiuHs
8Dz6rTw6fAZOy5sTwz+M8wvPHc6XKyA5fB+sNPcM58W9+JH7duVu6IIe6B7O
zfWM8F65M3dCOnKtT+UOSEFHpGGxdUtxKjw751iXHN6tz2wp7+YWPBIjUIQv
qGjNKE7gJCTiu/zY/n327A/nhFa6sRiDb/iKqtaO40pcBZXxQ86z94g9R3EI
rXWHw29Dv9aaCXJ1XqA7GH4fqCYX1z+xZo15vPkXfqJAd9KatuYT3IanYDJq
WVsTC/XHcQw15FjX8u3bYJ5k/oPfeK27ZM1lXECy7iK/0p/n9vI5bsczMB31
3aNeeMf6sziDunJJ1+rwIvk0TqG2XEL/0v02m6eZ/+Ev4lz/D+hInHY=
          "]], 
         LineBox[CompressedData["
1:eJwV00lQDmAcx/HHHaNeaaduCAc6MM2EomxjO1haLJUohiNhjLMtu4OtnGzT
GFrIkuVgcMMgawsOZqgYM4aLz3P4zvf/+z3/5523esqt2rZ867AQwit8HxVC
UnII15NCKEuEcIMTcjJ+OOvlPvRglrN+HtBftLtdno3TuolyHnbIn+UiPsPl
uuHmCh4tt5orzW08Rk7BoM+7pGvQFeOsbo28Fu3yOk7VpaFDviwPuZMu/+Qr
8k79HJzTrZerUINqZOhuOttg3oha7JI78dh8izPt3Oa78h3ejc3mLdiEetQh
y94knoyv5rn2vnBJvIur+l++U7buN7fIXfpcOQdT5D1ytfmReZ75m3k+78U1
3R/3VuhWxs/FE91TPMBDjLD3106Ds3/cF392czGazBP4mb3x8e+CPLzXt+uy
uUAeyx1yM4/DR9yXP/EHHDOfwHGkyIXuPOf98kEcQH/8neprsQh1qEev/pTz
QzyVG3kaX+CT3MNL7C3FMsxEo/5wvIOjOILF9gbjO0GRnVR+ixycR5udTM53
9oLvyS/jZ+Md0jDDWXp8i9iHGnkVVqMUZfHtuzfSWXl8d3ht7tK9ie87vnsk
zK26bh5AibkUTc6a4/+LbjovxAL8B2aQeh8=
          "]], 
         LineBox[{4350, 4655, 4558, 4987, 4989, 4988, 4486, 4993, 4994, 4990, 
          4992, 4991, 4656, 4560, 4995, 4997, 4996, 4488, 5001, 5002, 4998, 
          5000, 4999, 4657, 4658}], LineBox[CompressedData["
1:eJwVzjkv5VEYwOHjG9iqyYTYRjODZAqJUIptRqGm0dDYx75e2zVjSdQyIzHo
RESjEuswloiCT0AQSiESEs8tnvzO+55zc/9ptU1VjXEhhCjnCSEUJYbwlWTn
aq3hgXu+211yQb45QeeYpYL1pBDi9RtpbJjT9SNL3i+zSIV9OX/sP/DXboEy
u1LKnEv56S7PXOdcz5n5misKzb+1QCtj30bUnOv9tPMMOUwxyS9O3fe4H9Nu
PdGJ2P/wFh/CF33VqI5z7L7Lu1Ht1CMdsR9ljM8ME2GI/+47vBvRdj3UfvsB
Bsmmj156OHD/SbPYdz70m386zA/nPW3TXc30psW5lWaamLcrdxdhzfzi2zPs
nnXVvGM/SLrdljbYbWujluiN/R23PPlNqj7qivvN2LeTYlfMO8QYUD8=
          "]]},
        "0"],
       Annotation[#, 0, "Tooltip"]& ], {}, {}}}]},
  AspectRatio->1,
  Frame->True,
  PlotRange->{{-3, 3}, {-3, 3}},
  PlotRangeClipping->True,
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02]}]], "Output",
 CellTags->"Cell 9.183"]
}, Open  ]],

Cell[TextData[{
 "The crossing points of the thin and thick curves show where both equations \
are satisfied, and are our solution points. The crossing point in the lower \
left quadrant is the one that was found by ",
 StyleBox["FindRoot",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " previously.  Now that we know roughly where other solutions lie in the ",
 StyleBox["x",
  FontSlant->"Italic"],
 "-",
 StyleBox["y",
  FontSlant->"Italic"],
 " plane, we can choose initial guesses close to each one to find these \
solutions. For example:"
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FindRoot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"Cos", "[", 
        RowBox[{"x", " ", "y"}], "]"}], "+", " ", 
       RowBox[{"y", " ", 
        RowBox[{"Exp", "[", "x", "]"}]}]}], " ", "\[Equal]", "0"}], ",", 
     RowBox[{
      RowBox[{
       RowBox[{"y", "^", "2"}], " ", "-", " ", "y", " ", "+", " ", "x"}], " ",
       "\[Equal]", "0"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "2"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"y", ",", "2"}], "}"}]}], "]"}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.184"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"x", "\[Rule]", 
    RowBox[{"-", "2.175778784484461`"}]}], ",", 
   RowBox[{"y", "\[Rule]", "2.0574911827950944`"}]}], "}"}]], "Output",
 CellChangeTimes->{3.44633368983596*^9},
 CellTags->"Cell 9.184"]
}, Open  ]],

Cell["\<\
\tUnfortunately, there is no general algorithm for finding all of the \
numerical solutions at once to general nonlinear equations. One needs to \
supply a guess for each solution, and this requires extra work, like the \
plotting we did in the above examples.   This is one of the reasons why \
complete analytic solutions of nonlinear systems (if such solutions are \
available) are superior to numerical solutions.\
\>", "Text"],

Cell[TextData[{
 "\tSyntax for the command ",
 StyleBox["FindRoot",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " is summarized in Table ",
 ButtonBox["9.22",
  BaseStyle->"Hyperlink",
  ButtonData:>"Table 9.22"],
 "."
}], "Text"],

Cell[TextData[Cell[BoxData[GridBox[{
   {
    RowBox[{
     StyleBox[
      RowBox[{
      "Table", "9.22", " ", "Finding", " ", "One", " ", "Numerical", " ", 
       "Solution", " ", "of", " ", "an", " ", "Equation"}],
      FontSize->9], "\[IndentingNewLine]"}]},
   {GridBox[{
      {
       RowBox[{
        RowBox[{
         StyleBox["FindRoot",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         StyleBox["[",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         RowBox[{
          RowBox[{
           StyleBox["lhs",
            FontFamily->"Times",
            FontSlant->"Italic"], 
           StyleBox["\[Equal]",
            FontWeight->"Bold"], 
           StyleBox["rhs",
            FontFamily->"Times",
            FontSlant->"Italic"]}], 
          StyleBox[",",
           FontFamily->"Times"], 
          StyleBox[
           RowBox[{"{", 
            RowBox[{
             StyleBox["x",
              FontSlant->"Italic"], 
             StyleBox[",",
              FontSlant->"Italic"], 
             FormBox[
              StyleBox[
               SubscriptBox["x", "o"],
               FontFamily->"Times"],
              TraditionalForm]}], "}"}],
           FontFamily->"Times"]}], 
         StyleBox["]",
          FontWeight->"Bold"]}], 
        StyleBox[" ",
         FontFamily->"Times"]}], 
       RowBox[{
        StyleBox[
         RowBox[{
          RowBox[{
          "Find", " ", "a", " ", "single", " ", "numerical", " ", "solution", 
           " ", "to", " ", "an", " ", "equation"}], ",", " ", 
          RowBox[{"given", " ", "an", " ", "initial", " ", "guess"}]}],
         FontFamily->"Times"], 
        StyleBox["\[IndentingNewLine]",
         FontFamily->"Times"], 
        StyleBox[" ",
         FontFamily->"Times"], 
        RowBox[{
         StyleBox["(",
          FontFamily->"Times"], 
         RowBox[{
          StyleBox["only",
           FontFamily->"Times"], 
          StyleBox[" ",
           FontFamily->"Times"], 
          StyleBox["if",
           FontFamily->"Times"], 
          StyleBox[" ",
           FontFamily->"Times"], 
          StyleBox["lhs",
           FontFamily->"Times",
           FontSlant->"Italic"], 
          StyleBox[" ",
           FontFamily->"Times",
           FontSlant->"Italic"], 
          StyleBox["and",
           FontFamily->"Times"], 
          StyleBox[" ",
           FontFamily->"Times"], 
          StyleBox["rhs",
           FontFamily->"Times",
           FontSlant->"Italic"], 
          StyleBox[" ",
           FontFamily->"Times",
           FontSlant->"Italic"], 
          StyleBox["have",
           FontFamily->"Times"], 
          StyleBox[" ",
           FontFamily->"Times"], 
          StyleBox["analytic",
           FontFamily->"Times"], 
          StyleBox[" ",
           FontFamily->"Times"], 
          StyleBox["derivatives",
           FontFamily->"Times"], 
          StyleBox[" ",
           FontFamily->"Times"], 
          StyleBox["wrt",
           FontFamily->"Times"], 
          StyleBox[" ",
           FontFamily->"Times"], 
          StyleBox["x",
           FontFamily->"Times",
           FontSlant->"Italic"], Cell[""]}], 
         StyleBox[")",
          FontFamily->"Times"]}]}]},
      {
       RowBox[{
        StyleBox["FindRoot",
         FontFamily->"Courier",
         FontWeight->"Bold"], 
        StyleBox["[",
         FontFamily->"Courier",
         FontWeight->"Bold"], 
        RowBox[{
         RowBox[{
          StyleBox["lhs",
           FontFamily->"Times",
           FontSlant->"Italic"], 
          StyleBox["\[Equal]",
           FontWeight->"Bold"], 
          StyleBox["rhs",
           FontFamily->"Times",
           FontSlant->"Italic"]}], 
         StyleBox[",",
          FontFamily->"Times"], 
         StyleBox[
          RowBox[{"{", 
           RowBox[{
            StyleBox["x",
             FontSlant->"Italic"], 
            StyleBox[",",
             FontSlant->"Italic"], 
            FormBox[
             StyleBox[
              SubscriptBox["x", "o"],
              FontFamily->"Times"],
             TraditionalForm], 
            StyleBox[",",
             FontSlant->"Italic"], 
            FormBox[
             StyleBox[
              SubscriptBox["x", "1"],
              FontFamily->"Times"],
             TraditionalForm]}], "}"}],
          FontFamily->"Times"]}], 
        StyleBox["]",
         FontFamily->"Times",
         FontWeight->"Bold"]}], 
       StyleBox[
        RowBox[{
         RowBox[{
          RowBox[{
          "Find", " ", "a", " ", "numerical", " ", "solution", " ", "to", " ",
            "an", " ", "equation"}], ",", " ", 
          RowBox[{"given", " ", "two", " ", "initial", " ", "guesses"}]}], 
         " ", "\[IndentingNewLine]", 
         RowBox[{"(", 
          RowBox[{"required", " ", "if", " ", 
           StyleBox["lhs",
            FontSlant->"Italic"], 
           StyleBox[" ",
            FontSlant->"Italic"], "or", " ", 
           StyleBox["rhs",
            FontSlant->"Italic"], 
           StyleBox[" ",
            FontSlant->"Italic"], "do", " ", "not", " ", "have", " ", 
           "defined", " ", "derivatives"}], " ", ")"}]}],
        FontFamily->"Times"]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[1.26]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}]}
  }]]]], "Text",
 CellFrame->True,
 CellChangeTimes->{{3.45444012268646*^9, 3.454440134029232*^9}, {
  3.454440244227813*^9, 3.454440266268577*^9}},
 Background->GrayLevel[0.849989],
 CellTags->"Table 9.22"]
}, Closed]],

Cell[CellGroupData[{

Cell["9.11.2 Numerical Integration", "Subsubtitle",
 CellTags->{"i:73", "c:62"}],

Cell[TextData[{
 "We saw in Sec. ",
 ButtonBox["9.9.3",
  BaseStyle->"Hyperlink",
  ButtonData:>"c:51"],
 " that some definite integrals cannot be evaluated analytically. These \
integrals can be evaluated ",
 StyleBox["numerically",
  FontSlant->"Italic"],
 " using ",
 StyleBox["NIntegrate",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ". The syntax for this function is identical to that for a definite \
integral. For example, to numerically compute ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubsuperscriptBox["\[Integral]", "0", "\[Infinity]"], 
    RowBox[{
     SuperscriptBox["\[ExponentialE]", 
      RowBox[{"-", 
       SuperscriptBox["\[ExponentialE]", 
        SuperscriptBox["x", "2"]]}]], 
     RowBox[{"\[DifferentialD]", "x"}]}]}], TraditionalForm]]],
 " , one might type"
}], "Text",
 CellTags->"i:75"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NIntegrate", "[", 
  RowBox[{
   RowBox[{"Exp", "[", 
    RowBox[{"-", 
     RowBox[{"Exp", "[", 
      RowBox[{"x", "^", "2"}], "]"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "Infinity"}], "}"}]}], "]"}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.185"],

Cell[BoxData["0.26330018327147486`"], "Output",
 CellChangeTimes->{3.446593734291114*^9},
 CellTags->"Cell 9.185"]
}, Open  ]],

Cell[TextData[{
 "This function goes to zero so rapidly at large ",
 Cell[BoxData[
  FormBox["x", TraditionalForm]]],
 " that it is sufficient to ask for the integral from ",
 Cell[BoxData[
  FormBox[
   RowBox[{"0", "<", "x", "<", "5"}], TraditionalForm]]],
 ": "
}], "Text",
 CellChangeTimes->{{3.4465937554018173`*^9, 3.446593759314432*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"NIntegrate", "[", 
   RowBox[{
    RowBox[{"Exp", "[", 
     RowBox[{"-", 
      RowBox[{"Exp", "[", 
       RowBox[{"x", "^", "2"}], "]"}]}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"x", ",", "0", ",", "5"}], "}"}]}], "]"}], "-", "%"}]], "Input",
 ShowCellTags->True,
 CellChangeTimes->{{3.4465937732632732`*^9, 3.446593777613065*^9}},
 CellTags->"Cell 9.186"],

Cell[BoxData["9.611755835692293`*^-13"], "Output",
 CellChangeTimes->{3.4465937790606318`*^9},
 CellTags->"Cell 9.186"]
}, Open  ]],

Cell[TextData[{
 "Since this is a numerical method, it is important to be able to test the \
accuracy. This can be accomplished by asking for more precision in the \
integral, via the ",
 StyleBox["PrecisionGoal",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " option. This option sets the number of digits of precision of the integral \
relative to the magnitude of the integral. By varying ",
 StyleBox["PrecisionGoal",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " we can see the integral's value converge :"
}], "Text",
 CellTags->"i:103"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"InputForm", "[", 
    RowBox[{"NIntegrate", "[", 
     RowBox[{
      RowBox[{"Exp", "[", 
       RowBox[{"-", 
        RowBox[{"Exp", "[", 
         RowBox[{"x", "^", "2"}], "]"}]}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"x", ",", "0", ",", "5"}], "}"}], ",", 
      RowBox[{"PrecisionGoal", "\[Rule]", "n"}], ",", 
      RowBox[{"MaxRecursion", "\[Rule]", "50"}]}], "]"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"n", ",", "3", ",", "15"}], "}"}]}], "]"}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.187"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   InterpretationBox[
    StyleBox["0.2633001925783607",
     ShowStringCharacters->True,
     NumberMarks->True],
    InputForm[0.2633001925783607],
    AutoDelete->True,
    Editable->True], ",", 
   InterpretationBox[
    StyleBox["0.2633001925783607",
     ShowStringCharacters->True,
     NumberMarks->True],
    InputForm[0.2633001925783607],
    AutoDelete->True,
    Editable->True], ",", 
   InterpretationBox[
    StyleBox["0.26330018327243604",
     ShowStringCharacters->True,
     NumberMarks->True],
    InputForm[0.26330018327243604`],
    AutoDelete->True,
    Editable->True], ",", 
   InterpretationBox[
    StyleBox["0.26330018327243604",
     ShowStringCharacters->True,
     NumberMarks->True],
    InputForm[0.26330018327243604`],
    AutoDelete->True,
    Editable->True], ",", 
   InterpretationBox[
    StyleBox["0.26330018327200766",
     ShowStringCharacters->True,
     NumberMarks->True],
    InputForm[0.26330018327200766`],
    AutoDelete->True,
    Editable->True], ",", 
   InterpretationBox[
    StyleBox["0.26330018327201044",
     ShowStringCharacters->True,
     NumberMarks->True],
    InputForm[0.26330018327201044`],
    AutoDelete->True,
    Editable->True], ",", 
   InterpretationBox[
    StyleBox["0.26330018327201044",
     ShowStringCharacters->True,
     NumberMarks->True],
    InputForm[0.26330018327201044`],
    AutoDelete->True,
    Editable->True], ",", 
   InterpretationBox[
    StyleBox["0.26330018327201044",
     ShowStringCharacters->True,
     NumberMarks->True],
    InputForm[0.26330018327201044`],
    AutoDelete->True,
    Editable->True], ",", 
   InterpretationBox[
    StyleBox["0.26330018327201044",
     ShowStringCharacters->True,
     NumberMarks->True],
    InputForm[0.26330018327201044`],
    AutoDelete->True,
    Editable->True], ",", 
   InterpretationBox[
    StyleBox["0.26330018327201044",
     ShowStringCharacters->True,
     NumberMarks->True],
    InputForm[0.26330018327201044`],
    AutoDelete->True,
    Editable->True], ",", 
   InterpretationBox[
    StyleBox["0.26330018327201027",
     ShowStringCharacters->True,
     NumberMarks->True],
    InputForm[0.26330018327201027`],
    AutoDelete->True,
    Editable->True], ",", 
   InterpretationBox[
    StyleBox["0.26330018327201027",
     ShowStringCharacters->True,
     NumberMarks->True],
    InputForm[0.26330018327201027`],
    AutoDelete->True,
    Editable->True], ",", 
   InterpretationBox[
    StyleBox["0.26330018327201027",
     ShowStringCharacters->True,
     NumberMarks->True],
    InputForm[0.26330018327201027`],
    AutoDelete->True,
    Editable->True]}], "}"}]], "Output",
 CellChangeTimes->{3.446593813638997*^9},
 CellTags->"Cell 9.187"]
}, Open  ]],

Cell[TextData[{
 "Here the ",
 StyleBox["InputForm",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 "  (see Sec. ",
 ButtonBox["9.2.6",
  BaseStyle->"Hyperlink",
  ButtonData:>"c:9"],
 ")  is displayed in order to view the full precision of the numbers. Note \
that the integral's value is often of higher precision that what was \
requested. The option ",
 StyleBox["MaxRecursion ",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 "has  been set to 50 so that a sufficient number of bisections of the \
interval ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{"0", ",", "5"}], ")"}], TraditionalForm]]],
 " can be taken in order to achieve the requested accuracy. The  default \
setting for ",
 StyleBox["MaxRecursion",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " is 7 and for ",
 StyleBox["PrecisionGoal",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " it is ",
 StyleBox["WorkingPrecision/2",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ". Just as for the ",
 StyleBox["FindRoot",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " command , the default value of ",
 StyleBox["WorkingPrecision",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " is ",
 StyleBox["$MachinePrecision",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ". If even higher precision is required, you can increase the value of ",
 StyleBox["WorkingPrecision",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ", as we did previously when working with ",
 StyleBox["FindRoot",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " (see Cell ",
 ButtonBox["9.175",
  BaseStyle->"Hyperlink",
  ButtonData->"Cell 9.175"],
 ").Thus, numerical integrals can be found to arbitrarily high accuracy."
}], "Text",
 CellChangeTimes->{
  3.446593866862421*^9, {3.45892716058357*^9, 3.4589272471070747`*^9}, {
   3.458927302545487*^9, 3.45892735846132*^9}, {3.458927423366474*^9, 
   3.458927423383019*^9}, {3.4589275019687*^9, 3.458927527977386*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["9.11.3 Interpolation", "Subsubtitle",
 CellTags->{"i:92", "c:63"}],

Cell[TextData[{
 "\tGiven a list of ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{"x", ",", "y"}], ")"}], TraditionalForm]]],
 " data, it is often useful to be able to define a function ",
 Cell[BoxData[
  FormBox[
   RowBox[{"f", "(", "x", ")"}], TraditionalForm]]],
 " that goes through each point ",
 Cell[BoxData[
  FormBox[
   RowBox[{" ", 
    FormBox[
     RowBox[{"(", 
      RowBox[{"x", ",", "y"}], ")"}],
     TraditionalForm]}], TraditionalForm]]],
 " in a fashion that is as smooth as possible. One can then treat this \
function like any other function in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ", taking its derivative or finding its zeros, for example."
}], "Text"],

Cell[TextData[{
 "\tTo create this function from a data set, use the ",
 StyleBox["Interpolation",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " command. As an example, we will first create some ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{"x", ",", "y"}], ")"}], TraditionalForm]]],
 " data, then apply ",
 StyleBox["Interpolation",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " to the data. The data will be points taken from the function ",
 Cell[BoxData[
  FormBox[
   RowBox[{"y", "=", 
    SuperscriptBox["x", "5"]}], TraditionalForm]]],
 " on ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"-", "1"}], "<", "x", "<", "1"}], TraditionalForm]]],
 ":"
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"x", ",", 
       RowBox[{"x", "^", "5"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", 
       RowBox[{"-", "1"}], ",", "1", ",", "0.05"}], "}"}]}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{"f", "=", 
  RowBox[{"Interpolation", "[", "data", "]"}]}]}], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.188"],

Cell[BoxData[
 TagBox[
  RowBox[{"InterpolatingFunction", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "1.`"}], ",", "1.`"}], "}"}], "}"}], ",", "\<\"<>\"\>"}], 
   "]"}],
  False,
  Editable->False]], "Output",
 CellTags->"Cell 9.188"]
}, Open  ]],

Cell[TextData[{
 "The result of the interpolation is something called an",
 StyleBox[" InterpolatingFunction",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ", which we assigned to the variable ",
 Cell[BoxData[
  FormBox["f", TraditionalForm]]],
 ".  The first argument of this ",
 StyleBox["InterpolatingFunction",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " is ",
 StyleBox["{{-1.,1.}}",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ". This is the range of ",
 Cell[BoxData[
  FormBox["x", TraditionalForm]]],
 " values over which the function is defined (in this case from -1 to 1 , \
because this was the range of the data). The second argument ",
 StyleBox["<>",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " denotes an argument that is hidden from view; it is a long list of numbers \
used to define this function."
}], "Text",
 CellChangeTimes->{{3.44659394506846*^9, 3.4465940220249853`*^9}},
 CellTags->"i:100"],

Cell[TextData[{
 "\tHowever, there is no argument in the ",
 StyleBox["InterpolatingFunction",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " that allows you to evaluate the function at a given value of ",
 StyleBox["x",
  FontSlant->"Italic"],
 ". This type of object is called a ",
 StyleBox["pure function",
  FontSlant->"Italic"],
 " in the nomenclature of ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ". To use it,  simply add an argument to it. In other words,  ",
 StyleBox["f",
  FontSlant->"Italic"],
 " is a function (a pure function), and ",
 Cell[BoxData[
  FormBox[
   RowBox[{"f", "(", "x", ")"}], TraditionalForm]]],
 " is the value of that function at position",
 Cell[BoxData[
  FormBox[
   RowBox[{" ", "x"}], TraditionalForm]]],
 ":"
}], "Text",
 CellChangeTimes->{{3.4465939340940647`*^9, 3.446593934368888*^9}, {
  3.4465940440775013`*^9, 3.446594071660634*^9}},
 CellTags->"i:101"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"f", "[", "0.7", "]"}], "\[IndentingNewLine]", 
 RowBox[{"f", "[", 
  RowBox[{"-", "0.3"}], "]"}]}], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.189"],

Cell[BoxData["0.16806999999999994`"], "Output",
 CellTags->"Cell 9.189"],

Cell[BoxData[
 RowBox[{"-", "0.0024299999999999994`"}]], "Output",
 CellTags->"Cell 9.189"]
}, Open  ]],

Cell[TextData[{
 "You can plot ",
 Cell[BoxData[
  FormBox[
   RowBox[{"f", "(", "x", ")"}], TraditionalForm]]],
 " (Cell ",
 ButtonBox["9.191",
  BaseStyle->"Hyperlink",
  ButtonData:>"Cell 9.191"],
 "), or take its derivative (Cell ",
 ButtonBox["9.192",
  BaseStyle->"Hyperlink",
  ButtonData:>"Cell 9.192"],
 "), just as you would any other function (in its range of validity)"
}], "Text",
 CellChangeTimes->{{3.44659391916397*^9, 3.446593924470907*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"f", "[", "x", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "1"}], ",", "1"}], "}"}]}], "]"}]], "Input",
 ShowCellTags->True,
 CellChangeTimes->{3.4465940839241037`*^9},
 CellTags->"Cell 9.190"],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {Hue[0.67, 0.6, 0.6], LineBox[CompressedData["
1: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
YfgfS9Iuqw==
     "]]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  AxesOrigin->{0, 0},
  PlotRange->{{-1, 1}, {-0.4596379611684628, 0.451461416141835}},
  PlotRangeClipping->True,
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02]}]], "Output",
 CellTags->"Cell 9.190"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"f", "'"}], "[", "0.2", "]"}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.191"],

Cell[BoxData["0.008225000000000001`"], "Output",
 CellChangeTimes->{3.4465940922774973`*^9},
 CellTags->"Cell 9.192"]
}, Open  ]],

Cell[TextData[{
 "\tThe interpolating function is guaranteed to equal the original data at \
the given data points, and connects the data points \"as smoothly as possible\
\".  In more detail, what this means is that the interpolating function \
consists of a set of cubic polynomials. Each polynomial in the set is applied \
only between two corresponding consecutive data points.  The polynomials are \
\"spliced together\" at each data point  to form a function that  is \
continuous and has continuous first and second derivatives. (The  hidden \
argument in the interpolating function is a list of the coefficients in this \
set of polynomials.) This type of interpolation is commonly called a ",
 StyleBox["cubic spline ",
  FontSlant->"Italic"],
 "interpolation. General spline fits can allow the fitting function to be \
multi-valued (i.e. several values of ",
 Cell[BoxData[
  FormBox["y", TraditionalForm]]],
 " are possible for a given value of ",
 Cell[BoxData[
  FormBox["x", TraditionalForm]]],
 ", as in a circle), but the implementation used in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "  assumes a single-valued function. For this reason, the data must be such \
that no two ",
 Cell[BoxData[
  FormBox["x", TraditionalForm]]],
 " values are the same. For fitting multi-valued data, use ",
 StyleBox["SplineFit",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ", available in the add-on package ",
 StyleBox["Splines",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ". Here is an example:"
}], "Text",
 CellTags->"i:127"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"<<", "Splines`"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"multivalueddata", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0"}], "}"}]}], "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"fm", " ", "=", " ", 
   RowBox[{"SplineFit", "[", 
    RowBox[{"multivalueddata", ",", "Cubic"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ParametricPlot", "[", 
   RowBox[{
    RowBox[{"fm", "[", "s", "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"s", ",", "0", ",", "5"}], "}"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ListPlot", "[", 
   RowBox[{"multivalueddata", ",", 
    RowBox[{"PlotMarkers", "\[Rule]", "Automatic"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Show", "[", 
  RowBox[{"%%", ",", "%"}], "]"}]}], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.92"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    {Hue[0.67, 0.6, 0.6], LineBox[CompressedData["
1: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
nhcXaCzyubUlwM6OILJPa10RnWQh99n5/varBGG9odJZZZEF9/D7m2fVCaJF
89JVQ6FF8Lm+cZZaSRAqH5/GuBxahAGHRre2XxGRm98ymHxsEXZo3GvrUkS8
42fHN6kuwsN5XvzEtSLCo63FcZP2IgJ5NGpnjxURvkfVKy+ZL2KIrTaSPvqF
qNa9hIvXF1FiE697vuELYeIVzqFrQ44rHbmaUvyFOPqp84Kc0yLObDX0ux74
hXiqUPj7tc8iMiJ9xAUOkXw0ZsulF4vArUpO6S1fiITj69+Jv1nEPY6B8Mnl
XwithPHO5+8XIZE0yfG6oZB4uCREZU3aIjydEyP67xQSP3e8odbVLEJhk2oo
9U0BweyyGJVrWITQKa/EMKcCQkDfb8i9ZRGmnP3PNxsVEJ9/rlXl612EzZUz
JTskCog8QcuuyslF+OweU9wYnU9Y+GktHZkl7z+rNXX8cT7xM4xRw8laxKWb
Ni/5zPKJ3IFgbTEeNp4VKl0J3pRPhB8tU6avYeO8skrUk5A8ItmydWWNKBsP
fGts2xzzCF1OQZMUcTYIpdKd7bp5hCGb21xrOxusHnHjKr484sdG69v7FNhw
7GlZuOOSS/jvWcnvp8NGVq6evY3qZyJyy5htvi4bTCVOy0KJz0RCvSpntwEb
pa2a9/JncojC47fCxC+z8XR7hhI1MYdgi5xQhBUbJ395vxnlzyFKttoGHLRm
o+Lx8JKPvdlEuemxqR232bjo2cK5ujCbyNxeVzVhz4baKrO/vTeyCflWB6OD
D9loVSs/9b74E8HhoPxu6jEbDN/rz3KCPhEXk6pKUp6y8UrzWZGr9SeiIc26
ZPlzcr2q48eXrvlEcArxsKzestG87CK/iFkWoa2plfz7AxuRE/7Gk8MZhIau
nP/6RDbSb6nLxOdnEBZ10mtMk9mwyr9awvbJIKSXveGuSWfDxaTgcYJUBjG1
PmHcJI+N1KHkz9Um6cRKnqX+tgVsyK5QUS2USScCmxKS731ho1hHf0koI40Q
nGu+7lDMxoquhnDq5jSiQdjhvOB3NqoiuHe/updCWOm9i+j7wcblninTIv4U
Imtkt3pmJRunXe5U7o9KJqLbiIz9VWwIl9GLFkqTiMoKXqu2ejZs+dPo/TyJ
hGKVyhmHRjYEBB606L5NICgRa+9yN7NxLCerbsnWBCL3VLj1ijZSH3L6poeO
fCRyK8tS8rvZWNI1ntx0NZ5Q9XZ4saeXjaRtvjuv98QR4pVKu8P62PhkvOuF
iFkcIW3vGmg4SObzdaNQkxGFCH57UDd+iI2998P2jNTGEiVFj3JHh9ng3f9N
XkInlqhMOmJjPMbG0dnCrvbjMUSX3FCqN42NIbqS/63caEJKMdLzI52NzW8f
i63fE018No5o+jXOxkBh658fYlHEwcPbz9RMsPHEWIUetiGSuCguq/zrHxt5
OrIzTZwRBNP2iGf8FBvia0Z2zFWEEelRD6ufTpP7Kd52ujEhlHAyILyMZtio
k/cUH3n2jhgbC4ncPstGjF5x2N5rIUTG90SRfpIfCT8v+3AimDBWf9MfPkfW
x/RVsM6GIMLvO4P3zDypx20+q6T+vSWGzz094LvAxtxPwcEr4a8JXdGZfeJM
Uo/Pl/5XbPuKyDC9cDuW5BLnrKNaxwOIGG+17s0sNq5yBEYu2/iCoNJNfd6S
bLd1YerbZ1/i44yKySLJJXtZzk1aPsTcov8lk0U2EnjYmw93ehHalh2un0iW
eHB1dOD2U+LE87o8DjYburdf1XXOPSbsfq1crUoybv9NO8n1kLj/YpeLK8ly
5jFt53nvE7OypfQEkqNunZeZXO5IeC13u/2b5KGT+S9FOO8QXx9N0AdJFoIk
t1OPJXFqquT23P+4LKrd0fo8kVXm18cmOYdlIKr8UorwYK08yyT5p6Z8y/e4
c4gf5cigkWy3hTugTM4Cm5tKBBpIdpUOcosIvoXzFjnW2SS/GnonsHe5A1Jl
lKt8SK4Q6bjG0nTBs5rc4/ok0+L43PYEu0N99nnJGpIFzqqf6Jh8DH3ltZd+
kvHLetP1q6OfYqVK3qp7JHcws4Ru6nqjOb6xbz3JKQd+v4lb+hwS/HXdWWQ+
N+Y4jT8s8oOi0Gp+VZK/cPX/N+XyEgFGI9cqyPosP5v495H4K/g8qZhVJfmc
Dyukyu01vOV4v2WT9XWjL2cPdL6BhO+R3Q/I+r/QzOuwTA6CuzujuorUB6ss
yL5iTQjsHF9+20DyFafw5mH3d4ihCxa9JfW25kmw/vUL78EbVX9beJINw5JE
2SWroyF56vjfTaR+p794PUn7Fg2LTkv+baS+8355yco8ikFmu6rgSgYbGWu/
/Hz5Lxbm1J5/TiOkvvO8TSZ74nEjtczvMNlfQRW8bstjPsDUZcu2KbIfm76q
+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
7l+G1t12fP3XRfB/CijdqA==
      "]]}}, 
   GraphicsComplexBox[{{0., 0.}, {1., 0.}, {2., 0.}, {1., 1.}, {0., 0.}, {0., 
    0.}, {1., 0.}, {2., 0.}, {1., 1.}, {0., 0.}}, {
     {Hue[0.67, 0.6, 0.6], InsetBox[
       StyleBox["\<\"\[FilledCircle]\"\>",
        StripOnInput->False,
        FontSize->8.96], 6], InsetBox[
       StyleBox["\<\"\[FilledCircle]\"\>",
        StripOnInput->False,
        FontSize->8.96], 7], InsetBox[
       StyleBox["\<\"\[FilledCircle]\"\>",
        StripOnInput->False,
        FontSize->8.96], 8], InsetBox[
       StyleBox["\<\"\[FilledCircle]\"\>",
        StripOnInput->False,
        FontSize->8.96], 9], InsetBox[
       StyleBox["\<\"\[FilledCircle]\"\>",
        StripOnInput->False,
        FontSize->8.96], 10]}, {}}]},
  Axes->True,
  AxesOrigin->{0, 0},
  PlotRange->{{0., 1.999999901465668}, {-0.12874752228689207`, 
   1.006431836188403}},
  PlotRangeClipping->True,
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02]}]], "Output",
 CellTags->"Cell 9.92"]
}, Open  ]],

Cell[TextData[{
 "\tIn a cubic spline interpolation the third derivative will not be \
continuous in general, as you can see in Cell ",
 ButtonBox["9.193",
  BaseStyle->"Hyperlink",
  ButtonData:>"Cell 9.193"],
 "."
}], "Text",
 CellChangeTimes->{{3.448632609566677*^9, 3.448632610070764*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"Evaluate", "[", 
    RowBox[{
     RowBox[{"f", "'''"}], "[", "x", "]"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
   RowBox[{"PlotPoints", "\[Rule]", "300"}]}], "]"}]], "Input",
 ShowCellTags->True,
 CellChangeTimes->{{3.446594188634753*^9, 3.446594199669467*^9}},
 CellTags->"Cell 9.193"],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {Hue[0.67, 0.6, 0.6], LineBox[CompressedData["
1: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
i65398J/n88g/P8AY0azCg==
     "]]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  AxesOrigin->{0, 0},
  PlotRange->{{-1, 1}, {0., 51.37500000000604}},
  PlotRangeClipping->True,
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02]}]], "Output",
 CellTags->"Cell 9.193"]
}, Open  ]],

Cell[TextData[{
 "You can ask that higher-order (or lower-order) polynomials be used in the \
fitting, by choosing the option ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    RowBox[{
     StyleBox[
      RowBox[{
       StyleBox["I",
        FontSlant->"Plain"], 
       StyleBox["nterpolationOrder",
        FontFamily->"Courier"]}]], 
     StyleBox["\[Rule]",
      FontFamily->"Courier"], 
     StyleBox["  ",
      FontFamily->"Courier"], 
     StyleBox["n",
      FontFamily->"Courier",
      FontSlant->"Plain"]}],
    FontWeight->"Bold"], TraditionalForm]]],
 ", ",
 StyleBox[" ",
  FontWeight->"Bold"],
 "where ",
 StyleBox["n",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " is the order of the polynomials. This is necessary if  third or \
higher-order derivatives of the interpolated data are required. An example is \
given in Cell ",
 ButtonBox["9.194",
  BaseStyle->"Hyperlink",
  ButtonData:>"Cell 9.194"],
 "."
}], "Text",
 CellChangeTimes->{{3.448632614463644*^9, 3.4486326148275833`*^9}, {
  3.458928181143705*^9, 3.458928189423283*^9}},
 CellTags->"i:93"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"f", "=", 
   RowBox[{"Interpolation", "[", 
    RowBox[{"data", ",", 
     RowBox[{"InterpolationOrder", "\[Rule]", "5"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"f", "'''"}], "[", "x", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "1"}], ",", "1"}], "}"}]}], "]"}]}], "Input",
 ShowCellTags->True,
 CellChangeTimes->{3.446594268618338*^9},
 CellTags->"Cell 9.194"],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {Hue[0.67, 0.6, 0.6], LineBox[CompressedData["
1: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

     "]]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  AxesOrigin->{0, 0},
  PlotRange->{{-1, 1}, {0., 59.999995102091845`}},
  PlotRangeClipping->True,
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02]}]], "Output",
 CellTags->"Cell 9.194"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["9.11.4 Fitting", "Subsubtitle",
 CellTags->{"i:95", "c:64"}],

Cell[TextData[{
 "It is sometimes necessary to find a function that fits given data as \
closely as possible. This can be accomplished with ",
 StyleBox["Mathematic",
  FontSlant->"Italic"],
 "a's ",
 StyleBox["Fit",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " function. The ",
 StyleBox["Fit ",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 "function will fit a particular functional form to the data. The functional \
form is taken from  a list of functions provided by the user, such as ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    RowBox[{"{", 
     RowBox[{"1", ",", 
      StyleBox["x",
       FontSlant->"Plain"], ",", 
      SuperscriptBox[
       StyleBox["x",
        FontSlant->"Plain"], "2"], ",", 
      SuperscriptBox[
       StyleBox["x",
        FontSlant->"Plain"], "3"]}], "}"}],
    FontFamily->"Courier",
    FontWeight->"Bold"], TraditionalForm]]],
 ". ",
 StyleBox["Fit",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " takes the data itself as its first argument, and this list of functions as \
the second argument. The third argument is the variable(s) used in the fit. \
In other words,  the proper syntax is ",
 StyleBox["Fit[",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 StyleBox["data",
  FontSlant->"Italic"],
 StyleBox[",",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 StyleBox["function list",
  FontSlant->"Italic"],
 StyleBox[",",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 StyleBox["vars",
  FontSlant->"Italic"],
 StyleBox["]",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ". ",
 StyleBox["Fit",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " then finds the best linear combination of functions appearing in ",
 StyleBox["function list ",
  FontSlant->"Italic"],
 "in order to fit the data.  For example, ",
 StyleBox["Fit[data,",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"1", ",", 
     StyleBox["x",
      FontSlant->"Plain"], ",", 
     SuperscriptBox[
      StyleBox["x",
       FontSlant->"Plain"], "2"], ",", 
     SuperscriptBox[
      StyleBox["x",
       FontSlant->"Plain"], "3"]}], "}"}], TraditionalForm]],
  FontFamily->"Courier",
  FontWeight->"Bold"],
 StyleBox[",x] ",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 "tries fits of the form ",
 Cell[BoxData[
  FormBox[
   RowBox[{"a", " ", "+", " ", 
    RowBox[{"b", " ", "x"}], " ", "+", " ", 
    RowBox[{"c", " ", 
     SuperscriptBox["x", 
      RowBox[{"2", " "}]]}], " ", "+", " ", 
    RowBox[{"d", " ", 
     SuperscriptBox["x", "3"], " "}]}], TraditionalForm]]],
 ". Here\[CloseCurlyQuote]s an example using the data created in Cell ",
 ButtonBox["9.188",
  BaseStyle->"Hyperlink",
  ButtonData:>"Cell 9.188"],
 ":"
}], "Text",
 CellChangeTimes->{{3.458928285159597*^9, 3.4589282866899223`*^9}, 
   3.526044496708766*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Fit", "[", 
  RowBox[{"data", ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "x", ",", 
     RowBox[{"x", "^", "2"}], ",", 
     RowBox[{"x", "^", "3"}], ",", 
     RowBox[{"x", "^", "4"}], ",", 
     RowBox[{"x", "^", "5"}]}], "}"}], ",", "x"}], "]"}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.195"],

Cell[BoxData[
 RowBox[{
  RowBox[{"-", "9.536323846008148`*^-17"}], "-", 
  RowBox[{"4.103102015306151`*^-16", " ", "x"}], "+", 
  RowBox[{"6.649039563991727`*^-16", " ", 
   SuperscriptBox["x", "2"]}], "+", 
  RowBox[{"0.`", " ", 
   SuperscriptBox["x", "3"]}], "-", 
  RowBox[{"7.566851663667273`*^-16", " ", 
   SuperscriptBox["x", "4"]}], "+", 
  RowBox[{"1.0000000000000002`", " ", 
   SuperscriptBox["x", "5"]}]}]], "Output",
 CellChangeTimes->{3.446594292813136*^9},
 CellTags->"Cell 9.195"]
}, Open  ]],

Cell[TextData[{
 StyleBox["Fit ",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 "has done a very good job reproducing the original function, ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["x", "5"], TraditionalForm]]],
 ", from the data set. All the terms except for the ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["x", "5"], TraditionalForm]]],
 " term have negligibly small coefficients."
}], "Text"],

Cell[TextData[{
 "\tFits to functional forms that do not involve simple linear combinations \
of functions can also be performed. The function ",
 StyleBox["FindFit",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 "  can make such fits: see the help browser for more information."
}], "Text",
 CellChangeTimes->{{3.448633007285268*^9, 3.448633015484573*^9}},
 CellTags->"i:132"],

Cell[TextData[Cell[BoxData[GridBox[{
   {
    RowBox[{
     StyleBox[
      RowBox[{
      "Table", "9.23", " ", "Numerical", " ", "Operations", " ", "on", " ", 
       "Data", " ", "Sets"}],
      FontSize->9], "\[IndentingNewLine]"}]},
   {
    StyleBox[GridBox[{
       {
        RowBox[{
         StyleBox["Interpolation",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         StyleBox["[",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         StyleBox["data",
          FontSlant->"Italic"], 
         StyleBox["]",
          FontFamily->"Courier",
          FontWeight->"Bold"]}], 
        RowBox[{
         RowBox[{
         "Create", " ", "a", " ", "numerical", " ", "interpolating", " ", 
          "function", " ", "that"}], "\[IndentingNewLine]", 
         RowBox[{
         "interpolates", " ", "a", " ", "data", " ", "set", " ", "by", " ", 
          "trying", " ", "to", " ", "smoothly", " ", "go"}], " ", 
         "\[IndentingNewLine]", 
         RowBox[{"through", " ", "each", " ", "data", " ", "point"}]}]},
       {
        StyleBox[
         RowBox[{
          RowBox[{"InterpolatingFunction", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"xmin", ",", "xmax"}], "}"}], ",", "<>"}], "]"}], "[", 
          "x", "]"}],
         FontFamily->"Courier",
         FontWeight->"Bold"], 
        RowBox[{
         RowBox[{
         "Evaluate", " ", "an", " ", "interpolating", " ", "function", " ", 
          "at"}], "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"position", " ", 
           StyleBox["x",
            FontSlant->"Italic"]}], ",", 
          RowBox[{
           StyleBox["xmin",
            FontSlant->"Italic"], 
           StyleBox[" ",
            FontSlant->"Italic"], "<", 
           StyleBox["x",
            FontSlant->"Italic"], " ", "<", 
           StyleBox["xmax",
            FontSlant->"Italic"]}]}]}]},
       {
        RowBox[{
         StyleBox["Fit",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         StyleBox["[",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         RowBox[{
          StyleBox["data",
           FontSlant->"Italic"], 
          StyleBox[",",
           FontFamily->"Courier",
           FontWeight->"Bold"], 
          StyleBox[
           RowBox[{"function", " ", "list"}],
           FontSlant->"Italic"], 
          StyleBox[",",
           FontFamily->"Courier",
           FontWeight->"Bold"], 
          StyleBox["vars",
           FontSlant->"Italic"]}], 
         StyleBox["]",
          FontFamily->"Courier",
          FontWeight->"Bold"]}], 
        RowBox[{
         RowBox[{
         "Fit", " ", "data", " ", "with", " ", "a", " ", "linear", " ", 
          "combination"}], "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"of", " ", "functions"}], ",", 
          RowBox[{"each", " ", "function", " ", "taken"}]}], 
         "\[IndentingNewLine]", 
         RowBox[{"from", " ", 
          StyleBox["function",
           FontSlant->"Italic"], 
          StyleBox[" ",
           FontSlant->"Italic"], 
          StyleBox["list",
           FontSlant->"Italic"], 
          StyleBox["     ",
           FontSlant->"Italic"]}]}]}
      },
      GridBoxAlignment->{
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[1.26]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}],
     FontFamily->"Times"]}
  }]]]], "Text",
 CellFrame->True,
 Background->GrayLevel[0.849989]],

Cell[CellGroupData[{

Cell["Reading Data from External Files", "Section",
 CellTags->"c:82"],

Cell[TextData[{
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " has several intrinsic functions that can be used to import data.  First, \
you must place a file containing the data in one of the directories on your \
computer where ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " looks for files. The list of these directories is held in the variable ",
 StyleBox["$Path",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ". The current working directory is a member of this list, and it can be \
determined using the command "
}], "Text",
 CellTags->"i:128"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Directory", "[", "]"}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.196"],

Cell[BoxData["\<\"/Users/dubin\"\>"], "Output",
 CellChangeTimes->{3.446594310956859*^9},
 CellTags->"Cell 9.196"]
}, Open  ]],

Cell[TextData[{
 "(In ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " versions previous to 4.1, the  directory is specified using colons to \
denote subdirectories rather than the above backslash notation.) You can \
change the current working directory using the ",
 StyleBox["SetDirectory",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " command.  For instance, to access files on my computer in a subdirectory \
named ",
 StyleBox["Documents",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ", the command is"
}], "Text",
 CellTags->"i:129"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SetDirectory", "[", "\"\</Users/dubin/Documents\>\"", 
  "]"}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.197"],

Cell[BoxData["\<\"/Users/dubin/Documents\"\>"], "Output",
 CellChangeTimes->{3.446594322442712*^9},
 CellTags->"Cell 9.197"]
}, Open  ]],

Cell[TextData[{
 "Within this directory, there is a file named ",
 StyleBox["datafile.dat",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " that contains a ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "  list of the form ",
 StyleBox["data={{1.,3.},{Exp[-4x],5.*10^2},...};",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ". (This file can also be found on the CD that came with the book.) The data \
in this file is read with the command"
}], "Text"],

Cell[BoxData[
 RowBox[{"Get", "[", "\"\<datafile.dat\>\"", "]"}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.198"],

Cell[TextData[{
 "(This command is equivalent to ",
 StyleBox["<<datafile.dat",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ".) The data within the file has now been defined:"
}], "Text",
 CellTags->"i:130"],

Cell[CellGroupData[{

Cell[BoxData["data"], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.199"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1.`", ",", "3.`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     SuperscriptBox["\[ExponentialE]", 
      RowBox[{
       RowBox[{"-", "4"}], " ", "x"}]], ",", "500.`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2.`", ",", 
     RowBox[{
      RowBox[{"2", " ", "x"}], "+", 
      RowBox[{"Sin", "[", 
       RowBox[{"3", " ", "y"}], "]"}]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"9.`", ",", "12.`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"6.`", ",", "4.`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3.`", ",", "2.`"}], "}"}]}], "}"}]], "Output"]
}, Open  ]],

Cell[TextData[{
 "Note that the data can be in the form of general ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " expressions as well as numbers. The ",
 StyleBox["Get",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " command can be used to read in any definitions contained in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " notebooks, and in fact this is the  method used to load add-on packages \
(see Sec. ",
 ButtonBox["9.6.8",
  BaseStyle->"Hyperlink",
  ButtonData:>"c:34"],
 ")."
}], "Text",
 CellTags->"i:131"],

Cell[TextData[{
 "\tIt is not always convenient to format data in terms of a ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " list. ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " can also read data in many other formats using the ",
 StyleBox["Import",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " command. For example, in order to read a simple tab- or space-delimited \
set of data of the form\n\t\t-2.\t3.\t1.\n\t\t4.\t6.\t-5.2\n\t\t2.\t-2.e-5\t\
6.e12\nthat is contained in a file named ",
 StyleBox["tabdata.dat",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ", the syntax is"
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Import", "[", 
  RowBox[{"\"\<tabdata.dat\>\"", ",", " ", "\"\<Table\>\""}], "]"}]], "Input",\

 ShowCellTags->True,
 CellTags->"Cell 9.200"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "2.`"}], ",", "3.`", ",", "1.`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4.`", ",", "6.`", ",", 
     RowBox[{"-", "5.2`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2.`", ",", 
     RowBox[{"-", "0.00002`"}], ",", "6.`*^12"}], "}"}]}], "}"}]], "Output"]
}, Open  ]],

Cell[TextData[{
 "Here, ",
 StyleBox["\"Table\"",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " specifies the format of the data.  Other possible formats include standard \
binary, sound, and even image data formats: see ",
 ButtonBox["Cell 2.68",
  BaseStyle->"Hyperlink",
  ButtonData:>{"Chapter2.nb", "Cell 2.68"}],
 " in Chapter 2 for an example involving a sound file. Allowed formats depend \
on the computer system. This information can be found in the ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "  documentation. "
}], "Text",
 CellChangeTimes->{{3.446594419041925*^9, 3.446594422354376*^9}}]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Exercises for Sec. 9.11", "Subsubtitle",
 CellTags->{"Ex. 9.11", "c:65"}],

Cell[TextData[{
 StyleBox["(1)",
  FontWeight->"Bold"],
 " Solve the following equation numerically, finding all real roots:  ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{
      SuperscriptBox["log", "2"], "x"}], "+", "2"}], "=", "x"}], 
   TraditionalForm]]],
 ". (Hint: Use a plot to pick out locations of the roots)."
}], "Text"],

Cell[TextData[{
 StyleBox["(2)",
  FontWeight->"Bold"],
 " Find numerical values for all complex solutions to the equation ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["\[ExponentialE]", 
     RowBox[{
      RowBox[{"-", "3"}], " ", "z"}]], "=", 
    RowBox[{"z", "+", "2"}]}], TraditionalForm]]],
 "  in the range ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{"-", "4"}], "<", "x", "<", "4"}], ",", " ", 
    RowBox[{
     RowBox[{"-", "4"}], "<", "y", "<", "4"}]}], TraditionalForm]]],
 ",  where ",
 Cell[BoxData[
  FormBox[
   RowBox[{"z", "=", 
    RowBox[{"x", "+", 
     RowBox[{"\[ImaginaryI]", " ", "y"}]}]}], TraditionalForm]]],
 ". (Hint: Use contour plots to plot the real and imaginary parts of the \
equation vs. ",
 Cell[BoxData[
  FormBox["x", TraditionalForm]]],
 " and ",
 Cell[BoxData[
  FormBox["y", TraditionalForm]]],
 " to find approximate locations of roots.)"
}], "Text"],

Cell[TextData[{
 StyleBox["(3)",
  FontWeight->"Bold"],
 " Find numerical values to the requested accuracy for the following definite \
integrals. "
}], "Text",
 CellChangeTimes->{{3.458927831246358*^9, 3.458927856077497*^9}}],

Cell[TextData[{
 StyleBox["(a)",
  FontWeight->"Bold"],
 " ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubsuperscriptBox["\[Integral]", "0", 
     RowBox[{"2", " ", "\[Pi]"}]], 
    RowBox[{
     RowBox[{"sin", "(", 
      RowBox[{
       SqrtBox["x"], " ", 
       RowBox[{"cos", "(", "x", ")"}]}], ")"}], 
     RowBox[{"\[DifferentialD]", "x"}]}]}], TraditionalForm]]],
 ", to 6 significant figures"
}], "Text",
 CellChangeTimes->{{3.458927858193716*^9, 3.458927877845104*^9}}],

Cell[TextData[{
 StyleBox["(b)",
  FontWeight->"Bold"],
 "   ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubsuperscriptBox["\[Integral]", "0", "\[Infinity]"], 
    RowBox[{
     FractionBox[
      SuperscriptBox["\[ExponentialE]", 
       RowBox[{"-", "x"}]], 
      SqrtBox[
       RowBox[{"log", " ", "x"}]]], 
     RowBox[{"\[DifferentialD]", "x"}]}]}], TraditionalForm]]],
 ", to 11 significant figures."
}], "Text",
 CellChangeTimes->{{3.458927886667225*^9, 3.458927898941662*^9}}],

Cell[TextData[{
 StyleBox["(c)",
  FontWeight->"Bold"],
 "  ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubsuperscriptBox["\[Integral]", "0", 
     RowBox[{"2", " ", "\[Pi]"}]], 
    RowBox[{
     RowBox[{"sin", "(", 
      RowBox[{"cos", "(", 
       SuperscriptBox["x", "3"], ")"}], ")"}], 
     RowBox[{"\[DifferentialD]", "x"}]}]}], TraditionalForm]]],
 ", to 20 significant figures."
}], "Text",
 CellChangeTimes->{{3.458927905402873*^9, 3.458927914326441*^9}}],

Cell[TextData[{
 StyleBox["(4)",
  FontWeight->"Bold"],
 " The following table produces some data:"
}], "Text"],

Cell[BoxData[
 RowBox[{"data", " ", "=", " ", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"x", ",", 
      RowBox[{"f", "[", "x", "]"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"x", ",", "0", ",", "10", ",", ".01"}], "}"}]}], 
   "]"}]}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.201"],

Cell[TextData[{
 StyleBox["(a)",
  FontWeight->"Bold"],
 "For ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"f", "(", "x", ")"}], " ", "=", " ", 
    RowBox[{"sin", " ", "x"}]}], TraditionalForm]]],
 ", interpolate the data. Plot the difference between the resulting \
interpolating function and ",
 Cell[BoxData[
  FormBox[
   RowBox[{"sin", " ", "x"}], TraditionalForm]]],
 " on the interval ",
 Cell[BoxData[
  FormBox[
   RowBox[{"0", "<", "x", "<", "10"}], TraditionalForm]]],
 ". "
}], "Text"],

Cell[TextData[{
 StyleBox["(b)",
  FontWeight->"Bold"],
 "Repeat the problem for a more rapidly varying function, ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"f", "(", "x", ")"}], "=", " ", 
    RowBox[{"sin", "(", 
     RowBox[{"10", " ", "x"}], ")"}]}], TraditionalForm]]],
 ". What does one learn from this exercise?"
}], "Text"],

Cell[TextData[{
 StyleBox["(5)",
  FontWeight->"Bold"],
 " The following table produces some data with noise added:"
}], "Text"],

Cell[BoxData[
 StyleBox[
  RowBox[{"data", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       StyleBox["x",
        FontSlant->"Plain"], ",", 
       RowBox[{
        RowBox[{"Tanh", "[", 
         StyleBox["x",
          FontSlant->"Plain"], "]"}], " ", "+", " ", 
        RowBox[{"0.1", "*", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"Random", "[", "]"}], "-", "0.5"}], ")"}]}]}]}], "}"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{
       StyleBox["x",
        FontSlant->"Plain"], ",", 
       RowBox[{"-", "3"}], ",", "3", ",", "0.1"}], "}"}]}], "]"}]}],
  FontFamily->"Courier",
  FontWeight->"Bold"]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.202"],

Cell[TextData[{
 "(The ",
 Cell[BoxData[
  FormBox[
   RowBox[{"Random", "[", "]"}], TraditionalForm]],
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " function produces a pseudo-random number in the interval [0,1]. Other \
random number generators are ",
 StyleBox["RandomReal",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ", ",
 StyleBox["RandomInteger",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " and ",
 StyleBox["RandomComplex",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ".) Fit this data to a  sixth order polynomial, and plot the fitted function \
and the data on the range ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"-", "3"}], "<", "x", "<", "3"}], TraditionalForm]]],
 ". "
}], "Text",
 CellChangeTimes->{{3.446594495154353*^9, 3.44659451938787*^9}, 
   3.4465945721127462`*^9},
 CellTags->"i:97"],

Cell[TextData[{
 StyleBox["(6)",
  FontWeight->"Bold"],
 " In this exercise we will design our own numerical root finder using \
Newton's method. We will solve the equation ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{"f", "(", "x", ")"}], " ", "=", " ", "0"}], ","}], 
   TraditionalForm]]],
 " where ",
 Cell[BoxData[
  FormBox[
   RowBox[{"f", "(", "x", ")"}], TraditionalForm]]],
 " is some general function, depicted in Fig. ",
 ButtonBox["9.7",
  BaseStyle->"Hyperlink",
  ButtonData:>"Fig. 9.7"],
 ". We are given an initial guess, ",
 Cell[BoxData[
  FormBox[
   RowBox[{"x", "=", 
    RowBox[{
     SubscriptBox["x", "o"], "."}]}], TraditionalForm]]],
 " This is not a solution to the equation; instead, ",
 Cell[BoxData[
  FormBox["f", TraditionalForm]]],
 " takes on a value ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"f", "(", 
     SubscriptBox["x", "o"], ")"}], " ", "\[NotEqual]", " ", "0"}], 
   TraditionalForm]]],
 ". In Newton's method we obtain an improved estimate for the solution by \
replacing ",
 Cell[BoxData[
  FormBox[
   RowBox[{"f", "(", "x", ")"}], TraditionalForm]]],
 " by its Taylor expansion to linear order, about ",
 Cell[BoxData[
  FormBox[
   RowBox[{"x", " ", "=", " ", 
    SubscriptBox["x", "o"]}], TraditionalForm]]],
 ":"
}], "Text",
 CellTags->"i:124"],

Cell[TextData[{
 "\t",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"f", "(", "x", ")"}], " ", "\[TildeEqual]", " ", 
    RowBox[{
     RowBox[{"f", "(", 
      SubscriptBox["x", "o"], ")"}], " ", "+", " ", 
     RowBox[{
      RowBox[{
       SuperscriptBox["f", "\[Prime]"], "(", 
       SubscriptBox["x", "o"], ")"}], 
      RowBox[{"(", 
       RowBox[{"x", "-", 
        SubscriptBox["x", "o"]}], ")"}]}]}]}], TraditionalForm]]],
 ". "
}], "Text"],

Cell[TextData[{
 "Using this approximation, we can then solve the equation ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"f", "(", "x", ")"}], "=", "0"}], TraditionalForm]]],
 ", obtaining "
}], "Text"],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{"x", " ", "=", " ", 
    RowBox[{
     SubscriptBox["x", "o"], "-", 
     RowBox[{
      RowBox[{"f", "(", 
       SubscriptBox["x", "o"], ")"}], "/", 
      RowBox[{
       SuperscriptBox["f", "\[Prime]"], "(", 
       SubscriptBox["x", "o"], ")"}]}]}]}], TraditionalForm]]],
 ". "
}], "NE5",
 CellTags->"(9.11.2)"],

Cell[GraphicsData["CompressedBitmap", "\<\
eJztXX2UXVV1f7x5897MZPI5SSbki5mJSYAASaWASVAmgSYhEBCrXe3C1ZpF
U6TLCkJQDASeBSHFAJFQCCSEgoCgYFUQ7Ic6alu16uqq1q5W7T/Vf1pbsbSr
H0va6d33nn3uvvv+9n37vRH/4q715t577jm//b3Pueeee2fX7r3v3PM7u/de
dcXuse3X7r7mnVddcd3YtquvTYr6TqjVTvhp8nvPWI2Op2s1/pNur9CfcPIq
Hg/TbgkV1fpqU1NTtXa7ne6nqeyr9Gc2qEm1aKP9azVfq/lazddq/nxqbqCy
Fp216DxteKe74fz0tFGbnJxMC0O2S1Fu9aCck5FPDoeoKLuYZU6qnP7o7z4P
2Ja0rBHzLv0SzgZqGTQzGdPxDR7QHVSWFqVaqkct7fW03kVlddD6Gk/ry1RH
QhL0W9K8y4P4Nguxbmn+tzywvxbFbBbF3ONp/XbFFP20mJGf3R7EdwAxGxbi
r3sQf1OUEUKGlSNGvdHfyz2IV6oyiRgNy4i/6kG8SkmdxaaB+DYP4rsEIkst
EQue8hYP4tVUljpJ2uaXPW2uid4lbViQ5lIPznXAhnXLK3Z5EK8HGpc2LOhn
pwfxhgoeS4g7PIj7gJ9JxIIet3kQb6pALOnxAg/izRXRVZJ6iwexDTzXRDzP
g5j2Z7VmQWragi/6gT6YlvWXgNrccb/Jg3I7EJCNUErimzyIBwJfEpEFTFE2
e1DuNKSL/dRGD8pBgBKDnq6d40G5q5NEZ3tQ7ukk0S96UA514uVMD8q9VGZm
4PUeiMOBEclEQZwNHpT7hDhyi+K4eLnfQIm8nO5BOZKWNbRaU4DTPAAPAjYK
3naqB+UoYKMdxkGneACOdWJjrQfleAUbazwAjwQAxUYKsNoD8GjWX2dOWuqq
J9wQVY7hQnnMiLmIMu5BeRwETFuOvE/yoDzRKexWelCe7ISywoPyVEXALPcA
PF0BsMwD8DEqM/vjJW4I4CKxGz3Rg/LxTmnZxcuzFfoY9QB8Ati1EPqLPCh/
2Mk7FnpQPlkR/y6ATwkAZoUBRjwAz4Uy0Tjjf4Gn9fNW6/me1p+xWs/ztH7B
aj3X0/pFq/UcT+vPAifkgemwB+CPKgBm+QEqsvaQB+VPKtgY9AD8aUwuXbYx
nH7AA/C5CoCWB+DzFQBND8AXKgD6PQBTFQAND8AXAQBbrs8D8KUKgLoH4MsV
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
K77y6h3XTvh/MpBHXg==\
\>"], "Picture",
 Evaluatable->False,
 ImageSize->{169.125, 123.25},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}}],

Cell["Fig. 9.7 One iteration of Newton's method.", "Caption",
 CellTags->"Fig. 9.7"],

Cell[TextData[{
 "This solution is shown in Fig. ",
 ButtonBox["9.7",
  BaseStyle->"Hyperlink",
  ButtonData:>"Fig. 9.7"],
 ".  Of course, this Taylor expansion is only valid for ",
 Cell[BoxData[
  FormBox["x", TraditionalForm]]],
 " close to ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["x", "o"], TraditionalForm]]],
 ", which implies that the solution must be close to our initial guess ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["x", "o"], TraditionalForm]]],
 " in order for Eq. ",
 ButtonBox["(9.11.2)",
  BaseStyle->"Hyperlink",
  ButtonData:>"(9.11.2)"],
 "  to be accurate.\n\tEven so, there will still be some error, so we now \
iterate this expression, using ",
 Cell[BoxData[
  FormBox["x", TraditionalForm]]],
 " as our new initial guess, ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["x", "o"], " ", "=", " ", "x"}], TraditionalForm]]],
 ", and then reevaluating Eq. ",
 ButtonBox["(9.11.2)",
  BaseStyle->"Hyperlink",
  ButtonData:>"(9.11.2)"],
 ".  The hope is that with each iteration of Eq. ",
 ButtonBox["(9.11.2)",
  BaseStyle->"Hyperlink",
  ButtonData:>"(9.11.2)"],
 ", the result for ",
 Cell[BoxData[
  FormBox["x", TraditionalForm]]],
 " will be closer to the actual solution of ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"f", "(", "x", ")"}], "=", "0"}], TraditionalForm]]],
 ". One can show that this will be true if ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["x", "o"], TraditionalForm]]],
 " is sufficiently close to the actual solution, and ",
 Cell[BoxData[
  FormBox[
   RowBox[{"f", "(", "x", ")"}], TraditionalForm]]],
 " is a smooth function. We will perform similar recursive procedures in many \
other contexts throughout this book."
}], "Text"],

Cell[TextData[{
 StyleBox["(a)",
  FontWeight->"Bold"],
 " Write a sequence of ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " commands, separated by semicolons and placed in a single cell, that \
performs a single iteration of this process, evaluating Eq. ",
 ButtonBox["(9.11.2)",
  BaseStyle->"Hyperlink",
  ButtonData:>"(9.11.2)"],
 " for a given initial guess ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["x", "o"], TraditionalForm]]],
 " and then replacing ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["x", "o"], TraditionalForm]]],
 " by ",
 Cell[BoxData[
  FormBox["x", TraditionalForm]]],
 ".  After defining the initial guess ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["x", "o"], "=", 
    RowBox[{"-", "2.0"}]}], TraditionalForm]]],
 " and the function ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"f", "(", "x", ")"}], " ", "=", " ", 
    RowBox[{
     SuperscriptBox["e", "x"], " ", "-", " ", 
     RowBox[{"cos", "(", "x", ")"}]}]}], TraditionalForm]]],
 ", evaluate this cell several times until the displayed value of ",
 Cell[BoxData[
  FormBox["x", TraditionalForm]]],
 " no-longer changes.  What is the value of the root that you have found, to \
5 significant figures? "
}], "Text"],

Cell[TextData[{
 StyleBox["(b)",
  FontWeight->"Bold"],
 " Read about the ",
 StyleBox["While",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " statement in the ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " help browser (or see ",
 ButtonBox["Exercise 10",
  BaseStyle->"Hyperlink",
  ButtonData->"i:79"],
 " for an example of its use), and use this statement to automatically \
iterate the sequence of commands derived in part (a) until ",
 Cell[BoxData[
  FormBox[
   RowBox[{"|", 
    RowBox[{"f", "(", "x", ")"}], "|", 
    RowBox[{"\[LessEqual]", " ", "\[Epsilon]"}]}], TraditionalForm]]],
 ", where ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Epsilon]", "=", 
    SuperscriptBox["10", 
     RowBox[{"-", "10"}]]}], TraditionalForm]]],
 "is the accuracy goal. Evaluating this ",
 StyleBox["While",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " statement once should produce the same result as the multiple evaluations \
performed in part (a)."
}], "Text",
 CellChangeTimes->{{3.503084219319647*^9, 3.503084241251219*^9}},
 CellTags->"i:126"],

Cell[TextData[{
 StyleBox["(7)",
  FontWeight->"Bold"],
 " In this exercise we will develop our own numerical algorithm to fit  a \
data list ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{
     SubscriptBox["x", "i"], ",", " ", 
     SubscriptBox["y", "i"]}], "}"}], TraditionalForm]]],
 ", ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"i", "=", "1"}], ",", "...", ",", "M"}], TraditionalForm]]],
 ", to a sum of given functions ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["f", "n"], "(", "x", ")"}], TraditionalForm]]],
 ", ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"n", "=", "1"}], ",", "..", ",", "P"}], TraditionalForm]]],
 ". That is, we look for a function ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"g", "(", "x", ")"}], " ", "=", " ", 
    RowBox[{
     UnderoverscriptBox["\[Sum]", 
      RowBox[{"n", "=", "1"}], "P"], 
     RowBox[{
      SubscriptBox["c", "n"], 
      RowBox[{
       SubscriptBox["f", "n"], "(", "x", ")"}]}]}]}], TraditionalForm]]],
 " that provides the best fit to the data, where the ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["c", "n"], TraditionalForm]]],
 "'s are fitting coefficients. The problem is to find the best values for \
these coefficients. "
}], "Text"],

Cell[TextData[{
 StyleBox["(a)",
  FontWeight->"Bold"],
 " If ",
 Cell[BoxData[
  FormBox[
   RowBox[{"M", "=", "P"}], TraditionalForm]]],
 ", then one can simply solve ",
 Cell[BoxData[
  FormBox[
   RowBox[{"M", " "}], TraditionalForm]]],
 " equations in the ",
 Cell[BoxData[
  FormBox["M", TraditionalForm]]],
 " unknowns ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["c", "n"], TraditionalForm]]],
 " in order to determine a functional form that passes through each data \
point:"
}], "Text"],

Cell[TextData[{
 "\t\t",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["y", "i"], " ", "=", 
     RowBox[{
      UnderoverscriptBox["\[Sum]", 
       RowBox[{"n", "=", "1"}], "M"], 
      RowBox[{
       SubscriptBox["c", "n"], 
       RowBox[{
        SubscriptBox["f", "n"], "(", 
        SubscriptBox["x", "i"], ")"}]}]}]}], ",", "   ", 
    RowBox[{"i", "=", "1"}], ",", "...", ",", "M", " "}], TraditionalForm]]],
 "."
}], "Text"],

Cell[TextData[{
 "Using the ",
 StyleBox["Solve",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " function, solve these equations for the following data, taking ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["f", "n"], "(", "x", ")"}], " ", "=", " ", 
    SuperscriptBox["x", 
     RowBox[{"n", "-", "1"}]]}], TraditionalForm]]],
 "and ",
 Cell[BoxData[
  FormBox[
   RowBox[{"P", "=", "4"}], TraditionalForm]]],
 ":"
}], "Text"],

Cell[BoxData[
 RowBox[{"data", " ", "=", " ", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1.", ",", "2."}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"0.", ",", "5."}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"3.", ",", 
      RowBox[{"-", "1."}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"2.", ",", "0."}], "}"}]}], "}"}]}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.203"],

Cell[TextData[{
 "Compare your result to that obtained using ",
 StyleBox["Fit",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ". "
}], "Text"],

Cell[TextData[{
 StyleBox["(b)",
  FontWeight->"Bold"],
 " When ",
 Cell[BoxData[
  FormBox[
   RowBox[{"P", "<", "M"}], TraditionalForm]]],
 " there are too many data points for the fitting function ",
 Cell[BoxData[
  FormBox[
   RowBox[{"g", "(", "x", ")"}], TraditionalForm]]],
 " to go through every point. However, we can minimize the error between the \
function and the data. If we define the error as"
}], "Text"],

Cell[TextData[{
 "\t",
 Cell[BoxData[
  FormBox[
   RowBox[{"error", " ", "=", " ", 
    RowBox[{
     UnderoverscriptBox["\[Sum]", 
      RowBox[{"j", "=", "1"}], "M"], 
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{
        RowBox[{"g", "(", 
         SubscriptBox["x", "j"], ")"}], "-", 
        SubscriptBox["y", "j"]}], ")"}], "2"]}]}], TraditionalForm]]],
 ", "
}], "Text"],

Cell[TextData[{
 "show that the error is extremized when the ",
 Cell[BoxData[
  FormBox["P", TraditionalForm]]],
 " fitting coefficients satisfy the following set of ",
 Cell[BoxData[
  FormBox["P", TraditionalForm]]],
 " linear equations:"
}], "Text"],

Cell[TextData[Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{
    RowBox[{
     UnderoverscriptBox["\[Sum]", 
      RowBox[{"j", "=", "1"}], "M"], 
     RowBox[{
      RowBox[{
       SubscriptBox["f", "k"], "(", 
       SubscriptBox["x", "j"], ")"}], 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         UnderoverscriptBox["\[Sum]", 
          RowBox[{"n", "=", "1"}], "P"], 
         RowBox[{
          SubscriptBox["c", "n"], 
          RowBox[{
           SubscriptBox["f", "n"], "(", 
           SubscriptBox["x", "j"], ")"}]}]}], "-", 
        SubscriptBox["y", "j"]}], ")"}]}]}], "=", "0"}], ",", "  ", 
   RowBox[{"k", "=", "1"}], ",", "...", ",", "P"}], TraditionalForm]]]], "NE5",\

 CellTags->"(9.11.3)"],

Cell[TextData[{
 "(Hint: take the derivative of the error with respect to ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["c", "k"], TraditionalForm]]],
 ".) Note that since there is a unique solution for the extremum, and since \
the error becomes large and positive as any one of the ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["c", "n"], TraditionalForm]]],
 "'s become large, the extremum must be a minimum. The solution to Eqs. ",
 ButtonBox["(9.11.3",
  BaseStyle->"Hyperlink",
  ButtonData:>"(9.11.3)"],
 ") is called the ",
 StyleBox["least-squares fit",
  FontSlant->"Italic"],
 " to the data."
}], "Text",
 CellTags->"i:138"],

Cell[TextData[{
 "(c) Using the ",
 StyleBox["Solve",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " function, set up and solve these equations for the following data, taking ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["f", "n"], "(", "x", ")"}], " ", "=", " ", 
    SuperscriptBox["x", 
     RowBox[{"n", "-", "1"}]]}], TraditionalForm]]],
 "and ",
 Cell[BoxData[
  FormBox[
   RowBox[{"P", "=", "4"}], TraditionalForm]]],
 ":"
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"data", " ", "=", " ", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"s", "=", 
       RowBox[{"RandomReal", "[", "]"}]}], ";", 
      RowBox[{"{", 
       RowBox[{"s", ",", " ", 
        RowBox[{
         RowBox[{"Exp", "[", 
          RowBox[{
           RowBox[{"-", "3"}], "s"}], "]"}], "+", 
         RowBox[{"RandomReal", "[", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", ".05"}], ",", ".05"}], "}"}], "]"}]}]}], "}"}]}], 
     ",", 
     RowBox[{"{", "40", "}"}]}], "]"}]}], ";"}]], "Input",
 ShowCellTags->True,
 CellChangeTimes->{{3.446594638273457*^9, 3.4465946841391773`*^9}, 
   3.494360475168408*^9},
 CellTags->"Cell 9.204"],

Cell[TextData[{
 "Plot the data together with the function ",
 Cell[BoxData[
  FormBox[
   RowBox[{"g", "(", "x", ")"}], TraditionalForm]]],
 ". Compare this function to that found using ",
 StyleBox["Fit",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ". "
}], "Text"],

Cell[TextData[{
 StyleBox["(8)",
  FontWeight->"Bold"],
 " In this exercise we will develop our own numerical integration scheme, in \
order to compute ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubsuperscriptBox["\[Integral]", "a", "b"], 
    RowBox[{
     RowBox[{"f", "(", "t", ")"}], 
     RowBox[{"\[DifferentialD]", "t"}]}]}], TraditionalForm]]],
 " for some given function ",
 Cell[BoxData[
  FormBox[
   RowBox[{"f", "(", "t", ")"}], TraditionalForm]]],
 " and given integration bounds ",
 Cell[BoxData[
  FormBox["a", TraditionalForm]]],
 " and ",
 Cell[BoxData[
  FormBox["b", TraditionalForm]]],
 ". The simplest method is to cut the interval ",
 Cell[BoxData[
  FormBox[
   RowBox[{"[", 
    RowBox[{"a", ",", "b"}], "]"}], TraditionalForm]]],
 " into a grid of ",
 Cell[BoxData[
  FormBox[
   RowBox[{"M", "+", "1"}], TraditionalForm]]],
 " ",
 Cell[BoxData[
  FormBox["t", TraditionalForm]]],
 " values,  ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["t", "n"], "=", " ", 
     RowBox[{"a", " ", "+", " ", 
      RowBox[{"n", " ", 
       StyleBox[
        RowBox[{"\[CapitalDelta]", 
         StyleBox["t",
          FontSlant->"Italic"]}]]}]}]}], ",", " ", 
    RowBox[{"n", "=", "0"}], ",", "1", ",", "2", ",", 
    RowBox[{"...", "M"}]}], TraditionalForm]]],
 ", where ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    StyleBox[
     RowBox[{"\[CapitalDelta]", 
      StyleBox["t",
       FontSlant->"Italic"]}]], 
    StyleBox[" ",
     FontSlant->"Plain"], 
    StyleBox["=",
     FontSlant->"Plain"], 
    StyleBox[" ",
     FontSlant->"Plain"], 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"b", "-", "a"}], ")"}], "/", "M"}]}], TraditionalForm]]],
 ". Then the integral can be expressed as a sum of integrals:"
}], "Text"],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubsuperscriptBox["\[Integral]", "a", "b"], 
     RowBox[{
      RowBox[{"f", "(", "t", ")"}], 
      RowBox[{"\[DifferentialD]", "t"}]}]}], "=", 
    RowBox[{
     UnderoverscriptBox["\[Sum]", 
      RowBox[{"n", "=", "0"}], 
      RowBox[{"M", "-", "1"}]], 
     RowBox[{
      SubsuperscriptBox["\[Integral]", 
       SubscriptBox["t", "n"], 
       SubscriptBox["t", 
        RowBox[{"n", "+", "1"}]]], 
      RowBox[{
       RowBox[{"f", "(", "t", ")"}], 
       RowBox[{"\[DifferentialD]", "t"}]}]}]}]}], TraditionalForm]]],
 "."
}], "NE5",
 CellTags->"(9.11.4)"],

Cell[TextData[{
 "Now, if the grid is sufficiently fine, ",
 Cell[BoxData[
  FormBox[
   RowBox[{"f", "(", "t", ")"}], TraditionalForm]]],
 " varies little in each integral, so that we can replace it by its initial \
value in each integral:"
}], "Text"],

Cell[TextData[{
 "\t",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{
      SubsuperscriptBox["\[Integral]", 
       SubscriptBox["t", "n"], 
       SubscriptBox["t", 
        RowBox[{"n", "+", "1"}]]], 
      RowBox[{
       RowBox[{"f", "(", "t", ")"}], 
       RowBox[{"\[DifferentialD]", "t"}]}]}], " ", "\[TildeEqual]", 
     RowBox[{
      SubsuperscriptBox["\[Integral]", 
       SubscriptBox["t", "n"], 
       SubscriptBox["t", 
        RowBox[{"n", "+", "1"}]]], 
      RowBox[{
       RowBox[{"f", "(", 
        SubscriptBox["t", "n"], ")"}], 
       RowBox[{"\[DifferentialD]", "t"}]}]}]}], "=", 
    RowBox[{
     StyleBox[
      RowBox[{"\[CapitalDelta]", 
       StyleBox["t",
        FontSlant->"Italic"]}]], " ", 
     RowBox[{"f", "(", 
      SubscriptBox["t", "n"], ")"}]}]}], TraditionalForm]]],
 "."
}], "Text"],

Cell[TextData[{
 "This approximation, together with Eq. ",
 ButtonBox["(9.11.4)",
  BaseStyle->"Hyperlink",
  ButtonData:>"(9.11.4)"],
 ", is called a ",
 StyleBox["Reimann sum",
  FontSlant->"Italic"],
 " approximation to the integral, and is the approximation used to \
numerically integrate differential equations in Eulers method (see Sec. ",
 ButtonBox["1.4.3",
  BaseStyle->"Hyperlink",
  ButtonData:>{"Chapter1.nb", "c:24"}],
 "). However, it is not a particularly accurate approximation: we might just \
as well have used the final value as the initial value, obtaining the \
slightly different result "
}], "Text"],

Cell[TextData[{
 "\t",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubsuperscriptBox["\[Integral]", 
      SubscriptBox["t", "n"], 
      SubscriptBox["t", 
       RowBox[{"n", "+", "1"}]]], 
     RowBox[{
      RowBox[{"f", "(", 
       SubscriptBox["t", "n"], ")"}], 
      RowBox[{"\[DifferentialD]", "t"}]}]}], " ", "\[TildeEqual]", 
    RowBox[{
     StyleBox[
      RowBox[{"\[CapitalDelta]", 
       StyleBox["t",
        FontSlant->"Italic"]}]], " ", 
     RowBox[{"f", "(", 
      SubscriptBox["t", 
       RowBox[{"n", "+", "1"}]], ")"}]}]}], TraditionalForm]]],
 "."
}], "Text"],

Cell["\<\
It is better to split the difference, and take the average of these two \
extremes:\
\>", "Text"],

Cell[TextData[Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{
    SubsuperscriptBox["\[Integral]", 
     SubscriptBox["t", "n"], 
     SubscriptBox["t", 
      RowBox[{"n", "+", "1"}]]], 
    RowBox[{
     RowBox[{"f", "(", 
      SubscriptBox["t", "n"], ")"}], 
     RowBox[{"\[DifferentialD]", "t"}]}]}], "\[TildeEqual]", 
   RowBox[{
    FractionBox[
     RowBox[{
      StyleBox[
       RowBox[{"\[CapitalDelta]", 
        StyleBox["t",
         FontSlant->"Italic"]}]], " "}], "2"], "[", 
    RowBox[{
     RowBox[{"f", "(", 
      SubscriptBox["t", "n"], ")"}], "+", 
     RowBox[{"f", "(", 
      SubscriptBox["t", 
       RowBox[{"n", "+", "1"}]], ")"}]}], "]"}], " "}], 
  TraditionalForm]]]], "NE5",
 CellTags->{"(9.11.5)", "i:134"}],

Cell[TextData[{
 "This approximation is called the ",
 StyleBox["trapezoidal rule",
  FontSlant->"Italic"],
 ", and is used in the second-order predictor-corrector method (Sec. ",
 ButtonBox["1.4.4",
  BaseStyle->"Hyperlink",
  ButtonData:>{"Chapter1.nb", "c:25"}],
 "). "
}], "Text"],

Cell[TextData[{
 "\tUsing Eqs.",
 ButtonBox[" (9.11.4)",
  BaseStyle->"Hyperlink",
  ButtonData:>"(9.11.4)"],
 " and ",
 ButtonBox["(9.11.5)",
  BaseStyle->"Hyperlink",
  ButtonData:>"(9.11.5)"],
 ", evaluate the following integrals numerically, taking ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"M", "=", "10"}], ",", "20", ",", "40"}], TraditionalForm]]],
 ". (Use the intrinsic function ",
 StyleBox["Sum",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ".) For each value of ",
 Cell[BoxData[
  FormBox["M", TraditionalForm]]],
 " determine the error in the result by comparing to the exact result. Show \
that the error scales roughly as ",
 Cell[BoxData[
  FormBox[
   RowBox[{"1", "/", 
    SuperscriptBox["M", "2"]}], TraditionalForm]]],
 "."
}], "Text"],

Cell[TextData[{
 StyleBox["(a)",
  FontWeight->"Bold"],
 " ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubsuperscriptBox["\[Integral]", "0", "\[Pi]"], 
    RowBox[{"sin", " ", "t", 
     RowBox[{"\[DifferentialD]", "t"}]}]}], TraditionalForm]]],
 "."
}], "Text"],

Cell[TextData[{
 StyleBox["(b)",
  FontWeight->"Bold"],
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubsuperscriptBox["\[Integral]", 
     RowBox[{"-", "5"}], "5"], 
    RowBox[{
     SuperscriptBox["\[ExponentialE]", 
      RowBox[{"-", 
       SuperscriptBox["t", "2"]}]], 
     RowBox[{"\[DifferentialD]", "t"}]}]}], TraditionalForm]]],
 "."
}], "Text"],

Cell[TextData[{
 StyleBox["(c)",
  FontWeight->"Bold"],
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubsuperscriptBox["\[Integral]", "0", "1"], 
    RowBox[{
     SuperscriptBox["x", "3"], 
     RowBox[{"\[DifferentialD]", "x"}]}]}], TraditionalForm]]],
 "."
}], "Text"],

Cell[TextData[{
 "[A proof that the error obeys this ",
 Cell[BoxData[
  FormBox[
   RowBox[{"1", "/", 
    SuperscriptBox["M", "2"]}], TraditionalForm]]],
 " scaling is discusssed in Sec. ",
 ButtonBox["1.4.4",
  BaseStyle->"Hyperlink",
  ButtonData:>{"Chapter1.nb", "c:25"}],
 ", and Exercise ",
 ButtonBox["(13)",
  BaseStyle->"Hyperlink",
  ButtonData:>{"Chapter1.nb", "ex 13"}],
 " of that section. See also the next exercise.]"
}], "Text"],

Cell[TextData[{
 StyleBox["(9)",
  FontWeight->"Bold"],
 " ",
 StyleBox["Higher-order integration schemes",
  FontSlant->"Italic"],
 ". There are several ways to improve on the trapezoidal rule. In one \
approach, the integrals in Eq. ",
 ButtonBox["(9.11.4)",
  BaseStyle->"Hyperlink",
  ButtonData:>"(9.11.4)"],
 " are performed over larger sets of data. For instance, we can keep three \
adjacent grid points in each integral:"
}], "Text"],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubsuperscriptBox["\[Integral]", "a", "b"], 
     RowBox[{
      RowBox[{"f", "(", "t", ")"}], 
      RowBox[{"\[DifferentialD]", "t"}]}]}], "=", 
    RowBox[{
     UnderoverscriptBox[
      StyleBox["\[CapitalSigma]",
       FontSize->18], GridBox[{
        {
         RowBox[{"n", "=", "0"}]},
        {
         RowBox[{"(", 
          RowBox[{"n", " ", "even"}], ")"}]}
       }], 
      RowBox[{"M", "-", "2"}]], 
     RowBox[{
      SubsuperscriptBox["\[Integral]", 
       SubscriptBox["t", "n"], 
       SubscriptBox["t", 
        RowBox[{"n", "+", " ", "2"}]]], 
      RowBox[{
       RowBox[{"f", "(", "t", ")"}], 
       RowBox[{"\[DifferentialD]", "t"}]}]}]}]}], TraditionalForm]]],
 "."
}], "NE5",
 CellTags->"(9.11.6)"],

Cell[TextData[{
 "With three grid points included in each integral, we can fit these points \
to a polynomial in order to obtain an approximate description of the \
function, and then perform the integration over this polynomial analytically. \
With only three grid points, the highest-order polynomial that can be \
uniquely defined by the fit is a parabola. We can perform this fit using the \
function ",
 StyleBox["Fit",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ", and we do so in Cell ",
 ButtonBox["9.205",
  BaseStyle->"Hyperlink",
  ButtonData:>"Cell 9.205"],
 " on the three data points corresponding to ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"n", "=", "0"}], ",", "1"}], TraditionalForm]]],
 " and ",
 Cell[BoxData[
  FormBox["2", TraditionalForm]]],
 ":"
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"data", " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", 
       RowBox[{"f", "[", "0", "]"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\[CapitalDelta]t", ",", 
       RowBox[{"f", "[", "\[CapitalDelta]t", "]"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"2", "\[CapitalDelta]t"}], ",", 
       RowBox[{"f", "[", 
        RowBox[{"2", " ", "\[CapitalDelta]t"}], "]"}]}], "}"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Chop", "[", 
  RowBox[{"Simplify", "[", 
   RowBox[{
    RowBox[{"Fit", "[", 
     RowBox[{"data", ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", "t", ",", 
        RowBox[{"t", "^", "2"}]}], "}"}], ",", "t"}], "]"}], ",", 
    RowBox[{"\[CapitalDelta]t", ">", "0"}]}], "]"}], "]"}]}], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.205"],

Cell[BoxData[
 RowBox[{
  RowBox[{"1.`", " ", 
   RowBox[{"f", "[", "0", "]"}]}], "+", 
  RowBox[{"0.`", " ", 
   RowBox[{"f", "[", "\[CapitalDelta]t", "]"}]}], "+", 
  RowBox[{"0.`", " ", 
   RowBox[{"f", "[", 
    RowBox[{"2", " ", "\[CapitalDelta]t"}], "]"}]}], "+", 
  RowBox[{
   SuperscriptBox["t", "2"], " ", 
   RowBox[{"(", 
    RowBox[{
     FractionBox[
      RowBox[{"0.5`", " ", 
       RowBox[{"f", "[", "0", "]"}]}], 
      SuperscriptBox["\[CapitalDelta]t", "2"]], "-", 
     FractionBox[
      RowBox[{"1.`", " ", 
       RowBox[{"f", "[", "\[CapitalDelta]t", "]"}]}], 
      SuperscriptBox["\[CapitalDelta]t", "2"]], "+", 
     FractionBox[
      RowBox[{"0.5`", " ", 
       RowBox[{"f", "[", 
        RowBox[{"2", " ", "\[CapitalDelta]t"}], "]"}]}], 
      SuperscriptBox["\[CapitalDelta]t", "2"]]}], ")"}]}], "+", 
  RowBox[{"t", " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", 
      FractionBox[
       RowBox[{"1.5`", " ", 
        RowBox[{"f", "[", "0", "]"}]}], "\[CapitalDelta]t"]}], "+", 
     FractionBox[
      RowBox[{"2.`", " ", 
       RowBox[{"f", "[", "\[CapitalDelta]t", "]"}]}], "\[CapitalDelta]t"], 
     "-", 
     FractionBox[
      RowBox[{"0.5`", " ", 
       RowBox[{"f", "[", 
        RowBox[{"2", " ", "\[CapitalDelta]t"}], "]"}]}], 
      "\[CapitalDelta]t"]}], ")"}]}]}]], "Output"]
}, Open  ]],

Cell[TextData[{
 " ",
 StyleBox["Fit",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " only provides numerical approximations for the coefficients in the fitting \
function, but one can see that the coefficients in this expression are simple \
fractions or integers. [One could, if one wished, obtain exact expressions \
for the coefficients by using the fitting procedure outlined in Exercise \
(7)(a).] With this fit, one can now analytically integrate over the interval \
from 0 to 2\[CapitalDelta]",
 StyleBox["t",
  FontSlant->"Italic"],
 ":"
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Integrate", "[", 
  RowBox[{"%", ",", 
   RowBox[{"{", 
    RowBox[{"t", ",", "0", ",", 
     RowBox[{"2", "\[CapitalDelta]t"}]}], "}"}]}], "]"}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.206"],

Cell[BoxData[
 RowBox[{
  RowBox[{"0.33333333333333326`", " ", "\[CapitalDelta]t", " ", 
   RowBox[{"f", "[", "0", "]"}]}], "+", 
  RowBox[{"1.3333333333333335`", " ", "\[CapitalDelta]t", " ", 
   RowBox[{"f", "[", "\[CapitalDelta]t", "]"}]}], "+", 
  RowBox[{"0.33333333333333326`", " ", "\[CapitalDelta]t", " ", 
   RowBox[{"f", "[", 
    RowBox[{"2", " ", "\[CapitalDelta]t"}], "]"}]}]}]], "Output"]
}, Open  ]],

Cell[TextData[{
 "This expression is known as ",
 StyleBox["Simpson's rule",
  FontSlant->"Italic"],
 ":"
}], "Text"],

Cell[TextData[Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{
    SubsuperscriptBox["\[Integral]", 
     SubscriptBox["t", "n"], 
     SubscriptBox["t", 
      RowBox[{"n", "+", " ", "2"}]]], 
    RowBox[{
     RowBox[{"f", "(", "t", ")"}], 
     RowBox[{"\[DifferentialD]", "t"}]}]}], "=", 
   RowBox[{
    RowBox[{
     StyleBox[
      RowBox[{"\[CapitalDelta]", 
       StyleBox["t",
        FontSlant->"Italic"]}]], " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{
        FractionBox["1", "3"], 
        RowBox[{"f", "(", 
         SubscriptBox["t", "n"], ")"}]}], "+", 
       RowBox[{
        FractionBox["4", "3"], 
        RowBox[{"f", "(", 
         SubscriptBox["t", 
          RowBox[{"n", "+", "1"}]], ")"}]}], "+", 
       RowBox[{
        FractionBox["1", "3"], 
        RowBox[{"f", "(", 
         SubscriptBox["t", 
          RowBox[{"n", "+", "2"}]], ")"}]}]}], ")"}]}], "+", 
    RowBox[{"O", "(", 
     SuperscriptBox[
      StyleBox[
       RowBox[{"\[CapitalDelta]", 
        StyleBox["t",
         FontSlant->"Italic"]}]], "5"], ")"}]}]}], TraditionalForm]]]], "NE5",\

 CellTags->"i:135"],

Cell[TextData[{
 "The fact that the error in this integral scales as ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox[
    StyleBox[
     RowBox[{"\[CapitalDelta]", 
      StyleBox["t",
       FontSlant->"Italic"]}]], "5"], TraditionalForm]]],
 "  can be proven by Taylor-expanding the equation around ",
 Cell[BoxData[
  FormBox[
   RowBox[{"f", "(", 
    SubscriptBox["t", "n"], ")"}], TraditionalForm]]],
 " (to simplify the notation, we take the case ",
 Cell[BoxData[
  FormBox[
   RowBox[{"n", "=", "0"}], TraditionalForm]]],
 "):"
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Series", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Integrate", "[", 
     RowBox[{
      RowBox[{"f", "[", "t", "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"t", ",", "0", ",", 
        RowBox[{"2", "\[CapitalDelta]t"}]}], "}"}]}], "]"}], " ", "-", " ", 
    RowBox[{"\[CapitalDelta]t", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{
        RowBox[{"1", "/", "3"}], " ", 
        RowBox[{"f", "[", "0", "]"}]}], " ", "+", " ", 
       RowBox[{
        RowBox[{"4", "/", "3"}], " ", 
        RowBox[{"f", "[", "\[CapitalDelta]t", "]"}]}], " ", "+", 
       RowBox[{
        RowBox[{"1", "/", "3"}], " ", 
        RowBox[{"f", "[", 
         RowBox[{"2", " ", "\[CapitalDelta]t"}], "]"}]}]}], ")"}]}]}], ",", 
   RowBox[{"{", 
    RowBox[{"\[CapitalDelta]t", ",", "0", ",", "5"}], "}"}]}], "]"}]], "Input",\

 ShowCellTags->True,
 CellTags->"Cell 9.207"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   RowBox[{"-", 
    RowBox[{
     FractionBox["1", "90"], " ", 
     RowBox[{
      SuperscriptBox["f", 
       TagBox[
        RowBox[{"(", "4", ")"}],
        Derivative],
       MultilineFunction->None], "[", "0", "]"}], " ", 
     SuperscriptBox["\[CapitalDelta]t", "5"]}]}], "+", 
   InterpretationBox[
    SuperscriptBox[
     RowBox[{"O", "[", "\[CapitalDelta]t", "]"}], "6"],
    SeriesData[\[CapitalDelta]t, 0, {}, 5, 6, 1]]}],
  SeriesData[\[CapitalDelta]t, 0, {Rational[-1, 90] Derivative[4][f][0]}, 5, 
   6, 1]]], "Output"]
}, Open  ]],

Cell[TextData[{
 StyleBox["(a)",
  FontWeight->"Bold"],
 " Using Simpson's rule, for ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"M", "=", "10"}], ",", "20", ",", " ", 
    RowBox[{"and", " ", "40"}]}], TraditionalForm]]],
 ", evaluate the integrals and the errors in (i) Exercise (8)(a); (ii) \
Exercise (8)(b); (iii) Exercise (8)(c). How do the errors scale with ",
 Cell[BoxData[
  FormBox["M", TraditionalForm]]],
 "? "
}], "Text"],

Cell[TextData[{
 StyleBox["(b)",
  FontWeight->"Bold"],
 " Show using this approach that the trapezoidal rule, Eq. ",
 ButtonBox["(9.11.5)",
  BaseStyle->"Hyperlink",
  ButtonData:>"(9.11.5)"],
 ",  stems from a ",
 StyleBox["linear ",
  FontSlant->"Italic"],
 "fit  to ",
 Cell[BoxData[
  FormBox[
   RowBox[{"f", "(", 
    SubscriptBox["t", "n"], ")"}], TraditionalForm]]],
 " and ",
 Cell[BoxData[
  FormBox[
   RowBox[{"f", "(", 
    SubscriptBox["t", 
     RowBox[{"n", "+", "1"}]], ")"}], TraditionalForm]]],
 ", and find the error in the equation. "
}], "Text"],

Cell[TextData[{
 StyleBox["(c)",
  FontWeight->"Bold"],
 " Use this analysis to prove ",
 StyleBox["Bode's rule",
  FontSlant->"Italic"],
 " (whereby 4th-order polynomials are fitted to 5 adjacent grid points):"
}], "Text",
 CellTags->"i:136"],

Cell[TextData[Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{
    SubsuperscriptBox["\[Integral]", 
     SubscriptBox["t", "n"], 
     SubscriptBox["t", 
      RowBox[{"n", "+", " ", "4"}]]], 
    RowBox[{
     RowBox[{"f", "(", "t", ")"}], 
     RowBox[{"\[DifferentialD]", "t"}]}]}], "=", 
   RowBox[{
    RowBox[{
     StyleBox[
      RowBox[{"\[CapitalDelta]", 
       StyleBox["t",
        FontSlant->"Italic"]}]], " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{
        FractionBox["14", "45"], 
        RowBox[{"f", "(", 
         SubscriptBox["t", "n"], ")"}]}], "+", 
       RowBox[{
        FractionBox["64", "45"], 
        RowBox[{"f", "(", 
         SubscriptBox["t", 
          RowBox[{"n", "+", "1"}]], ")"}]}], "+", 
       RowBox[{
        FractionBox["24", "45"], 
        RowBox[{"f", "(", 
         SubscriptBox["t", 
          RowBox[{"n", "+", "2"}]], ")"}]}], "+", 
       RowBox[{
        FractionBox["64", "45"], 
        RowBox[{"f", "(", 
         SubscriptBox["t", 
          RowBox[{"n", "+", "3"}]], ")"}]}], "+", 
       RowBox[{
        FractionBox["14", "45"], 
        RowBox[{"f", "(", 
         SubscriptBox["t", 
          RowBox[{"n", "+", "4"}]], ")"}]}]}], ")"}]}], "+", 
    RowBox[{"O", "(", 
     SuperscriptBox[
      StyleBox[
       RowBox[{"\[CapitalDelta]", 
        StyleBox["t",
         FontSlant->"Italic"]}]], "6"], ")"}]}]}], TraditionalForm]]]], "NE5"],

Cell[TextData[{
 "[Note that all of the integration rules considered here break the interval ",
 Cell[BoxData[
  FormBox[
   RowBox[{"[", 
    RowBox[{"a", ",", "b"}], "]"}], TraditionalForm]]],
 " into a ",
 StyleBox["uniform",
  FontSlant->"Italic"],
 " grid of points, resulting in rules of the form"
}], "Text"],

Cell[TextData[{
 "\t",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubsuperscriptBox["\[Integral]", "a", "b"], 
     RowBox[{
      RowBox[{"f", "(", "t", ")"}], 
      RowBox[{"\[DifferentialD]", "t"}]}]}], "\[TildeEqual]", " ", 
    RowBox[{
     UnderoverscriptBox["\[Sum]", 
      RowBox[{"n", "=", "0"}], "M"], 
     RowBox[{
      SubscriptBox["w", "n"], 
      RowBox[{"f", "(", 
       SubscriptBox["t", "n"], ")"}]}]}]}], TraditionalForm]]],
 ",    ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["t", "n"], " ", "=", " ", 
    RowBox[{"a", " ", "+", " ", 
     RowBox[{"n", " ", 
      StyleBox[
       RowBox[{"\[CapitalDelta]", 
        StyleBox["t",
         FontSlant->"Italic"]}]]}]}]}], TraditionalForm]]],
 ","
}], "Text"],

Cell[TextData[{
 "where the weighting coefficients ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["w", "n"], TraditionalForm]]],
 " depend on the method used. We have seen that one obtains approximations \
with different accuracies depending on the choice of the ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["w", "n"], TraditionalForm]]],
 "'s. However, even more accuracy can be achieved if we allow the grid to be ",
 StyleBox["nonuniform",
  FontSlant->"Italic"],
 ", and determine the grid point locations that provide the best accuracy. \
For broad classes of smooth functions ",
 Cell[BoxData[
  FormBox[
   RowBox[{"f", "(", "t", ")"}], TraditionalForm]]],
 " the best grid point locations can be shown to be at the zeros of certain \
well-known ",
 StyleBox["orthogonal polynomials",
  FontSlant->"Italic"],
 ". This is the general idea behind ",
 StyleBox["Gaussian quadrature",
  FontSlant->"Italic"],
 ",  the default method used for one-dimensional integrals by ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "'s intrinsic function ",
 StyleBox["NIntegrate",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ". A detailed discussion of the method can be found in ",
 ButtonBox["Conte and de Boor (1980)",
  BaseStyle->"Hyperlink",
  ButtonData:>"refs"],
 ". ] "
}], "Text",
 CellTags->"i:137"],

Cell[TextData[{
 StyleBox["(d)",
  FontWeight->"Bold"],
 " Use Bode's rule to evaluate the integrals in (i) Exercise (8)(a); (ii) \
Exercise (8)(b); ",
 " (iii) Exercise (8)(c). Take ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"M", "=", "8"}], ",", "16", ",", " ", 
    RowBox[{"and", " ", "32"}]}], TraditionalForm]]],
 ", and determine how the error scales with ",
 Cell[BoxData[
  FormBox["M", TraditionalForm]]],
 ". "
}], "Text"],

Cell[TextData[{
 StyleBox["(10)",
  FontWeight->"Bold"],
 " In this exercise we will derive our own cubic spline interpolation \
algorithm. As described in Sec. ",
 ButtonBox["9.11.3",
  BaseStyle->"Hyperlink",
  ButtonData:>"c:63"],
 ", we require a sequence of  third-order polynomials ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["p", "j"], "(", "x", ")"}], " ", "=", " ", 
    RowBox[{
     UnderoverscriptBox["\[Sum]", 
      RowBox[{"i", "=", "0"}], "3"], 
     RowBox[{
      SubscriptBox["c", 
       RowBox[{"n", " ", "i"}]], 
      SuperscriptBox["x", "i"]}]}]}], TraditionalForm]]],
 ", ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"j", "=", "1"}], ",", 
    RowBox[{
     RowBox[{"...", "M"}], "-", "1"}]}], TraditionalForm]]],
 ", chosen to pass through a set of data ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{
     SubscriptBox["x", "j"], ",", " ", 
     SubscriptBox["y", "j"]}], "}"}], TraditionalForm]]],
 ", ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"j", "=", "1"}], ",", "...", ",", "M"}], TraditionalForm]]],
 ", where the ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["x", "j"], TraditionalForm]]],
 "'s are ordered consecutively from lowest to highest values as ",
 Cell[BoxData[
  FormBox["j", TraditionalForm]]],
 " increases. Each polynomial ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["p", "j"], "(", "x", ")"}], TraditionalForm]]],
 " in the set is used only between grid points ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["x", "j"], TraditionalForm]]],
 "  and ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["x", 
    RowBox[{"j", "+", "1"}]], TraditionalForm]]],
 ", and is chosen so that the first and second derivatives match those of \
neighboring polynomials at their common grid points, so that the \
interpolating function is continuous and has continuous first and second \
derivatives. Thus, the polynomials satisfy the following linear equations:"
}], "Text",
 CellTags->"i:139"],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{
      SubscriptBox["p", "j"], "(", 
      SubscriptBox["x", "j"], ")"}], "=", 
     SubscriptBox["y", "j"]}], ",", " ", 
    RowBox[{"j", "=", "1"}], ",", 
    RowBox[{
     RowBox[{"...", "M"}], "-", "1"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      SubscriptBox["p", "j"], "(", 
      SubscriptBox["x", 
       RowBox[{"j", "+", "1"}]], ")"}], "=", 
     SubscriptBox["y", 
      RowBox[{"j", "+", "1"}]]}], ",", " ", 
    RowBox[{"j", "=", "1"}], ",", 
    RowBox[{
     RowBox[{"...", "M"}], "-", "1"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      SuperscriptBox[
       SubscriptBox["p", "j"], "\[Prime]"], "(", 
      SubscriptBox["x", 
       RowBox[{"j", "+", "1"}]], ")"}], "=", 
     RowBox[{
      SuperscriptBox[
       SubscriptBox["p", 
        RowBox[{"j", "+", "1"}]], "\[Prime]"], "(", 
      SubscriptBox["x", 
       RowBox[{"j", "+", "1"}]], ")"}]}], ",", " ", 
    RowBox[{"j", "=", "1"}], ",", 
    RowBox[{
     RowBox[{"...", "M"}], "-", "2"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      SuperscriptBox[
       SubscriptBox["p", "j"], "\[DoublePrime]"], "(", 
      SubscriptBox["x", 
       RowBox[{"j", "+", "1"}]], ")"}], "=", 
     RowBox[{
      SuperscriptBox[
       SubscriptBox["p", 
        RowBox[{"j", "+", "1"}]], "\[DoublePrime]"], "(", 
      SubscriptBox["x", 
       RowBox[{"j", "+", "1"}]], ")"}]}], ",", " ", 
    RowBox[{"j", "=", "1"}], ",", 
    RowBox[{
     RowBox[{"...", "M"}], "-", "2."}]}], TraditionalForm]]],
 " "
}], "NE5"],

Cell[TextData[{
 "These ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"4", "M"}], "-", "6"}], TraditionalForm]]],
 " equations are almost enough to uniquely specify the ",
 Cell[BoxData[
  FormBox[
   RowBox[{"4", 
    RowBox[{"(", 
     RowBox[{"M", "-", "1"}], ")"}]}], TraditionalForm]]],
 " coefficients ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["c", 
    RowBox[{"n", " ", "i"}]], TraditionalForm]]],
 " in the ",
 Cell[BoxData[
  FormBox[
   RowBox[{"M", "-", "1"}], TraditionalForm]]],
 " polynomials ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["p", "n"], "(", "x", ")"}], TraditionalForm]]],
 ", but we need two more equations. Typically, one chooses that the second \
derivative vanish at each end, providing the equations"
}], "Text"],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SuperscriptBox[
      SubscriptBox["p", "1"], "\[DoublePrime]"], "(", 
     SubscriptBox["x", "1"], ")"}], "=", 
    RowBox[{
     RowBox[{
      SuperscriptBox[
       SubscriptBox["p", "M"], "\[DoublePrime]"], "(", 
      SubscriptBox["x", "M"], ")"}], "=", "0"}]}], TraditionalForm]]],
 "."
}], "NE5"],

Cell[TextData[{
 StyleBox["(a)",
  FontWeight->"Bold"],
 " Using ",
 StyleBox["Solve",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ", set up and solve these coupled linear equations for the ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["c", 
    RowBox[{"n", " ", "i"}]], TraditionalForm]]],
 ", given the data defined in Cell ",
 ButtonBox["9.188",
  BaseStyle->"Hyperlink",
  ButtonData:>"Cell 9.188"],
 ", "
}], "Text"],

Cell[TextData[{
 StyleBox["(b)",
  FontWeight->"Bold"],
 " The following interpolation function will evaluate the spline for any \
value of ",
 Cell[BoxData[
  FormBox["x", TraditionalForm]]],
 " chosen between ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["x", "1"], TraditionalForm]]],
 "  and ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["x", "M"], TraditionalForm]]],
 ", given that each polynomial ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["p", "j"], "(", "x", ")"}], TraditionalForm]]],
 " has been defined as a ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " function ",
 StyleBox["p[j,x]",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ". Here, the solution from ",
 StyleBox["Solve",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " is assumed to be a simple list of substitution commands for the ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["c", 
    RowBox[{"n", " ", "i"}]], TraditionalForm]]],
 "'s called ",
 StyleBox["sol",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ". "
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"finterp", "[", 
   RowBox[{"x_", ",", "data_"}], "]"}], " ", ":=", " ", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     RowBox[{"M", "=", 
      RowBox[{"Length", "[", "data", "]"}]}], ";", " ", 
     RowBox[{"j1", " ", "=", " ", "1"}], ";", " ", 
     RowBox[{"jM", "=", "M"}], ";", " ", 
     RowBox[{"While", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"jM", "-", "j1"}], ">", "1"}], ",", 
       RowBox[{
        RowBox[{"jav", "=", 
         RowBox[{"Floor", "[", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"jM", "+", "j1"}], ")"}], "/", "2"}], "]"}]}], ";", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"data", "[", 
            RowBox[{"[", 
             RowBox[{"jav", ",", "1"}], "]"}], "]"}], ">", "x"}], ",", " ", 
          RowBox[{"jM", "=", "jav"}], ",", 
          RowBox[{"j1", "=", "jav"}]}], "]"}]}]}], "]"}], ";", " ", 
     RowBox[{"p", "[", 
      RowBox[{"j1", ",", "x"}], "]"}]}], ")"}], " ", "/.", "sol"}]}]], "Input",\

 ShowCellTags->True,
 CellTags->"Cell 9.208"],

Cell[TextData[{
 "This interpolation function must find the correct polynomial ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["p", "j"], TraditionalForm]]],
 " associated with a given ",
 Cell[BoxData[
  FormBox["x", TraditionalForm]]],
 ": it corresponds to the ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["x", "j"], TraditionalForm]]],
 " value in the data set nearest to but less than ",
 Cell[BoxData[
  FormBox["x", TraditionalForm]]],
 ". We use a division method, recursively dividing the interval ",
 Cell[BoxData[
  FormBox[
   RowBox[{"[", 
    RowBox[{
     SubscriptBox["x", "1"], ",", " ", 
     SubscriptBox["x", "M"]}], "]"}], TraditionalForm]]],
 " in half until ",
 Cell[BoxData[
  FormBox["x", TraditionalForm]]],
 " falls between consecutive grid points. (A faster method is possible if the \
grid points are evenly spaced, with spacing ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    RowBox[{"\[CapitalDelta]", 
     StyleBox["x",
      FontSlant->"Italic"]}]], TraditionalForm]]],
 ". Then ",
 Cell[BoxData[
  FormBox[
   RowBox[{"j", "=", " ", 
    RowBox[{"Min", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"Floor", "[", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"x", "-", 
           SubscriptBox["x", "1"]}], ")"}], "/", 
         StyleBox[
          RowBox[{"\[CapitalDelta]", 
           StyleBox["x",
            FontSlant->"Italic"]}]]}], 
        StyleBox["]",
         FontSlant->"Italic"]}], 
       StyleBox[" ",
        FontSlant->"Plain"], 
       StyleBox["+",
        FontSlant->"Plain"], 
       StyleBox[" ",
        FontSlant->"Plain"], 
       StyleBox["1",
        FontSlant->"Plain"]}], 
      StyleBox[",",
       FontSlant->"Plain"], 
      StyleBox[" ",
       FontSlant->"Plain"], 
      StyleBox["M",
       FontSlant->"Italic"]}], 
     StyleBox["]",
      FontSlant->"Italic"]}]}], TraditionalForm]]],
 ". ) We have also employed an ",
 StyleBox["If",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " statement and a ",
 StyleBox["While",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " statement.  An ",
 StyleBox["If",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " statement takes three arguments. The first argument is a condition which, \
if met, returns the second argument. If the condition evaluates to ",
 StyleBox["False",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ", the third argument is returned. In ",
 StyleBox["While",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " statements the second argument is evaluated over and over again as long as \
the test corresponding to the first argument evaluates to ",
 StyleBox["True",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ". (The second argument can be several commands separated by semicolons, as \
in the above example. )\nUse this function to plot the spline interpolation \
found in part (a) in the range ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"-", "1"}], "\[LessEqual]", " ", "x", "\[LessEqual]", " ", "1"}], 
   TraditionalForm]]],
 ". "
}], "Text",
 ShowCellTags->False,
 CellChangeTimes->{{3.503082909351655*^9, 3.503082982510734*^9}, {
  3.503083032351346*^9, 3.503083051888568*^9}, {3.5030830870522747`*^9, 
  3.503083112192655*^9}, {3.5030835997467747`*^9, 3.503083681238036*^9}, {
  3.503083736748979*^9, 3.5030837412341843`*^9}, {3.503083773205969*^9, 
  3.503083838774633*^9}, {3.50308391494906*^9, 3.5030839385928383`*^9}, {
  3.5030839858602877`*^9, 3.5030840131806498`*^9}, {3.5030840477329473`*^9, 
  3.5030841238725557`*^9}, {3.503084155786325*^9, 3.50308416600142*^9}},
 CellTags->"i:79"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 "9.12 Summary of Basic",
 StyleBox[" Mathematica",
  FontSlant->"Italic"],
 " Commands"
}], "Subtitle",
 CellTags->"c:67"],

Cell["", "Text"],

Cell["\<\
This section summarizes some of the commands learned in the previous \
sections. For quick reference, you may want to print it out and keep it \
beside the computer as you work.\
\>", "Text"],

Cell[TextData[{
 "Many of the following tables are adapted from similar tables in ",
 StyleBox[ButtonBox["The Mathematica Book",
  BaseStyle->"Hyperlink",
  ButtonData:>"refs"],
  FontSlant->"Italic"],
 ". More information can be found there, or by using the online help function \
(see Sec. ",
 ButtonBox["9.7",
  BaseStyle->"Hyperlink",
  ButtonData:>"c:36"],
 ")."
}], "Text"],

Cell[CellGroupData[{

Cell["9.12.1 Elementary Functions", "Subsubtitle",
 CellTags->"c:68"],

Cell["", "Text"],

Cell[BoxData[
 FormBox[
  StyleBox[
   FrameBox[
    StyleBox[GridBox[{
       {
        RowBox[{"x", "+", "y"}], "add"},
       {
        RowBox[{"-", "x"}], "minus"},
       {
        RowBox[{"x", "/", "y"}], "divide"},
       {
        RowBox[{"x", " ", "y", "   ", "or", " ", "x", "*", "y", " "}], 
        "multiply"},
       {
        RowBox[{"x", "^", "y"}], "power"}
      },
      GridBoxAlignment->{
       "Columns" -> {Right, {Left}}, "ColumnsIndexed" -> {}, 
        "Rows" -> {{Baseline}}, "RowsIndexed" -> {}}],
     GridBoxOptions->{
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}}}]], "2ColumnBox"], TraditionalForm]], "Text"],

Cell["Arithmetic operations", "Caption"],

Cell[TextData[{
 "The arguments of all ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " functions are enclosed with square brackets.\nThe names of all intrinsic \
",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " functions begin with capital letters."
}], "Text",
 CellFrame->True,
 Background->GrayLevel[0.849989]],

Cell["Two important rules about functions.", "Caption"],

Cell[BoxData[
 FormBox[
  StyleBox[
   FrameBox[
    StyleBox[GridBox[{
       {
        RowBox[{
         StyleBox["Sqrt",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         StyleBox["[",
          FontFamily->"Courier",
          FontWeight->"Bold"], "x", 
         StyleBox["]",
          FontFamily->"Courier",
          FontWeight->"Bold"]}], 
        RowBox[{"square", " ", "root", " ", 
         RowBox[{"(", 
          SqrtBox["x"], ")"}]}]},
       {
        RowBox[{
         StyleBox["Abs",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         StyleBox["[",
          FontFamily->"Courier",
          FontWeight->"Bold"], "x", 
         StyleBox["]",
          FontFamily->"Courier",
          FontWeight->"Bold"]}], 
        RowBox[{"absolute", " ", "value"}]},
       {
        RowBox[{
         StyleBox["Mod",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         StyleBox["[",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         RowBox[{"x", ",", "n"}], 
         StyleBox["]",
          FontFamily->"Courier",
          FontWeight->"Bold"]}], 
        RowBox[{"x", " ", "modulo", " ", "n"}]},
       {
        RowBox[{"n", 
         StyleBox["!",
          FontFamily->"Courier",
          FontWeight->"Bold"]}], 
        RowBox[{"factorial", " ", "function"}]},
       {
        RowBox[{
         StyleBox["Exp",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         StyleBox["[",
          FontFamily->"Courier",
          FontWeight->"Bold"], "x", 
         StyleBox["]",
          FontFamily->"Courier",
          FontWeight->"Bold"]}], 
        RowBox[{"exponential", " ", 
         RowBox[{"(", 
          SuperscriptBox["\[ExponentialE]", "x"], ")"}]}]},
       {
        RowBox[{
         StyleBox["Log",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         StyleBox["[",
          FontFamily->"Courier",
          FontWeight->"Bold"], "x", 
         StyleBox["]",
          FontFamily->"Courier",
          FontWeight->"Bold"]}], 
        RowBox[{"natural", " ", "logarithm", " ", 
         RowBox[{"(", 
          RowBox[{
           SubscriptBox["log", "\[ExponentialE]"], "x"}], ")"}]}]},
       {
        RowBox[{
         StyleBox["Log",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         StyleBox["[",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         RowBox[{"b", ",", "x"}], 
         StyleBox["]",
          FontFamily->"Courier",
          FontWeight->"Bold"]}], 
        RowBox[{"log", " ", "to", " ", "the", " ", "base", " ", "b", " ", 
         RowBox[{"(", 
          RowBox[{
           SubscriptBox["log", "b"], "x"}], ")"}]}]},
       {
        RowBox[{
         RowBox[{
          StyleBox["Sin",
           FontFamily->"Courier",
           FontWeight->"Bold"], 
          StyleBox["[",
           FontFamily->"Courier",
           FontWeight->"Bold"], "x", 
          StyleBox["]",
           FontFamily->"Courier",
           FontWeight->"Bold"]}], ",", 
         RowBox[{
          StyleBox["Cos",
           FontFamily->"Courier",
           FontWeight->"Bold"], 
          StyleBox["[",
           FontFamily->"Courier",
           FontWeight->"Bold"], "x", 
          StyleBox["]",
           FontFamily->"Courier",
           FontWeight->"Bold"]}], ",", 
         RowBox[{
          StyleBox["Tan",
           FontFamily->"Courier",
           FontWeight->"Bold"], 
          StyleBox["[",
           FontFamily->"Courier",
           FontWeight->"Bold"], "x", 
          StyleBox["]",
           FontFamily->"Courier",
           FontWeight->"Bold"]}]}], 
        RowBox[{"trigonometric", " ", "functions", " ", 
         RowBox[{"(", 
          RowBox[{"arguments", " ", "in", " ", "radians"}], ")"}]}]},
       {
        RowBox[{
         RowBox[{
          StyleBox["ArcSin",
           FontFamily->"Courier",
           FontWeight->"Bold"], 
          StyleBox["[",
           FontFamily->"Courier",
           FontWeight->"Bold"], "x", 
          StyleBox["]",
           FontFamily->"Courier",
           FontWeight->"Bold"]}], ",", 
         RowBox[{
          StyleBox["ArcCos",
           FontFamily->"Courier",
           FontWeight->"Bold"], 
          StyleBox["[",
           FontFamily->"Courier",
           FontWeight->"Bold"], "x", 
          StyleBox["]",
           FontFamily->"Courier",
           FontWeight->"Bold"]}], ",", 
         RowBox[{
          StyleBox["ArcTan",
           FontFamily->"Courier",
           FontWeight->"Bold"], 
          StyleBox["[",
           FontFamily->"Courier",
           FontWeight->"Bold"], "x", 
          StyleBox["]",
           FontFamily->"Courier",
           FontWeight->"Bold"]}]}], 
        RowBox[{"inverse", " ", "trigonometric", " ", "functions"}]},
       {
        StyleBox[
         RowBox[{"Random", "[", "]"}],
         FontFamily->"Courier",
         FontWeight->"Bold"], 
        RowBox[{
        "random", " ", "real", " ", "number", " ", "in", " ", "the", " ", 
         "range", " ", "from", " ", "0", " ", "to", " ", "1.", " ", "See", 
         " ", "also", " ", "the", " ", "following", " ", 
         RowBox[{"functions", ":"}]}]},
       {
        StyleBox[
         RowBox[{"RandomReal", "[", "]"}],
         FontFamily->"Courier",
         FontWeight->"Bold"], 
        RowBox[{
        "random", " ", "real", " ", "number", " ", "in", " ", "the", " ", 
         "range", " ", "from", " ", "0", " ", "to", " ", "1"}]},
       {
        StyleBox[
         RowBox[{
          RowBox[{"RandomComplex", "[", "]"}], ",", " ", 
          RowBox[{"RandomInteger", "[", "]"}]}],
         FontFamily->"Courier",
         FontWeight->"Bold"], 
        RowBox[{
        "random", " ", "complex", " ", "number", " ", "or", " ", "integer", 
         " "}]}
      },
      GridBoxAlignment->{
       "Columns" -> {Right, {Left}}, "ColumnsIndexed" -> {}, 
        "Rows" -> {{Baseline}}, "RowsIndexed" -> {}}],
     GridBoxOptions->{
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}}}]], "2ColumnBox"], TraditionalForm]], "Text"],

Cell["Some elementary mathematical functions. ", "Caption"],

Cell[BoxData[
 FormBox[
  StyleBox[
   FrameBox[
    StyleBox[GridBox[{
       {
        StyleBox["I",
         FontFamily->"Courier",
         FontWeight->"Bold",
         FontSlant->"Plain"], 
        RowBox[{"\[ImaginaryI]", " ", "=", " ", 
         SqrtBox[
          RowBox[{"-", "1"}]]}]},
       {
        StyleBox["Pi",
         FontFamily->"Courier",
         FontWeight->"Bold"], 
        RowBox[{
         RowBox[{"\[DoubledPi]", "\[TildeEqual]", " ", "3.14159"}], "..."}]},
       {
        StyleBox["E",
         FontFamily->"Courier",
         FontWeight->"Bold",
         FontSlant->"Plain"], 
        RowBox[{
         RowBox[{"\[ExponentialE]", " ", "\[TildeEqual]", " ", "2.71828"}], 
         "..."}]},
       {
        StyleBox["Degree",
         FontFamily->"Courier",
         FontWeight->"Bold"], 
        RowBox[{
         RowBox[{"\[DoubledPi]", "/", "180"}], " ", 
         RowBox[{"(", 
          RowBox[{
          "degree", " ", "to", " ", "radian", " ", "conversion", " ", 
           "factor"}], ")"}]}]},
       {
        StyleBox["Infinity",
         FontFamily->"Courier",
         FontWeight->"Bold"], "\[Infinity]"}
      },
      GridBoxAlignment->{
       "Columns" -> {Right, {Left}}, "ColumnsIndexed" -> {}, 
        "Rows" -> {{Baseline}}, "RowsIndexed" -> {}}],
     GridBoxOptions->{
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}}}]], "2ColumnBox"], TraditionalForm]], "Text"],

Cell["Some common mathematical constants. ", "Caption"],

Cell[TextData[Cell[BoxData[
 FormBox[
  StyleBox[
   FrameBox[
    StyleBox[GridBox[{
       {
        RowBox[{"x", " ", 
         StyleBox["//",
          FontFamily->"Courier",
          FontWeight->"Bold",
          FontSlant->"Plain"], 
         RowBox[{
          StyleBox["N",
           FontFamily->"Courier",
           FontWeight->"Bold",
           FontSlant->"Plain"], "  ", "or", "  ", 
          RowBox[{
           StyleBox["N",
            FontFamily->"Courier",
            FontWeight->"Bold",
            FontSlant->"Plain"], 
           StyleBox["[",
            FontFamily->"Courier",
            FontWeight->"Bold"], "x", 
           StyleBox["]",
            FontFamily->"Courier",
            FontWeight->"Bold"]}]}]}], 
        RowBox[{"numerical", " ", "value", " ", "of", " ", "x"}]},
       {
        RowBox[{
         StyleBox["N",
          FontFamily->"Courier",
          FontWeight->"Bold",
          FontSlant->"Plain"], 
         StyleBox["[",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         RowBox[{"x", ",", "n"}], 
         StyleBox["]",
          FontFamily->"Courier",
          FontWeight->"Bold"]}], 
        RowBox[{
         RowBox[{
         "numerical", " ", "value", " ", "of", " ", "x", " ", "calculated", 
          " ", "to", " ", "n"}], "-", 
         RowBox[{"digit", " ", "precision"}]}]}
      },
      GridBoxAlignment->{
       "Columns" -> {Right, {Left}}, "ColumnsIndexed" -> {}, 
        "Rows" -> {{Baseline}}, "RowsIndexed" -> {}}],
     GridBoxOptions->{
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}}}]], "2ColumnBox"], TraditionalForm]], "Text",
 CellTags->"4.3"]], "Text"],

Cell["Numerical evaluation functions", "Caption"],

Cell[BoxData[
 FormBox[
  StyleBox[
   FrameBox[
    StyleBox[GridBox[{
       {
        RowBox[{
         RowBox[{
          StyleBox["NIntegrate",
           FontFamily->"Courier",
           FontWeight->"Bold"], 
          StyleBox["[",
           FontFamily->"Courier",
           FontWeight->"Bold"], 
          RowBox[{"f", ",", 
           RowBox[{"{", 
            RowBox[{"x", ",", 
             StyleBox["xmin",
              FontSlant->"Italic"], ",", 
             StyleBox["xmax",
              FontSlant->"Italic"]}], "}"}]}], 
          StyleBox["]",
           FontFamily->"Courier",
           FontWeight->"Bold"]}], 
         StyleBox[" ",
          FontFamily->"Courier",
          FontWeight->"Bold"]}], 
        RowBox[{"numerical", " ", "approximation", " ", "to", " ", 
         StyleBox[
          RowBox[{
           SubsuperscriptBox["\[Integral]", 
            StyleBox["xmin",
             FontSize->10,
             FontSlant->Italic], 
            StyleBox["xmax",
             FontSize->10,
             FontSlant->Italic]], " ", 
           RowBox[{"f", " ", "d", "x"}]}], "InlineFormula"]}]},
       {
        RowBox[{
         RowBox[{
          StyleBox["NSum",
           FontFamily->"Courier",
           FontWeight->"Bold"], 
          StyleBox["[",
           FontFamily->"Courier",
           FontWeight->"Bold"], 
          RowBox[{"f", ",", 
           RowBox[{"{", 
            RowBox[{"i", ",", 
             StyleBox["imin",
              FontSlant->"Italic"], ",", 
             StyleBox["Infinity",
              FontFamily->"Courier",
              FontWeight->"Bold"]}], "}"}]}], 
          StyleBox["]",
           FontFamily->"Courier",
           FontWeight->"Bold"]}], 
         StyleBox[" ",
          FontFamily->"Courier",
          FontWeight->"Bold"]}], 
        RowBox[{"numerical", " ", "approximation", " ", "to", " ", 
         RowBox[{
          UnderoverscriptBox["\[Sum]", 
           StyleBox[
            RowBox[{" ", 
             RowBox[{"i", "=", "imin"}]}],
            FontSize->10,
            FontSlant->Italic], "\[Infinity]",
           LimitsPositioning->True], " ", "f"}]}]},
       {
        RowBox[{
         StyleBox[
          RowBox[{"NSolve", "["}],
          FontFamily->"Courier",
          FontWeight->Bold], 
         StyleBox["lhs",
          FontSlant->Italic], 
         StyleBox["==",
          FontFamily->"Courier",
          FontWeight->Bold], 
         StyleBox["rhs",
          FontSlant->Italic], 
         StyleBox[",",
          FontFamily->"Courier",
          FontWeight->Bold], 
         StyleBox["x",
          FontSlant->Italic], 
         StyleBox["]",
          FontFamily->"Courier",
          FontWeight->Bold]}], 
        RowBox[{
        "numerical", " ", "solutions", " ", "to", " ", "some", " ", "simple", 
         " ", "equations", " ", 
         RowBox[{"(", 
          RowBox[{"eg", ".", " ", "polynomials"}], ")"}]}]},
       {
        RowBox[{
         RowBox[{
          StyleBox["FindRoot",
           FontFamily->"Courier",
           FontWeight->"Bold"], 
          StyleBox["[",
           FontFamily->"Courier",
           FontWeight->"Bold"], 
          RowBox[{"f", ",", 
           RowBox[{"{", 
            RowBox[{"x", ",", 
             SubscriptBox["x", "0"]}], "}"}]}], 
          StyleBox["]",
           FontFamily->"Courier",
           FontWeight->"Bold"]}], 
         StyleBox[" ",
          FontFamily->"Courier",
          FontWeight->"Bold"]}], 
        RowBox[{
         RowBox[{
         "search", " ", "for", " ", "one", " ", "numerical", " ", "solution", 
          " ", "to", " ", "an", " ", "equation"}], ",", " ", 
         RowBox[{
          RowBox[{"starting", " ", "at", " ", "x"}], " ", "=", " ", 
          SubscriptBox["x", "0"]}]}]},
       {
        RowBox[{
         RowBox[{
          StyleBox["FindMinimum",
           FontFamily->"Courier",
           FontWeight->"Bold"], 
          StyleBox["[",
           FontFamily->"Courier",
           FontWeight->"Bold"], 
          RowBox[{"f", ",", 
           RowBox[{"{", 
            RowBox[{"x", ",", 
             SubscriptBox["x", "0"]}], "}"}]}], 
          StyleBox["]",
           FontFamily->"Courier",
           FontWeight->"Bold"]}], 
         StyleBox[" ",
          FontFamily->"Courier",
          FontWeight->"Bold"]}], 
        RowBox[{
         RowBox[{"search", " ", "for", " ", 
          StyleBox["a",
           FontSlant->"Plain"], " ", "local", " ", "minimum", " ", "of", " ", 
          "f", " ", "starting", " ", "at", " ", "x"}], " ", "=", " ", 
         SubscriptBox["x", "0"]}]},
       {
        RowBox[{
         RowBox[{
          StyleBox["FindMaximum",
           FontFamily->"Courier",
           FontWeight->"Bold"], 
          StyleBox["[",
           FontFamily->"Courier",
           FontWeight->"Bold"], 
          RowBox[{"f", ",", 
           RowBox[{"{", 
            RowBox[{"x", ",", 
             SubscriptBox["x", "0"]}], "}"}]}], 
          StyleBox["]",
           FontFamily->"Courier",
           FontWeight->"Bold"]}], 
         StyleBox[" ",
          FontFamily->"Courier",
          FontWeight->"Bold"]}], 
        RowBox[{
         RowBox[{"search", " ", "for", " ", 
          StyleBox["a",
           FontSlant->"Plain"], " ", "local", " ", "maximum", " ", "of", " ", 
          "f", " ", "starting", " ", "at", " ", "x"}], " ", "=", " ", 
         SubscriptBox["x", "0"]}]}
      },
      GridBoxAlignment->{
       "Columns" -> {Right, {Left}}, "ColumnsIndexed" -> {}, 
        "Rows" -> {{Baseline}}, "RowsIndexed" -> {}}],
     GridBoxOptions->{
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}}}]], "2ColumnBox"], TraditionalForm]], "Text",
 CellChangeTimes->{{3.503091274729301*^9, 3.503091282703683*^9}}],

Cell["Some numerical operations. ", "Caption"],

Cell[BoxData[
 FormBox[
  StyleBox[
   FrameBox[
    StyleBox[GridBox[{
       {
        RowBox[{"x", "+", 
         RowBox[{
          StyleBox["I",
           FontFamily->"Courier",
           FontWeight->"Bold",
           FontSlant->"Plain"], " ", "y"}]}], 
        RowBox[{
         RowBox[{"the", " ", "complex", " ", "number", " ", "x"}], "+", 
         RowBox[{"\[ImaginaryI]", " ", "y"}]}]},
       {
        RowBox[{
         StyleBox["Re",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         StyleBox["[",
          FontFamily->"Courier",
          FontWeight->"Bold"], "z", 
         StyleBox["]",
          FontFamily->"Courier",
          FontWeight->"Bold"]}], 
        RowBox[{"real", " ", "part"}]},
       {
        RowBox[{
         StyleBox["Im",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         StyleBox["[",
          FontFamily->"Courier",
          FontWeight->"Bold"], "z", 
         StyleBox["]",
          FontFamily->"Courier",
          FontWeight->"Bold"]}], 
        RowBox[{"real", " ", "part"}]},
       {
        RowBox[{
         StyleBox["Conjugate",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         StyleBox["[",
          FontFamily->"Courier",
          FontWeight->"Bold"], "z", 
         StyleBox["]",
          FontFamily->"Courier",
          FontWeight->"Bold"]}], 
        RowBox[{"complex", " ", "conjugate", " ", 
         SuperscriptBox["z", "*"]}]},
       {
        RowBox[{
         StyleBox["Abs",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         StyleBox["[",
          FontFamily->"Courier",
          FontWeight->"Bold"], "z", 
         StyleBox["]",
          FontFamily->"Courier",
          FontWeight->"Bold"]}], 
        RowBox[{
         RowBox[{"absolute", " ", "value"}], " ", "|", "z", "|"}]},
       {
        RowBox[{
         StyleBox["Arg",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         StyleBox["[",
          FontFamily->"Courier",
          FontWeight->"Bold"], "z", 
         StyleBox["]",
          FontFamily->"Courier",
          FontWeight->"Bold"]}], 
        RowBox[{
         RowBox[{"phase", " ", "\[Phi]", "  ", "of", " ", 
          RowBox[{"z", ":", " ", "z"}]}], "=", 
         RowBox[{"|", "z", "|", 
          SuperscriptBox["\[ExponentialE]", 
           RowBox[{"\[ImaginaryI]", " ", "\[Phi]"}]]}]}]}
      },
      GridBoxAlignment->{
       "Columns" -> {Right, {Left}}, "ColumnsIndexed" -> {}, 
        "Rows" -> {{Baseline}}, "RowsIndexed" -> {}}],
     GridBoxOptions->{
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}}}]], "2ColumnBox"], TraditionalForm]], "Text"],

Cell["Some complex number operations. ", "Caption"]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
9.12.2 Using Previous Results; Substitution and Defining Variables\
\>", "Subsubtitle",
 CellTags->"c:69"],

Cell["", "Text"],

Cell[BoxData[
 FormBox[
  StyleBox[
   FrameBox[
    StyleBox[GridBox[{
       {
        StyleBox["%",
         FontFamily->"Courier",
         FontWeight->"Bold"], 
        RowBox[{"previous", " ", "result", " "}]},
       {
        StyleBox["%%",
         FontFamily->"Courier",
         FontWeight->"Bold"], 
        RowBox[{"next", "-", "to", "-", 
         RowBox[{"last", "  ", "result", " "}]}]},
       {
        RowBox[{
         RowBox[{
          StyleBox["%%",
           FontFamily->"Courier",
           FontWeight->"Bold"], " ", "..."}], 
         StyleBox["%",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         RowBox[{"(", 
          RowBox[{"k", " ", "times"}], ")"}]}], 
        RowBox[{
         StyleBox[
          RowBox[{
           StyleBox["k",
            FontSlant->"Italic"], "th"}]], " ", "previous", " ", "result", 
         "  "}]},
       {
        RowBox[{
         StyleBox["%",
          FontFamily->"Courier",
          FontWeight->"Bold"], "n", " "}], 
        RowBox[{"result", " ", "from", " ", "output", " ", "line", " ", 
         RowBox[{
          RowBox[{
           StyleBox["Out",
            FontFamily->"Courier",
            FontWeight->"Bold"], 
           StyleBox["[",
            FontFamily->"Courier",
            FontWeight->"Bold"], "n", 
           StyleBox["]",
            FontFamily->"Courier",
            FontWeight->"Bold"]}], ".", " "}]}]}
      },
      GridBoxAlignment->{
       "Columns" -> {Right, {Left}}, "ColumnsIndexed" -> {}, 
        "Rows" -> {{Baseline}}, "RowsIndexed" -> {}}],
     GridBoxOptions->{
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}}}]], "2ColumnBox"], TraditionalForm]], "Text"],

Cell["\<\
A few of the ways to refer to results in previously-evaluated cells. \
\>", "Caption"],

Cell[BoxData[
 FormBox[
  StyleBox[
   FrameBox[
    StyleBox[GridBox[{
       {
        RowBox[{
         StyleBox["x",
          FontFamily->"Courier",
          FontWeight->"Bold",
          FontSlant->"Plain"], 
         StyleBox[
          StyleBox["=", "MB"],
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         StyleBox["value",
          FontSlant->"Italic"], 
         StyleBox["  ",
          FontSlant->"Italic"]}], 
        RowBox[{"assign", " ", 
         StyleBox["a",
          FontSlant->"Plain"], " ", "value", " ", "to", " ", "the", " ", 
         "variable", " ", 
         StyleBox["x",
          FontFamily->"Courier",
          FontWeight->"Bold",
          FontSlant->"Plain"]}]},
       {
        RowBox[{
         StyleBox["x",
          FontFamily->"Courier",
          FontWeight->"Bold",
          FontSlant->"Plain"], 
         StyleBox["=",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         RowBox[{
          StyleBox["y",
           FontFamily->"Courier",
           FontWeight->"Bold",
           FontSlant->"Plain"], 
          StyleBox["=",
           FontFamily->"Courier",
           FontWeight->"Bold"], 
          StyleBox["value",
           FontSlant->"Italic"], 
          StyleBox["  ",
           FontSlant->"Italic"]}]}], 
        RowBox[{"assign", " ", 
         StyleBox["a",
          FontSlant->"Plain"], " ", "value", " ", "to", " ", "both", " ", 
         StyleBox["x",
          FontFamily->"Courier",
          FontWeight->"Bold",
          FontSlant->"Plain"], " ", "and", " ", 
         StyleBox["y",
          FontFamily->"Courier",
          FontWeight->"Bold",
          FontSlant->"Plain"]}]},
       {
        RowBox[{
         StyleBox[
          RowBox[{
           StyleBox["x",
            FontSlant->"Plain"], "=."}],
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         StyleBox[
          RowBox[{
           StyleBox[" ",
            FontFamily->"Courier",
            FontWeight->"Bold"], " "}]], "or", " ", 
         StyleBox[
          RowBox[{"Clear", "[", 
           StyleBox["x",
            FontSlant->"Plain"], "]"}],
          FontFamily->"Courier",
          FontWeight->"Bold"]}], 
        RowBox[{"clear", "  ", "the", " ", "value", " ", "of", 
         StyleBox[
          RowBox[{" ", 
           StyleBox[" ", "TI"]}]], 
         StyleBox["x", "TI",
          FontFamily->"Courier",
          FontWeight->"Bold",
          FontSlant->"Plain"]}]},
       {
        StyleBox[
         RowBox[{"Clear", "[", "\"\<Global`*\>\"", "]"}],
         FontFamily->"Courier",
         FontWeight->"Bold"], 
        RowBox[{
         RowBox[{"clear", " ", "all", " ", "user"}], "-", 
         RowBox[{"defined", " ", "variables", " ", 
          RowBox[{"(", 
           RowBox[{
           "all", " ", "variables", " ", "in", " ", "the", " ", "Global", " ",
             "context"}], ")"}]}]}]},
       {
        RowBox[{
         StyleBox["Remove", "MB"], 
         StyleBox[
          StyleBox["[", "MB"],
          FontFamily->"Courier"], 
         StyleBox["x",
          FontFamily->"Courier",
          FontWeight->"Bold",
          FontSlant->"Plain"], 
         StyleBox["]",
          FontFamily->"Courier"]}], 
        RowBox[{
         RowBox[{"clear", " ", "the", " ", "value", " ", "of", " ", 
          StyleBox["x",
           FontFamily->"Courier",
           FontWeight->"Bold",
           FontSlant->"Plain"], " ", "and", " ", "remove", " ", "it", " ", 
          "from", " ", "the", " ", "set", " ", "of", " ", "user"}], "-", 
         RowBox[{"defined", " ", "variables"}]}]},
       {
        RowBox[{
         StyleBox["?", "MB"], 
         StyleBox["x",
          FontFamily->"Courier",
          FontWeight->"Bold",
          FontSlant->"Plain"]}], 
        RowBox[{"provide", " ", "the", " ", "definition", " ", "of", " ", 
         StyleBox["x",
          FontFamily->"Courier",
          FontWeight->"Bold",
          FontSlant->"Plain"]}]},
       {
        StyleBox[
         RowBox[{"?", "Global`*"}], "MB"], 
        RowBox[{
         RowBox[{"list", "  ", "all", " ", "user"}], "-", 
         RowBox[{"defined", " ", "variables"}]}]}
      },
      GridBoxAlignment->{
       "Columns" -> {Right, {Left}}, "ColumnsIndexed" -> {}, 
        "Rows" -> {{Baseline}}, "RowsIndexed" -> {}}],
     GridBoxOptions->{
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}}}]], "2ColumnBox"], TraditionalForm]], "Text"],

Cell["Assigning, removing,  and checking values. ", "Caption"],

Cell[TextData[{
 StyleBox["x y",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " means ",
 StyleBox["x",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " times ",
 StyleBox["y",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ".\n",
 StyleBox["xy",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " with no space means a variable named ",
 StyleBox["xy",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ".\n",
 StyleBox["3x",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " means ",
 StyleBox["3",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " times ",
 StyleBox["x",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 "."
}], "Text",
 CellFrame->True,
 Background->GrayLevel[0.849989]],

Cell[TextData[{
 "Some points to watch when using variables in ",
 StyleBox["Mathematica", "SO"],
 ". "
}], "Caption"],

Cell[BoxData[
 FormBox[
  StyleBox[
   FrameBox[
    StyleBox[GridBox[{
       {
        RowBox[{
         StyleBox["expr",
          FontSlant->"Italic"], 
         StyleBox["/.",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         StyleBox[" ",
          FontFamily->"Courier"], 
         RowBox[{
          StyleBox["x",
           FontFamily->"Courier",
           FontWeight->"Bold",
           FontSlant->"Plain"], "\[Rule]", 
          StyleBox["value",
           FontSlant->"Italic"]}]}], 
        RowBox[{"replace", " ", 
         StyleBox["x",
          FontFamily->"Courier",
          FontWeight->"Bold",
          FontSlant->"Plain"], " ", "by", " ", 
         StyleBox["value",
          FontSlant->"Italic"], " ", "in", " ", 
         StyleBox["expr",
          FontSlant->"Italic"]}]},
       {
        RowBox[{
         StyleBox["expr",
          FontSlant->"Italic"], 
         StyleBox["/.",
          FontFamily->"Courier",
          FontWeight->"Bold"], " ", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            StyleBox["x",
             FontFamily->"Courier",
             FontWeight->"Bold",
             FontSlant->"Plain"], "\[Rule]", 
            StyleBox[
             SubscriptBox["value", "1"],
             FontSlant->"Italic"]}], 
           StyleBox[",",
            FontSlant->"Italic"], 
           StyleBox[" ",
            FontSlant->"Italic"], 
           RowBox[{
            StyleBox["y",
             FontFamily->"Courier",
             FontWeight->"Bold",
             FontSlant->"Plain"], 
            StyleBox["\[Rule]",
             FontSlant->"Italic"], 
            StyleBox[
             SubscriptBox["value", "2"],
             FontSlant->"Italic"]}], 
           StyleBox[",",
            FontSlant->"Italic"], 
           StyleBox["...",
            FontSlant->"Italic"]}], 
          StyleBox["}",
           FontSlant->"Italic"]}], 
         StyleBox[" ",
          FontSlant->"Italic"]}], 
        RowBox[{"perform", " ", "several", " ", "replacements"}]}
      },
      GridBoxAlignment->{
       "Columns" -> {Right, {Left}}, "ColumnsIndexed" -> {}, 
        "Rows" -> {{Baseline}}, "RowsIndexed" -> {}}],
     GridBoxOptions->{
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}}}]], "2ColumnBox"], TraditionalForm]], "Text"],

Cell["Ways to replace symbols in expressions", "Caption"],

Cell[BoxData[
 FormBox[
  StyleBox[
   FrameBox[GridBox[{
      {
       RowBox[{
        StyleBox["Expand", "MB"], 
        StyleBox["[", "MB"], 
        StyleBox["expr", "TI"], 
        StyleBox["]", "MB"]}], 
       RowBox[{
       "multiply", " ", "out", " ", "products", " ", "and", " ", "powers"}]},
      {
       RowBox[{
        StyleBox["ExpandAll", "MB"], 
        StyleBox["[", "MB"], 
        StyleBox["expr", "TI"], 
        StyleBox["]", "MB"]}], 
       RowBox[{"apply", " ", 
        StyleBox["Expand",
         FontFamily->"Courier",
         FontWeight->"Bold"], " ", "everywhere"}]},
      {
       RowBox[{
        StyleBox["Factor", "MB"], 
        StyleBox["[", "MB"], 
        StyleBox["expr", "TI"], 
        StyleBox["]", "MB"]}], 
       RowBox[{"reduce", " ", "to", 
        StyleBox[" ",
         FontSlant->"Italic"], 
        StyleBox["a",
         FontSlant->"Plain"], " ", "product", " ", "of", " ", "factors"}]},
      {
       RowBox[{
        StyleBox["Together", "MB"], 
        StyleBox["[", "MB"], 
        StyleBox["expr", "TI"], 
        StyleBox["]", "MB"]}], 
       RowBox[{"put", " ", "all", " ", "terms", " ", "over", " ", 
        StyleBox["a",
         FontSlant->"Plain"], " ", "common", " ", "denominator"}]},
      {
       RowBox[{
        StyleBox["Apart", "MB"], 
        StyleBox["[", "MB"], 
        StyleBox["expr", "TI"], 
        StyleBox["]", "MB"]}], 
       RowBox[{
       "separate", " ", "into", " ", "terms", " ", "with", " ", "simple", " ",
         "denominators"}]},
      {
       RowBox[{
        StyleBox["Cancel", "MB"], 
        StyleBox["[", "MB"], 
        StyleBox["expr", "TI"], 
        StyleBox["]", "MB"]}], 
       RowBox[{
       "cancel", " ", "common", " ", "factors", " ", "between", " ", 
        "numerators", " ", "and", " ", "denominators"}]},
      {
       RowBox[{"                        ", 
        RowBox[{
         StyleBox["Simplify", "MB"], 
         StyleBox["[", "MB"], 
         StyleBox["expr", "TI"], 
         StyleBox["]", "MB"]}]}], 
       RowBox[{"try", " ", 
        StyleBox["a",
         FontSlant->"Plain"], " ", "sequence", " ", "of", " ", "algebraic", 
        " ", "transformations", " ", "and", " ", "give", " ", "the", " ", 
        "smallest", " ", "form", " ", "of", 
        StyleBox[" ",
         FontSlant->"Italic"], 
        StyleBox["expr",
         FontSlant->"Italic"], 
        StyleBox[" ",
         FontSlant->"Italic"], "found", " "}]},
      {
       RowBox[{
        StyleBox["Collect", "MB"], 
        StyleBox["[", "MB"], 
        StyleBox[
         RowBox[{"expr", ",", "x"}], "TI"], 
        StyleBox["]", "MB"]}], 
       RowBox[{"group", " ", "together", " ", "powers", " ", "of", " ", "x"}]},
      {
       RowBox[{
        StyleBox["TrigExpand", "MB"], 
        StyleBox["[", "MB"], 
        StyleBox["expr", "TI"], 
        StyleBox["]", "MB"]}], 
       RowBox[{
       "expand", " ", "out", " ", "trigonometric", " ", "expressions", " ", 
        "into", " ", 
        StyleBox["a",
         FontSlant->"Plain"], " ", "sum", " ", "of", " ", "terms", " "}]},
      {
       RowBox[{
        StyleBox["TrigFactor", "MB"], 
        StyleBox["[", "MB"], 
        StyleBox["expr", "TI"], 
        StyleBox["]", "MB"]}], 
       RowBox[{
       "factor", " ", "trigonometric", " ", "expressions", " ", "into", " ", 
        "products", " ", "of", " ", "terms"}]},
      {
       RowBox[{
        StyleBox["TrigReduce", "MB"], 
        StyleBox["[", "MB"], 
        StyleBox["expr", "TI"], 
        StyleBox["]", "MB"]}], 
       RowBox[{
       "reduce", " ", "trigonometric", " ", "expressions", " ", "using", " ", 
        "multiple", " ", "angles", " "}]},
      {
       RowBox[{
        StyleBox["TrigToExp", "MB"], 
        StyleBox["[", "MB"], 
        StyleBox["expr", "TI"], 
        StyleBox["]", "MB"]}], 
       RowBox[{
       "convert", " ", "trigonometric", " ", "functions", " ", "to", " ", 
        "exponentials"}]},
      {
       RowBox[{
        StyleBox["ExpToTrig", "MB"], 
        StyleBox["[", "MB"], 
        StyleBox["expr", "TI"], 
        StyleBox["]", "MB"]}], 
       RowBox[{
       "convert", " ", "exponentials", " ", "to", " ", "trigonometric", " ", 
        "functions"}]},
      {
       RowBox[{
        StyleBox["FunctionExpand", "MB"], 
        StyleBox["[", "MB"], 
        StyleBox["expr", "TI"], 
        StyleBox["]", "MB"]}], 
       RowBox[{
       "expand", " ", "out", " ", "special", " ", "and", " ", "other", " ", 
        "functions"}]},
      {
       RowBox[{
        StyleBox["ComplexExpand", "MB"], 
        StyleBox["[", "MB"], 
        StyleBox["expr", "TI"], 
        StyleBox["]", "MB"]}], 
       RowBox[{
       "perform", " ", "expansions", " ", "assuming", " ", "that", " ", "all",
         " ", "variables", " ", "are", " ", "real"}]},
      {
       RowBox[{
        StyleBox["PowerExpand", "MB"], 
        StyleBox["[", "MB"], 
        StyleBox["expr", "TI"], 
        StyleBox["]", "MB"]}], 
       RowBox[{
        RowBox[{"transform", " ", 
         StyleBox[
          SuperscriptBox[
           RowBox[{"(", "xy", ")"}], "p"], "InlineFormula"], " ", "into", " ", 
         StyleBox[
          SuperscriptBox["x", "p"], "InlineFormula"], 
         StyleBox[
          SuperscriptBox["y", "p"], "InlineFormula"]}], ",", " ", 
        RowBox[{"etc", ".", " "}]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {Right, {Left}}, "ColumnsIndexed" -> {}, 
       "Rows" -> {{Baseline}}, "RowsIndexed" -> {}}]], "2ColumnBox"], 
  TraditionalForm]], "Text"],

Cell["Some functions for transforming algebraic expressions. ", "Caption"],

Cell[BoxData[
 FormBox[
  StyleBox[
   FrameBox[
    StyleBox[GridBox[{
       {
        RowBox[{
         RowBox[{
          StyleBox["Coefficient",
           FontFamily->"Courier",
           FontWeight->"Bold"], 
          StyleBox["[",
           FontFamily->"Courier",
           FontWeight->"Bold"], 
          StyleBox[
           RowBox[{"expr", ",", "form"}],
           FontSlant->"Italic"], 
          StyleBox["]",
           FontWeight->"Bold",
           FontSlant->"Italic"]}], "\n", "                ", 
         RowBox[{
          StyleBox["Numerator", "MB"], 
          StyleBox["[", "MB"], 
          StyleBox["expr", "TI"], 
          StyleBox["]", "TI"]}]}], 
        RowBox[{
         RowBox[{"coefficient", " ", "of", " ", 
          StyleBox["form",
           FontSlant->"Italic"], 
          StyleBox[" ",
           FontSlant->"Plain"], 
          StyleBox["in",
           FontSlant->"Plain"], 
          StyleBox["  ",
           FontSlant->"Plain"], 
          StyleBox["expr",
           FontSlant->"Italic"]}], "\n", 
         RowBox[{"numerator", " ", "of", " ", 
          StyleBox["expr",
           FontSlant->"Italic"]}]}]},
       {
        RowBox[{
         StyleBox["Denominator", "MB"], 
         StyleBox["[", "MB"], 
         StyleBox["expr", "TI"], 
         StyleBox["]", "TI"]}], 
        RowBox[{"denominator", "  ", "of", " ", 
         StyleBox["expr",
          FontSlant->"Italic"]}]}
      },
      GridBoxAlignment->{
       "Columns" -> {Right, {Left}}, "ColumnsIndexed" -> {}, 
        "Rows" -> {{Baseline}}, "RowsIndexed" -> {}}],
     GridBoxOptions->{
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}}}]], "2ColumnBox"], TraditionalForm]], "Text"],

Cell["Functions to pick out pieces of rational expressions. ", "Caption"]
}, Closed]],

Cell[CellGroupData[{

Cell["9.12.3 Lists,Tables,Vectors and Matrices", "Subsubtitle",
 CellTags->"c:70"],

Cell[TextData[{
 "  \n",
 Cell[BoxData[
  FormBox[
   StyleBox[
    FrameBox[
     StyleBox[GridBox[{
        {
         RowBox[{"{", 
          RowBox[{"a", ",", "b", ",", "c"}], "}"}], 
         RowBox[{
          StyleBox["a",
           FontSlant->"Plain"], " ", "list"}]},
        {
         RowBox[{
          RowBox[{
           StyleBox["Part",
            FontFamily->"Courier",
            FontWeight->"Bold"], 
           StyleBox["[",
            FontFamily->"Courier",
            FontWeight->"Bold"], 
           RowBox[{
            StyleBox["list",
             FontFamily->"Times",
             FontSlant->"Italic"], ",", "i"}], 
           StyleBox["]",
            FontFamily->"Courier",
            FontWeight->"Bold"]}], "  ", 
          StyleBox["or",
           FontFamily->"Times",
           FontSlant->"Plain"], 
          StyleBox[
           RowBox[{
            StyleBox[" ",
             FontSlant->"Plain"], 
            StyleBox[" ",
             FontSlant->"Italic"]}],
           FontFamily->"Times"], 
          RowBox[{
           StyleBox["list",
            FontFamily->"Times",
            FontSlant->"Italic"], 
           StyleBox["[",
            FontFamily->"Courier",
            FontWeight->"Bold"], 
           RowBox[{
            StyleBox["[",
             FontFamily->"Courier",
             FontWeight->"Bold"], "i", 
            StyleBox["]",
             FontFamily->"Courier",
             FontWeight->"Bold"]}], 
           StyleBox["]",
            FontFamily->"Courier",
            FontWeight->"Bold"]}]}], 
         RowBox[{
          StyleBox["i",
           FontSlant->"Italic"], 
          StyleBox[" ",
           FontSlant->"Italic"], "th", " ", "element", " ", "of", " ", 
          StyleBox["list",
           FontSlant->"Italic"]}]}
       },
       GridBoxAlignment->{
        "Columns" -> {Right, {Left}}, "ColumnsIndexed" -> {}, 
         "Rows" -> {{Baseline}}, "RowsIndexed" -> {}}],
      GridBoxOptions->{
      GridBoxDividers->{
       "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
        "RowsIndexed" -> {}}}]], "2ColumnBox"], TraditionalForm]], "Text",
  CellTags->"4.3"]
}], "Text"],

Cell["Operations on list elements. ", "Caption"],

Cell[BoxData[
 FormBox[
  StyleBox[
   FrameBox[GridBox[{
      {
       RowBox[{
        StyleBox["Join",
         FontFamily->"Courier",
         FontWeight->"Bold"], 
        StyleBox["[",
         FontFamily->"Courier",
         FontWeight->"Bold"], 
        RowBox[{
         StyleBox[
          SubscriptBox["list", "1"],
          FontFamily->"Times",
          FontSlant->"Italic"], ",", 
         StyleBox[
          SubscriptBox["list", "2"],
          FontFamily->"Times",
          FontSlant->"Italic"]}], 
        StyleBox["]",
         FontFamily->"Courier",
         FontWeight->"Bold"]}], 
       StyleBox[
        RowBox[{"join", " ", "two", " ", "lists"}],
        FontFamily->"Times"]},
      {
       RowBox[{
        StyleBox["Delete",
         FontFamily->"Courier",
         FontWeight->"Bold"], 
        StyleBox["[",
         FontFamily->"Courier",
         FontWeight->"Bold"], 
        RowBox[{
         StyleBox["list",
          FontSlant->"Italic"], ",", "n"}], 
        StyleBox["]",
         FontFamily->"Courier",
         FontWeight->"Bold"]}], 
       RowBox[{"delete", " ", "the", " ", 
        StyleBox[
         RowBox[{
          StyleBox["n",
           FontSlant->"Italic"], "th"}]], " ", "element", " ", "from", " ", 
        StyleBox["list",
         FontSlant->"Italic"]}]},
      {
       RowBox[{
        StyleBox["Append",
         FontFamily->"Courier",
         FontWeight->"Bold"], 
        StyleBox["[",
         FontFamily->"Courier",
         FontWeight->"Bold"], 
        RowBox[{
         StyleBox["list",
          FontSlant->"Italic"], ",", 
         StyleBox["element",
          FontSlant->"Italic"]}], 
        StyleBox["]",
         FontFamily->"Courier",
         FontWeight->"Bold"]}], 
       RowBox[{"add", " ", 
        StyleBox["element",
         FontSlant->"Italic"], 
        StyleBox[" ",
         FontSlant->"Plain"], 
        StyleBox["to",
         FontSlant->"Plain"], 
        StyleBox[" ",
         FontSlant->"Plain"], 
        StyleBox["the",
         FontSlant->"Plain"], 
        StyleBox[" ",
         FontSlant->"Plain"], 
        StyleBox["end",
         FontSlant->"Plain"], 
        StyleBox[" ",
         FontSlant->"Plain"], 
        StyleBox["of",
         FontSlant->"Plain"], 
        StyleBox[" ",
         FontSlant->"Plain"], 
        StyleBox["list",
         FontSlant->"Italic"]}]},
      {
       RowBox[{
        StyleBox["Prepend",
         FontFamily->"Courier",
         FontWeight->"Bold"], 
        StyleBox["[",
         FontFamily->"Courier",
         FontWeight->"Bold"], 
        RowBox[{
         StyleBox["list",
          FontSlant->"Italic"], ",", 
         StyleBox["element",
          FontSlant->"Italic"]}], 
        StyleBox["]",
         FontFamily->"Courier",
         FontWeight->"Bold"]}], 
       RowBox[{"add", " ", 
        StyleBox["element",
         FontSlant->"Italic"], 
        StyleBox[" ",
         FontSlant->"Plain"], 
        StyleBox["to",
         FontSlant->"Plain"], 
        StyleBox[" ",
         FontSlant->"Plain"], 
        StyleBox["the",
         FontSlant->"Plain"], 
        StyleBox[" ",
         FontSlant->"Plain"], 
        StyleBox["beginning",
         FontSlant->"Plain"], 
        StyleBox[" ",
         FontSlant->"Plain"], 
        StyleBox["of",
         FontSlant->"Plain"], 
        StyleBox[" ",
         FontSlant->"Plain"], 
        StyleBox["list",
         FontSlant->"Italic"]}]},
      {
       RowBox[{
        StyleBox["Insert",
         FontFamily->"Courier",
         FontWeight->"Bold"], 
        StyleBox["[",
         FontFamily->"Courier",
         FontWeight->"Bold"], 
        RowBox[{
         StyleBox["list",
          FontSlant->"Italic"], ",", 
         StyleBox["element",
          FontSlant->"Italic"], ",", "n"}], 
        StyleBox["]",
         FontFamily->"Courier",
         FontWeight->"Bold"]}], 
       RowBox[{"place", " ", 
        StyleBox["element",
         FontSlant->"Italic"], " ", "at", " ", "the", " ", 
        StyleBox[
         RowBox[{
          StyleBox["n",
           FontSlant->"Italic"], "th"}]], " ", "position", " ", "in", " ", 
        StyleBox["list",
         FontSlant->"Italic"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {Right, {Left}}, "ColumnsIndexed" -> {}, 
       "Rows" -> {{Baseline}}, "RowsIndexed" -> {}}]], "2ColumnBox"], 
  TraditionalForm]], "Text"],

Cell["Operations on lists. ", "Caption"],

Cell[BoxData[
 FormBox[
  StyleBox[
   FrameBox[
    StyleBox[GridBox[{
       {
        RowBox[{
         StyleBox["Table", "MB"], 
         StyleBox["[", "MB"], 
         RowBox[{
          StyleBox["f",
           FontSlant->"Italic"], 
          StyleBox[",", "TI"], 
          StyleBox[
           RowBox[{"{", "imax", "}"}], "TI"]}], 
         StyleBox["]", "MB"]}], 
        RowBox[{"give", " ", 
         StyleBox["a",
          FontSlant->"Plain"], " ", "list", " ", "of", " ", 
         StyleBox["imax",
          FontSlant->"Italic"], " ", "values", " ", "of", " ", "f"}]}
      },
      GridBoxAlignment->{
       "Columns" -> {Right, {Left}}, "ColumnsIndexed" -> {}, 
        "Rows" -> {{Baseline}}, "RowsIndexed" -> {}}],
     GridBoxOptions->{
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, 
       "Rows" -> {False, False, False, False, False, True, {False}, False}, 
       "RowsIndexed" -> {}}}]], "2ColumnBox"], TraditionalForm]], "Text"],

Cell["Functions for generating and displaying lists. ", "Caption"],

Cell[BoxData[
 FormBox[
  StyleBox[
   FrameBox[GridBox[{
      {
       RowBox[{"{", 
        RowBox[{"a", ",", "b", ",", "c"}], "}"}], 
       RowBox[{"vector", " ", 
        RowBox[{"(", 
         RowBox[{"a", ",", "b", ",", "c"}], ")"}]}]},
      {
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"a", ",", "b"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"c", ",", "d"}], "}"}]}], "}"}], 
       RowBox[{"matrix", "  ", 
        RowBox[{"(", "\[NegativeThinSpace]", GridBox[{
           {"a", "b"},
           {"c", "d"}
          },
          GridBoxItemSize->{"Columns" -> {{
               Scaled[0.012]}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
            "RowsIndexed" -> {}}], "\[NegativeThinSpace]", ")"}]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {Right, {Left}}, "ColumnsIndexed" -> {}, 
       "Rows" -> {{Baseline}}, "RowsIndexed" -> {}}]], "2ColumnBox"], 
  TraditionalForm]], "Text"],

Cell["The representation of vectors and matrices by lists. ", "Caption"],

Cell[BoxData[
 FormBox[
  StyleBox[
   FrameBox[
    StyleBox[GridBox[{
       {
        RowBox[{" ", 
         RowBox[{"c", " ", 
          StyleBox["m",
           FontWeight->"Bold",
           FontSlant->"Plain"], 
          StyleBox[" ",
           FontWeight->"Bold",
           FontSlant->"Plain"]}]}], 
        RowBox[{"multiply", " ", "the", " ", "matrix", " ", 
         StyleBox["m",
          FontWeight->"Bold",
          FontSlant->"Plain"], " ", "by", " ", 
         StyleBox["a",
          FontSlant->"Plain"], 
         StyleBox[" ",
          FontSlant->"Plain"], "scalar", " ", "c"}]},
       {
        StyleBox[
         RowBox[{
          StyleBox["a",
           FontSlant->"Plain"], ".", 
          StyleBox["b",
           FontSlant->"Plain"], 
          StyleBox[" ",
           FontSlant->"Plain"]}],
         FontFamily->"Courier",
         FontWeight->"Bold"], 
        RowBox[{
        "dot", " ", "product", " ", "of", " ", "two", " ", "vectors"}]},
       {
        StyleBox[
         RowBox[{
          StyleBox["Inverse",
           FontFamily->"Courier"], 
          StyleBox["[",
           FontFamily->"Courier"], 
          StyleBox["m",
           FontSlant->"Plain"], 
          StyleBox["]",
           FontFamily->"Courier"]}],
         FontWeight->"Bold"], 
        RowBox[{"matrix", " ", "inverse"}]},
       {
        StyleBox[
         RowBox[{
          StyleBox["Det",
           FontFamily->"Courier"], 
          StyleBox["[",
           FontFamily->"Courier"], 
          StyleBox["m",
           FontSlant->"Plain"], 
          StyleBox["]",
           FontFamily->"Courier"]}],
         FontWeight->"Bold"], "determinant"},
       {
        StyleBox[
         RowBox[{
          StyleBox["Tr",
           FontFamily->"Courier"], 
          StyleBox["[",
           FontFamily->"Courier"], 
          StyleBox["m",
           FontSlant->"Plain"], 
          StyleBox["]",
           FontFamily->"Courier"]}],
         FontWeight->"Bold"], "trace"},
       {
        StyleBox[
         RowBox[{
          StyleBox["Transpose",
           FontFamily->"Courier"], 
          StyleBox["[",
           FontFamily->"Courier"], 
          StyleBox["m",
           FontSlant->"Plain"], 
          StyleBox["]",
           FontFamily->"Courier"]}],
         FontWeight->"Bold"], "transpose"},
       {
        StyleBox[
         RowBox[{
          StyleBox["Eigenvalues",
           FontFamily->"Courier"], 
          StyleBox["[",
           FontFamily->"Courier"], 
          StyleBox["m",
           FontSlant->"Plain"], 
          StyleBox["]",
           FontFamily->"Courier"]}],
         FontWeight->"Bold"], "eigenvalues"},
       {
        StyleBox[
         RowBox[{
          StyleBox["Eigenvectors",
           FontFamily->"Courier"], 
          StyleBox["[",
           FontFamily->"Courier"], 
          StyleBox["m",
           FontSlant->"Plain"], 
          StyleBox["]",
           FontFamily->"Courier"]}],
         FontWeight->"Bold"], "eigenvectors"}
      },
      GridBoxAlignment->{
       "Columns" -> {Right, {Left}}, "ColumnsIndexed" -> {}, 
        "Rows" -> {{Baseline}}, "RowsIndexed" -> {}}],
     GridBoxOptions->{
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}}}]], "2ColumnBox"], TraditionalForm]], "Text"],

Cell["Some mathematical operations on vectors and matrices. ", "Caption"],

Cell[BoxData[
 FormBox[
  StyleBox[
   FrameBox[
    StyleBox[GridBox[{
       {
        RowBox[{
         RowBox[{
          StyleBox["(",
           FontFamily->"Courier",
           FontWeight->"Bold"], 
          StyleBox[
           RowBox[{"x", "+", "y"}],
           FontSlant->"Italic"], 
          StyleBox[")",
           FontFamily->"Courier",
           FontWeight->"Bold"]}], 
         StyleBox["z",
          FontSlant->"Italic"]}], 
        RowBox[{
        "parentheses", " ", "are", " ", "used", " ", "for", " ", "grouping", 
         " ", "terms"}]},
       {
        RowBox[{
         StyleBox["f",
          FontSlant->"Italic"], 
         StyleBox["[",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         StyleBox["x",
          FontSlant->"Italic"], 
         StyleBox["]",
          FontFamily->"Courier",
          FontWeight->"Bold"]}], 
        RowBox[{
        "square", " ", "brackets", " ", "enclose", " ", "the", " ", 
         "arguments", " ", "of", " ", "functions"}]},
       {
        RowBox[{"{", 
         RowBox[{"a", ",", "b", ",", "c"}], "}"}], 
        RowBox[{"curley", " ", "brackets", " ", "denote", " ", "lists"}]},
       {
        RowBox[{
         StyleBox["list",
          FontSlant->"Italic"], 
         StyleBox["[",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         RowBox[{
          StyleBox["[",
           FontFamily->"Courier",
           FontWeight->"Bold"], 
          StyleBox["i",
           FontSlant->"Italic"], 
          StyleBox["]",
           FontFamily->"Courier",
           FontWeight->"Bold"]}], 
         StyleBox["]",
          FontFamily->"Courier",
          FontWeight->"Bold"]}], 
        RowBox[{
        "double", " ", "square", " ", "brackets", " ", "extract", " ", "list",
          " ", "elements"}]}
      },
      GridBoxAlignment->{
       "Columns" -> {Right, {Left}}, "ColumnsIndexed" -> {}, 
        "Rows" -> {{Baseline}}, "RowsIndexed" -> {}}],
     GridBoxOptions->{
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}}}]], "2ColumnBox"], TraditionalForm]], "Text"],

Cell[TextData[{
 "The four uses of brackets in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "."
}], "Caption"]
}, Closed]],

Cell[CellGroupData[{

Cell["9.12.4 Graphics", "Subsubtitle",
 CellTags->"c:72"],

Cell[CellGroupData[{

Cell["Basic Plotting", "Section",
 CellTags->"c:73"],

Cell[BoxData[
 FormBox[
  StyleBox[
   FrameBox[
    StyleBox[GridBox[{
       {
        RowBox[{
         StyleBox["Plot",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         StyleBox["[",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         RowBox[{"f", ",", 
          RowBox[{"{", 
           RowBox[{"x", ",", 
            StyleBox["xmin",
             FontSlant->"Italic"], ",", 
            StyleBox["xmax",
             FontSlant->"Italic"]}], "}"}]}], 
         StyleBox["]",
          FontFamily->"Courier",
          FontWeight->"Bold"]}], 
        RowBox[{"plot", " ", "f", " ", "as", " ", 
         StyleBox["a",
          FontSlant->"Plain"], " ", "function", " ", "of", " ", "x", " ", 
         "from", " ", 
         StyleBox["xmin",
          FontSlant->"Italic"], " ", "to", " ", 
         StyleBox["xmax",
          FontSlant->"Italic"]}]},
       {
        RowBox[{
         StyleBox["Plot",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         StyleBox["[",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            SubscriptBox["f", "1"], ",", 
            SubscriptBox["f", "2"], ",", "..."}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"x", ",", 
            StyleBox["xmin",
             FontSlant->"Italic"], ",", 
            StyleBox["xmax",
             FontSlant->"Italic"]}], "}"}]}], 
         StyleBox["]",
          FontFamily->"Courier",
          FontWeight->"Bold"]}], 
        RowBox[{
        "plot", " ", "several", " ", "functions", " ", "at", " ", "once", " ",
          "on", " ", "one", " ", "graph"}]},
       {
        RowBox[{
         StyleBox["Plot",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         StyleBox["[",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         RowBox[{"f", ",", 
          RowBox[{"{", 
           RowBox[{"x", ",", 
            StyleBox["xmin",
             FontSlant->"Italic"], ",", 
            StyleBox["xmax",
             FontSlant->"Italic"]}], "}"}], ",", " ", 
          RowBox[{
           StyleBox["PlotStyle",
            FontFamily->"Courier",
            FontWeight->"Bold"], 
           StyleBox["\[RightArrow]",
            FontSlant->"Italic"], 
           StyleBox["values",
            FontSlant->"Italic"]}]}], 
         StyleBox["]",
          FontFamily->"Courier",
          FontWeight->"Bold"]}], 
        RowBox[{"plot", " ", "f", " ", "with", " ", "the", " ", "option", " ", 
         StyleBox["PlotStyle",
          FontFamily->"Courier",
          FontWeight->"Bold"], "  ", "to", " ", "change", " ", "to", " ", 
         "style", " ", "of", " ", "the", " ", "plot"}]}
      },
      GridBoxAlignment->{
       "Columns" -> {Right, {Left}}, "ColumnsIndexed" -> {}, 
        "Rows" -> {{Baseline}}, "RowsIndexed" -> {}}],
     GridBoxOptions->{
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}}}]], "2ColumnBox"], TraditionalForm]], "Text"],

Cell["Basic plotting functions. ", "Caption"],

Cell[BoxData[
 FormBox[
  StyleBox[
   FrameBox[
    StyleBox[GridBox[{
       {
        RowBox[{
         StyleBox["Show",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         StyleBox["[",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         StyleBox["plot",
          FontSlant->"Italic"], 
         StyleBox["]",
          FontFamily->"Courier",
          FontWeight->"Bold"]}], 
        RowBox[{"redraw", " ", 
         StyleBox["a",
          FontSlant->"Plain"], 
         StyleBox[" ",
          FontSlant->"Plain"], 
         StyleBox["plot",
          FontSlant->"Plain"]}]},
       {
        RowBox[{
         StyleBox["Show",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         StyleBox["[",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         StyleBox[
          RowBox[{"plot", ",", " ", 
           RowBox[{"options", " ", "\[RightArrow]", "values"}]}],
          FontSlant->"Italic"], 
         StyleBox["]",
          FontFamily->"Courier",
          FontWeight->"Bold"]}], 
        RowBox[{"redraw", " ", 
         StyleBox["a",
          FontSlant->"Plain"], 
         StyleBox[" ",
          FontSlant->"Plain"], 
         StyleBox["plot",
          FontSlant->"Plain"], 
         StyleBox[" ",
          FontSlant->"Plain"], 
         StyleBox["with",
          FontSlant->"Plain"], 
         StyleBox[" ",
          FontSlant->"Plain"], 
         StyleBox["options",
          FontSlant->"Plain"], 
         StyleBox[" ",
          FontSlant->"Plain"], 
         StyleBox["changed",
          FontSlant->"Plain"]}]},
       {
        RowBox[{
         StyleBox["Show",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         StyleBox["[",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         StyleBox[
          RowBox[{
           SubscriptBox["plot", "1"], ",", " ", 
           SubscriptBox["plot", "2"], ",", "..."}],
          FontSlant->"Italic"], 
         StyleBox["]",
          FontFamily->"Courier",
          FontWeight->"Bold"]}], 
        RowBox[{"combine", " ", "several", " ", "plots"}]}
      },
      GridBoxAlignment->{
       "Columns" -> {Right, {Left}}, "ColumnsIndexed" -> {}, 
        "Rows" -> {{Baseline}}, "RowsIndexed" -> {}}],
     GridBoxOptions->{
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}}}]], "2ColumnBox"], TraditionalForm]], "Text"],

Cell["The show function", "Caption"],

Cell[BoxData[
 FormBox[
  StyleBox[
   FrameBox[
    StyleBox[GridBox[{
       {
        RowBox[{"option", " ", "name"}], 
        RowBox[{"default", " ", "value"}], "\[Null]"},
       {
        StyleBox["AspectRatio",
         FontFamily->"Courier",
         FontWeight->"Bold"], 
        StyleBox[
         RowBox[{"1", "/", "GoldenRatio"}],
         FontFamily->"Courier",
         FontWeight->"Bold"], 
        RowBox[{
         RowBox[{"the", " ", "height"}], "-", "to", " ", "-", 
         RowBox[{"width", " ", "ratio"}]}]},
       {
        StyleBox["Axes",
         FontFamily->"Courier",
         FontWeight->"Bold"], 
        StyleBox["Automatic",
         FontFamily->"Courier",
         FontWeight->"Bold"], 
        RowBox[{"whether", " ", "to", " ", "include", " ", "axes"}]},
       {
        StyleBox["AxesLabel",
         FontFamily->"Courier",
         FontWeight->"Bold"], 
        StyleBox["None",
         FontFamily->"Courier",
         FontWeight->"Bold"], 
        RowBox[{
         RowBox[{"values", " ", "for", " ", 
          RowBox[{"labels", ".", " ", 
           StyleBox["ylabel",
            FontSlant->"Italic"]}], 
          StyleBox[" ",
           FontSlant->"Italic"], 
          StyleBox["specifies",
           FontSlant->"Plain"], 
          StyleBox[" ",
           FontSlant->"Plain"], 
          StyleBox["a",
           FontSlant->"Plain"], 
          StyleBox[" ",
           FontSlant->"Plain"], 
          StyleBox["label",
           FontSlant->"Plain"], 
          StyleBox[" ",
           FontSlant->"Plain"], 
          StyleBox["for",
           FontSlant->"Plain"], 
          StyleBox[" ",
           FontSlant->"Plain"], 
          StyleBox["the",
           FontSlant->"Plain"], 
          StyleBox[" ",
           FontSlant->"Plain"], 
          StyleBox["y",
           FontSlant->"Italic"], 
          StyleBox[" ",
           FontSlant->"Plain"], 
          StyleBox["axis",
           FontSlant->"Plain"]}], 
         StyleBox[";",
          FontSlant->"Plain"], 
         StyleBox[" ",
          FontSlant->"Plain"], 
         RowBox[{
          RowBox[{
           StyleBox["{",
            FontSlant->"Plain"], 
           RowBox[{
            StyleBox["xlabel",
             FontSlant->"Italic"], 
            StyleBox[",",
             FontSlant->"Plain"], 
            StyleBox[" ",
             FontSlant->"Plain"], 
            StyleBox["ylabel",
             FontSlant->"Italic"]}], 
           StyleBox["}",
            FontSlant->"Plain"]}], 
          StyleBox[" ",
           FontSlant->"Plain"], 
          StyleBox["specifies",
           FontSlant->"Plain"], 
          StyleBox[" ",
           FontSlant->"Plain"], 
          StyleBox["values",
           FontSlant->"Plain"], 
          StyleBox[" ",
           FontSlant->"Plain"], 
          StyleBox["for",
           FontSlant->"Plain"], 
          StyleBox[" ",
           FontSlant->"Plain"], 
          StyleBox["both",
           FontSlant->"Plain"], 
          StyleBox[" ",
           FontSlant->"Plain"], 
          StyleBox["axes",
           FontSlant->"Plain"]}]}]},
       {
        StyleBox["AxesOrigin",
         FontFamily->"Courier",
         FontWeight->"Bold"], 
        StyleBox["Automatic",
         FontFamily->"Courier",
         FontWeight->"Bold"], 
        RowBox[{
        "the", " ", "point", " ", "where", " ", "the", " ", "axes", " ", 
         "cross"}]},
       {
        StyleBox["Frame",
         FontFamily->"Courier",
         FontWeight->"Bold"], 
        StyleBox["False",
         FontFamily->"Courier",
         FontWeight->"Bold"], 
        RowBox[{"whether", " ", "to", " ", "draw", " ", 
         StyleBox["a",
          FontSlant->"Plain"], " ", "frame", " ", "around", " ", "the", " ", 
         "plot"}]},
       {
        StyleBox["FrameLabel",
         FontFamily->"Courier",
         FontWeight->"Bold"], 
        StyleBox["None",
         FontFamily->"Courier",
         FontWeight->"Bold"], 
        RowBox[{
         StyleBox[
          RowBox[{
           StyleBox["a",
            FontSlant->"Plain"], " ", "single", " ", "label"}],
          FontSlant->"Plain"], 
         StyleBox[",",
          FontSlant->"Plain"], 
         StyleBox[" ",
          FontSlant->"Plain"], 
         RowBox[{
          StyleBox["or",
           FontSlant->"Plain"], 
          StyleBox[" ",
           FontSlant->"Plain"], 
          StyleBox["a",
           FontSlant->"Plain"], 
          StyleBox[" ",
           FontSlant->"Plain"], "list", " ", "of", " ", "up", " ", "to", " ", 
          "four", " ", "labels", " ", "for", " ", "each", " ", "side", " ", 
          "of", " ", "the", " ", "frame"}]}]},
       {
        StyleBox["FrameTicks",
         FontFamily->"Courier",
         FontWeight->"Bold"], 
        StyleBox["Automatic",
         FontFamily->"Courier",
         FontWeight->"Bold"], 
        RowBox[{
         RowBox[{
         "what", " ", "tick", " ", "marks", " ", "to", " ", "draw", " ", "if",
           " ", "there", " ", "is", " ", 
          StyleBox["a",
           FontSlant->"Plain"], " ", "frame"}], ";", " ", 
         RowBox[{
          StyleBox["None",
           FontFamily->"Courier",
           FontWeight->"Bold"], " ", "gives", " ", "no", " ", "tick", " ", 
          "marks"}]}]},
       {
        StyleBox["GridLines",
         FontFamily->"Courier",
         FontWeight->"Bold"], 
        StyleBox["None",
         FontFamily->"Courier",
         FontWeight->"Bold"], 
        RowBox[{
         RowBox[{
         "what", " ", "grid", " ", "lines", " ", "to", " ", "include"}], ";", 
         " ", 
         RowBox[{
          StyleBox["Automatic",
           FontFamily->"Courier",
           FontWeight->"Bold"], " ", "includes", " ", "a", " ", "grid", " ", 
          "line", " ", "for", " ", "every", " ", "major", " ", "tick", " ", 
          "mark"}]}]},
       {
        StyleBox["PlotLabel",
         FontFamily->"Courier",
         FontWeight->"Bold"], 
        StyleBox["None",
         FontFamily->"Courier",
         FontWeight->"Bold"], 
        RowBox[{
         StyleBox["a",
          FontSlant->"Plain"], " ", "label", " ", "for", " ", "the", " ", 
         "plot"}]},
       {
        StyleBox["PlotRange",
         FontFamily->"Courier",
         FontWeight->"Bold"], 
        StyleBox["Automatic",
         FontFamily->"Courier",
         FontWeight->"Bold"], 
        RowBox[{
         RowBox[{
         "the", " ", "range", " ", "of", " ", "coordinates", " ", "to", " ", 
          "include", " ", "in", " ", "the", " ", "plot"}], ";", " ", 
         RowBox[{
          StyleBox["All",
           FontFamily->"Courier",
           FontWeight->"Bold"], " ", "includes", " ", "all", " ", 
          "points"}]}]},
       {
        StyleBox["Ticks",
         FontFamily->"Courier",
         FontWeight->"Bold"], 
        StyleBox["Automatic",
         FontFamily->"Courier",
         FontWeight->"Bold"], 
        RowBox[{
         RowBox[{
         "what", " ", "tick", " ", "marks", " ", "to", " ", "draw", " ", "if",
           " ", "there", " ", "are", " ", "axes"}], ";", " ", 
         RowBox[{
          StyleBox["None",
           FontFamily->"Courier",
           FontWeight->"Bold"], " ", "gives", " ", "no", " ", "tick", " ", 
          "marks"}]}]}
      },
      GridBoxAlignment->{
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}}],
     GridBoxOptions->{
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, 
       "Rows" -> {False, True, {False}, False}, "RowsIndexed" -> {}}}]], 
   "3ColumnBox"], TraditionalForm]], "Text"],

Cell[TextData[{
 "Some of the options for ",
 StyleBox["Plot",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ". These options can also be used in ",
 StyleBox["Show",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ". "
}], "Caption"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Contour and Density Plots", "Section",
 CellTags->"c:74"],

Cell[BoxData[
 FormBox[
  StyleBox[
   FrameBox[
    StyleBox[GridBox[{
       {
        RowBox[{
         StyleBox["ContourPlot",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         StyleBox["[",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         RowBox[{"f", ",", 
          RowBox[{"{", 
           RowBox[{"x", ",", 
            StyleBox["xmin",
             FontSlant->"Italic"], ",", 
            StyleBox["xmax",
             FontSlant->"Italic"]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"y", ",", 
            StyleBox["ymin",
             FontSlant->"Italic"], ",", 
            StyleBox["ymax",
             FontSlant->"Italic"]}], "}"}]}], 
         StyleBox["]",
          FontFamily->"Courier",
          FontWeight->"Bold"]}], 
        RowBox[{"make", " ", 
         StyleBox["a",
          FontSlant->"Plain"], " ", "contour", " ", "plot", " ", "of", " ", 
         "f", "  ", "as", " ", 
         StyleBox["a",
          FontSlant->"Plain"], " ", "function", " ", "of", " ", "x", " ", 
         "and", " ", "y"}]},
       {
        RowBox[{
         StyleBox["DensityPlot",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         StyleBox["[",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         RowBox[{"f", ",", 
          RowBox[{"{", 
           RowBox[{"x", ",", 
            StyleBox["xmin",
             FontSlant->"Italic"], ",", 
            StyleBox["xmax",
             FontSlant->"Italic"]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"y", ",", 
            StyleBox["ymin",
             FontSlant->"Italic"], ",", 
            StyleBox["ymax",
             FontSlant->"Italic"]}], "}"}]}], 
         StyleBox["]",
          FontFamily->"Courier",
          FontWeight->"Bold"]}], 
        RowBox[{"make", " ", 
         StyleBox["a",
          FontSlant->"Plain"], " ", "density", " ", "plot", " ", "of", " ", 
         "f"}]}
      },
      GridBoxAlignment->{
       "Columns" -> {Right, {Left}}, "ColumnsIndexed" -> {}, 
        "Rows" -> {{Baseline}}, "RowsIndexed" -> {}}],
     GridBoxOptions->{
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}}}]], "2ColumnBox"], TraditionalForm]], "Text"],

Cell["Contour and density plots. ", "Caption"],

Cell[BoxData[
 FormBox[
  StyleBox[
   FrameBox[
    StyleBox[GridBox[{
       {
        RowBox[{"option", " ", "name"}], 
        RowBox[{"default", " ", "value"}], "\[Null]"},
       {
        StyleBox["ColorFunction",
         FontFamily->"Courier",
         FontWeight->"Bold"], 
        StyleBox["Automatic",
         FontFamily->"Courier",
         FontWeight->"Bold"], 
        RowBox[{
         RowBox[{
         "what", " ", "colors", " ", "to", " ", "use", " ", "for", " ", 
          "shading"}], ";", " ", 
         RowBox[{
          StyleBox["Hue",
           FontFamily->"Courier",
           FontWeight->"Bold"], 
          StyleBox[" ",
           FontFamily->"Courier",
           FontWeight->"Bold"], "uses", " ", "a", " ", "sequence", " ", "of", 
          " ", "hues"}]}]},
       {
        StyleBox["Contours",
         FontFamily->"Courier",
         FontWeight->"Bold"], 
        StyleBox["10",
         FontFamily->"Courier",
         FontWeight->"Bold"], 
        RowBox[{
         RowBox[{
         "the", " ", "total", " ", "number", " ", "of", " ", "contours", " ", 
          "to", " ", "be", " ", "includes"}], ",", " ", 
         RowBox[{"or", " ", 
          StyleBox["a",
           FontSlant->"Plain"], " ", "list", " ", "of", " ", "z", " ", 
          "values"}]}]},
       {
        StyleBox["PlotRange",
         FontFamily->"Courier",
         FontWeight->"Bold"], 
        StyleBox["Automatic",
         FontFamily->"Courier",
         FontWeight->"Bold"], 
        RowBox[{
         RowBox[{
          RowBox[{
          "the", " ", "range", " ", "of", " ", "values", " ", "to", " ", "be",
            " ", "included"}], ";", " ", 
          RowBox[{"you", " ", "can", " ", "specify", " ", 
           RowBox[{"{", 
            RowBox[{
             StyleBox["zmin",
              FontSlant->"Italic"], ",", 
             StyleBox["zmax",
              FontSlant->"Italic"]}], "}"}]}]}], ",", 
         RowBox[{
          StyleBox["All", "MB"], 
          StyleBox[" ", "MB"], "or", " ", 
          StyleBox["Automati", "MB"]}]}]},
       {
        StyleBox["ContourShading",
         FontFamily->"Courier",
         FontWeight->"Bold"], 
        StyleBox["True",
         FontFamily->"Courier",
         FontWeight->"Bold"], 
        RowBox[{
        "whether", " ", "to", " ", "shade", " ", "in", " ", "between", " ", 
         "the", " ", "contours"}]},
       {
        StyleBox["ContourLabels",
         FontFamily->"Courier",
         FontWeight->"Bold"], 
        StyleBox["Automatic",
         FontFamily->"Courier",
         FontWeight->"Bold"], 
        RowBox[{
         RowBox[{"specifies", " ", "how", " ", "to", " ", "label", " ", 
          RowBox[{"contours", "."}], " ", "Some", " ", "possible", " ", 
          "values", " ", "are", " ", 
          StyleBox["None",
           FontFamily->"Courier",
           FontWeight->"Bold"]}], ",", " ", 
         StyleBox["True",
          FontFamily->"Courier",
          FontWeight->"Bold"], ",", " ", 
         RowBox[{
          StyleBox["All",
           FontFamily->"Courier",
           FontWeight->"Bold"], 
          RowBox[{",", " ", "or"}], " ", "f", " ", "where", " ", "f", " ", 
          "is", " ", "any", " ", "expression", " ", "or", " ", 
          "graphic"}]}]},
       {
        StyleBox["PlotPoints",
         FontFamily->"Courier",
         FontWeight->"Bold"], 
        StyleBox["15",
         FontFamily->"Courier",
         FontWeight->"Bold"], 
        RowBox[{
        "number", " ", "of", " ", "evaluation", " ", "points", " ", "in", " ",
          "each", " ", "direction"}]}
      },
      GridBoxAlignment->{
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}}],
     GridBoxOptions->{
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, 
       "Rows" -> {
        False, True, False, False, False, False, True, {False}, False}, 
       "RowsIndexed" -> {}}}]], "3ColumnBox"], TraditionalForm]], "Text"],

Cell[TextData[{
 "Some options for ",
 StyleBox["ContourPlot", "MB"],
 ". The first set can also be used in ",
 StyleBox["Show", "MB"],
 ". "
}], "Caption"],

Cell["To change the style and location of contour labels:", "Text",
 CellChangeTimes->{{3.460667787761796*^9, 3.460667811034793*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ContourPlot", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"x", "^", "2"}], "-", 
    RowBox[{"x", " ", "y"}], " ", "+", " ", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"y", "-", "1"}], ")"}], "^", "3"}]}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"y", ",", 
     RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
   RowBox[{"ContourLabels", "\[Rule]", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"Text", "[", 
       RowBox[{
        RowBox[{"Style", "[", 
         RowBox[{"#3", ",", "Orange", ",", 
          RowBox[{"FontSize", "\[Rule]", "20"}]}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{".95", " ", "#1"}], ",", 
          RowBox[{".97", "#2"}]}], "}"}]}], "]"}], "&"}], ")"}]}]}], 
  "]"}]], "Input",
 ShowCellTags->True,
 CellChangeTimes->{{3.4486460440811567`*^9, 3.44864609733405*^9}, {
  3.4486462347177773`*^9, 3.448646345591408*^9}, {3.448646465243585*^9, 
  3.448646501820249*^9}, {3.4486465591809607`*^9, 3.448646588354693*^9}, {
  3.4486466248531637`*^9, 3.4486466874624853`*^9}, {3.4486467315777273`*^9, 
  3.4486467325532017`*^9}},
 CellTags->"Cell 9.209"],

Cell[BoxData[
 GraphicsBox[GraphicsComplexBox[CompressedData["
1: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
5/m8YPx5D39+w8en/Pzz+11+ffx/1DCj/A==
   "], {{{}, 
     {RGBColor[0.293416, 0.0574044, 0.529412], EdgeForm[None], 
      GraphicsGroupBox[{PolygonBox[CompressedData["
1:eJwtkskuRFEQho97z7kkEiui27CQJnboN5CgQ/TKghBBPACJiBALCzu9Qr9T
P4V5at2GNiWWvl+dRd2/6q/h1HCHNrcXthLnXBFJkf7g3A5EH7gLniAevpuP
4r7he7zF3oITwWJO0WcgD9D3kTx2OzEfYA7J0F+8+RSTa4ODPCTHg3uJvSe+
klgtxXbhOwZHeWcwWG7VW3/qcxx8xZ5Db4Ij2EfohWA5yl0Bp1PrU29cEjcJ
Xnh7Vz7xn9hlsAX+krMB/4ReR0rwj+B6ajxud4c9BX8D3iNV+M7McC21vVXi
PhRfiL0tgbM4e5k1ZNaH+rn2Vks1H8DnuDftrxV768D+IX+V+l8gJf5n1J6u
4l10nzIyj3OYmLd4C92kGXf17m0ezdUAl4PFK28xWG/q8SzuaADu3Ns8RfRa
YrzuNRbs39A/ovvUIv8HkVpAEg==
         "]], PolygonBox[CompressedData["
1:eJwlkbtOQmEQhJfj/x8Lek8BFibaCr6BiWBipLIQNEaNDwAJhYmxsKDTCuWd
fAsgXqIYwHhDSr9xiznM7OztX1bOWnvNxMyKIIBnPlsEjhfMZtHsCxzBN4n1
8UJqdoluowt4XWLX8AqxPvobqJ9qfuAZPj92ip5DloLPUU0ZPQBVvBv0HcZL
8NwT8Bu9p3qf49/iNdD38AuwDH8ghv2/86NmsV+W8x1T+Eb03tpBu/SC12qm
Zo/RpNkOsQm8GH2WZmiWbqBb9MAT/hvYTrxmBP8Ai/AasU/4MPittNMA/h68
t3Km8HzqvXQD3eKQ/h38XXY+iP5mvV0zXvHr6KvE37QPX42eq9gavBT9v9DN
1+F/JOs1eg==
         "]]}]}, 
     {RGBColor[0.3923446069815609, 0.22941453038648127`, 0.6684681248039125], 
      EdgeForm[None], GraphicsGroupBox[{PolygonBox[CompressedData["
1:eJxNlstvV1UQx2/vPaehBfuAlmrAhYluURPBrShEggGV0lJKy6O8dhpiiC4M
6RITFfr4/eDfUNm6NTwCBBYFeRRD26DgWygtYPT7Yb4EFicz99w5c+bMfOd7
zktDH2/6qCyKorWhKCrJLfoY1WiXXqaiaNCY0I8fNa5oTGv+oP5flT6qNTf0
/219/yT5s8a70u/nohiT7NNYLPveMvzik7lez2+T3KqxRPqs/HVLb5O+uSHm
sfkvxdoeySLFWvxMSl8t/Z8csVxxPL9ofp3mb2ObYr9CNh36v0SjTzZnNFdn
D40L0p+XSRM5kH2L97lfRUxT+jwrmy7JBRrjZcRNzCMNEStxXnGOiKEvhU2l
fTdL/0D6PcnfNd6T/ofkuOx6NTq1tl3fbRqVRk1zWzSWan631l+U/X7JUqOf
PMpmVuND6a2yGZV+TfaT+v9ajtos1dykYvlU+pj+7Zfc6zOsLcOGOJnbV8Ze
W/yNnuVnkNrIzw7JnRodmq9Jbrde+R/6rjJ0zrIgh/02/Z+Wz0/AimRHjto+
IMc59t0hfaCMvIGrv/W9Qd9/OT/ry8hRm3HVI/23FPO/pohlwDGMlJHnliKw
02/8kE98cr6Nku9rPKf5y9rzgPSjmr+lcaiMePE36PoS14B1fG+0/7sp/HST
A53lnPQh6uOYGqUPpMhLUw7Mgqlu+b+j0ST9tuR1+c/Ur4q95yTXSs5XgT+w
VxiTrH2ouWbpD6rw0Ww/9GircdtgSY+QM3IHBlpsw3npmxbr1x0H+cf/oyp8
cm7i6nBvEs/NIuLFHp8LjJs/NXeqivXr7O+afbJu3uda57NNGT/E1uNzPXhm
7aT9wwez3hcsM0+8U46pzX1H/9MD5OOh42ffOa99ki9iSCnOgH94rcG5ghvg
guYiuAGeWCh9IAdfDEqu0Dgs/VXJrhQxvS79uLlkURG9R38tbAzegFfgF/q+
5p5fJZsu7fdd9pl8rrXuSzgFToVfqDt8Rj/0mBvIO71cLwNj9N2yHL2WtO/O
FD3fmuN8pWvdanwcdR7a09M6tDsnyGT9UhVrydN2yT3yuShHbbEBG8k+0OdT
1OxfuFd2P9B3kls1TtKTkm/k6NWVkqeNN7ADf1TGw7Ey9oKL5o0NardQa3ZT
C3KfIu/bNfdtjnySV3qZXsJ+KT7M+dhiQ53o+9XufXL2ThUcdSNHHcbl5xvp
nZo/mAIX4OOFIrCwuAqMTPjOAmP4HKzCL3t2eF9kp9fey2Fz1zmkx6Z994AV
6rpJ+/Vr3VvmfvZmLbi8YDwhL/re2im78+DAvDDvPoLfLvlcu3LYLktxjg7H
sy+HXJ4Cl0PG0hH8VRHHmSpqR0/Bc+d9j6CfdQzzOew/g7+rqDt1aBQWP4fj
GiMX7M05hsuww6ZPa2ckl/veqJnPiZ0zUCMweMk63DxuTq5XEWu/uYJ6tLsW
l312/n9tzqe34HTWwt9HPX/VWKeO9N0X7j2wVndO4O1hn+uVHPrLvpPHfNe8
mePttEpyLgc/dBmnNeeTe++Ysc2dQ37A4FgK7N1wX5wxjxHXhGPjjofnRlLU
5FQZccEPX5oj2KfuveCcr8w70yn4ZTYH3g+XT/ODPTlqaYy9Nf1YnrJOno44
V9ixB1xH7552nI/M/6wBF+eME+Ja79jYmxhmUmDkkPMJ7nr95kHWrBP7BscP
L4z7vQTfw7Hkghxzz8FX9CU9T2/CJz225z0Ap1L3F403cFc3R4BN7ujuZ95y
+KY3W/zO7DavkDNqwfeI7cnlAeeTmgyXT+/5O+Yi7qYm9+gdvzmYP5EihpUp
cLfG2Jvx3TztOzf5nTDntx9vQPqW/v1ecq/5gjfjVAo/N/02nLEf8g3Wnrw1
7ptXyf9u45w8jTpXcPCQsXrSZ3p8t+bI+S3uW3M+3A+/wAd7cmDkuO/EOb9v
yBu8BjZP5Pi31fcsgzo0+129xjXjTcqd12Xbuu3BbM24/R9xBIC7
         "]], 
        PolygonBox[CompressedData["
1:eJwllNlvTlEUxe93v3M+Q6khHSgeBPFmrjkRUwhqaPX72qpOOrwRkaoHEY8k
BK3pvzD11augCYlnNdc805iH38p6WDdr3X3O2ffsvfad3ravem+aJEkeBDCZ
x0lebAbv4ctikpyF7wYRvgKch+8BRfAtrLkFvwnq0cvBOXgLGAlfCS7AO0Ex
/DfrJ5CnF70EPQa0p16jtYujYwXwj7VFuSTphq8Hz9BDwXxnJkkewytZf0Zn
c+Y39DV0eTZJLhLvQY9DdxEvJ16Bfg02omuJP4d/CL5rHv0G/gVsRW9XDvhS
9vfBG0CqXLy7n/E3zVNt0IPoITANfRmUkL8MHCS2EH2atdvAV3QpOA5fAx7C
HwXzGvYPwgPrG9FNyokehW5NXXPVvhD8LfUgg14ATqXOoVwN0b0YIP9seBbs
St1D9XIEaE59ZiNnjUa3pe5Bk+6PXq1+s38YPhZ0pK5hC/EZ6CpiR9GzdHZw
r3Wmzn6L3gQ/ASbBv0aftR9dIoOh61LXVLXVHXQXfWMd8Y+gQC2q0J/hc4kf
g6/ljAp4TXAt1SP1KhddK3lO3vsUvFcelpeHg3spjyzSXcEdfRuf0qq90V5p
ANWs7ULf017infC/vMun/uY8vDbYm3qnmDwn7+1Af4f/BOPRNehfwTVQLeS5
V8F30F0OoKfAV+n+GXv2arSn5e11xJ/Kq+AI/IZyygvou6nv0Ix+gd4A71H+
aI/L61rTgp4a7U15tpfYzOjeaWY1u0+Cc8mT8mZz8Kyq5+q9ZkSzohwv4fXB
/wJ5VF5VT9Vb9WiOeh38b5Cn5K1D6NasPSqvtkfXXjXu0HowkLoGqsX14NqX
sudK9ExqNuWpd/Du4JhmTLOmGdOslRHvh1/i3cSsz2yMngHNwm1QzL+kP7rX
+qYf8Mi7w1nXWLUuRNdaHpfXQ8690pocvDI4l3Io1/zo2usf0Bc8w5plzdAD
+J9gL+ifp3/ff2qLmJs=
         "]]}]}, 
     {RGBColor[0.5506303781520583, 0.5046307390048512, 0.8909579244901724], 
      EdgeForm[None], GraphicsGroupBox[{PolygonBox[CompressedData["
1:eJxNVllvVlUUvef7znHWPqqVVgsFSkFMRGRUor7pWwWnTtKRzoMCJbSov6Lj
1zImQAttFZwlxhhjlAcTfXAOyk9ARUHRtbpWUx9O9r77nrPPHtbe+5Q19FR1
57Isu4qVxxrDxyiYCvDFMcuOhiwrSlk2Bfm9kC+D/ADkJyDfA/lfSfJzoKX8
j9WKf/eZX4v9m7D/bpw/jz2TOf2jvBTyU9jbBvkmrF349zdkE5DtBF8L+jK+
G0HvxP8fIVuLs2eDViX47vC/+6DzY+xbBX4rzs0E8Z2g3+Ps6rxknyad3Y49
P0C+BvyZIB8X7IOeMqx2yB4A/Q6y6SA934Jfgf2nwX8IPcvBb476Js8zg/g+
CdqO/59gVUC+LeoO8l2go9DTAH5PkP6Ved3BVQ6+IyhmpY7nhST5Fuh5DqsO
shug16NidQ30WpLOg+BnwRfD9o3gX0+Kdxn4g+B/wf6WKF8vY1Xi3z58D0Pn
HHPEuNMfyHfgu8BcgNZYJ3Xfg3suOlZNUX4/xfujfHoC/E/4/yD2zeK7EfI2
0Cch/xXyS76XlPasAT9hOXnezRgwD5/hzDroeQw6arB2Q34zZGOgVdhfA3od
343YcygKCwPGw058V+P/FdDxnPb04/vPqLNXQV/AqocsQMdLUb5H8EPg58Ef
AP851nqcfRyyn3HuIfBzQYvy3iDsEsP/ROml/o1J/tP+HtA6yBtAb0vCEnHT
4bgwPu8nYY78/aAP43sU/IBrjlgogfy1pNwNgbYE5YVx4176S98ZA8aCeS6A
TuQV42P434y1GnuOB51nvdMm2lYbFX/GYQXoNznta3bcGf/qqHpkHdIvxoSx
6PMZ7inPVF/EPeuUNdHmmpq237yHPaaJtZpJH/euBH84yB7qmQrSSd3MdxH7
B9Z4UC1QJ+/p8v5Z20Wd87aLPjLe7cYV8VPjeH7luNCOGdc67yoEYYP76V+v
48YeVescFdmmP6L21duv+iR9u6P6KuO8gHPnhPhf5hy12udu20+7eyyj3X2+
95kk/F4k/vPq1dT9dNKeL5JqjzX4XpJvrcYDz/c6JuyHM44X/ey0zbx7UTYC
3cNYIznJG2xPSU69osW6mhZj4tolFllLjMPzUbVELL0Y1cfZz+ujdDVax5vu
Mzs8B8YdX/aQWcf9nHsUe9WI654YYA5qjQHa0exc33Cf3BX1r855vOKe8GxU
XKqNgWbc/TX0NoEeCbKNNhIXlFPvQrzdQ2jTrO1nbxlzLuaTYvRRVCxnHE/2
jPXuG18m4ZI95kJUf36HtR+Fi0NJd82HpfzPOc573Vv3Jc20VfklzE47j+y7
69x7mRdijnrfTcLc20ky9gX28MJijwDdn1TPA0mzscLzkTOq3HOK/aDEmGZf
4qwizs571nPms75PO+bNUTEjfsvsL/3mLF3ueZo8e7b4TTFq3P4WxW+A/Pak
vrAN9JakvrAV9IOk/jLo+XDYdUT8nnB+OduIn71RmD0WlvBy3HEmxo847zw3
7BlNP3mW2L7L+NhuXE85v+wrJ8NS/z7l/vBvFJ4fxf7OnOb1hPtWwfHJJfGb
qTOpJxYbp2O2nxgft37W1qRzTZweNQ4nnWvm9BW/mV4F7fC86Uyym/bfkVRH
9JH6u5LeIt2gPUk9ojcpH7wrD9oaNb8Hk3uD48P3zIh7xZBn0xtJuWF8bkry
jT5mSVgr+P3AOcW3F3O9wfOOc4/976xz8Yjn/e+4f3/U++OtpB7AO0uMYeK3
eLEe3Y8u+11HzFVFvVvqOMeS+n5DUt89Y8zwjVnpd2ZL0vxr9ZylTuKE9g64
j1/yvawv6p6yX31J86/fvZo29Ru7xOetSTFj7BjDefeX/sV45tTf/gOOmELK

         "]], PolygonBox[CompressedData["
1:eJwtlMdPlUEUxb/vezNGo9GNiYViL2DbiF1iYneJFJXyeDyqdBQRMKh/hUGC
WBNdomDvvbAw0YU9ln9BjUCM/k4ui5OcM/fOzJ1bZk5ZY05DFARBAXBgiw+C
2jAI5seC4C78GljCeir6OrwDp3T4NDYNwgdYm4HuQ2+C3wML0O/R9fCtoI7z
FrJ2H77OGV8EHqAD0Iu9BORjK0e/Ye85dAp6M3o/fC7+t+F3wDz4O3xq4ZX4
fIN/BR3oX+iT+BeCXGd36K4P2BvhXSCTa3+gj8KToCK0Oyvgs9iTEdiZnej1
6MXszwCP0BvRS+HLwDN0DJxifxzswTYJfQZepjehp6DPwpOgFN2O7oe3gAr0
OHSfbGAfeq2z3CuHyuUaZ2/Xm/X2CeA0vglQhK0LJLH1EG+2t5gU22d0K3zQ
W60u4N+O70t0c2gxvIKvYi2F9/bicxl93FtuVPNj8FbsJ/BNY60fXejsbsU8
Hn0T1MAvglvwYmdvV4wT0SPoXPbWgano3c5q0w1+wuPOcqOcTcaeUA+ElrNS
9BHwPbKazdbZ6NeR+cThec56pwf8g7ew9hF7A3q7es+P9UpovV0F3kZWc9X+
MPgSWU52wQ+CT+oV9A74IW+5bELvlL+z2NXzw+gCZ7VXD0fo3+gieA57/jjr
SfWm3lDlbEY0K0MgB73XWe3VQx7bMLo4tJyNinurzUzeX6T+A93odHSas5gU
23LieQ7PdsZXgBfecqBcZKIfw59onmP2xgPe3qi3qqefata81VIzV85ZNehL
odU4ie5UDWIWg2LZ4Oxsnamzq731WrVmAFuWt1xoJlfCh7z1vnp2FH7Dj/mi
R7zNmGZNNWzWvDvrvfP4pMKbvM1yPXob/C9reZHlTLnTDGgWNMOa5QZvf5H+
IP1FWc5yqZ4ecHamzlZPVHr7c/T3qMcS6CtgesxmRLOinCq36pk2zY+33lMM
q73FpNj0ZzyEl3irtc5oY/9Vb3+p/lD9pf8Bp6Cj0g==
         "]]}]}, 
     {RGBColor[0.6704994712823348, 0.6989682692212502, 0.911930684914224], 
      EdgeForm[None], GraphicsGroupBox[{PolygonBox[CompressedData["
1:eJxNV2lvVVUUve/ee/zmdzVhaIwDBhShDB0oSqEFo1jAXwBFW0a1pdgWQVDA
eZ5BLG15LaU8aF+LWKwFAWeNGHH45BcnYlWCCSYlimuxVqMfbva65553zj57
r732eQVL1y5eE0dRVJyJogT2yRBFZzGwOo2i/bD7MNgN25UIF2JOzu/Eo9/K
gQ8CdwNP8xziuZHsfo/vw/he4K5Y83PA8zDeCtwCXAacB+4B7oUdgl+zgDfA
DuO9FHgQuAV4F3Ap5v8KXAI8gPFfgIuAZ0X6/iaeScCng+Z8BXsKz3rM3Ywz
XoH5MzDegPc++gQ8A/N7gA8k8nEPnjbgdtgsnnbgWzCn0/hm4L3AHYnGsonw
FJ4r0W8nRzpz1uO7Y/nGc/R634pIezAONxnz97MjxYn+TI80P2d8IFZsGe/O
RLGd6rx0GrcB704U46zXHPWHc+YAd/Ccib5/gfhMB96UKjbTHJ+teH8X9m98
nxd05jWwu/Bc5LqwL+L5C/hV2Gfw/An8AuwTeP4Afhp2MmPmOL+G9wsYfyMo
/r0Yr8R4ZRD/7oddEJSPBtgd8OE35hn4YeDDwJdfFkVjgDvIFYyPA+4FLgPe
4jlbg/ym/1dj7LYgnj0AOx7veYxvCDorz74gUk567OdO73sC9jvMexB4O/C2
VBx9HGPfBHF1DsYKHTeuw9jxvRi4GnZ5Iv71Y/8pwDMx/nusOZxPTnBeCXAt
bA2e+cArEr0TF2DOncDDWOcn7LuQnEz1TtyU0T7VrhFyqDGj+qrxOpVen+vy
PEX+Rn/I6z3m9iinbwVelWpuVRBfmzOqX6592OuT762uF+aG41scvyP8beTz
Z3RGrstx1hTHWJMNfuc56PsN+P1dsEdT1f+VsfamZU6bzQnuwVzVs54zivnU
RGty7VqflWevch6Zz+YgzpA7dRnxgfHgPGoPz3rIejE7lQ5xb/rC74Oew5re
5bpeh7GJkc74Yyx/6u0rfeZ5rk0Vj2eD8k8e0Gfygv7MdAwGHIfrMH8R7EtB
MRt2nKgNOesVa73F9V7mc23E767HsxhzX8fYBOAl9DeIRwvNpedcs6zdcYlq
ivq5w3XKeiW/yfNvgc/F0g/6dMz6QJ34LCjun8Pebr095XgPOf7XpOL7EOx7
Qb2hIoiDjD153mJtocY0Yt5V+NYP/H6Q9s0Pqnn62YzvI7F6Ds/2TpB2l8P2
41sWc5roY5DezQ3KUdZ5Ij8azMkT1h/q0FFrHTUvn0ij+pyndZ4/NtY6fP/Q
enVJtxLpCDW7KYhbd8OH87F65mJznzVAHrBvZN1HyJex5hFrsd36TE7UmZ98
6s3zEmsNMXPZZG6wJqgXR8yjRnOpwjG/F/a4eUg+sp90u6ewn3S6X1dbt7gP
7wJdvhvMdTxXBeWDeakP6ssD9uN0rJ430f2I3LzR9cLxSdZG1k2pNYS5Y58a
7bWMUZn7Iv3/2etwjHM5zr75daw9uP7OIC5MMDfIYcaclu/8xl70fSydZ855
pqnu6dyXGsiaavP664N670fUfN8POM4cdXg+/WOu6Ps/sTSS9T7o+q9wrrnH
FGtgl2uJHD/tWA1ZX1gv5F6/81+QaG/u+0rQmVjfDwVpzWbY6lRzVjg/WceT
8W7x+stSxasWc7Y5Z9thHw26bz0GuzxVfBqBl6byrcZ12ut+Mc/nZO2xXol5
Xr6PmOtnYuWM+XoqqPapAcXuf+TyylT8vCPoIf4y6He82/FeN2JtejvoLON8
x2tyjR/C+CNB82tT3Tu4PvdrtQ9ch33pjP2h3v8Qq5ZqUvGcunWP+wFrl2tw
LeoS7VnjTUG/3RgUp35zibU7JpFPR3jP4B3V96Pz5iHjct55p+U3aunzQZZ6
T42lJlc5xhfNW/7mnOuC38/5t4eD9n2L8QnKA/vnUBA3i1JxebzvmbQFxoNB
HJmZit/keRnwB0H391nAx4PqowT4WBB/i4FPBv0nKE3Fb2okefuyz8y7Yc5a
SL7w/jXZ96uR/8WDvWv36B3YWsg6uhDUFz+1vrLXTXPcFjke5NtBr8/7V6Hv
rnznvhXel5hnI8dHezh7aI/Hs9Y8xrbTOsf1u6yL5c7FEu/Zak5Rc5j/fPLf
/4k+79vru1yl+T7f+t3nvsE6oPYe8Lnyvi8U+bd511q3+/ylfd0TqDcrnTvm
sMX3L3KbtU7NZr3zLlDnewXPkPM6zb6PME51zuNJ9/cq6xM1n/rIb+wnw77P
3Wc+HHc/6bKmMV7djtVqc48cZE/ZZ41da/6QR5/4v8HH7MvmG3nHePa5phib
nH1gb817/F/L4edj
         "]], PolygonBox[CompressedData["
1:eJwtlNlvjVEUxb/7fef8D0hULx5FqlRVW5QXQ9JS/AOlVEcUVZ21WnMMMUQJ
JTQiIoZbLdJWNSLmoK03L8YgJB4kKvitbA/rZq2z99nf2dONF1Tkl4dBEKwE
Dgzy8zUWBEvh9+C9IAmHG5zF4c98EKRFQZAOGtEDIB7anXZ4DhiLzsI+jO8L
UI3tFngJT8c+hdgX0An4a86y8e1Dt6J3e+N1oBRdhB4i3jh8qtFN6HfoTfKB
N4MP6E+gGHvCm6++oW91efvWeM664bXgOroSrMW+A90dszeWoNc4s10DNdj2
g2/EXkS8ffBZ2FPg5zm7o9zAG/g04tdh60FPgHdwlgPfBb7Aa4mXB6/BpzNm
Pr/0dpAXWQ1Vy5ve3qqaq/bzQG5kPvJVD9QL1aARnQu2xcznPbwYjGCLo2vx
XeDtrTpbjW5Dfw7/34H3c7aCfHrRd+GTnHH1UL2cC8bApxPvCf5LQCK0nAux
bZfGvwoUoeud1S4V/1Fsc9AziX8V/wfox95siqFYB7zN2g/0QfhpsBz9F30G
Ppn7C9Hf0XvRG8FlvYezDfAyZzb1aI+3GdAsqKfNzmZOs5fJN4fg5eCi+sX9
Mvh6cAmdiq6Al4LO0HpcAl9HjI+hzZhmbavmJ7ScqmQHw+ip6CR8s0Ea/Apn
97HNdhZb3+xH14O3oc1gMrZMZ7noDQPYToB89Ci6HZ6FfUZgOQ96m3nNvmI0
wDOc5aI396LPequdetoBb8GeEVkOLegG9SOyHdYuv/JWG81EK3w+OBdaTqvw
/Y0uxJ5FvInOZlizrJ0dgR8HP0N78zFvO6/d18zv9LYD2gXtcAH3H6JTIqvh
Yvhhb71fxv1D8CZns6Rv6tunvNVCM3ESvsXbLKnGm1ULb7VWjSrVa5AcWQ7K
pc/Z7irn5+g/mpHIZkqz9dTbbGuGNcvaGe2OYtxGtzn7L9Id3dWOa9eVwyNv
/4H6L9SOdMGPeMtFNTkK/wfISbYs
         "]]}]}, 
     {RGBColor[0.7844047804878049, 0.8542589756097562, 0.9042763658536586], 
      EdgeForm[None], GraphicsGroupBox[{PolygonBox[CompressedData["
1:eJxNmneUVtUVxd/3vfsGRCbSTCJqVKyxgGYRxCgg6lqsgAU1RowmxoZKVZoa
BWYAURBwhFgiQcEeFUtWAqLSFMVEBZTBjmISem9LMZScn3tP4I8757z77rvl
3HP22fd+c8TVfS/qU86ybGn8yUNWpCwbFPL6KN9FOamUZVNDppL0F0L/b5SW
1ndFOTn0l0IuC3mi2x8S/Y3z85Qiy0rR+WMhT4wyMt6dEHJ3lDnx/q4YsyJk
K/dTlNT/i6HvzFSP/k2UI0OfFLJeSeO+HPq6KEeH/mjIsSFbuM23bv+I13KU
2/w5xt0Vc5gUckvUfRXluCg73Ib2bcqaZx5lQzwfE/WTQ14R5ZWo+23IGWXp
54X+RqzhgpAro8+To655WfN4O8rhoY8IOTfKYaEPDbmokD47vtsU33WIuvGZ
xkKfEvLVeHdwtJmRNP8zbfO5SX3OCTk95LQonaP+skz6b0JOzzW/80P/e652
XUJ/LeSrrmcN6L8LOTvkrCi/Dv3aKK+Hfl3IFWV9S/+35fqedc4sq80loa8p
ayzssDmTLR+znxxtu+Enx7r+1JAHRJkV+vuZ9AUh24ZsFGV26L1ibeujz9Fh
p/fi+Qclte2ZNN6dhWz8hyhf4nPx3Djm90LINiW1nxntF0ZpjL0zjUH/1J1W
Uv0cfCy+mR56ddK7Zp7P8Hi+NfQeIVtFGRl1TaLtw6Gvjvq/hqyM8VtH+ZS5
h7wdu2SSd1g/vJD+YLSvX9LYczyXttYbu36u7XGq7XBvyA5lffdFfN8+9K4h
25Wlz7X/t7edN1i/L+TuKKc4Rnbah/GrTd4L9Oa2XwuP3859EkcH24eJ49ND
v9Bzaef5bC1pfoxR4TnPcmy29fwHxp78vCQ7VJakz/R+tnF74q6dYxPbnx5l
qXGgjduvc5sa8KAsfAFbZuTyRfwWf8WHu4f8R9hoDNgU8p9RPgj9iSQMI5aI
o4nx7QnR/uOoqwUDQl9sPDi+LPt9XkgfmzTWK7n8fnHID3ON9wzxGd88zzhR
1834WZPkF8cVwrAK4xhrKrx2MKyece9Ut5ntvWLPJjuGiCXsw56c7H3JQrZk
niXhVCvb5PqYQ/dcmFNj+95rbNvhfsBjsGl4lJtDXx/lpigdcmHypZlstSEX
nu8JuTGXrZCbrA+yzj6/Hs9bcuFJZZJ+ZSa52fUD3U+yj9Sz/1O3wfWsZ1eU
VcZvcP8R62D6JK/lO9ezNtqMY61hg3nEcknP2/HlKIeVhE0TMmH/W/E8zH6/
3X2u8PsRUc6J+b8bsnWSf9d3HL2UZOvjY09HO29sdjwRV+DbT6yD54eU5Lvs
w/nxbdd4vjy+PTv0udHPRaHfkMlnwO8bLcFwfAxcvtQ+sM7+QJ9rM8X4sEx6
daZ+6f+CJP8BC4jxu+N5PvGVtLaNYFuUQ6NuvefJnDd6/eDubMcU7dZ7nEPd
J+OWc+XCnlF6ZdLJJ70t2eszsHNZWHJQzO0T8CLJZrttq4+MHzyz//hcMk4k
xz7562+5cltLxw7xSx6ty3tL4n1tlCG5Yop8w36BVad5/1o5poi1lo4p4vHt
mNPt+HvIi+L7FmX58q8Kze/ikJvLyt9DSsqDXXPlTtq+UVL77aG/GbIqSnPW
VZYPk4un5eIKx3puU2wr4qJPyCMKYQWYASbBP+BTzcrKMWBna+v45aZofxkx
UwgzwUtyFvjVsKycuTBXe57JnbT5IsrIQvm/NuTdhXL4RyFfjrE7xfddksbO
jSfYqaOxi31p5LzWNGQTj9Xa8bKxUB34Tv1Of4vfjia/hv6faFMVc/sqU14m
56J/GaV9Lv/D93o4/w4vhM3flLS+imhTL9eeDcjEV8D+lsZ8sL+9fZVxd+yD
E8TsFsdtB8fpFOPHJGNIO8caOPkubaLckSmGNpTk8+8X8r0OMdZEcz844OKo
/wW5oZCfnm2cr7D+ovVzjPP4wlklzaEqvp8W+sJCnKttLs4Gt6JP9mx5Lu7x
degHVGg+k5L6q+c+2Z/G5iTsA/tBHOEHTb1fk2MMCP+jIfuFenWUa6IUUZfn
WuMuY/EfQ38OzhOybxJ28i254wpjweWWfNsjkyy7n1Xu685M/e1xn1OT9F+G
PCjk8kxtOH+gDwR/oo/qKAc63+12Xujv+V7rOMInwKEHYj3fRrv7C8UiOrkA
f6EN+zgx3u2M+ocL5Qp0csHN8e4q24L5kA/AS2zZyDEIZyPOsDM8jbhif8l3
DZPieaf3FJyp9F5Ueh+aWkc2s15pnf2BBxIPczLxsgXOT/vZ55n//jHO79mL
KPVCX2mbrbCdse1hnj/6mFx4RDtimXMEvg1ubSsLr27K1Cfrf8848XmU+wq1
qQn5TvQzP0pneJMxE+xsVKEYmZyEHWDIn5LGXOU9HZtrHjtKsukA7+/IpJj/
hPNQId7cIuTNUT8q2n4QsmMSRh2ZxPt6lsVJ4eJw8r9E/b3u+xZiONd4cLLh
9hXGgy9MNRaQz/r53fOFuOzPop+vfSY8JQn7tzo/MR78F/4B7nbLhUdfRPuz
Ql9ayGcHeb3jC+WDCSGXgXW5fHm5fWuE95fD9wLjDXmd3PpgIR7zUKEcgh1Z
51q3gUuQR8mnj4ccD9fLZXf8FIyudO5oar+CU5MnwNhnzVfhrR2dE8El/KO5
4xQuACeAGzQqtI+10f7Hheb8o5BjnRfHFfK1g/ztCvsfXGKT+0GHq+4xpoDN
h7r/Brna46vrXY8dbkg6fw6L/usn7e9Kxxa4SXw9lIQNnZI4C/wVvgSOD4ky
NBPuI6uifFYIn54IuSYX9wXj4b60hyvC5+AmzHmU/RB/rHEf1d4LfIh5Ehdd
cuW2jcYMvn0g6SyxrFB+xYfxZdaIX453vK6wzxD7xBY5cUnS3i9M6pv6uZkw
/hxjC/FD3uvu9YEHxPHaXPoQY1elc8GzMYfKeNffuNswl8175+Kdt4ItudrA
I7kLgpsSU+SuCueyM80J4GCbzOfh9eS7ma6n7/3dP9zuZduUfWa/NztWmDtn
JeK3T64cU+V1gMdgNvgO7sHh5rivar8nhleZQw32/Bt43AaeA2vpmSt/kyPA
qv2Mpet89uHbEx3fU23Dda5fa8kYyxxrPywpD09w3FE33vWr3DfzXpmrzXkl
7clQ70tNrjWv9lqr/K6P67H5fbnarbZ9aoxxA+xj+BD3MbeZi8JJ0eEiEzyf
Ts6rI+wvI4xDxEy19WWez33GzLr10Gaw7dnV+txcHAr+NirXuXq7422S47fu
XPKNYw+8hVPBw4ihjfZ95k/8EXtjHFM13tsh7pN4PLqsPSNO53tcYmRzIQx+
yrmG/AJOnuEzB3hNHhjn+m89F/aXmO6fq3/6G+217HA/K+3n5Axy5RjnFPpZ
YJ22VZ4z6+QsfEsuXKbvAV7X9KR7lleS8itcA47xTKGc/lQhLsN5HT4z2DYm
RuiDvkZ5v6o8T/gyPAE7fGCMOrCQLdcZy/qas52XNB58jXHIZ9zbEE9N4l3T
pHN6lZ/RnyzE4R4vxGtoA++Ai8PJbwx9XrwfmuuZsyx5k3lPM4+Fz2IP7MJ5
oZm5DTkIfgHPeN9xXO0YYH3V9smv/Iw+zPWsvb99Z5htPtD932RbYfNNHpc7
CvIhbThPcn5gXLgN/Q2zn4+ybbEna+IceW6m+x7ueMDZpZ7vAuPOMM8b7kt7
uPAS24S7UGJlsGMHGw11nw1cz/42NW+8Mtubq/B7/BqOsdiYBXbBpX9a6Bz4
YRLv4KyIv3E/szvXGfoq2xRcOcv5fUqmnAkGg5/cmXGfxV0WfvG2fePTpPj5
LImLNXLuaOj9BwNX54pFMO4k88CnC+EAXIaYmmj7Mzfuz+BS5AHwcIWxqbdx
jhyz2TjPvcExhbCVe9blhfLfvwvtBXPmbMi8eWZfrjO21Z0FB9hHPkm6t/zY
fBl79LXPTLRvXO29xF7kokHuC7tO9PyvcX+0m+VxmQPnec713HcgOedzRuO8
wbniKscU5xDG5/6Cewzudl71t+cbD97yXHjPfQfnvl25ODq+wXmQevrgPMhY
jL8oFx/l7D3a2AgPudh3F+OSzrnwLTCXczFcE4zmTH1JLl9bW0hfU4izTbCv
9PE+wQ3gCOjsF/m0Vy6/7Jur3a1+38f7Ci7T9+roc10h/vJ01F2YK1ddkO3N
W+w7uaCffQs/GmVf6mSONybp9xW+OzPpO/ri7gU7cN/RzXUXuf4e3/1yBwxu
k+fIceR8xiOvEzfcd5AXuBf4yr4Kb0O/P+k+JvedDGuHl+D3tcYU8KSjedFk
4rQs+9Y6juHgtOvnccEo7mi5q4UXkm/qzr7rjeE32ZbYFxzv77qx9v/u/pa5
fL8fmX4PgZ9ztujleubJPSd1xCh5hm+JFeK60vjzms9XrzvWmzhuuPPi7os7
Sjj2YmMi99/o8O3tuZ7RaTvU7cFF8PFc+z93ddybjPFvf0clSca41HGETxBT
5Pp37M91d4uskXuFHsbdujvTujtUJHyyi7/tbDyeZ0zmeb5x/sWkO/OTCsXN
fI91hccBb+FHnN2WZeJE8L//1+Xie2Ai9gJb4BjwDrgQMT3ccQ0eDDMmTEni
M5ybH0m6w+Eu54WUfX/H0bjQWZSz5yWFsB7MX5yEJdXGEzB7hPEJnKgyVmDz
Wuejro4D4qvWmEH91lwccbXzEnmr7rslthX39pW+02Bv+W2ju3Gv1m3Y9237
vENen+31D+rAp0WOTe624AZDk+4uOGPcYh/bZv/hjmur58Z+0oY+uQ/jd7ou
ruN74gVZ3/cg9V1PnxPcD9ybmFvjeF9tHZwhF610mwnWyU20WeX2PK/YZ6+p
721JuzucVzgn8H6N6/mWOKYePgZfrO+5EVtV3kdiBZt0tv2wA74Mx1xgvKqx
Th9NHZv43JtJd9Dzkn6jItf+q9CZDzwkL8xP4tDvJNUtcn03YybYhJ2W2w7s
O7kHXwLvwEdyJfu53XvN+y32rSW+8+Tuc5vbsI8zzHuI/RGFnkckcRT6nGq/
3eV+qNuT7/2NCX2DY5iz8VxjJtgHdvH7+TRjDedTzp/cY3A+5qzKGZnzMnxn
Tqa7cnxxi38r5rdMePCKQueo8wvxDLBjfaE9oG8wBu7IuZbz7deZfBOe0iLJ
J/kNuQ7L+L+GSY7rt5JsMsR4yF0GdxoLCt1jnV7e+38SSPDjuULzGpD0+8nB
+55njC0XFOJwowrNm/nfFfJj1/P+nkLj9k7iM+wltiWeG5rLLfQ9w6Kku+K6
3+SZO3fBYCD3nNx3wnufTMJI7vK5C8WucHr8uNr41tk4Bp418R0ndvsfk12j
wA==
         "]], PolygonBox[CompressedData["
1:eJwllmmIl1UYxd/3/94nLROS0FZyiWrGPYqISg21RMttyMCvfbHFVExISjJH
HZ1x0qzctUbNFpdWcDQVHZ3RoJzUNJ00okhRy1IzKlH0dzgfzsw597nLe+89
z3P/nZ8ZXzGulGXZTJDAJv7cSkNv8CX8e3A//BtiA+FPRpbVo0+AZ9HvgT15
lo0tsuwKsRfRr6F3gFr0XPQP8K70P4r+Ncx/pm0hsQ/QrRh7LZiAPogexloP
oQ/Bj9LWh/79wMhkiLcjvoH4gXDfzbQNhY8A2+FnwFj6VoKhzNdIn7bX0A99
G7Em8FjyGI09DV5At0dX823NoAP8Y9CGsdeDicS/BnfpPIivgrdmzhpi36HX
oEfR/+/ce34KfqfaWH8MfS6jR4IaYg2ak7EvEW9beA2tNQk9L/cc69Hj0EHs
T/S78A9BA/P15RuOwdeDi8Tm0+c65jvNmFHwMn0jsb/CdzeatrPw82H+L2PO
wVeDovAaWkt71F6vEN8Ab0c8Y66T/LsBXkfb2dxnsAf+Ptif+Qx0Fj+iH9Fd
6QzgSxhTCb9E2zL40jBvpK2M+L3gvM6DtgHaH/FXM3vio7An5A2tuRL+HJgM
3wxmEJ+V7LV+9GmRBltK9lAVfDH4Hz2NPu/oPulfRWyuPMf31urOiVWiW6GH
o0fkvpO19N+B7sT43fIwfDU4An+ZeEH/w+iH5R1wY3jP2rvajiTfse5acw5D
N4IuxCpoW661ku9SHpfXu2j/8Bb6d4bPpG1G7m9ogPcGtXz/JMaXmPtt+vxD
7HX6zAt7Ut6cSDwnvh3dUWN1Z/AV9Llc8p3oblaBnL7T5a9wjihXdMbTlR/g
FOuNpy0jdpM8yfhXwB3wJcQH5T7DxfCacO71pX9VsgflxXLwLfykcoDYcKZb
Jv+gn8/swTXw38K59AT6OPxu+uzMfWa7kj0j7+hOFxFfAP5TjLZ7iJWDptx7
XB6+c929+iwM57xyXx5tST5DnaVyvhr9Sbi2KAfXaf7kWiWP/oKuCHtVOaxc
1ppaW3fwVjgHlYs6s3XySvgsnkb3T/aIvHI72JJcY1RrdKY3w38C/Qt77Jaw
p+Vt1TTVNs2hubahD6PvQ29FT0F3Ct+J7kY1vJ7YmfBZqmb8AV+U3Fce6xj2
sLysOTRXN9qqiD0AHk/2jLxzDv2G6nmYq8bPCdd81X7lbLfkHFGuyFMriTUl
1y69EbOTPSlvysM9k2uiaqM8Lq+Xhb2vN6dc/g/XZtVw1fLq8N5VU2eHc1i5
rBq4lnhz+G0aQnwvfD94sPCbpbdrr/ZY8hkfC+9Re1WbYluT76YX+FRvTfJc
G5l/Y3KNUK1QzZuj90/1sbDn5L1m0LPkmjkkOceV6/K8vD8NXZ/7m/Rtyjnl
nuaog/cIr12Az5JzTrk3GdodvU81s+Qa1gv+hfIzdw5+Dn+T8RdKzhnljmqC
aoPa5sMPJtdyzXFIY8Nvgd6M3+GPJuemaugJvdXhb5EnusOnJp+Fasq+8G8E
/VbQm/oVfHDy26Ez0FlcBQ+6Ev8=
         "]]}]}, 
     {RGBColor[0.8889189268292683, 0.8891116585365854, 0.8574541219512195], 
      EdgeForm[None], GraphicsGroupBox[{PolygonBox[CompressedData["
1:eJxNl1lsV0UUxu+9/5lKWwIuwSUmCmpwAVyoRiU+SFwQgqKImuibTy5RiPoi
iQ8aS4slvom4xI0iFHBFZCkiKZSlUiMICFUfrEgQNQoiMdFEv1/O9095OJlz
Z87MnDnLd84d8+DsmY9XRVE8WhZFTeO4VBS/i/8vF8UPmhgUzdX8PPOtojbR
j6JXNb+jDLm6zE7z7Rr7RR3iN2r8XDRasu2iTeY5i73zJbOzjDORX1CG/DHv
Rf4l8T1StEf8x+Jvkp6LNV6l8dIyZDtFpWQqfa8U3yvZrbWQu7UW38heVwXP
/BTLsM7Zm33+SPMjTKxN1N7vdN/fGpdqPFiLd6LzK0XY5VXr2S3+P/GbxW+o
Dc3B7y3jvm7z82zXp223g7bxDn2vE60XbRet9fc20Rp/8+7PavH2tjL2v1CE
LQ9aN9Y32oazmBPdbX/OO8lfbd7bXoQ++KXV+qHb9jK+4Y/7XM6cq3G96HXx
j1XBt1Thw432Y5/f0S36JYcePxNjZdizUZS1p6EKnnn4HsmfEH+K+WbLrSpi
PXt+QPPDxH+FjhpHEgei50RJNE3z43OsXabxZe1ZKnq3CF0bRa+Jv4E4FO0W
35UjFp9MYQtiHfuQH/DY7VutzRR/Z4q5PstcrXFQNFx0o96aamG//ZKbpLv2
pcgxznpT/PAGxbnm79LcmhS2PE98k+b/JZ5T6NgkWqG1EX5jjXc3hI06JXON
5kaJ/tL3dOJM9LXkd5Uhg606NP4jOlc0oYrz4RsbYr4rxb6p3jstRb5+qfGw
xkNl2KmyDuTceN/Jey+s4l3YB32bRSecm+hNDMw2j/7Li3gb72r2G3l/5bPJ
5Tkaj5dh19E5+JYUuV76THx82Lo9Y53wwVatfeqcma89/ejeEHnf69wnvqbX
Iu6m1gIXyM1ur5PLM/R9pIiYJ87IoQNF+LzNfgfPiAPihTwjzgeKuGuKMQf/
3F+LeGXuNs/zFnIEOxDXzfYXvjhDdLqoV997RXuMA9+I9hWBFeiy31ix32vk
1kznF3ad6zxF/wPOy59yvP1gDlvt8x1/5NDz9xy63luLfd/l8Fu/bPmt+Mma
fzEFBnaJlhl/wHTwcKR9jZ/Aw8m27SLLkod9mr++CmwGV44bz9m/3Ofea3ui
A/HC/GteX29sBMPQA1/MNy4vMqYxkvcbjL1gclkGlnQaC4iT1Y7bE/bFMmPt
Guu6xnJdvpM1cmie86jDI7EyxuNC23XrSX7bZl/tMyYMaFyRo/a8n4d8iW/H
a+2OEtALf1KTGl1DedvTxjH8i23ekfxRrW9PUcd6XMcOGd9usP93OAaycRdb
9NoGvBE8ApdmauzQWbvBYumwJAWegD3E6SeS3ey46fU76/G6x/jDOrj6QC18
SUw9kQJjwdo5KfLo3Rw6j3Qtpo4gAwZdXMW9nLckB652arwlhb/WpfAvcUaM
bXHMcQ71G5/X63KP53lfn2MPjObMVudin20ErsGDMyt136mSeUp3PZ5CdnEO
HBhWizcsy8EvtT9PPamvwA/48L0c410pbL3VtlvnO+s1f3sxVPO3WW61ZbcU
kTcL3ANNMuZj+52u7+gHzvE++h/ez0jM4/OJ9js5d5nnseW4MuKfHGmxDDwy
S4qIcWK+jRzMoceMFPsmGbfPyYH13xuzB43hU60n+lKfwe1ptgU2oa72OEfR
D/xgH/Y/YF/j8x9y4OdLrgXcvbIY6vOwyQcpaskG6loK7BqXo54RU1M17hVd
K5k9KexA3pKzD1eRV+AMvSsyM1w/qZ3YYFuKPust984XVVEDNjmmwPZ+38v9
O1PUhC9SEPyRHLlFfO+y7tdbf2xGLSMGyemxVWArfdZc91p/FoEz+GLQfTXY
sNb4BVbNypEP9xC/oofEn6ZxUQpceCUNYRx7ijJssdAx2WWs5X5qKDrQY/7o
3vFt5y95fIVoIv2YxsuNRWVD1GzioCb+ZvcrX4NtKexFH7TUOL3I+D3feF7H
cb4/ShE3H6fQtS7bVEaMEp/tKXqRXo0LU9T1wRz+IVd3OBeId2J7RQocp+f6
1PUAXZan8Df9EfgLDt/Om3Jg2TGNH/J2nTshB24sd+2g//3MPXCXdazXNEbi
Ch82uQcdk6N3uUDjG8YWMOZXfd8nud80rkrRJ61Ngb0txl/OwyecSc7Ncc6A
18TWguTetgwcPt19xRbHNnFNb4NvH3bMs3+48+6ofU6s40u+qTP0qfQUZ+WI
wT8dM49UYbcOn93hWkguz7ZuvdYDHc7IkbvfOHbq+7h/wPiLDehp6NP+8vxw
xxNxtThFL8c6vRO9FnVmwHgz3W+e4r5ur9/Ub7vRF8JfmYb+N6hbY6Xbs5xb
BObdYdybZKylxm3y/w6YcnaOf6Ezc9z9lfXnXY/4bd0p3su7iZ3WaqinbnVv
vNu1Dn/1+3+THDvT54/KgXmVsbrF8U88YJ9RfnuDbdJYDvUl+Po911/q8BFj
Ou8ihiv7fYT/fRt9dpPPP26MINfAp+f9D3B+Dsx6OcU9yHEXePWYe/tLc8hf
kkPnZtcXbL3LvsM/9Xo10eMq1yj06DTP+egAnoHPxPIs/+Ni9/XOl1Xus7AX
9QN/8n9I3cF37bbJ/3CHR8M=
         "]], PolygonBox[CompressedData["
1:eJwllElsjmEUhb/v/9+PJhYtSYMVRWqoGooIK0JSNbRSRcLOCgklrCQWRCmt
YWOMMVWtDoZujAuJuSEoDYpETTFXhUbCwnNyFufPOffe9/3ve4cvZ1l56epU
FEVlIIBd/ExPR9F1jAuSKNqJbo9te4E+g65EDwaz4W+wFaUdo9hDYDNnN4Fc
fDfRQ+EbuPsI/AmYjF4OsvDv1x2c/aU70f3ASnwFYCy+PWA0fCPIwfcOzOX/
eqN34KtBV3A2YKuFr8eWBc8EjeiloJXYa6AY31t0Z+w73sNLsE1JOUaxD9Al
sXNsh3/DtjjtMzpbqDvgH8ABeB22DPyt6Hz0KfS22LZ6+E/lAM/gvu/wemLy
4X+JaYCvBSvQ99Hb4ScTv2Ua6IDPwfZR7yPmvO4Hi9K+sxt/HfpP7By/ovei
Z8ELwWt0Nbotds7KfR4ohm8F5fC+iXuhnqq360B17Jo04OtAT4X30L/n8Edg
Qso5K/ei4FnQmWb4ePUkcg6dnD+G7oo9A5Xw+aA0ds4v4QeDa6k36q3qqXrb
g66FjwuuTS62u/BP3FmWdg1Ui6xe+NOu+QnVVvUnNgXOoh+DSfDf+NvgmcTf
S3tmjgb3TL0bRsyt4BnVrCpGsaqRavUPNAbXVLXVzO8L3hHtyg1QBn8FyuFp
vQ/eFHxWPVfva4JnfQ16N7wluLfaGe1OaeJZVQ1noK8Gv6UJfSU4R+WqmuYF
10S16UaPgV8EfdCHib+gt4HhKc9AleYruLayyZeXONcK9Gh4F1jC27LRE4Nr
ptptQY/ENyIx105qNxcmfnsL/1eAfhqcq2bmGfyzZihyz74kjlGsdrRJ35PE
u6qZaIZfCp41veEyfFTi3NTTc8E5KTf1dCb8TvDbqzhzO7imqq16MJCz2WBV
yjOr2X0Y/G3RjmvXtZPaTb35B3xI4m+NvkmD4P0T11J3DICfDt5dfaP0rToe
/N+aQc3if8brsgQ=
         "]]}]}}, {{}, 
     {GrayLevel[0], Opacity[0.4], LineBox[CompressedData["
1:eJwV0DlOQlEYgNFrIqLGQtmBjZUJ0S1QGDGMamXHAiRRVgFoJ1FrCYNgIsug
UAqpoGDQTvbAecV53/3vG/MOS+Xi7UYIIc/xpsNWCBkt886uuadtuuyYO5qI
hZDUEd+M+WHf/gEf1mm+OKfPHR3n7qNnaU5vNKt7nluwLpIynzC3ftKZNnSh
DzrRR73UK645Nfe0En139H76FKLryTOlxb/9FUv++KVqv8m273jTITXi5rqe
8cwLF3wy4JUj98/9ujW4dSyR
       "]], LineBox[CompressedData["
1:eJwVzrsuw2EcBuBfFasm4rTQmpwqEi5BXYDR6AJa7oKJzVSn0tpIDI6rlmBA
4tDUBSBxugF9DE/e733//y/5MvOF2XwiIua4aY245r0t4oM3yvqP/OWTb76Y
sk/zwD3DtiFWnTNykAHW9LSclMn2iJJcoc/2SoNbfYZR5zFGONCzcl+ec0an
/iSfeaTOCzlOOOWQY47o938PvXTTxZ19kWVavGdCXjFOQt+Wl9TYJGXbkguU
3d+jQlav/r+ZP31DLnFBkQ731mWeku+77FCnCf3+MzY=
       "]]}, 
     {GrayLevel[0], Opacity[0.4], LineBox[CompressedData["
1:eJwVz7dNhEEQgNFBAjKKwB80cUCMEw0gEWGPEjiL9967IkixKd43wFEEIN4f
PH2zo9VKWzsw3pepiIh+6iojfqoicvqonQya83rHLWnnM7LcO0/og55rIwvm
ReYYc57XBv3TKf3UXkbNszqpH9qh79rDDNO80W5fz6+5pJdc0MqJ3SmHHHNE
i/2+HrDDHruk7Ld0m3U22aDZflXXWGKFZZrsr7lJ3uM7eUuvKJvb9Eu7k38l
/+CFV555oosR90qa15rqiIIOU7Ab0qIW9R8nBjh6
       "]]}, 
     {GrayLevel[0], Opacity[0.4], LineBox[CompressedData["
1:eJwVzNk2QmEch+HPWlxG6CoSai1E4cyxo5C5DCmpDBdlrjQY44o48eyDZ737
/9u74vnSWnEkhLBObDSE1FgIdf3VR+bIu3e0preaiMoFd+4H7um441x7vqHJ
FZdM2hu6Hf1OC1rXCU1H3+if/rDKlrsW/Yd+65AVzqnyRdq7T12mwhkfpOzv
mqPMKW/M2l81ywnHDJix93WJI0r0mLZ3dZEih7yQtHc0wwH7tJmyt3SBTc97
2tBnfWKeDfeujus/B98wNg==
       "]]}, 
     {GrayLevel[0], Opacity[0.4], LineBox[CompressedData["
1:eJwV0Ms2QnEUwOF/qZBLE6M08QooRWvxDBEKqdxmGlFvlWjqqVxKpL4z+NZv
730G56yz1e5UHmMhhDoZvhMhjBmRT4awy5f5hA+O+WTHfZue+UeHHFGxN7Sr
b1rQVz3kikv65N2HPPNif9KBvmuOe/MDN9xxy6Z7S9tc07I3NasZbepa9EzX
tcwqDXs6er+u6AHL0bfYF/VCl3SfFHV7Qmua1BILnNtjeqZxLRI4tf9TZUbB
bY8/8zT6P/wyYcN9DkedJxI=
       "]]}, 
     {GrayLevel[0], Opacity[0.4], 
      LineBox[{1, 1550, 1319, 1370, 1369, 1100, 1316, 1317, 1315, 1367, 1366, 
       1096, 1541, 1542, 1540, 1307, 1306, 1327, 1326, 1044, 1524, 1525, 1523,
        1246, 1245, 1248, 1247, 1045, 1250, 1251, 1249, 1253, 1526, 1252, 
       1547, 1046, 1328, 1169, 1502, 1170, 1308, 1368, 1309, 1172, 1503, 1171,
        1329, 1047, 1528, 1255, 1527, 1256, 1254, 1258, 1257, 1048, 1260, 
       1261, 1259, 1263, 1262, 1049, 1265, 1266, 1264, 8}]}, {}, {}, {}}, {
     InsetBox[
      StyleBox[
       RowBox[{"-", "8"}],
       StripOnInput->False,
       LineColor->RGBColor[1, 0.5, 0],
       FrontFaceColor->RGBColor[1, 0.5, 0],
       BackFaceColor->RGBColor[1, 0.5, 0],
       GraphicsColor->RGBColor[1, 0.5, 0],
       FontSize->20,
       FontColor->RGBColor[
        1, 0.5, 0]], {-0.0735477314990047, -0.9641896094919938}], InsetBox[
      StyleBox[
       RowBox[{"-", "6"}],
       StripOnInput->False,
       LineColor->RGBColor[1, 0.5, 0],
       FrontFaceColor->RGBColor[1, 0.5, 0],
       BackFaceColor->RGBColor[1, 0.5, 0],
       GraphicsColor->RGBColor[1, 0.5, 0],
       FontSize->20,
       FontColor->RGBColor[
        1, 0.5, 0]], {0.8821428571428569, -0.9509439386679442}], InsetBox[
      StyleBox[
       RowBox[{"-", "4"}],
       StripOnInput->False,
       LineColor->RGBColor[1, 0.5, 0],
       FrontFaceColor->RGBColor[1, 0.5, 0],
       BackFaceColor->RGBColor[1, 0.5, 0],
       GraphicsColor->RGBColor[1, 0.5, 0],
       FontSize->20,
       FontColor->RGBColor[
        1, 0.5, 0]], {-0.9403437146229253, -0.6137118529758894}], InsetBox[
      StyleBox[
       RowBox[{"-", "2"}],
       StripOnInput->False,
       LineColor->RGBColor[1, 0.5, 0],
       FrontFaceColor->RGBColor[1, 0.5, 0],
       BackFaceColor->RGBColor[1, 0.5, 0],
       GraphicsColor->RGBColor[1, 0.5, 0],
       FontSize->20,
       FontColor->RGBColor[
        1, 0.5, 0]], {0.9358832448824869, -0.4994139499620925}], InsetBox[
      StyleBox["0",
       StripOnInput->False,
       LineColor->RGBColor[1, 0.5, 0],
       FrontFaceColor->RGBColor[1, 0.5, 0],
       BackFaceColor->RGBColor[1, 0.5, 0],
       GraphicsColor->RGBColor[1, 0.5, 0],
       FontSize->20,
       FontColor->RGBColor[
        1, 0.5, 0]], {0.9330411238155976, 0.9526785714285714}], InsetBox[
      StyleBox["0",
       StripOnInput->False,
       LineColor->RGBColor[1, 0.5, 0],
       FrontFaceColor->RGBColor[1, 0.5, 0],
       BackFaceColor->RGBColor[1, 0.5, 0],
       GraphicsColor->RGBColor[1, 0.5, 0],
       FontSize->20,
       FontColor->RGBColor[
        1, 0.5, 0]], {-0.9499999999999995, 2.394597801005309*^-16}]}}],
  AspectRatio->1,
  Frame->True,
  PlotRange->{{-1, 1}, {-1, 1}},
  PlotRangeClipping->True,
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02]}]], "Output",
 CellChangeTimes->{3.460667741116658*^9},
 CellTags->"Cell 9.209"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Three\[Hyphen]Dimensional Surface Plots\
\>", "Section",
 CellTags->"c:75"],

Cell[BoxData[
 FormBox[
  StyleBox[
   FrameBox[
    StyleBox[GridBox[{
       {
        RowBox[{
         StyleBox["Plot3D",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         StyleBox["[",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         RowBox[{"f", ",", 
          RowBox[{"{", 
           RowBox[{"x", ",", 
            StyleBox["xmin",
             FontSlant->"Italic"], ",", 
            StyleBox["xmax",
             FontSlant->"Italic"]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"y", ",", 
            StyleBox["ymin",
             FontSlant->"Italic"], ",", 
            StyleBox["ymax",
             FontSlant->"Italic"]}], "}"}]}], 
         StyleBox["]",
          FontFamily->"Courier",
          FontWeight->"Bold"]}], 
        RowBox[{"make", " ", 
         StyleBox["a",
          FontSlant->"Plain"], " ", 
         RowBox[{"three", "\[Hyphen]", "dimensional"}], " ", "plot", " ", 
         "of", " ", "f", " ", "as", " ", 
         StyleBox["a",
          FontSlant->"Plain"], " ", "function", " ", "of", " ", "the", " ", 
         "variables", " ", "x", " ", "and", " ", "y"}]}
      },
      GridBoxAlignment->{
       "Columns" -> {Right, {Left}}, "ColumnsIndexed" -> {}, 
        "Rows" -> {{Baseline}}, "RowsIndexed" -> {}}],
     GridBoxOptions->{
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}}}]], "2ColumnBox"], TraditionalForm]], "Text"],

Cell["Basic 3D plotting function. ", "Caption"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Plotting Lists of Data", "Section",
 CellTags->"c:76"],

Cell["", "Text"],

Cell[BoxData[
 FormBox[
  StyleBox[
   FrameBox[
    StyleBox[GridBox[{
       {
        RowBox[{
         RowBox[{
          StyleBox["ListPlot",
           FontFamily->"Courier",
           FontWeight->"Bold"], 
          StyleBox["[",
           FontFamily->"Courier",
           FontWeight->"Bold"], 
          RowBox[{"{", 
           RowBox[{
            SubscriptBox["y", "1"], ",", 
            SubscriptBox["y", "2"], ",", "..."}], "}"}], 
          StyleBox["]",
           FontFamily->"Courier",
           FontWeight->"Bold"]}], 
         StyleBox[" ",
          FontFamily->"Courier",
          FontWeight->"Bold"]}], 
        RowBox[{
         RowBox[{"plot", " ", 
          StyleBox[
           SubscriptBox["y", "1"], "InlineFormula"]}], ",", " ", 
         StyleBox[
          SubscriptBox["y", "2"], "InlineFormula"], ",", " ", 
         RowBox[{
          StyleBox["...", "InlineFormula"], " ", "at", " ", "x", " ", 
          "values", " ", 
          StyleBox["1", "InlineFormula"]}], ",", " ", 
         StyleBox["2", "InlineFormula"], ",", " ", 
         StyleBox["...", "InlineFormula"], " "}]},
       {
        RowBox[{
         RowBox[{
          StyleBox["ListPlot",
           FontFamily->"Courier",
           FontWeight->"Bold"], 
          StyleBox["[",
           FontFamily->"Courier",
           FontWeight->"Bold"], 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              SubscriptBox["x", "1"], ",", 
              SubscriptBox["y", "1"]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              SubscriptBox["x", 
               RowBox[{"2", ","}]], 
              SubscriptBox["y", "2"]}], "}"}], ",", "..."}], "}"}], 
          StyleBox["]",
           FontFamily->"Courier",
           FontWeight->"Bold"]}], 
         StyleBox[" ",
          FontFamily->"Courier",
          FontWeight->"Bold"]}], 
        RowBox[{
         RowBox[{"plot", " ", "points", " ", 
          StyleBox[
           RowBox[{"(", 
            RowBox[{
             SubscriptBox["x", "1"], ",", 
             SubscriptBox["y", "1"]}], ")"}], "InlineFormula"]}], ",", " ", 
         StyleBox["...", "InlineFormula"]}]},
       {
        RowBox[{
         StyleBox["ListPlot",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         StyleBox["[",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         RowBox[{
          StyleBox["list",
           FontSlant->"Italic"], ",", " ", 
          RowBox[{
           StyleBox["Joined",
            FontFamily->"Courier",
            FontWeight->"Bold"], "\[Rule]", 
           StyleBox["True",
            FontFamily->"Courier",
            FontWeight->"Bold"]}]}], "]"}], 
        RowBox[{
        "join", " ", "the", " ", "points", " ", "with", " ", "lines", " "}]},
       {
        RowBox[{
         StyleBox["ListPlot",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         StyleBox[
          RowBox[{"[", "{"}],
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         RowBox[{
          StyleBox[
           SubscriptBox["list", "1"],
           FontSlant->"Italic"], ",", " ", 
          StyleBox[
           SubscriptBox["list", "2"],
           FontSlant->"Italic"]}], 
         StyleBox[
          RowBox[{
           RowBox[{"}", "]"}], " "}],
          FontFamily->"Courier",
          FontWeight->"Bold"]}], 
        RowBox[{
        "plot", " ", "two", " ", "lists", " ", "of", " ", "data", " ", "at", 
         " ", "once"}]},
       {
        RowBox[{
         RowBox[{
          StyleBox["ListPlot",
           FontFamily->"Courier",
           FontWeight->"Bold"], 
          StyleBox["[",
           FontFamily->"Courier",
           FontWeight->"Bold"], 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              SubscriptBox["z", "11"], ",", 
              SubscriptBox["z", "12"], ",", "..."}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               SubscriptBox["z", 
                RowBox[{"21", ","}]], 
               SubscriptBox["z", "22"]}], ",", "..."}], "}"}], ",", "..."}], 
           "}"}], 
          StyleBox["]",
           FontFamily->"Courier",
           FontWeight->"Bold"]}], 
         StyleBox[" ",
          FontFamily->"Courier",
          FontWeight->"Bold"]}], 
        RowBox[{"make", " ", 
         StyleBox["a",
          FontSlant->"Plain"], " ", 
         RowBox[{"three", "\[Hyphen]", "dimensional"}], " ", "plot", " ", 
         "of", " ", "the", " ", "array", " ", "of", " ", "heights", " ", 
         StyleBox[
          SubscriptBox["z", 
           StyleBox["yx",
            FontSlant->"Italic"]], "InlineFormula"]}]},
       {
        RowBox[{
         RowBox[{
          StyleBox["ListContourPlot",
           FontFamily->"Courier",
           FontWeight->"Bold"], 
          StyleBox["[",
           FontFamily->"Courier",
           FontWeight->"Bold"], 
          StyleBox["array",
           FontSlant->"Italic"], 
          StyleBox["]",
           FontFamily->"Courier",
           FontWeight->"Bold"]}], 
         StyleBox[" ",
          FontFamily->"Courier",
          FontWeight->"Bold"]}], 
        RowBox[{"make", " ", 
         StyleBox["a",
          FontSlant->"Plain"], " ", "contour", " ", "plot", " ", "from", " ", 
         "an", " ", "array", " ", "of", " ", "heights"}]},
       {
        RowBox[{
         RowBox[{
          StyleBox["ListDensityPlot",
           FontFamily->"Courier",
           FontWeight->"Bold"], 
          StyleBox["[",
           FontFamily->"Courier",
           FontWeight->"Bold"], 
          StyleBox["array",
           FontSlant->"Italic"], 
          StyleBox["]",
           FontFamily->"Courier",
           FontWeight->"Bold"]}], 
         StyleBox[" ",
          FontFamily->"Courier",
          FontWeight->"Bold"]}], 
        RowBox[{"make", " ", "a", " ", "density", " ", "plot"}]}
      },
      GridBoxAlignment->{
       "Columns" -> {Right, {Left}}, "ColumnsIndexed" -> {}, 
        "Rows" -> {{Baseline}}, "RowsIndexed" -> {}}],
     GridBoxOptions->{
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, 
       "Rows" -> {False, False, False, False, True, {False}, False}, 
       "RowsIndexed" -> {}}}]], "2ColumnBox"], TraditionalForm]], "Text"],

Cell["Functions for plotting lists of data. ", "Caption"],

Cell["To create your own data  markers and add text to a plot:", "Text",
 CellChangeTimes->{{3.460667834817325*^9, 3.4606678667881308`*^9}, {
  3.460667938198338*^9, 3.460667939936565*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Graphics", "[", 
  RowBox[{"{", 
   RowBox[{"Red", ",", 
    RowBox[{"Disk", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"0", ",", "0"}], "}"}], ",", "1"}], "]"}]}], "}"}], 
  "]"}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.210"],

Cell[BoxData[
 GraphicsBox[
  {RGBColor[1, 0, 0], DiskBox[{0, 0}]},
  ImageSize->{12.000000000000039`, Automatic}]], "Output",
 CellChangeTimes->{3.460667899182437*^9},
 CellTags->"9.210"]
}, Open  ]],

Cell[TextData[{
 "The size of the disk was reduced. Now it can be pasted into a ",
 StyleBox["PlotMarkers",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " option. Text can also be used as a data marker."
}], "Text",
 CellChangeTimes->{{3.460667907219159*^9, 3.460668015280862*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListPlot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "3", ",", "4", ",", "5"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"2", ",", "4"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"3.5", ",", "3"}], "}"}]}], "}"}]}], "}"}], ",", 
   RowBox[{"Joined", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"True", ",", "False"}], "}"}]}], ",", 
   RowBox[{"PlotMarkers", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<\!\(\*
GraphicsBox[
{RGBColor[1, 0, 0], DiskBox[{0, 0}]},
ImageSize->{12.000000000000039`, Automatic}]\)\>\"", ",", "\"\<\!\(\*
StyleBox[\"text\",
FontColor->RGBColor[0, 0, 1]]\)\>\""}], "}"}]}]}], "]"}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.211"],

Cell[BoxData[
 GraphicsBox[
  GraphicsComplexBox[{{1., 1.}, {2., 3.}, {3., 4.}, {4., 5.}, {2., 4.}, {3.5, 
   3.}, {2., 4.}, {3.5, 3.}}, {{{}, {}, 
     {Hue[0.67, 0.6, 0.6], LineBox[{1, 2, 3, 4}]}}, {
     {Hue[0.67, 0.6, 0.6], 
      TagBox[InsetBox[
        GraphicsBox[
         {RGBColor[1, 0, 0], DiskBox[{0, 0}]},
         ImageSize->{12.000000000000039`, Automatic}], 1],
       "InsetString"], 
      TagBox[InsetBox[
        GraphicsBox[
         {RGBColor[1, 0, 0], DiskBox[{0, 0}]},
         ImageSize->{12.000000000000039`, Automatic}], 2],
       "InsetString"], 
      TagBox[InsetBox[
        GraphicsBox[
         {RGBColor[1, 0, 0], DiskBox[{0, 0}]},
         ImageSize->{12.000000000000039`, Automatic}], 3],
       "InsetString"], 
      TagBox[InsetBox[
        GraphicsBox[
         {RGBColor[1, 0, 0], DiskBox[{0, 0}]},
         ImageSize->{12.000000000000039`, Automatic}], 4],
       "InsetString"]}, 
     {Hue[0.9060679774997897, 0.6, 0.6], 
      TagBox[InsetBox[
        StyleBox["text",
         FontColor->RGBColor[0, 0, 1]], 7],
       "InsetString"], 
      TagBox[InsetBox[
        StyleBox["text",
         FontColor->RGBColor[0, 0, 1]], 8],
       "InsetString"]}, {}}}],
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  AxesOrigin->{1., 1.},
  PlotRange->{{1., 4.}, {1., 5.}},
  PlotRangeClipping->True,
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02]}]], "Output",
 CellChangeTimes->{3.460668063803389*^9},
 CellTags->"9.211"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Parametric Plots", "Section",
 CellTags->"c:77"],

Cell["  ", "Text"],

Cell[BoxData[
 FormBox[
  StyleBox[
   FrameBox[
    StyleBox[GridBox[{
       {
        RowBox[{
         StyleBox["ParametricPlot",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         StyleBox["[",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            SubscriptBox["f", "x"], ",", 
            SubscriptBox["f", "y"]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"t", ",", 
            StyleBox["tmin",
             FontSlant->"Italic"], ",", 
            StyleBox["tmax",
             FontSlant->"Italic"]}], "}"}]}], 
         StyleBox["]",
          FontFamily->"Courier",
          FontWeight->"Bold"]}], 
        RowBox[{"make", " ", 
         StyleBox["a",
          FontSlant->"Plain"], " ", "parametric", " ", "plot", " "}]},
       {
        RowBox[{
         StyleBox["ParametricPlot",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         StyleBox["[",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              SubscriptBox["f", "x"], ",", 
              SubscriptBox["f", "y"]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              SubscriptBox["g", "x"], ",", 
              SubscriptBox["g", "y"]}], "}"}], ",", "..."}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"t", ",", 
            StyleBox["tmin",
             FontSlant->"Italic"], ",", 
            StyleBox["tmax",
             FontSlant->"Italic"]}], "}"}]}], 
         StyleBox["]",
          FontFamily->"Courier",
          FontWeight->"Bold"]}], 
        RowBox[{
        "plot", " ", "several", " ", "parametric", " ", "curves", " ", 
         "together"}]},
       {
        RowBox[{
         StyleBox["ParametricPlot",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         StyleBox["[",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            SubscriptBox["f", "x"], ",", 
            SubscriptBox["f", "y"]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"t", ",", 
            StyleBox["tmin",
             FontSlant->"Italic"], ",", 
            StyleBox["tmax",
             FontSlant->"Italic"]}], "}"}], 
          StyleBox[",",
           FontFamily->"Courier",
           FontWeight->"Bold"], 
          StyleBox[
           RowBox[{"AspectRatio", "->", "Automatic"}],
           FontFamily->"Courier",
           FontWeight->"Bold"]}], 
         StyleBox["]",
          FontFamily->"Courier",
          FontWeight->"Bold"]}], 
        RowBox[{
        "attempt", " ", "to", " ", "preserve", " ", "the", " ", "shapes", " ",
          "of", " ", "curves"}]}
      },
      GridBoxAlignment->{
       "Columns" -> {Right, {Left}}, "ColumnsIndexed" -> {}, 
        "Rows" -> {{Baseline}}, "RowsIndexed" -> {}}],
     GridBoxOptions->{
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}}}]], "2ColumnBox"], TraditionalForm]], "Text"],

Cell["Functions for generating parametric plots. ", "Caption"],

Cell[BoxData[
 FormBox[
  StyleBox[
   FrameBox[
    StyleBox[GridBox[{
       {
        RowBox[{
         StyleBox["ParametricPlot3D",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         StyleBox["[",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            SubscriptBox["f", "x"], ",", 
            SubscriptBox["f", "y"], ",", 
            SubscriptBox["f", "z"]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"t", ",", 
            StyleBox["tmin",
             FontSlant->"Italic"], ",", 
            StyleBox["tmax",
             FontSlant->"Italic"]}], "}"}]}], 
         StyleBox["]",
          FontFamily->"Courier",
          FontWeight->"Bold"]}], 
        RowBox[{"make", " ", 
         StyleBox["a",
          FontSlant->"Plain"], " ", "parametric", " ", "plot", " ", "of", " ", 
         StyleBox["a",
          FontSlant->"Plain"], " ", 
         RowBox[{"three", "\[Hyphen]", "dimensional"}], " ", "curve"}]},
       {
        RowBox[{
         StyleBox["ParametricPlot3D",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         StyleBox["[",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            SubscriptBox["f", "x"], ",", 
            SubscriptBox["f", "y"], ",", 
            SubscriptBox["f", "z"]}], "}"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"s", ",", 
            StyleBox["smin",
             FontSlant->"Italic"], ",", 
            StyleBox["smax",
             FontSlant->"Italic"]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"t", ",", 
            StyleBox["tmin",
             FontSlant->"Italic"], ",", 
            StyleBox["tmax",
             FontSlant->"Italic"]}], "}"}]}], 
         StyleBox["]",
          FontFamily->"Courier",
          FontWeight->"Bold"]}], 
        RowBox[{"make", " ", 
         StyleBox["a",
          FontSlant->"Plain"], " ", "parametric", " ", "plot", " ", "of", " ", 
         StyleBox["a",
          FontSlant->"Plain"], " ", 
         RowBox[{"three", "\[Hyphen]", "dimensional"}], " ", "surface"}]},
       {
        RowBox[{
         StyleBox["ParametricPlot3D",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         StyleBox["[",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              SubscriptBox["f", "x"], ",", 
              SubscriptBox["f", "y"], ",", 
              SubscriptBox["f", "z"]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              SubscriptBox["g", "x"], ",", 
              SubscriptBox["g", "y"], ",", 
              SubscriptBox["g", "z"]}], "}"}], ",", "..."}], "}"}], 
          RowBox[{"{", 
           RowBox[{"t", ",", 
            StyleBox["tmin",
             FontSlant->"Italic"], ",", 
            StyleBox["tmax",
             FontSlant->"Italic"]}], "}"}]}], 
         StyleBox["]",
          FontFamily->"Courier",
          FontWeight->"Bold"]}], 
        RowBox[{"plot", " ", "several", " ", "objects", " ", "together"}]}
      },
      GridBoxAlignment->{
       "Columns" -> {Right, {Left}}, "ColumnsIndexed" -> {}, 
        "Rows" -> {{Baseline}}, "RowsIndexed" -> {}}],
     GridBoxOptions->{
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}}}]], "2ColumnBox"], TraditionalForm]], "Text"],

Cell["\<\
Three\[Hyphen]dimensional parametric plots. \
\>", "Caption"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Some Other Plots", "Section",
 CellTags->"c:78"],

Cell[BoxData[
 FormBox[
  StyleBox[
   FrameBox[
    StyleBox[GridBox[{
       {
        RowBox[{
         RowBox[{
          StyleBox["<<",
           FontWeight->"Bold",
           FontFamiliy -> "Courier"], 
          StyleBox[
           RowBox[{"add", "-", "on"}],
           FontSlant->"Italic"]}], 
         StyleBox[" ",
          FontSlant->"Italic"], 
         StyleBox[
          RowBox[{
           StyleBox["package",
            FontSlant->"Italic"], 
           StyleBox["`",
            FontFamily->"Courier",
            FontWeight->"Bold",
            FontSlant->"Plain"]}]]}], 
        RowBox[{
         RowBox[{"load", " ", 
          StyleBox["an",
           FontSlant->"Plain"], 
          StyleBox[" ",
           FontSlant->"Plain"], 
          StyleBox["add",
           FontSlant->"Plain"]}], 
         StyleBox["-",
          FontSlant->"Plain"], 
         RowBox[{
          StyleBox["on",
           FontSlant->"Plain"], 
          StyleBox[
           RowBox[{
            StyleBox[" ",
             FontSlant->"Plain"], " "}]], "package", " ", "for", " ", 
          "setting", " ", "up", " ", "some", " ", "additional", "  ", 
          "functions"}]}]},
       {
        RowBox[{
         RowBox[{
          StyleBox["LogPlot",
           FontFamily->"Courier",
           FontWeight->"Bold"], 
          StyleBox["[",
           FontFamily->"Courier",
           FontWeight->"Bold"], 
          RowBox[{"f", ",", 
           RowBox[{"{", 
            RowBox[{"x", ",", 
             StyleBox["xmin",
              FontSlant->"Italic"], ",", 
             StyleBox["xmax",
              FontSlant->"Italic"]}], "}"}]}], 
          StyleBox["]",
           FontFamily->"Courier",
           FontWeight->"Bold"]}], 
         StyleBox[" ",
          FontFamily->"Courier",
          FontWeight->"Bold"]}], 
        RowBox[{"generate", " ", 
         StyleBox["a",
          FontSlant->"Plain"], " ", 
         RowBox[{"log", "\[Hyphen]", "linear"}], " ", "plot", " "}]},
       {
        RowBox[{
         RowBox[{
          StyleBox["LogLogPlot",
           FontFamily->"Courier",
           FontWeight->"Bold"], 
          StyleBox["[",
           FontFamily->"Courier",
           FontWeight->"Bold"], 
          RowBox[{"f", ",", 
           RowBox[{"{", 
            RowBox[{"x", ",", 
             StyleBox["xmin",
              FontSlant->"Italic"], ",", 
             StyleBox["xmax",
              FontSlant->"Italic"]}], "}"}]}], 
          StyleBox["]",
           FontFamily->"Courier",
           FontWeight->"Bold"]}], 
         StyleBox[" ",
          FontFamily->"Courier",
          FontWeight->"Bold"]}], 
        RowBox[{"generate", " ", 
         StyleBox["a",
          FontSlant->"Plain"], " ", 
         RowBox[{"log", "\[Hyphen]", "log"}], " ", "plot"}]},
       {
        RowBox[{
         RowBox[{
          StyleBox["ListLogPlot",
           FontFamily->"Courier",
           FontWeight->"Bold"], 
          StyleBox["[",
           FontFamily->"Courier",
           FontWeight->"Bold"], 
          StyleBox["list",
           FontSlant->"Italic"], 
          StyleBox["]",
           FontFamily->"Courier",
           FontWeight->"Bold"]}], 
         StyleBox[" ",
          FontFamily->"Courier",
          FontWeight->"Bold"]}], 
        RowBox[{"generate", " ", 
         StyleBox["a",
          FontSlant->"Plain"], " ", 
         RowBox[{"log", "\[Hyphen]", "log"}], " ", "plot", " ", "from", " ", 
         StyleBox["a",
          FontSlant->"Plain"], " ", "list", " ", "of", " ", "data", " "}]},
       {
        RowBox[{
         RowBox[{
          StyleBox["ListLogLogPlot",
           FontFamily->"Courier",
           FontWeight->"Bold"], 
          StyleBox["[",
           FontFamily->"Courier",
           FontWeight->"Bold"], 
          StyleBox["list",
           FontSlant->"Italic"], 
          StyleBox["]",
           FontFamily->"Courier",
           FontWeight->"Bold"]}], 
         StyleBox[" ",
          FontFamily->"Courier",
          FontWeight->"Bold"]}], 
        RowBox[{"generate", " ", 
         StyleBox["a",
          FontSlant->"Plain"], " ", 
         RowBox[{"log", "\[Hyphen]", "log"}], " ", "plot", " ", "from", " ", 
         StyleBox["a",
          FontSlant->"Plain"], " ", "list", " ", "of", " ", "data"}]},
       {
        RowBox[{
         RowBox[{
          StyleBox["PolarPlot",
           FontFamily->"Courier",
           FontWeight->"Bold"], 
          StyleBox["[",
           FontFamily->"Courier",
           FontWeight->"Bold"], 
          RowBox[{"r", ",", 
           RowBox[{"{", 
            RowBox[{"\[Theta]", ",", 
             StyleBox[
              RowBox[{
               StyleBox["\[Theta]",
                FontSlant->"Plain"], 
               StyleBox["min",
                FontSlant->"Italic"]}]], ",", 
             StyleBox[
              RowBox[{"\[Theta]", 
               StyleBox["max",
                FontSlant->"Italic"]}]]}], "}"}]}], 
          StyleBox["]",
           FontWeight->"Bold"]}], 
         StyleBox["  ",
          FontWeight->"Bold"]}], 
        RowBox[{"generate", " ", 
         StyleBox["a",
          FontSlant->"Plain"], " ", "polar", " ", "plot", " ", "of", " ", 
         "the", " ", "radius", " ", "r", " ", "as", " ", 
         StyleBox["a",
          FontSlant->"Plain"], " ", "function", " ", "of", " ", "angle", " ", 
         "\[Theta]"}]},
       {
        RowBox[{
         RowBox[{
          StyleBox["ErrorListPlot",
           FontFamily->"Courier",
           FontWeight->"Bold"], 
          StyleBox["[",
           FontFamily->"Courier",
           FontWeight->"Bold"], 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              SubscriptBox["x", "1"], ",", 
              SubscriptBox["y", "1"], ",", " ", 
              SubscriptBox[
               StyleBox["dy",
                FontSlant->"Italic"], "1"]}], "}"}], ",", "..."}], "}"}], 
          StyleBox["]",
           FontFamily->"Courier",
           FontWeight->"Bold"]}], 
         StyleBox[" ",
          FontFamily->"Courier",
          FontWeight->"Bold"]}], 
        RowBox[{
         RowBox[{"generate", " ", 
          StyleBox["a",
           FontSlant->"Plain"], " ", "plot", " ", "of", " ", "data", " ", 
          "with", " ", "error", " ", 
          RowBox[{"bars", ".", " ", "Requires"}], " ", "the", " ", 
          StyleBox["ErrorBarPlots",
           FontFamily->"Courier",
           FontWeight->"Bold"], " ", "add"}], "-", 
         RowBox[{"on", " ", 
          RowBox[{"package", "."}]}]}]},
       {
        RowBox[{
         StyleBox["BarChart",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         StyleBox["[",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         StyleBox["list",
          FontSlant->"Italic"], 
         StyleBox["]",
          FontFamily->"Courier",
          FontWeight->"Bold"]}], 
        RowBox[{"plot", " ", 
         StyleBox["a",
          FontSlant->"Plain"], " ", "list", " ", "of", " ", "data", " ", "as", 
         StyleBox[" ",
          FontSlant->"Italic"], 
         StyleBox["a",
          FontSlant->"Plain"], " ", "bar", " ", "chart"}]},
       {
        RowBox[{
         StyleBox["PieChart",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         StyleBox["[",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         StyleBox["list",
          FontSlant->"Italic"], 
         StyleBox["]",
          FontFamily->"Courier",
          FontWeight->"Bold"]}], 
        RowBox[{"plot", " ", 
         StyleBox["a",
          FontSlant->"Plain"], " ", "list", " ", "of", " ", "data", " ", "as",
          " ", 
         StyleBox["a",
          FontSlant->"Plain"], " ", "pie", " ", "chart"}]},
       {
        RowBox[{
         RowBox[{
          StyleBox["VectorPlot",
           FontFamily->"Courier",
           FontWeight->"Bold"], 
          StyleBox["[",
           FontFamily->"Courier",
           FontWeight->"Bold"], 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             SubscriptBox["f", "x"], ",", 
             SubscriptBox["f", "y"]}], "}"}], ",", " ", 
           RowBox[{"{", 
            RowBox[{"x", ",", 
             StyleBox["xmin",
              FontSlant->"Italic"], ",", 
             StyleBox["xmax",
              FontSlant->"Italic"]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"y", ",", 
             StyleBox["ymin",
              FontSlant->"Italic"], ",", 
             StyleBox["ymax",
              FontSlant->"Italic"]}], "}"}]}], 
          StyleBox["]",
           FontFamily->"Courier",
           FontWeight->"Bold"]}], 
         StyleBox[" ",
          FontFamily->"Courier",
          FontWeight->"Bold"]}], 
        RowBox[{
        "plot", " ", "the", " ", "vector", " ", "field", " ", "corresponding",
          " ", "to", " ", "the", " ", "vector", " ", "function", " ", 
         RowBox[{"{", 
          RowBox[{
           SubscriptBox["f", "x"], ",", 
           SubscriptBox["f", "y"]}], "}"}]}]},
       {
        RowBox[{
         StyleBox["ListVectorPlot",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         StyleBox["[",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         StyleBox["list",
          FontSlant->"Italic"], 
         StyleBox["]",
          FontFamily->"Courier",
          FontWeight->"Bold"]}], 
        RowBox[{
        "plot", " ", "the", " ", "vector", " ", "field", " ", "corresponding",
          " ", "to", " ", "the", " ", 
         RowBox[{"two", "\[Hyphen]", "dimensional"}], " ", "array", " ", "of",
          " ", "vectors", " ", "in", "  ", 
         StyleBox["list",
          FontSlant->"Italic"]}]},
       {
        RowBox[{
         RowBox[{
          StyleBox["SphericalPlot3D",
           FontFamily->"Courier",
           FontWeight->"Bold"], 
          StyleBox["[",
           FontFamily->"Courier",
           FontWeight->"Bold"], 
          RowBox[{"r", ",", 
           RowBox[{"{", 
            RowBox[{"\[Theta]", ",", 
             StyleBox[
              RowBox[{
               StyleBox["\[Theta]",
                FontSlant->"Plain"], 
               StyleBox["min",
                FontSlant->"Italic"]}]], ",", 
             StyleBox[
              RowBox[{"\[Theta]", 
               StyleBox["max",
                FontSlant->"Italic"]}]]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"\[Phi]", ",", 
             StyleBox[
              RowBox[{"\[Phi]", 
               StyleBox["min",
                FontSlant->"Italic"]}]], ",", 
             StyleBox[
              RowBox[{"\[Phi]", 
               StyleBox["max",
                FontSlant->"Italic"]}]]}], "}"}]}], 
          StyleBox["]",
           FontWeight->"Bold"]}], 
         StyleBox["  ",
          FontWeight->"Bold"]}], 
        RowBox[{"generate", " ", 
         StyleBox["a",
          FontSlant->"Plain"], " ", 
         RowBox[{"three", "\[Hyphen]", "dimensional"}], " ", "spherical", " ",
          "plot", " "}]}
      },
      GridBoxAlignment->{
       "Columns" -> {Right, {Left}}, "ColumnsIndexed" -> {}, 
        "Rows" -> {{Baseline}}, "RowsIndexed" -> {}}],
     GridBoxOptions->{
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, 
       "Rows" -> {False, True, {False}, False}, "RowsIndexed" -> {}}}]], 
   "2ColumnBox"], TraditionalForm]], "Text"],

Cell[TextData[{
 "Some special plotting functions defined in standard ",
 StyleBox["Mathematica", "SO"],
 " packages. "
}], "Caption"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["9.12.5 Dynamic Content", "Subsubtitle",
 CellChangeTimes->{{3.460665834758692*^9, 3.460665840698916*^9}}],

Cell[BoxData[
 FormBox[
  StyleBox[
   FrameBox[
    StyleBox[GridBox[{
       {
        RowBox[{
         StyleBox["Dynamic",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         StyleBox["[",
          FontFamily->"Courier",
          FontWeight->"Bold"], "x", 
         StyleBox["]",
          FontFamily->"Courier",
          FontWeight->"Bold"]}], 
        RowBox[{
         RowBox[{"create", " ", 
          StyleBox["a",
           FontSlant->"Plain"], " ", "variable", " ", "that", " ", "is", " ", 
          "updated", " ", "automatically", " ", "everywhere", " ", "it", " ", 
          "appears"}], ",", " ", 
         RowBox[{"whenever", " ", "it", " ", "is", " ", "changed"}]}]},
       {
        RowBox[{
         StyleBox["Slider",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         StyleBox["[",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         RowBox[{
          StyleBox["Dynamic",
           FontFamily->"Courier",
           FontWeight->"Bold"], 
          StyleBox["[",
           FontFamily->"Courier",
           FontWeight->"Bold"], "x", 
          StyleBox["]",
           FontFamily->"Courier",
           FontWeight->"Bold"]}], 
         StyleBox["]",
          FontFamily->"Courier",
          FontWeight->"Bold"]}], 
        RowBox[{"create", " ", 
         StyleBox["a",
          FontSlant->"Plain"], " ", "slider", " ", "that", " ", "updates", 
         " ", 
         StyleBox["a",
          FontSlant->"Plain"], "  ", "dynamic", " ", "variable"}]},
       {
        RowBox[{
         StyleBox["Manipulate",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         StyleBox["[",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         RowBox[{
          StyleBox["expression",
           FontSlant->"Italic"], ",", " ", 
          StyleBox["parameter",
           FontSlant->"Italic"]}], 
         StyleBox["]",
          FontFamily->"Courier",
          FontWeight->"Bold"]}], 
        RowBox[{"create", " ", 
         StyleBox["a",
          FontSlant->"Plain"], " ", "dynamic", " ", "expression", " ", "in", 
         " ", "which", " ", 
         StyleBox["a",
          FontSlant->"Plain"], " ", "parameter", " ", "can", " ", "be", "  ", 
         "updated", " ", "via", " ", 
         StyleBox["a",
          FontSlant->"Plain"], " ", "slider", " ", "and", " ", "other", " ", 
         "controls"}]},
       {
        RowBox[{
         StyleBox["Animate",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         StyleBox["[",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         RowBox[{
          StyleBox["expression",
           FontSlant->"Italic"], ",", 
          RowBox[{"{", 
           RowBox[{
            StyleBox["parameter",
             FontSlant->"Italic"], ",", 
            StyleBox["min",
             FontSlant->"Italic"], ",", 
            StyleBox["max",
             FontSlant->"Italic"]}], "}"}]}], 
         StyleBox["]",
          FontFamily->"Courier",
          FontWeight->"Bold"]}], 
        RowBox[{
         RowBox[{
          StyleBox["a",
           FontSlant->"Plain"], " ", "type", " ", "of", " ", "dynamic", " ", 
          "expression", " ", "where", " ", "the", " ", "parameter", " ", "is",
           " ", "updated", " ", "automatically"}], ",", " ", 
         RowBox[{
         "looping", " ", "between", " ", "the", " ", "given", " ", "min", " ",
           "and", " ", "max", " ", "values"}]}]},
       {
        RowBox[{
         StyleBox["ListAnimate",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         StyleBox["[",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         StyleBox["list",
          FontSlant->"Italic"], 
         StyleBox["]",
          FontFamily->"Courier",
          FontWeight->"Bold"]}], 
        RowBox[{
         RowBox[{
         "loops", " ", "over", " ", "the", " ", "elements", " ", "of", " ", 
          "the", " ", "list"}], ",", " ", 
         RowBox[{"displaying", " ", "each", " ", "consecutively"}]}]},
       {
        RowBox[{
         StyleBox["DynamicModule",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         StyleBox["[",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         RowBox[{
          RowBox[{"{", 
           StyleBox[
            RowBox[{"local", " ", "vars"}],
            FontSlant->"Italic"], "}"}], ",", " ", 
          StyleBox[
           RowBox[{"dynamic", " ", "content"}],
           FontSlant->"Italic"]}], 
         StyleBox["]",
          FontFamily->"Courier",
          FontWeight->"Bold"]}], 
        RowBox[{
         RowBox[{
         "isolates", " ", "local", " ", "variables", " ", "used", " ", "in", 
          " ", "dynamic", " ", "content", " ", "so", " ", "that", " ", 
          "their", " ", "values", " ", "do", " ", "not", " ", "affect", " ", 
          "the", " ", "Global", " ", "context"}], ";", " ", 
         RowBox[{
         "values", " ", "are", " ", "remembered", " ", "from", " ", "session",
           " ", "to", " ", 
          RowBox[{"session", "."}]}]}]}
      },
      GridBoxAlignment->{
       "Columns" -> {Right, {Left}}, "ColumnsIndexed" -> {}, 
        "Rows" -> {{Baseline}}, "RowsIndexed" -> {}}],
     GridBoxOptions->{
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}}}]], "2ColumnBox"], TraditionalForm]], "Text",
 CellChangeTimes->{{3.460666121008046*^9, 3.460666420306826*^9}, {
  3.460666466792143*^9, 3.460666629156789*^9}, {3.460666691177071*^9, 
  3.460666697247676*^9}, {3.46066687738435*^9, 3.460666949766399*^9}, {
  3.460667020437458*^9, 3.4606670335699577`*^9}, {3.460667183437079*^9, 
  3.4606672005432243`*^9}, {3.460668340836565*^9, 3.46066835295232*^9}}],

Cell["An example of the use of a dynamic module:", "Text",
 CellChangeTimes->{{3.4606681590733633`*^9, 3.460668169836338*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DynamicModule", "[", 
  RowBox[{
   RowBox[{"{", "y", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Dynamic", "[", 
      RowBox[{"y", "+", 
       RowBox[{"10", "^", "y"}]}], "]"}], ",", " ", 
     RowBox[{"Slider", "[", 
      RowBox[{"Dynamic", "[", "y", "]"}], "]"}]}], "}"}]}], "]"}]], "Input",
 ShowCellTags->True,
 CellChangeTimes->{{3.460668546864637*^9, 3.46066859192336*^9}, {
  3.46066863279722*^9, 3.460668645469245*^9}, {3.4606686966136227`*^9, 
  3.460668752265482*^9}, {3.4606688640329933`*^9, 3.460668865610676*^9}},
 CellTags->"Cell 9.212"],

Cell[BoxData[
 DynamicModuleBox[{$CellContext`y$$ = 0.}, 
  RowBox[{"{", 
   RowBox[{
    DynamicBox[ToBoxes[$CellContext`y$$ + 10^$CellContext`y$$, StandardForm],
     ImageSizeCache->{18., {0., 10.}}], ",", 
    SliderBox[Dynamic[$CellContext`y$$]]}], "}"}],
  DynamicModuleValues:>{}]], "Output",
 CellChangeTimes->{
  3.460668593589508*^9, {3.4606686400075417`*^9, 3.4606686465229483`*^9}, {
   3.460668708534958*^9, 3.4606687557354517`*^9}, 3.460668867064206*^9},
 CellTags->"9.212"]
}, Open  ]],

Cell["\<\
The value of the variable y is local to the module. Its value is remembered \
from kernel session to kernel session.\
\>", "Text",
 CellChangeTimes->{{3.4606681873863983`*^9, 3.4606682243511*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "y"}]], "Input",
 ShowCellTags->True,
 CellChangeTimes->{3.460667542140279*^9, 3.460668181149159*^9},
 CellTags->"Cell 9.213"],

Cell["Global`y", "Print", "PrintUsage",
 CellChangeTimes->{3.4606681830465927`*^9},
 CellTags->{"9.213", "Info3460639382-8506922"}]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["9.12.6 Symbolic Mathematics", "Subsubtitle",
 CellChangeTimes->{3.46066704959016*^9},
 CellTags->"c:79"],

Cell[CellGroupData[{

Cell["General Definitions", "Section"],

Cell[BoxData[
 FormBox[
  StyleBox[
   FrameBox[
    StyleBox[GridBox[{
       {
        StyleBox[
         RowBox[{
          RowBox[{
           StyleBox["f",
            FontSlant->"Plain"], "[", 
           StyleBox["x_",
            FontSlant->"Plain"], "]"}], " ", "=", " ", 
          RowBox[{
           StyleBox["x",
            FontSlant->"Plain"], "^", "2"}]}],
         FontFamily->"Courier",
         FontWeight->"Bold"], 
        RowBox[{"define", " ", 
         StyleBox["a",
          FontSlant->"Plain"], " ", "function", " ", "f"}]},
       {
        RowBox[{
         StyleBox["?",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         StyleBox["f",
          FontSlant->"Italic"]}], 
        RowBox[{
        "show", " ", "the", " ", "definition", " ", "of", " ", "f"}]},
       {
        RowBox[{
         StyleBox["Clear",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         StyleBox["[",
          FontFamily->"Courier",
          FontWeight->"Bold"], "f", 
         StyleBox["]",
          FontFamily->"Courier",
          FontWeight->"Bold"]}], 
        RowBox[{"clear", " ", "the", " ", "definition", " ", "of", " ", "f"}]},
       {
        RowBox[{
         StyleBox["Remove",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         StyleBox["[",
          FontFamily->"Courier",
          FontWeight->"Bold"], "f", 
         StyleBox["]",
          FontFamily->"Courier",
          FontWeight->"Bold"]}], 
        RowBox[{
         RowBox[{
         "clear", " ", "the", " ", "definition", " ", "of", " ", "f", " ", 
          "and", " ", "remove", " ", "it", " ", "from", " ", "the", " ", 
          "list", " ", "of", " ", "user"}], "-", 
         RowBox[{"defined", " ", "symbols"}]}]}
      },
      GridBoxAlignment->{
       "Columns" -> {Right, {Left}}, "ColumnsIndexed" -> {}, 
        "Rows" -> {{Baseline}}, "RowsIndexed" -> {}}],
     GridBoxOptions->{
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}}}]], "2ColumnBox"], TraditionalForm]], "Text",
 CellChangeTimes->{{3.447782212473652*^9, 3.447782232154028*^9}}],

Cell["Defining a function.", "Caption"],

Cell[BoxData[
 FormBox[
  StyleBox[
   FrameBox[
    StyleBox[GridBox[{
       {
        StyleBox[
         RowBox[{
          RowBox[{
           StyleBox["f",
            FontSlant->"Plain"], "[", 
           StyleBox["x",
            FontSlant->"Plain"], "]"}], ",", " ", 
          RowBox[{
           StyleBox["f",
            FontSlant->"Plain"], "@", 
           StyleBox["x",
            FontSlant->"Plain"]}], ",", " ", 
          RowBox[{
           StyleBox["x",
            FontSlant->"Plain"], "//", 
           StyleBox["f",
            FontSlant->"Plain"]}]}],
         FontFamily->"Courier",
         FontWeight->"Bold"], 
        RowBox[{
        "all", " ", "mean", "  ", "evaluate", " ", "the", " ", "function", 
         " ", "f", " ", "at", " ", "x"}]},
       {
        StyleBox[
         RowBox[{
          RowBox[{
           StyleBox["f",
            FontSlant->"Plain"], "[", 
           RowBox[{
            StyleBox["x",
             FontSlant->"Plain"], ",", 
            StyleBox["y",
             FontSlant->"Plain"]}], "]"}], ",", 
          RowBox[{
           StyleBox["x",
            FontSlant->"Plain"], "~", 
           StyleBox["f",
            FontSlant->"Plain"], "~", 
           StyleBox["y",
            FontSlant->"Plain"]}]}],
         FontFamily->"Courier",
         FontWeight->"Bold"], 
        RowBox[{"evaluate", " ", 
         StyleBox["a",
          FontSlant->"Plain"], " ", "function", " ", "of", " ", "2", " ", 
         "variables", " ", "at", " ", "x", " ", "and", " ", "y"}]}
      },
      GridBoxAlignment->{
       "Columns" -> {Right, {Left}}, "ColumnsIndexed" -> {}, 
        "Rows" -> {{Baseline}}, "RowsIndexed" -> {}}],
     GridBoxOptions->{
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}}}]], "2ColumnBox"], TraditionalForm]], "Text"],

Cell["Different ways to evaluate functions. ", "Caption"],

Cell[BoxData[
 FormBox[
  StyleBox[
   FrameBox[
    StyleBox[GridBox[{
       {
        RowBox[{
         StyleBox["D",
          FontFamily->"Courier",
          FontWeight->"Bold",
          FontSlant->"Plain"], 
         StyleBox["[",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         RowBox[{"f", ",", "x"}], 
         StyleBox["]",
          FontFamily->"Courier",
          FontWeight->"Bold"]}], 
        RowBox[{
         RowBox[{"(", "partial", ")"}], " ", "derivative", " ", "of", " ", 
         "f", " ", "with", " ", "respect", " ", "to", " ", "x"}]},
       {
        RowBox[{
         StyleBox["Integrate",
          FontFamily->"Courier",
          FontWeight->"Bold",
          FontSlant->"Plain"], 
         StyleBox["[",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         RowBox[{"f", ",", "x"}], 
         StyleBox["]",
          FontFamily->"Courier",
          FontWeight->"Bold"]}], 
        RowBox[{
        "indefinite", " ", "integral", " ", "of", " ", "f", " ", "with", " ", 
         "respect", " ", "to", " ", "x"}]},
       {
        RowBox[{
         StyleBox["Integrate",
          FontFamily->"Courier",
          FontWeight->"Bold",
          FontSlant->"Plain"], 
         StyleBox["[",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         RowBox[{"f", ",", 
          RowBox[{"{", 
           RowBox[{"x", ",", "a", ",", "b"}], "}"}]}], 
         StyleBox["]",
          FontFamily->"Courier",
          FontWeight->"Bold"]}], 
        RowBox[{
        "definite", " ", "integral", " ", "of", " ", "f", " ", "with", " ", 
         "respect", " ", "to", " ", "x", " ", "from", " ", "a", " ", "to", 
         " ", "b"}]},
       {
        RowBox[{
         StyleBox["Sum",
          FontFamily->"Courier",
          FontWeight->"Bold",
          FontSlant->"Plain"], 
         StyleBox["[",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         RowBox[{"f", ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", 
            StyleBox["imin",
             FontSlant->"Italic"], ",", 
            StyleBox["imax",
             FontSlant->"Italic"]}], "}"}]}], 
         StyleBox["]",
          FontFamily->"Courier",
          FontWeight->"Bold"]}], 
        RowBox[{"the", " ", "sum", "  ", 
         RowBox[{
          UnderoverscriptBox[
           StyleBox["\[Sum]",
            FontSize->14], 
           RowBox[{"i", "=", 
            StyleBox["imin",
             FontSlant->"Italic"]}], 
           StyleBox["imax",
            FontSlant->"Italic"]], "f"}]}]},
       {
        RowBox[{
         StyleBox["Solve",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         StyleBox["[",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         RowBox[{
          RowBox[{
           StyleBox["lhs",
            FontSlant->"Italic"], 
           StyleBox["\[Equal]",
            FontFamily->"Courier",
            FontWeight->"Bold"], 
           StyleBox["rhs",
            FontSlant->"Italic"]}], ",", "x"}], 
         StyleBox["]",
          FontFamily->"Courier",
          FontWeight->"Bold"]}], 
        RowBox[{
        "solution", " ", "to", " ", "an", " ", "equation", " ", "for", " ", 
         "x"}]},
       {
        RowBox[{
         StyleBox["Series",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         StyleBox["[",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         RowBox[{
          StyleBox["f",
           FontSlant->"Italic"], 
          StyleBox[",",
           FontSlant->"Italic"], 
          RowBox[{"{", 
           RowBox[{"x", ",", 
            SubscriptBox["x", "0"], ",", 
            StyleBox["order",
             FontSlant->"Italic"]}], "}"}]}], 
         StyleBox["]",
          FontFamily->"Courier",
          FontWeight->"Bold"]}], 
        RowBox[{
        "series", " ", "expansion", " ", "of", " ", "f", " ", "about", " ", 
         "the", " ", "point", " ", 
         SubscriptBox["x", "0"]}]},
       {
        RowBox[{
         StyleBox["Normal",
          FontFamily->"Courier",
          FontWeight->"Bold",
          FontSlant->"Plain"], 
         StyleBox["[",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         StyleBox["series",
          FontSlant->"Italic"], 
         StyleBox["]",
          FontFamily->"Courier",
          FontWeight->"Bold"]}], 
        RowBox[{
        "normal", " ", "Mathematica", " ", "expression", " ", "derived", " ", 
         "from", " ", 
         StyleBox["a",
          FontSlant->"Plain"], " ", "series", " ", "expression"}]},
       {
        RowBox[{
         StyleBox["Limit",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         StyleBox["[",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         RowBox[{
          StyleBox["f",
           FontSlant->"Italic"], 
          StyleBox[",",
           FontSlant->"Italic"], 
          RowBox[{
           StyleBox["x",
            FontSlant->"Italic"], "\[RightArrow]", 
           SubscriptBox["x", "0"]}]}], 
         StyleBox["]",
          FontFamily->"Courier",
          FontWeight->"Bold"]}], 
        RowBox[{
        "limit", " ", "of", " ", "f", " ", "as", " ", "x", " ", "approaches", 
         " ", 
         SubscriptBox["x", "0"]}]}
      },
      GridBoxAlignment->{
       "Columns" -> {Right, {Left}}, "ColumnsIndexed" -> {}, 
        "Rows" -> {{Baseline}}, "RowsIndexed" -> {}}],
     GridBoxOptions->{
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}}}]], "2ColumnBox"], TraditionalForm]], "Text"],

Cell["Some symbolic mathematical operations. ", "Caption"]
}, Closed]],

Cell[CellGroupData[{

Cell[" Algebraic Equations", "Section",
 CellTags->"c:80"],

Cell[BoxData[
 FormBox[
  StyleBox[
   FrameBox[
    StyleBox[GridBox[{
       {
        RowBox[{"x", 
         StyleBox["=",
          FontFamily->"Courier",
          FontWeight->"Bold"], "y"}], 
        RowBox[{
        "immediately", " ", "evaluates", " ", "y", " ", "and", " ", "assigns",
          " ", "the", " ", "result", " ", "to", " ", "x"}]},
       {
        RowBox[{"x", 
         StyleBox[":=",
          FontFamily->"Courier",
          FontWeight->"Bold"], "y"}], 
        RowBox[{
        "assigns", " ", "y", " ", "to", " ", "x", " ", "without", " ", 
         "evaluating", " ", "y", " ", "immediately"}]},
       {
        RowBox[{"x", 
         StyleBox["==",
          FontFamily->"Courier",
          FontWeight->"Bold"], "y"}], 
        RowBox[{
        "tests", " ", "whether", " ", "x", " ", "and", " ", "y", " ", "are", 
         " ", "equal"}]}
      },
      GridBoxAlignment->{
       "Columns" -> {Right, {Left}}, "ColumnsIndexed" -> {}, 
        "Rows" -> {{Baseline}}, "RowsIndexed" -> {}}],
     GridBoxOptions->{
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}}}]], "2ColumnBox"], TraditionalForm]], "Text"],

Cell["Three types of equal signs", "Caption"],

Cell[BoxData[
 FormBox[
  StyleBox[
   FrameBox[
    StyleBox[GridBox[{
       {
        RowBox[{"x", 
         StyleBox["==",
          FontFamily->"Courier",
          FontWeight->"Bold"], "y"}], "equal"},
       {
        RowBox[{"x", 
         StyleBox["!=",
          FontFamily->"Courier",
          FontWeight->"Bold"], "y"}], "unequal"},
       {
        RowBox[{"x", 
         StyleBox[">",
          FontFamily->"Courier",
          FontWeight->"Bold"], "y"}], 
        RowBox[{"greater", " ", "than"}]},
       {
        RowBox[{"x", 
         StyleBox[">=",
          FontFamily->"Courier",
          FontWeight->"Bold"], "y"}], 
        RowBox[{
        "greater", " ", "than", " ", "or", " ", "equal", " ", "to"}]},
       {
        RowBox[{"x", 
         StyleBox["<",
          FontFamily->"Courier",
          FontWeight->"Bold"], "y"}], 
        RowBox[{"less", " ", "than"}]},
       {
        RowBox[{"x", 
         StyleBox["<=",
          FontFamily->"Courier",
          FontWeight->"Bold"], "y"}], 
        RowBox[{"less", " ", "than", " ", "or", " ", "equal", " ", "to"}]},
       {
        RowBox[{"x", 
         StyleBox["\[Element]",
          FontFamily->"Courier",
          FontWeight->"Bold"], "y"}], 
        RowBox[{"x", " ", "is", " ", 
         StyleBox["an",
          FontSlant->"Plain"], " ", "element", " ", "of", " ", "the", " ", 
         "set", " ", "y"}]},
       {
        RowBox[{
         StyleBox[
          RowBox[{"statement", " ", "1"}],
          FontSlant->"Italic"], " ", 
         StyleBox["||",
          FontFamily->"Courier",
          FontWeight->"Bold"], " ", 
         StyleBox[
          RowBox[{"statement", " ", "2"}],
          FontSlant->"Italic"]}], 
        RowBox[{"either", " ", 
         StyleBox["statement",
          FontSlant->"Italic"], 
         StyleBox[" ",
          FontSlant->"Italic"], 
         StyleBox["1",
          FontSlant->"Italic"], " ", "or", " ", 
         StyleBox["statement",
          FontSlant->"Italic"], 
         StyleBox[" ",
          FontSlant->"Italic"], 
         StyleBox["2",
          FontSlant->"Italic"], " ", "is", " ", "true"}]},
       {
        RowBox[{
         StyleBox[
          RowBox[{"statement", " ", "1"}],
          FontSlant->"Italic"], " ", 
         StyleBox["&&",
          FontFamily->"Courier",
          FontWeight->"Bold"], " ", 
         StyleBox[
          RowBox[{"statement", " ", "2"}],
          FontSlant->"Italic"]}], 
        RowBox[{"both", " ", 
         StyleBox["statement",
          FontSlant->"Italic"], 
         StyleBox[" ",
          FontSlant->"Italic"], 
         StyleBox["1",
          FontSlant->"Italic"], " ", "and", " ", 
         StyleBox["statement",
          FontSlant->"Italic"], 
         StyleBox[" ",
          FontSlant->"Italic"], 
         StyleBox["2",
          FontSlant->"Italic"], " ", "are", " ", "true"}]}
      },
      GridBoxAlignment->{
       "Columns" -> {Right, {Left}}, "ColumnsIndexed" -> {}, 
        "Rows" -> {{Baseline}}, "RowsIndexed" -> {}}],
     GridBoxOptions->{
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, 
       "Rows" -> {
        False, False, False, False, False, False, False, True, {False}, 
         False}, "RowsIndexed" -> {}}}]], "2ColumnBox"], 
  TraditionalForm]], "Text"],

Cell["Logical statements ", "Caption"],

Cell[BoxData[
 FormBox[
  StyleBox[
   FrameBox[
    StyleBox[GridBox[{
       {
        RowBox[{
         StyleBox["Solve",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         StyleBox["[",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         RowBox[{
          RowBox[{
           StyleBox["lhs",
            FontSlant->"Italic"], 
           StyleBox["\[Equal]",
            FontFamily->"Courier",
            FontWeight->"Bold"], 
           StyleBox["rhs",
            FontSlant->"Italic"]}], ",", "x"}], 
         StyleBox["]",
          FontFamily->"Courier",
          FontWeight->"Bold"]}], 
        RowBox[{
         RowBox[{"solve", " ", "an", " ", "equation"}], ",", " ", 
         RowBox[{"giving", " ", 
          StyleBox["a",
           FontSlant->"Plain"], " ", "list", " ", "of", " ", "replacement", 
          " ", "rules", " ", "for", " ", "x"}]}]},
       {
        RowBox[{
         StyleBox["x",
          FontSlant->"Italic"], 
         StyleBox["/.",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         StyleBox["solution",
          FontSlant->"Italic"]}], 
        RowBox[{
        "use", " ", "the", " ", "list", " ", "of", " ", "rules", " ", "to", 
         " ", "get", " ", "values", " ", "for", " ", "x"}]},
       {
        RowBox[{
         StyleBox["expr",
          FontSlant->"Italic"], 
         StyleBox["/.",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         StyleBox["solution",
          FontSlant->"Italic"]}], 
        RowBox[{
        "use", " ", "the", " ", "list", " ", "of", " ", "rules", " ", "to", 
         " ", "get", " ", "values", " ", "for", " ", "an", " ", "expression"}]}
      },
      GridBoxAlignment->{
       "Columns" -> {Right, {Left}}, "ColumnsIndexed" -> {}, 
        "Rows" -> {{Baseline}}, "RowsIndexed" -> {}}],
     GridBoxOptions->{
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}}}]], "2ColumnBox"], TraditionalForm]], "Text"],

Cell["Finding and using solutions to equations. ", "Caption"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{
       SuperscriptBox["x", "2"], " ", "+", " ", 
       SuperscriptBox["y", "2"]}], " ", "\[Equal]", "2"}], ",", 
     RowBox[{
      RowBox[{"y", "+", "x", "-", "1"}], "\[Equal]", "0"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "y"}], "}"}]}], "]"}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.209"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"x", "\[Rule]", 
      RowBox[{
       FractionBox["1", "2"], " ", 
       RowBox[{"(", 
        RowBox[{"1", "-", 
         SqrtBox["3"]}], ")"}]}]}], ",", 
     RowBox[{"y", "\[Rule]", 
      RowBox[{
       FractionBox["1", "2"], " ", 
       RowBox[{"(", 
        RowBox[{"1", "+", 
         SqrtBox["3"]}], ")"}]}]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"x", "\[Rule]", 
      RowBox[{
       FractionBox["1", "2"], " ", 
       RowBox[{"(", 
        RowBox[{"1", "+", 
         SqrtBox["3"]}], ")"}]}]}], ",", 
     RowBox[{"y", "\[Rule]", 
      RowBox[{
       FractionBox["1", "2"], " ", 
       RowBox[{"(", 
        RowBox[{"1", "-", 
         SqrtBox["3"]}], ")"}]}]}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.446594821768661*^9},
 CellTags->"Cell 9.209"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell[" Differential Equations", "Section",
 CellTags->"c:81"],

Cell[BoxData[
 FormBox[
  StyleBox[
   FrameBox[
    StyleBox[GridBox[{
       {
        RowBox[{
         StyleBox["DSolve",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         StyleBox["[",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         RowBox[{
          StyleBox["eqn",
           FontSlant->"Italic"], ",", " ", 
          RowBox[{"y", "(", "x", ")"}], ",", "x"}], 
         StyleBox["]",
          FontFamily->"Courier",
          FontWeight->"Bold"]}], 
        RowBox[{"solve", " ", 
         StyleBox["a",
          FontSlant->"Plain"], " ", "differential", " ", "equation", " ", 
         "for", " ", 
         RowBox[{"y", "(", "x", ")"}]}]}
      },
      GridBoxAlignment->{
       "Columns" -> {Right, {Left}}, "ColumnsIndexed" -> {}, 
        "Rows" -> {{Baseline}}, "RowsIndexed" -> {}}],
     GridBoxOptions->{
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}}}]], "2ColumnBox"], TraditionalForm]], "Text"],

Cell[BoxData[
 FormBox[
  StyleBox[
   FrameBox[
    StyleBox[GridBox[{
       {
        RowBox[{
         StyleBox["DSolve", "MB"], 
         StyleBox["[", "MB"], 
         RowBox[{
          RowBox[{
           StyleBox["{",
            FontSlant->"Italic"], 
           RowBox[{
            StyleBox[
             SubscriptBox["eqn", "1"],
             FontSlant->"Italic"], 
            StyleBox[",", "TI"], 
            StyleBox[
             SubscriptBox["eqn", "2"], "TI"], 
            StyleBox[",", "TI"], 
            StyleBox["...", "TI"]}], 
           StyleBox["}", "TI"]}], ",", 
          RowBox[{"{", 
           RowBox[{
            SubscriptBox["y", "1"], ",", 
            SubscriptBox["y", "2"], ",", "..."}], "}"}], ",", 
          RowBox[{"x", 
           StyleBox["\"\<\>\"", "\n\"TI\""]}]}], 
         StyleBox["]", "MB"]}], 
        RowBox[{
         RowBox[{"solve", " ", 
          StyleBox["a",
           FontSlant->"Plain"], " ", "list", " ", "of", " ", "differential", 
          " ", "equations", " ", "for", " ", "functions", " ", 
          SubscriptBox["y", "1"]}], ",", " ", 
         SubscriptBox["y", "2"], ",", "..."}]}
      },
      GridBoxAlignment->{
       "Columns" -> {Right, {Left}}, "ColumnsIndexed" -> {}, 
        "Rows" -> {{Baseline}}, "RowsIndexed" -> {}}],
     GridBoxOptions->{
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}}}]], "2ColumnBox"], TraditionalForm]], "Text"],

Cell["Solving ordinary differential equations analytically. ", "Caption"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{" ", 
  RowBox[{"DSolve", "[", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"y", "''"}], "[", "x", "]"}], "+", " ", 
      RowBox[{"3", " ", 
       RowBox[{"y", "[", "x", "]"}]}]}], "\[Equal]", "0"}], ",", 
    RowBox[{"y", "[", "x", "]"}], ",", "x"}], "]"}]}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.210"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"y", "[", "x", "]"}], "\[Rule]", 
    RowBox[{
     RowBox[{
      RowBox[{"C", "[", "1", "]"}], " ", 
      RowBox[{"Cos", "[", 
       RowBox[{
        SqrtBox["3"], " ", "x"}], "]"}]}], "+", 
     RowBox[{
      RowBox[{"C", "[", "2", "]"}], " ", 
      RowBox[{"Sin", "[", 
       RowBox[{
        SqrtBox["3"], " ", "x"}], "]"}]}]}]}], "}"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DSolve", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"y", "''"}], "[", "x", "]"}], "+", " ", 
       RowBox[{"3", " ", 
        RowBox[{"y", "[", "x", "]"}]}]}], "\[Equal]", "0"}], ",", 
     RowBox[{
      RowBox[{"y", "[", "0", "]"}], "\[Equal]", "2"}], ",", 
     RowBox[{
      RowBox[{
       RowBox[{"y", "'"}], "[", "0", "]"}], "==", "0"}]}], "}"}], ",", 
   RowBox[{"y", "[", "x", "]"}], ",", "x"}], "]"}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.211"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"y", "[", "x", "]"}], "\[Rule]", 
    RowBox[{"2", " ", 
     RowBox[{"Cos", "[", 
      RowBox[{
       SqrtBox["3"], " ", "x"}], "]"}]}]}], "}"}], "}"}]], "Output"]
}, Open  ]],

Cell[BoxData[
 FormBox[
  StyleBox[
   FrameBox[
    StyleBox[GridBox[{
       {
        RowBox[{
         StyleBox["NDSolve", "MB"], 
         StyleBox["[", "MB"], 
         RowBox[{
          RowBox[{
           StyleBox["{",
            FontSlant->"Italic"], 
           RowBox[{
            StyleBox[
             SubscriptBox["eqn", "1"],
             FontSlant->"Italic"], 
            StyleBox[",", "TI"], 
            StyleBox[
             SubscriptBox["eqn", "2"], "TI"], 
            StyleBox[",", "TI"], 
            StyleBox["...", "TI"]}], 
           StyleBox["}", "TI"]}], ",", "  ", "y", " ", ",", 
          RowBox[{"{", 
           RowBox[{"x", ",", 
            StyleBox["xmin",
             FontSlant->"Italic"], ",", 
            StyleBox["xmax",
             FontSlant->"Italic"]}], "}"}]}], 
         StyleBox["]", "MB"]}], 
        RowBox[{"find", " ", 
         StyleBox["a",
          FontSlant->"Plain"], " ", "numerical", " ", "solution", " ", "for", 
         " ", "the", " ", "function", " ", "y", " ", "with", " ", "x", " ", 
         "in", " ", "the", " ", "range", " ", 
         StyleBox["xmin",
          FontSlant->"Italic"], " ", "to", 
         StyleBox[" ",
          FontSlant->"Italic"], 
         StyleBox["xmax",
          FontSlant->"Italic"]}]}
      },
      GridBoxAlignment->{
       "Columns" -> {Right, {Left}}, "ColumnsIndexed" -> {}, 
        "Rows" -> {{Baseline}}, "RowsIndexed" -> {}}],
     GridBoxOptions->{
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}}}]], "2ColumnBox"], TraditionalForm]], "Text",
 CellChangeTimes->{{3.503091383284811*^9, 3.503091384009677*^9}}],

Cell["\<\
Finding numerical solutions to ordinary differential equations. \
\>", "Caption"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NDSolve", "[", " ", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"y", "''"}], "[", "x", "]"}], "+", 
       RowBox[{
        RowBox[{"Re", "[", 
         SuperscriptBox["x", 
          RowBox[{"(", 
           RowBox[{"1", "/", "3"}], ")"}]], "]"}], " ", 
        RowBox[{"y", "[", "x", "]"}]}]}], "\[Equal]", "0"}], ",", 
     RowBox[{
      RowBox[{"y", "[", "0", "]"}], "==", "0"}], ",", 
     RowBox[{
      RowBox[{
       RowBox[{"y", "'"}], "[", "0", "]"}], "\[Equal]", "1"}]}], "}"}], ",", 
   RowBox[{"y", "[", "x", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "20"}], ",", "20"}], "}"}]}], "]"}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.212"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"y", "[", "x", "]"}], "\[Rule]", 
    RowBox[{
     TagBox[
      RowBox[{"InterpolatingFunction", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", "20.`"}], ",", "20.`"}], "}"}], "}"}], 
        ",", "\<\"<>\"\>"}], "]"}],
      False,
      Editable->False], "[", "x", "]"}]}], "}"}], "}"}]], "Output",
 CellTags->"Cell 9.212"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"y", "[", "x", "]"}], "/.", 
  RowBox[{"%", "[", 
   RowBox[{"[", "1", "]"}], "]"}]}]], "Input",
 ShowCellTags->True,
 CellTags->"Cell 9.213"],

Cell[BoxData[
 RowBox[{
  TagBox[
   RowBox[{"InterpolatingFunction", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "20.`"}], ",", "20.`"}], "}"}], "}"}], 
     ",", "\<\"<>\"\>"}], "]"}],
   False,
   Editable->False], "[", "x", "]"}]], "Output",
 CellTags->"Cell 9.213"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{"%", ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "20"}], ",", "20"}], "}"}]}], "]"}]], "Input",
 ShowCellTags->True,
 CellChangeTimes->{3.446594791531988*^9},
 CellTags->"Cell 9.214"],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {Hue[0.67, 0.6, 0.6], LineBox[CompressedData["
1:eJwUV3c81d8bt0f2Xhn3yp6XkqLOpxSJpIVKmSkjiUhIkZCkzKwiNKySUPni
HBRCklH23tzrLmT/7u+v5/W8nvPsc87r/cY53zh9hYWJiamJnYnp//Lu9Anq
9rY+8ox7Zmv/iwKngsWX+jf0UUjNzdc6XyjQSnB45fOqPhLakvwplk2BCvt8
Nm/Q9FGLcTpF/joF1sUkcI1M6SPv04uaZzbIUEP+Ik/VuD56bb3j2cQgGSZ9
UuRPHdFHTGyE5KQaMrwyUCZi3aePzM1bzW3vkiGX9l859FMf+bIO39AbXYQ3
67Jwmc36yEPB2SMnZRH22VzbFdiojz5IxrBdP74IC++tqunW6iOd1q6r+GIS
tPotsye7TB+5CL34HOFAhEm3HC3uZ+gjlb3jzxVC5uAml5qVfao+cuvJdrSS
moNuLyjWhsn6KPunjAaufBbubQi3Icfpo+IDYovNMzOwT+K1k2O4PmL/PcHd
iE1Dhf9mb2Pu+sjJOPf52S/jsJDZL49prz66pahQFTTyFxqeKeBI09dHzs96
JSu//YENeaPXCLr6iC0kVST1bTccMbPWclbTR90X0z383TuheJxWRb2MPgrc
CNXH4E8YLj3TGMmkjyp8bmb1JVVAO/1L87zNemi7eTBsb98PMBWRdOJ1gx6q
CIx6R1BqBX5/Wj4cqNdDNSbJ+4O820Dcnf23vKv0UP/Vn6rld3+Deiix+eu9
HiLIzXcGb3YDbcsO/sREPcTsI+vn9XUIVL3gvqnxTA/l5u7En/gxDMwXsc76
WD2U5bO4neM5AlwTPjynP9RDEYnHRLIDRkF6T6yCTaAe8vFvN267Nw7Yr5jp
SV3SQ1tuQbwn7aZBx2WC7fx5PbRcX+td9H0avLSTCam20UOpV2borYQZYGC5
+N3JWg+9sKk1OcQxC9z0n58vMNFD+pH5BQ5Zc0BPKyw0BNNDpnQ7/4Ms82BL
2TPX6oAeipI+O1XuMg+eSwMi1UAP/eLzGrmAXwBNzNP3jdT10HwH4fHyEyJI
Wm9/zaeih1qecJ0XmSQCx6XK5mFFPbRHjC6fu58EVmfiRCNk9ZCDDZvFjlES
UG83eNcqqIeuxT48d4iPDJZ/KPx8yceol/Ad56RHBnX1O6g+O/RQYsiTvQU2
ZHDx85CRGJseomTC1ZJMMoh9Gfnr0goBpXEq+DvKUYBdqg9dh05Agw/ofWnG
FLAr4YIUC4WAHou811w8TwHVD7Vd3swRkEZX6PfpeAqIuScZHThNQLsznplE
F1GAzR2W4uMTBLSQliEDGiiA5PVnmTRIQFX4wp9zyxRQ6YZkavsIyO1RAjbI
RwWRjgVY4l8Ckrt9AowqUoH82dCYvb8JyGnmbbrUCSpYOHHtA3cbAf0crKZZ
OFLBF7PTXf3NBHTz+rvfj32pwNpIWe7+NwLyNz+WpZtEBTv3CJqcriUg8Utm
5MRcKpjRXru6q4aA/hNoimYupYIy1YnY5UpGvEzLr4GQCsLwbR+bPjPOJysO
/2uhAqudX/6klxHQ9IqHa9hfKpAWz1n3+khASpYiSGiMCqYEYhXAewI6/3XM
P3+eCkq5A44KFRJQu0Kg+DE6FYSyOnqMvyWgjwZWgLhOBcc3zZ+W5xEQf0ZN
eioLDYiv6JdFvSIgCSe2EXMuGhgjy/aef0lAY0LGnUx8NPB+jnNLI4OAVPqu
H60WpIGgCQp+6zkBXf77VPSeCA2YDvWbtScR0DmVcA1TMRoQ6fnulRPP6H96
R7iwOA0gjVfREXEExHpr3nuaYfe6F5Ln9piA1AXnrreI0oBUpy06Fk1AFpvH
M2qEaaBBWX9A/SEBOZhqy9cK0IBfEP8/3nACGpWP1erkoQGFtlmRxVAC2nGE
wLHEQQM/cd91fgcT0MDEf3RlZkZ9/tkWnwIJiDki1dp9jQpUfgRfTfYnoDKv
tZAqKhV07bR9cNuXgKboHTMKc4x5++hlnb9BQC+rmvifj1CB9je+/4y8CMiR
qO0v/4cK+iVm/8i6E1DEnY3iymYqiPb8Rt2+QkDZF+tt3GuoYEw4WP2bAwE9
0z/1jpWx36duNqZv7AnoytLcd3IiFRhXEpyjzxOQjpLgAfoDKkhxmkmzPENA
nlV2WYecqMCkvL5c25rhb3L7whMrKiBzZf0WPEFA49Ib/LT9jH2VnOPuNv1/
vNh7gkJUsMJKUPpsQkDvalivNK9RQJ4t76E0jIAKZNNTcsYpYGurLvDSfgJi
Uf6dX1pKAaUndGcmtQiIe5b9nr8pBTi84mFrUicgmfRVt6NqFMC7NCVfoEJA
rs4S5gd5KMAt84WtN46AwtdrpT+2koH0/I7GZVECemuwyNF0lAwaD06N9QgR
kIvcrhhePBncSqjdquQnoLaD2HP+9UXQti/Q4B4XAfUmS/884boIwqMnX3Nu
6CK9rX696F0koDOAamf/6aLiJ7d/DbcTwYBO5mDLki6qVg4+XB9MBAZ/T4s9
W9RF5WmlJQd/LoA5JRQhOa6L8CtdSeEO8+B0fbqLWrMuwpQVqyyOzoBdXRND
jQ26KDSY1SmhcxosT2hfcKvXRcwuKl4hjtMgjaPeOrdKF30o2/I9FzAFRszn
D8h+0EVOkv/d7EuYANfbjSSFknTRjW7KYafkERA9OND675IuUrfyYLvS+Qtc
ICkfe35BF1m+ExpPTfkJNLd96vfY6qLC1/cfytu1gF8K7JW+1roo0EGt9e2f
BiDuqvV24bAueqHu1eQf8x/InbsbNqKii07JT73enHsFgxcPeD0b10GjbvGn
rx/pgplOe2ewQR3Uf91fXdqiG1Z16rpS/ugglH/Losr6D9z6rGh/ulkHFVXf
elJs1wPD73Nbin7UQSdTNuPGzw/AGKFujdRQHfT2rYiUB88YLHzQ9vZYoA6i
Uhc3wh6MwdalRsXVmzroXNwIuXRtDPL3VcpcuKKDNp4+ljKfGocJOdk8Oy11
UGyPfO67j5MwXd9rPktKB2l3RB70FZ2F/72+ctVaRAc9O3TwRmTwLByQcBhn
4tNB/qabEpdHZ6Hcxql+JyZGPR01t47kz8Gcb3tbFKe10cP+Ok93tQVYb0Aw
6xrRRo/wH7dEIxfgxDv1+og+bXRybJ3FYXQBKj+R/W/ypzbaXFZQqk4kwvxz
rIVvy7TRf8/FNLWmSbC5cUPZ7r024pG6pWFruAjn9i3ncL3TRrOHn7JuRy1C
TbnZdPcMbSSeWl1oL0SGJVNtMRrh2kjtxCmTyhwy/G3XxDEQrI24/C46iH4n
Q2pzbXisvzZC/66HZU2R4e4PZUHEa9rIossz97AKBX65ne7x4aQ2+njIcE/i
SwrEu9583XNMG2VRH9gmVVHgE+tjI8yHtdGJklRyUi8FOqstnzu7Wxultv53
Lk6QClvFfj67q6WN3BL2akeoU6EBS17LG2VtdEM8PMXPhAp5+k8dWpXURvqc
IV37fKkwoFE1BC+sjW5rb2nzR1PhyKftCgsebXTaklfxbyYVHs/+Q7nFpo1m
UmXSEkuosCy2WPPlpha6k02KPlxPhXJ3Iq42LmuhrV2vVse6qPDRlYs55EUt
lDxdynxrkgovH+SWNBnTQj6Hdt1zZaXBJvWR0179WujI/XHvOkEa1JP4/CS5
Swu9Qq1zfLI0mMka11TzUwtlOhFtTFVpkJPsyjrToIUeHJtQ9tSjQd8Bo4NC
SAsp804OBhvR4ECT8J39X7WQpMJ//IEmNGhaPvvJpVQLBW+1XnQ4ToMlrxAp
tlAL3U2Wu02wpkHpuOdqFXlayE7KBk86S4MPg7xdh19ooS91UDvZjgbJbkez
uJ5rISf543eVL9LghTM7+wjPtNCvwrCtV/Y0+A3QRC8+0kJdXrGlnJdoUFuz
+WREuBYyeaSUb8uwp0q+iikO1kLR46nMCRdokJU98PufW1qo/13NXIUtDXpT
rJiYvLXQtgI9p+EMDfYMKhmpXdVC2WTxwForGjzcvOF/2lELfTsb3vj2GA0W
VXSWBJ/XQscLWbfuHKJB8dyC+bzTWui+Udtzw300GPY0TLnNQgu93fJWmNCh
wYVgO6eVIwz7NaR3V4kGba7pZCoc1EIdOkOBbNI0iM5y/DXfq4UoHFJFQXw0
qH5oUMhPVwupBM4kjWxTYZJWmWWmmhZSPzu8Yy+FCrelHkd9x2uh/zJe0kNH
qdCDw7mOJKOF/OLrzL62U2EX1XBTQkwLOQb94pquocJ3LVO+HpxaiK/5hy4u
lQqFv1QXJzJpofzY9DmdB1R4Ny9ppmpVE108Tv9scJ0KT989fFlgQRP93H2q
k3CQCqvcpdIMJzVR3XXnGVUlKlS2IXc6DWmi621zL2V5qHBd+6V5Wbsm2pNH
l+bookA3Gf+IwR+aaL2lSXKzggLbOS0hR70mSn4WofovlQLzRlZ3ny/XRIJv
D0UyX2DwnYRzCltpmoj97RGv5HYyDNITMDdL1ERUyS9mcUVk+Kaj6eazWE00
jiZ35UaR4ZawcT3+niZSazOSVjMiw+JEvJuZK6N+dqe5ep1FyJu8WPhMWxOx
Nhb/kjy7AA335Hf1qmiiXn+RA28o89C123kTj9NEN4/O+H1+Mg+rxP5YlYto
oogUVs7g2jnomVJF6f2ngSYl6ZcUJWdh8/NHexXrNdCp5wNDElGTcHmviaNX
lQZ6vTxSkiQwCfE9G9Hl5RpIvqLBiZ4yAYMkffrM3mkgI9Jhy4CccaiWZnPX
64kGyrbNyzUuHoXR6Yr15bYaaLaP9jpEpx+avai2OragjjzbOa62NNZD8pOB
DbYpdUQrb9r9o6IWpoeuF9QOqyOylAWJbA7hgsM+TqNOdVQ/MrA/dasCJuDL
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
2Gz8P4kFf20=
     "]]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  AxesOrigin->{0, 0},
  PlotRange->{{-20, 20}, {-1.4150411673879086`, 1.309669653991559}},
  PlotRangeClipping->True,
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02]}]], "Output",
 CellTags->"Cell 9.214"]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["9.12.7 WolframAlpha", "Subsubtitle",
 CellChangeTimes->{
  3.46066704959016*^9, {3.503090383005705*^9, 3.5030903899553223`*^9}},
 CellTags->"c:79"],

Cell[BoxData[
 FormBox[
  StyleBox[
   FrameBox[
    StyleBox[GridBox[{
       {
        RowBox[{
         RowBox[{
          StyleBox["WolframAlpha",
           FontFamily->"Courier",
           FontWeight->"Bold"], 
          StyleBox["[",
           FontFamily->"Courier",
           FontWeight->"Bold"], "\"\<query\>\"", 
          StyleBox["]",
           FontFamily->"Courier",
           FontWeight->"Bold"]}], 
         StyleBox[" ",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         StyleBox["\[IndentingNewLine]",
          FontFamily->"Courier",
          FontWeight->"Bold"], 
         StyleBox["             ",
          FontFamily->"Courier",
          FontWeight->"Bold"], "or", " ", "\[IndentingNewLine]", "          ", 
         RowBox[{
          StyleBox["=",
           FontFamily->"Courier",
           FontWeight->"Bold"], 
          StyleBox[" ",
           FontFamily->"Courier",
           FontWeight->"Bold"], "query"}]}], 
        RowBox[{"\[IndentingNewLine]", 
         RowBox[{
         "sends", "  ", "query", " ", "to", " ", "WolframAlpha", " ", "and", 
          " ", "imports", " ", "the", " ", "result"}]}]}
      },
      GridBoxAlignment->{
       "Columns" -> {Right, {Left}}, "ColumnsIndexed" -> {}, 
        "Rows" -> {{Baseline}}, "RowsIndexed" -> {}}],
     GridBoxOptions->{
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}}}]], "2ColumnBox"], TraditionalForm]], "Text",
 CellChangeTimes->{{3.460666121008046*^9, 3.460666420306826*^9}, {
  3.460666466792143*^9, 3.460666629156789*^9}, {3.460666691177071*^9, 
  3.460666697247676*^9}, {3.46066687738435*^9, 3.460666949766399*^9}, {
  3.460667020437458*^9, 3.4606670335699577`*^9}, {3.460667183437079*^9, 
  3.4606672005432243`*^9}, {3.460668340836565*^9, 3.46066835295232*^9}, {
  3.503090445245709*^9, 3.503090570910981*^9}, {3.503090964681486*^9, 
  3.503091000406129*^9}, {3.5030914300340853`*^9, 3.503091558858136*^9}, {
  3.503091650608699*^9, 3.5030916792349157`*^9}}],

Cell["Accessing the WolframAlpha computational knowledge engine", "Caption",
 CellChangeTimes->{{3.503091684801469*^9, 3.503091710237034*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"WolframAlpha", "[", "\"\<find the roots of x^3 +3x + 4\>\"", "]"}],
   " "}]], "Input",
 ShowCellTags->True,
 CellChangeTimes->{{3.50309064437122*^9, 3.5030906811081047`*^9}, 
   3.5030908560491133`*^9},
 CellTags->"Cell 9.215"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "find the roots of x^3 +3x + 4", 
   Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, $CellContext`pod1$$ = XMLElement[
   "pod", {"title" -> "Input interpretation", "scanner" -> "Identity", "id" -> 
     "Input", "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
    
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TagBox[
              GridBox[{{
                 StyleBox[
                  TagBox[
                   GridBox[{{
                    StyleBox[
                    "\"solve\"", {
                    LineIndent -> 0, LineSpacing -> {0.9, 0, 1.5}}], 
                    RowBox[{
                    TagBox[
                    RowBox[{
                    SuperscriptBox["x", "3"], "+", 
                    RowBox[{"3", " ", "x"}], "+", "4"}], HoldForm], 
                    "\[LongEqual]", "0"}]}}, GridBoxBackground -> {"Columns" -> {
                    GrayLevel[0.949], None}, "Rows" -> {{None}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxDividers -> {"Columns" -> {
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84]}, "Rows" -> {{
                    GrayLevel[0.84]}}, 
                    "RowsIndexed" -> {
                    1 -> GrayLevel[0.84], -1 -> GrayLevel[0.84]}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 2, 2}, "Rows" -> {{1}}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AllowScriptLevelChange -> False], 
                   $CellContext`TagBoxWrapper["Separator" -> " "]], 
                  LineSpacing -> {1, 0, 1.5}, LineIndent -> 0]}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               ColumnsEqual -> False, RowsEqual -> False, 
               GridBoxSpacings -> {"Columns" -> {{
                    AbsoluteThickness[-1]}}, "Rows" -> {{0}}}, 
               AllowScriptLevelChange -> False], 
              $CellContext`TagBoxWrapper["Separator" -> " "]], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output"]}], 
       XMLElement["dataformats", {}, {}]}]}], $CellContext`pod2$$ = 
   XMLElement[
   "pod", {"title" -> "Results", "scanner" -> "Solve", "id" -> "Result", 
     "position" -> "200", "error" -> "false", "numsubpods" -> "3", "primary" -> 
     "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "{Reduce[4 + 3 x + x^3 == 0, x], N[Reduce[4 + 3 x + x^3 == 0, x]]}"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{"x", "\" = \"", 
              RowBox[{"-", "1"}]}, "Row", 
             DisplayFunction -> (
              RowBox[{#, "\[InvisibleSpace]", #2, 
                "\[InvisibleSpace]", #3}]& ), 
             InterpretationFunction -> (RowBox[{
                StyleBox[
                "Row", FontFamily -> "Bitstream Vera Sans", 
                 FontSize -> -1 + Inherited], "[", 
                RowBox[{"{", 
                  RowBox[{#, ",", #2, ",", #3}], "}"}], "]"}]& )], 
            TraditionalForm]], "Output"]}], 
       XMLElement["dataformats", {}, {"computabledata,formatteddata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "{Reduce[4 + 3 x + x^3 == 0, x], N[Reduce[4 + 3 x + x^3 == 0, x]]}"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{"x", "\" = \"", 
              RowBox[{
                FractionBox["1", "2"], " ", 
                RowBox[{"(", 
                  RowBox[{"1", "-", 
                    RowBox[{"\[ImaginaryI]", " ", 
                    SqrtBox["15"]}]}], ")"}]}], "\" \[TildeTilde] \"", 
              RowBox[{
                RowBox[{"0.5`", "\[InvisibleSpace]"}], "-", 
                RowBox[{"1.9364916731037085`", " ", "\[ImaginaryI]"}]}]}, 
             "Row", DisplayFunction -> (
              RowBox[{#, "\[InvisibleSpace]", #2, "\[InvisibleSpace]", #3, 
                "\[InvisibleSpace]", #4, "\[InvisibleSpace]", #5}]& ), 
             InterpretationFunction -> (RowBox[{
                StyleBox[
                "Row", FontFamily -> "Bitstream Vera Sans", 
                 FontSize -> -1 + Inherited], "[", 
                RowBox[{"{", 
                  RowBox[{#, ",", #2, ",", #3, ",", #4, ",", #5}], "}"}], 
                "]"}]& )], TraditionalForm]], "Output"]}], 
       XMLElement["dataformats", {}, {"computabledata,formatteddata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "{Reduce[4 + 3 x + x^3 == 0, x], N[Reduce[4 + 3 x + x^3 == 0, x]]}"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{"x", "\" = \"", 
              RowBox[{
                FractionBox["1", "2"], " ", 
                RowBox[{"(", 
                  RowBox[{"1", "+", 
                    RowBox[{"\[ImaginaryI]", " ", 
                    SqrtBox["15"]}]}], ")"}]}], "\" \[TildeTilde] \"", 
              RowBox[{
                RowBox[{"0.5`", "\[InvisibleSpace]"}], "+", 
                RowBox[{"1.9364916731037085`", " ", "\[ImaginaryI]"}]}]}, 
             "Row", DisplayFunction -> (
              RowBox[{#, "\[InvisibleSpace]", #2, "\[InvisibleSpace]", #3, 
                "\[InvisibleSpace]", #4, "\[InvisibleSpace]", #5}]& ), 
             InterpretationFunction -> (RowBox[{
                StyleBox[
                "Row", FontFamily -> "Bitstream Vera Sans", 
                 FontSize -> -1 + Inherited], "[", 
                RowBox[{"{", 
                  RowBox[{#, ",", #2, ",", #3, ",", #4, ",", #5}], "}"}], 
                "]"}]& )], TraditionalForm]], "Output"]}], 
       XMLElement["dataformats", {}, {"computabledata,formatteddata"}]}], 
     XMLElement["states", {"count" -> "2"}, {
       XMLElement[
       "state", {
        "name" -> "Show steps", "input" -> "Results_Show steps"}, {}], 
       XMLElement[
       "state", {
        "name" -> "More digits", "input" -> 
         "Results_More digits"}, {}]}]}], $CellContext`pod3$$ = XMLElement[
   "pod", {"title" -> "Root plot", "scanner" -> "Solve", "id" -> "RootPlot", 
     "position" -> "300", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Plot[{4 + 3 x + x^3, 0}, {x, -2., 0.}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            GraphicsBox[{{{}, {}, {
                Hue[0.67, 0.6, 0.6], 
                Directive[
                 RGBColor[0.24720000000000014`, 0.24, 0.6], 
                 AbsoluteThickness[1]], 
                LineBox[CompressedData["
1:eJwB4QQe+yFib1JlAgAAAE0AAAACAAAAlx8L9f///79B23Tr//8jwLj8EcR8
/f+/hkdiO0r7I8DY2RiT+fr/v7K3wyKV9iPAGpQmMfP1/79cD7O3LO0jwJwI
Qm3m6/+/Bo32+GLaI8Cg8XjlzNf/vwVLqM7rtCPAqsPm1Zmv/78sG3Nzbmoj
wLxnwrYzX/+/OViICDXXIsBq6gX14LD+v5MUel3unyHAD+A3ihsO/r/4/PBi
7IYgwNs14oKHbv2/r/6KHI34HsAxxhj4bMH8v0teP7JwyRzAfck9xN8f/L8s
b6dAcdEawFIH7wzMcPu/3tA1vDTCGMBPpRi56cT6v2mrxddQzxbAQrYwvJQk
+r+6FvQ7SA4VwL8B1Tu5dvm/4/MCWr04E8AywGcSa9T4vy/hFShOkhHAzN5y
TE41+L/CLIQ5twIQwPA3CgOriPe/vsFIPAfCDMAKBJAQlef2v3ceAWGA0wnA
rgqimvg49r+yzvm7qcQGwHlxLIiNjfW/abqAq1DiA8A6S6XMr+30vwMToa7e
SwHAhV+qjUtA9L8Q6By/ETL9v8bmnaV0nvO/pSyuncha+L+RqB06F+/yvwHb
84f8UPO/g8oVMutC8r9WAKKKFyXtv2tf/IBMovG/sNIW5J6k5L/dLm9MJ/Tw
v9Qi56/Llde/RXHQbo9R8L9wzrlAQuS+v6knVOlRZO+/gOU2MRbqvD/b4R/u
dwruvzSAxbPozdY/+oHIoLjH7L8ynryMM2HiPyyXiUzsaeu/8DecpsWj6T+s
bDu/ghLqv45r4VjaPPA/GSjK3zPS6L9p6RdSM03zP5lYcfnXdue/prBvYOV+
9j8Gb/XAljLmv2D+2UPtXPk/wUVqT7j05L+yXkQPkRL8P5CR99bMm+O/YmW9
ft7n/j9Lw2EM/Fniv0HUw/Q8ugBAGWrkOh794L+Wu0VjtQ8CQKjthy62bt+/
SpxAIN1DA0C8hyh19e/cv0goGHW1aARA9gv6rRo72r+LnwQ51ZwFQAlchUJ1
tNe/zFM/W0O0BkBDlkHJtffUvzqpymEX2wdAGlHf3btH0r9CFA9MYPUIQJSv
bZzui8+/5tHSjRr3CUBBkX5hMRzKv0jvSqtUCQtAoAoD3t4Ixb+uFpZ7PwUM
QDqFSnYXD8C/q9uIPSD5DEBAqOflN1K1v7ju+t4b/w1A4OpCnCx+pr/60+B0
6fEOQGlPTO8zJKa/6DofKiP2DkDys1VCO8qlvwDl9M5c+g5ABH1o6EkWpb9G
uXDozwIPQCgPjjRnrqO/T2D1YbUTD0BwM9nMod6gv3iZiql9NQ9A//fe+i1+
lr85QaRdBXkPQBDB8aA8ypW/zX77hj19D0AiigRHSxaVv0e0P6h1gQ9ARhwq
k2iuk7+GvZnT5YkPQI5AdSuj3pC/UEff1MWaD0A8Ehe4MH6GvzQpCLyEvA9A
YKQ8BE4Whb/sSnCDvMAPQIQ2YlBrroO/5j7wRvTED0DMWq3opd6Av0BUQsNj
zQ9AtkaHMjZ+dr+mMnqYQt4PQP5q0spwrnO/ouTrR3riD0BGjx1jq95wvxDW
ivWx5g9Aqq9nJ0F+Zr/fLVtMIe8PQDr4/Ve23mC/iu8R9ljzD0CSgSgRV35W
vz+nAJ+Q9w9AYyWq5IJ+Rr+mAmpHyPsPQEpl6NHA6WW+Y6+Q7///D0DpWZC8

                 "]]}, {}}}, {
             AspectRatio -> NCache[GoldenRatio^(-1), 0.6180339887498948], 
              Axes -> True, AxesOrigin -> {0, 0}, 
              BaseStyle -> {CellBaseline -> Baseline}, Epilog -> {
                AbsolutePointSize[5], 
                Hue[0], {
                 TagBox[
                  TooltipBox[
                   PointBox[{-1, 0}], 
                   TemplateBox[{"\"(\"", 
                    RowBox[{"-", "1"}], "\",\"", "0", "\")\""}, "Row", 
                    DisplayFunction -> (
                    RowBox[{#, "\[InvisibleSpace]", #2, 
                    "\[InvisibleSpace]", #3, "\[InvisibleSpace]", #4, 
                    "\[InvisibleSpace]", #5}]& ), 
                    InterpretationFunction -> (RowBox[{
                    StyleBox[
                    "Row", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited], "[", 
                    RowBox[{"{", 
                    RowBox[{#, ",", #2, ",", #3, ",", #4, ",", #5}], "}"}], 
                    "]"}]& )]], Annotation[#, 
                   Row[{"(", -1, ",", 0, ")"}], "Tooltip"]& ]}}, 
              FrameTicksStyle -> 
              Directive[FontFamily -> "Times", FontSize -> 10], ImageSize -> 
              300., LabelStyle -> {FontFamily -> "Verdana", FontSize -> 10}, 
              PlotRange -> {{-2., 0.}, {-9.999999387755112, 
               3.9999998775510206`}}, PlotRangeClipping -> True, 
              PlotRangePadding -> {
                Scaled[0.02], 
                Scaled[0.02]}, TicksStyle -> 
              Directive[FontFamily -> "Times", FontSize -> 10]}], 
            TraditionalForm]], "Output"]}], 
       XMLElement["dataformats", {}, {}]}]}], $CellContext`pod4$$ = 
   XMLElement[
   "pod", {"title" -> "Roots in the complex plane", "scanner" -> "Solve", 
     "id" -> "RootsInTheComplexPlane", "position" -> "400", "error" -> 
     "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            GraphicsBox[
             
             GraphicsComplexBox[{{0., 0.}, {-1., 0.}, {-1., 0.}, {-1., 0.}, {
              0., 0.}, {0.5, -1.9364916731037085`}, {
              0.5, -1.9364916731037085`}, {0.5, -1.9364916731037085`}, {0., 
              0.}, {0.5, 1.9364916731037085`}, {0.5, 1.9364916731037085`}, {
              0.5, 1.9364916731037085`}}, {{{}, {}, {
                 Hue[0.67, 0.6, 0.6], 
                 Thickness[0.01], 
                 GrayLevel[0.5], 
                 LineBox[{1, 2}]}, {
                 Hue[0.9060679774997897, 0.6, 0.6], 
                 Thickness[0.01], 
                 GrayLevel[0.5], 
                 LineBox[{3, 4}]}, {
                 Hue[0.1421359549995791, 0.6, 0.6], 
                 Thickness[0.01], 
                 GrayLevel[0.5], 
                 LineBox[{5, 6}]}, {
                 Hue[0.37820393249936934`, 0.6, 0.6], 
                 Thickness[0.01], 
                 GrayLevel[0.5], 
                 LineBox[{7, 8}]}, {
                 Hue[0.6142719099991583, 0.6, 0.6], 
                 Thickness[0.01], 
                 GrayLevel[0.5], 
                 LineBox[{9, 10}]}, {
                 Hue[0.8503398874989481, 0.6, 0.6], 
                 Thickness[0.01], 
                 GrayLevel[0.5], 
                 LineBox[{11, 12}]}}, {{
                 Hue[0.67, 0.6, 0.6], 
                 Thickness[0.01], 
                 GrayLevel[0.5], 
                 TagBox[
                  InsetBox["", 1], "InsetString"], 
                 TagBox[
                  InsetBox["", 2], "InsetString"]}, {
                 Hue[0.9060679774997897, 0.6, 0.6], 
                 Thickness[0.01], 
                 GrayLevel[0.5], 
                 InsetBox[
                  GraphicsBox[{
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Thickness[0.01], 
                    GrayLevel[0.5], 
                    RGBColor[1, 0, 0], 
                    DiskBox[{0, 0}]}], 3, Automatic, 
                  Scaled[{0.06, 0.06}]], 
                 InsetBox[
                  GraphicsBox[{
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Thickness[0.01], 
                    GrayLevel[0.5], 
                    RGBColor[1, 0, 0], 
                    DiskBox[{0, 0}]}], 4, Automatic, 
                  Scaled[{0.06, 0.06}]]}, {
                 Hue[0.1421359549995791, 0.6, 0.6], 
                 Thickness[0.01], 
                 GrayLevel[0.5], 
                 TagBox[
                  InsetBox["", 5], "InsetString"], 
                 TagBox[
                  InsetBox["", 6], "InsetString"]}, {
                 Hue[0.37820393249936934`, 0.6, 0.6], 
                 Thickness[0.01], 
                 GrayLevel[0.5], 
                 InsetBox[
                  GraphicsBox[{
                    Hue[0.37820393249936934`, 0.6, 0.6], 
                    Thickness[0.01], 
                    GrayLevel[0.5], 
                    RGBColor[1, 0, 0], 
                    DiskBox[{0, 0}]}], 7, Automatic, 
                  Scaled[{0.06, 0.06}]], 
                 InsetBox[
                  GraphicsBox[{
                    Hue[0.37820393249936934`, 0.6, 0.6], 
                    Thickness[0.01], 
                    GrayLevel[0.5], 
                    RGBColor[1, 0, 0], 
                    DiskBox[{0, 0}]}], 8, Automatic, 
                  Scaled[{0.06, 0.06}]]}, {
                 Hue[0.6142719099991583, 0.6, 0.6], 
                 Thickness[0.01], 
                 GrayLevel[0.5], 
                 TagBox[
                  InsetBox["", 9], "InsetString"], 
                 TagBox[
                  InsetBox["", 10], "InsetString"]}, {
                 Hue[0.8503398874989481, 0.6, 0.6], 
                 Thickness[0.01], 
                 GrayLevel[0.5], 
                 InsetBox[
                  GraphicsBox[{
                    Hue[0.8503398874989481, 0.6, 0.6], 
                    Thickness[0.01], 
                    GrayLevel[0.5], 
                    RGBColor[1, 0, 0], 
                    DiskBox[{0, 0}]}], 11, Automatic, 
                  Scaled[{0.06, 0.06}]], 
                 InsetBox[
                  GraphicsBox[{
                    Hue[0.8503398874989481, 0.6, 0.6], 
                    Thickness[0.01], 
                    GrayLevel[0.5], 
                    RGBColor[1, 0, 0], 
                    DiskBox[{0, 0}]}], 12, Automatic, 
                  Scaled[{0.06, 0.06}]]}, {}}}], {
             AspectRatio -> 1, Axes -> True, AxesLabel -> {
                FormBox[
                 StyleBox[
                 "\"Re\"", LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                  LineIndent -> 0, FontFamily -> "Verdana", FontSize -> 10, 
                  GrayLevel[0.5], StripOnInput -> False], TraditionalForm], 
                FormBox[
                 StyleBox[
                 "\"Im\"", LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                  LineIndent -> 0, FontFamily -> "Verdana", FontSize -> 10, 
                  GrayLevel[0.5], StripOnInput -> False], TraditionalForm]}, 
              AxesOrigin -> {0, 0}, AxesStyle -> GrayLevel[0.6], 
              BaseStyle -> {CellBaseline -> Baseline}, Frame -> True, 
              FrameTicks -> None, FrameTicksStyle -> 
              Directive[FontFamily -> "Times", FontSize -> 10], ImageSize -> 
              120, LabelStyle -> {FontFamily -> "Verdana", FontSize -> 10}, 
              PlotRange -> {{-1., 0.5}, {-1.9364916731037085`, 
               1.9364916731037085`}}, PlotRangeClipping -> True, 
              PlotRangePadding -> Scaled[0.15], TicksStyle -> 
              Directive[FontFamily -> "Times", FontSize -> 10]}], 
            TraditionalForm]], "Output"]}], 
       XMLElement["dataformats", {}, {}]}]}], $CellContext`aux1$$ = {
   True, False, {False}}, $CellContext`aux2$$ = {
   True, False, {False, False, False}}, $CellContext`aux3$$ = {
   True, False, {False}}, $CellContext`aux4$$ = {True, False, {False}}, 
   Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {}, Typeset`initdone$$ = 
   True, Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> "false", "numpods" -> "4", "datatypes" -> 
    "Solve", "timedout" -> "", "timing" -> "0.837", "parsetiming" -> "0.561", 
    "parsetimedout" -> "false", "recalculate" -> "", "version" -> "1.1"}, 
   Typeset`sessioninfo$$ = {
   "TimeZone" -> -8., 
    "Date" -> {2011, 1, 3, 16, 52, 33.453723`8.277019436743759}, "Line" -> 
    166, "SessionID" -> 22957538211603299932}, Typeset`showpods$$ = {1, 2, 3, 
   4}, Typeset`failedpods$$ = {}, Typeset`chosen$$ = {}, Typeset`open$$ = 
   False, Typeset`newq$$ = "find the roots of x^3 +3x + 4"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {$CellContext`pod1$$, $CellContext`pod2$$, $CellContext`pod3$$, \
$CellContext`pod4$$}, {$CellContext`aux1$$, $CellContext`aux2$$, \
$CellContext`aux3$$, $CellContext`aux4$$}, Typeset`chosen$$, Typeset`open$$, 
        Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
        Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
        Typeset`failedpods$$, Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{716., {380., 386.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{$CellContext`pod1$$, $CellContext`pod2$$, $CellContext`pod3$$, \
$CellContext`pod4$$}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Output",
 CellChangeTimes->{3.503090937126462*^9, 3.503091153504326*^9},
 CellTags->"Cell 9.215"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "How many goats are in France?", 
   Typeset`opts$$ = {
   AppearanceElements -> {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
    Asynchronous -> All, 
    Method -> {
     "ExtrusionChosen" -> {"Result", "Result", 1, 1, "Content"}, 
      "Formats" -> {"cell", "minput", "moutput", "msound", "dataformats"}}}, 
   Typeset`elements$$ = {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
   Global`pod1$$ = XMLElement[
   "pod", {"title" -> "Input interpretation", "scanner" -> "Identity", "id" -> 
     "Input", "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
    
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              TagBox[
               FormBox[
                FormBox[
                 TagBox[
                  GridBox[{{
                    StyleBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    TagBox[
                    ButtonBox[
                    "\"France\"", Appearance -> None, 
                    BaseStyle -> {
                    Global`ButtonBoxOptionsButtonFunction :> (FrontEndExecute[{
                    NotebookLocate[#2]}]& )}, 
                    ButtonData -> {
                    "/input/?i=France&lk=1&a=ClashPrefs_*Country.France-", 
                    None}, ButtonNote -> 
                    "/input/?i=France&lk=1&a=ClashPrefs_*Country.France-", 
                    ImageMargins -> 0, FrameMargins -> 0, ButtonMargins -> 0],
                     Annotation[#, 
                    "/input/?i=France&lk=1&a=ClashPrefs_*Country.France-", 
                    "Hyperlink"]& ], {
                    LineIndent -> 0, LineSpacing -> {0.9, 0, 1.5}}], 
                    "\"livestock population\"", "\"goats\""}}, 
                    GridBoxBackground -> {"Columns" -> {
                    GrayLevel[0.949], None, None}, "Rows" -> {{None}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxDividers -> {"Columns" -> {
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84]}, "Rows" -> {{
                    GrayLevel[0.84]}}, 
                    "RowsIndexed" -> {
                    1 -> GrayLevel[0.84], -1 -> GrayLevel[0.84]}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 2, 2, 2}, "Rows" -> {{1}}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AllowScriptLevelChange -> False], 
                    Global`TagBoxWrapper["Separator" -> " | "]], 
                    LineSpacing -> {1, 0, 1.5}, LineIndent -> 0]}}, 
                   GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                   ColumnsEqual -> False, RowsEqual -> False, 
                   GridBoxSpacings -> {"Columns" -> {{
                    AbsoluteThickness[-1]}}, "Rows" -> {{0}}}, 
                   AllowScriptLevelChange -> False], 
                  Global`TagBoxWrapper["Separator" -> " | "]], 
                 TraditionalForm], TraditionalForm], 
               Format[#, TraditionalForm]& ], TraditionalForm], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output"]}], 
       XMLElement["dataformats", {}, {}]}]}], Global`pod2$$ = XMLElement[
   "pod", {"title" -> "Result", "scanner" -> "Data", "id" -> "Result", 
     "position" -> "200", "error" -> "false", "numsubpods" -> "1", "primary" -> 
     "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{
              StyleBox[
               RowBox[{
                 RowBox[{
                   TagBox["1.27", 
                    Global`TagBoxWrapper["StringBoxes" -> "1.27"]], " ", 
                   TagBox[
                    StyleBox[
                    "\"million\"", ShowStringCharacters -> False, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, FontFamily -> "Helvetica", FontSize -> Smaller, 
                    StripOnInput -> False], 1000000& , AutoDelete -> True]}], 
                 "\[InvisibleSpace]", " ", 
                 StyleBox[
                 "\"\"", LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                  LineIndent -> 0, FontFamily -> "Helvetica", FontSize -> 
                  Smaller, StripOnInput -> False]}], 
               LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 0, 
               ZeroWidthTimes -> False], "\" \"", 
              StyleBox[
               RowBox[{"\"(\"", "\[NoBreak]", 
                 TemplateBox[{
                   FormBox[
                    TagBox["\"2009\"", Identity], TraditionalForm], 
                   "\" estimate\""}, "Row", 
                  DisplayFunction -> (RowBox[{#, "\[InvisibleSpace]", #2}]& ),
                   InterpretationFunction -> (RowBox[{
                    StyleBox[
                    "Row", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited], "[", 
                    RowBox[{"{", 
                    RowBox[{#, ",", #2}], "}"}], "]"}]& )], "\[NoBreak]", 
                 "\")\""}], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
               LineIndent -> 0, 
               GrayLevel[0.6], FontFamily -> "Verdana", FontSize -> 10, 
               StripOnInput -> False]}, "Row", 
             DisplayFunction -> (
              RowBox[{#, "\[InvisibleSpace]", #2, 
                "\[InvisibleSpace]", #3}]& ), 
             InterpretationFunction -> (RowBox[{
                StyleBox[
                "Row", FontFamily -> "Bitstream Vera Sans", 
                 FontSize -> -1 + Inherited], "[", 
                RowBox[{"{", 
                  RowBox[{#, ",", #2, ",", #3}], "}"}], "]"}]& )], 
            TraditionalForm]], "Output"]}], 
       XMLElement[
       "dataformats", {}, {
        "computabledata,formatteddata,numberdata,quantitydata"}]}]}], 
   Global`pod3$$ = XMLElement[
   "pod", {"title" -> "Goats livestock population history", "scanner" -> 
     "Data", "id" -> "History:LivestockPopulation:CountryData", "position" -> 
     "300", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{
              GraphicsBox[{
                GraphicsComplexBox[CompressedData["
1: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

                 "], {{{}, {
                    EdgeForm[], 
                    Directive[
                    Opacity[0.05], 
                    Hue[0.67, 0.6, 0.6]], 
                    GraphicsGroupBox[{
                    PolygonBox[CompressedData["
1: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
BJtp3E80AWuHjYi9wbeh7dQYL4nXxv8F3X8/Pw==
                    
                    "]]}]}, {}, {}}, {{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    LineBox[CompressedData["
1:eJwl2GXYVVUXheFXulQ6VQSlBaUxCRWVkO4U6VQUi+4upW3FIgw6pJHu7g7p
xgS/e17fj8Gc4xnrrH3effZaa1/katGlZud7EhISpiZJSIhaPXFCQslECQn1
mcX8a1SceuGv44Pwc/xo2oLNxvZgT1JOcyTB8mEt9a/otQk11FKaDlgD4wqr
6bFfZZfUHbJbeAt+Gj+an8VnohIYlFDTP6XxhtgS/nUqSb3xlvhg/Dw/hrZi
c7C92FPkcgm1sDJYR6YRVkTNgI1Ul8ov63fKb8ta8tP5MfxsPjOVwpJSbfxJ
vDG2jG9FpakP3gofgl/gx9I2bC62D3uakmF1sKewJvzjrp2RH6Uul13R75J1
5/+Q11BLYa1lM9Sxsjl4FiqD9Y0MG8pf5D+k7dg8bD/2DCXH6mJPY035J8yZ
iV+BX1V34z2wP2U11dJYG9lM9UPZXDxr/L5Yv8iwYfwl/iPagc3HDmDPUgqs
HvYM1owvas7M/Er8mroH74n9JaullsHayn5UP5LNw7PF74b1jwwbzl/mx9FO
bAF2EHuOUmL1sWex5nwxc2bhV+HX1b14L+xvWW31Sayd7Cd1nGw+nj1+H2xA
ZNgI/go/nnZhC7FDWFlKhTXAnsNe44ubMyu/Gr+h7sN7Y//I6qhPYVPU9vKf
9ePlC2Q54vfBBmLtsZH8VX4C7cYWYYexcpQaa4iVxVrEmjBfNv43/Ka6H++D
/Surqz6Nfax2kP+inyBfKHsgfiNsENYBG8Vf4ydSGmqEl8Nfx9fwt/gD/B2+
nvme4T9RO8pm6SfKFskejN8CG4x1xEbz1/lJdC81xsvHnoCv5W/zB/m7fH3z
Pct3wmerk/Bu2GJZeTUv9pA+fawJWXYqa+yQ+Ix+jOwGP5nuoyZ4BbwVvo7/
gz/E/8d35ufwk/l3zPcrVkHNh+XUZ4h1IMtB5YwdinfWj5Xd5KfQ/ZSW0lF6
amrM88a0NmY934XK0zC8C/4hfov/mDJQM/wFvA2+gX+D5sYzgi3Bnvcd8vMP
6zPGOsEHqA+oFYwdLntD/5H8Nv8JZaTm+It4W3wj/yd/ODZfelOZF8+Efqn8
BfMV4HPFHhtrAx+oPhh7hPp8/E0+M0J9Extn3B/8p5QpzgS8It4O38T/xR/h
76Gu/Px4TvTL5C+ar2CsbTV37KWxNuIcUR+KPUJ9Ie6Jz41Uu2LjjfuT/4wy
Uwv8Jbw9vpn/mz/KJ6K3+AX8p/rl8ormK8Q/EvtkrIk4G9ScsT+oL8Z98plR
6lvYBOP+4j+nLHGu4C/HWYVv4f/hj/GJ6W1+If+ZfoX8JfM9xj8ae6T+Tuz/
6sOxN6gV4z7FWam+jU007m/+C8pKLfFX4kzCt/LdaBH2ObYSyxPXiDMN64ZN
4v/hv6RscfbglfBO+Db+HVqMfYGtwvLGXup73OVzxd6hf0n+pfpynFH6d/Au
/GRjS8dzhv0r+4qyU2u+sjHxkrCdf5d+jTmw1Vi+2D997j8+d+wdMXf8XXEe
qe9ib2BT4syKZwy7I7urnpQlo6/5Pfxi/ZFY97E/Ym2wKvH9+B38e7QE+wr7
Dcsf4+Jwj98bqxRnkv69eObxj+PciucMuyv7Tz0lS05T+b3xDqI/GvtA7I9Y
W6xqfGd+J/8+LcW+xtZgBWJcvCvF745VjnNJ/348+/gncXbF84aNjvsijxeQ
0/IU9A27T7ZEfyzWe+yfWDvs1fje/C7+A1qGTcXWYgVjnHkSYXmwKnE+6T+I
NYB/GmdYPHtYvMjdoz8jS0nfQvvxpfrjsf7pIaw9Vi2+N7+b707LsW+wdVih
GGeexFherGqcT/rusRbwz+IMU3NhY+Ke8InUs/JU9J3xB2TL9CdiL6CcWAes
enxvfg/fg1Zg32Lrscfo1TiXsB7Y53Fuxf7Bj417wCdWf5elpu+NPShbrj8Z
ewA9jHXEasR35ffyPalanEt4T/yLOLfM80i868TfySdRz8nS0A/G5qJO8ppx
Lsn38b1oJfYdtgErTNXjDMJ6YV/Gu4J5HuWT6JPqz+N91XvVBupzsWep03zu
kH4FfirWO+XGOmO14pzi9/O9aRX2PbYRK0I14kzCemNfxbuC+fLwSfXJ9Bfw
fup9akO1bOxd6nSfO6xfiZ829mV6JM4urDb2Ln+A70OrsR+wTdjjVDPOMqxP
rNu4DiU350W+v3q/2kgtF/uYOsP4I/pV+BljX6FH49zD6mDv8Qf5vvQbNg3b
jD1BteJ8w/rGeo3rUApzXuLTUmN9+djv1JnGHtWvxs8aVyn2T+xNrC72Pn+I
70drsOnYFqwo1Y6zDesX6zOuQSnNeZlPR030FeQ/Gncs3rviHsXzF/dOLRx7
ZDxz+qT6/PK8xnbV19N/IDvM96c6ca7h/WNdxnUolc9d4dPTT/Lj8jVxb+JZ
jHumFsHGqVX4XGoyvoAx+Yx/S19f3112hB9Aa7EZ2FasGNWNMw4bEOsyrkmp
zXOVz0A/y0/I18a9iuc17qH6ODZerRrPpZqcL2hMfuPf1jfQ95Ad5QdSvTjf
8IGxLuMalMbnrvEZ6Rf5Sfk6/QVZZdkT/AT11XgO1RR8IXmBOBP1DfU9Zcf4
QbQOm4ltw4pT/TgTsUGxZuN6dK95rvOZaJb8lHy9/qKsiqwoP1GtFs+jmpJ/
TF4wzlF9I30v2XF+MK2P3x/bjpWgBnFGYoOxaXE9us88N/jMNFt+Wr4hfv94
ZuVV1WLYJLV6PJ9qKr6wMYXibNU31veWneCH0AbsJ2wHVpIaYl9jQ7DpcU26
3zw3+Sw0R35GvlF/OfZRWfHYB+N9QJ9aPzSeJ3krtVL83XG2qk2wPsad5IfS
RuxnbCdWihphU+Pz2Iy4LqU1xy0+K82Vn5Vv0l+RVZOV4CerNeNdQU3DD4vn
ypjWauX4++OcVZvGHmncKX4YbcJ+wXbFuwk1xr6Jz2Mz49qUzhy3+Ww0T/67
fLP+auzJspKxj8a7Quy9+uHxvMnbxFrii8RZqzaLvdK40/xwakLfxnj8x7gO
zcfOYVuwa7FvxPtA7K9YUaxtrJN4P4m/L85TfXO8E98/fj81O3ZG9q96XJaE
RvBN6TtsROwBxqanBdh5bCt2na8T7wGxx8a4eJbwdrFu4v0k/q44S/Wv4QOM
PcuPpGb0PT4y1jmegRZiF7Bt2I3YH+K8N0darDhWNM5LfQt9Z3xgPANqDux3
2R31hCwpjeI387P0u40rQ82xH7BRseb5jLQIu4htx27y9eKsN2c6rATWPtZj
4v//X1QxY/8HfpI96A==
                    "]]}}}], {
                 Hue[0.67, 0.6, 0.6], 
                 RGBColor[0.24720000000000014`, 0.24, 0.6], 
                 PointBox[CompressedData["
1:eJwt0m1IU1EYB/AV0otWiIJNi5hNzFGDpcVSEX3SpiLZcjDoyxrhTCrUfEMI
bLpYDLPWpBZs4jTLlkHXHANBc9oL4gddWa6YzrvtbneCq5VWhrPantuFw+XH
ued//udwUy/UVii2sliso5ERfUefwucL0KmvSVDZvudHSN45tAhCDch9drRt
oWcRWox93JHwt6hNPLYLQkkl4jAbTU5rXTDnIuO6zCH8fu/OJdD/1bZu5KBN
lW1LEAmf7j2FVg79XoI3HKK++m4wajkvm4S0jNZbI5fR9jNNJMjKprbnGdAF
zUMkaN5HN0ATxiAJE0/6ywsS0eIgzw0Vpd3K9MkV3D+xyg2hgbdlQg3OC3L6
3OB9ZHjNIb5gH7nLDVjH+hXzh1I8MNrYxY6RYj/CIfXAuiS6As35o/P874/n
1abNeiD9uGXLJxbej6ApzgsnI7d10LmK+YZiL4isq5sfWtDxkyov3Ez6PPNL
glYGxr2QbZlqftmD6znZYS8kx0j38F8w+edPUDBcGH51X4ZmqRspcHZU5z6u
Qdc9IyioGmNPa5rR8ZsrFJwttwxq65l8Ls8HGNeNDpUqfPCRvnT4px73k9f1
+kBOKU4fCTH5E4s+MAus8RSHyaeT/bBtTKhmkXh+crfUD1g3BefFx3R+YP4c
Jv/GjB+uX7y2ps5FywdjaZhTtVdYMtH2dyIaMlP9uqd8dMF6Ow2SHVRCsQxN
lozTcDXAP+AaRotrN2iYv+3Z32RB2+4JA1DUcYXeMKMFow0BcDysy4t1MPm7
iAD4LAOU8QGTn7USgP5O7rxnDvsS5zKWYVYdzlK1oDnKymXoLKqO2adn8u2m
ZfjhdLQ1iNby/wHfeFLV
                  "]]}}, {FrameTicks -> {{{{0.9, 
                    FormBox[
                    TagBox["0.9", 
                    Global`TagBoxWrapper["StringBoxes" -> "0.9"]], 
                    TraditionalForm], {0.00625, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.25]}}, {1., 
                    FormBox[
                    TagBox["1", #& ], TraditionalForm], {0.00625, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.25]}}, {1.1, 
                    FormBox[
                    TagBox["1.1", 
                    Global`TagBoxWrapper["StringBoxes" -> "1.1"]], 
                    TraditionalForm], {0.00625, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.25]}}, {1.2000000000000002`, 
                    FormBox[
                    TagBox["1.2", 
                    Global`TagBoxWrapper["StringBoxes" -> "1.2"]], 
                    TraditionalForm], {0.00625, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.25]}}, {1.3, 
                    FormBox[
                    TagBox["1.3", 
                    Global`TagBoxWrapper["StringBoxes" -> "1.3"]], 
                    TraditionalForm], {0.00625, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.25]}}, {0.88, 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {0.92, 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {0.9400000000000001, 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {0.96, 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {0.98, 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {1.02, 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {1.04, 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {1.06, 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {1.08, 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {1.12, 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {1.1400000000000001`, 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {1.1600000000000001`, 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {1.1800000000000002`, 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {1.2200000000000002`, 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {1.2400000000000002`, 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {1.2600000000000002`, 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {1.2800000000000002`, 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {1.32, 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}}, {{0.8, 
                    FormBox["\"\"", TraditionalForm], {0.00625, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.25]}}, {0.9, 
                    FormBox["\"\"", TraditionalForm], {0.00625, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.25]}}, {1., 
                    FormBox["\"\"", TraditionalForm], {0.00625, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.25]}}, {1.1, 
                    FormBox["\"\"", TraditionalForm], {0.00625, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.25]}}, {1.2000000000000002`, 
                    FormBox["\"\"", TraditionalForm], {0.00625, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.25]}}, {1.3, 
                    FormBox["\"\"", TraditionalForm], {0.00625, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.25]}}, {0.8200000000000001, 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {0.8400000000000001, 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {0.86, 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {0.88, 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {0.92, 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {0.9400000000000001, 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {0.96, 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {0.98, 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {1.02, 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {1.04, 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {1.06, 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {1.08, 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {1.12, 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {1.1400000000000001`, 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {1.1600000000000001`, 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {1.1800000000000002`, 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {1.2200000000000002`, 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {1.2400000000000002`, 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {1.2600000000000002`, 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {1.2800000000000002`, 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {1.32, 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}}}, {{{1893369600, 
                    FormBox["\"1960\"", TraditionalForm]}, {
                    NCache[2208988800, 2.2089888*^9], 
                    FormBox["\"1970\"", TraditionalForm]}, {
                    NCache[2524521600, 2.5245216*^9], 
                    FormBox["\"1980\"", TraditionalForm]}, {
                    NCache[2840140800, 2.8401408*^9], 
                    FormBox["\"1990\"", TraditionalForm]}, {
                    NCache[3155673600, 3.1556736*^9], 
                    FormBox["\"2000\"", TraditionalForm]}, {
                    NCache[3471292800, 3.4712928*^9], 
                    FormBox["\"2010\"", TraditionalForm]}, {1956528000, 
                    FormBox["\"\"", TraditionalForm]}, {2019600000, 
                    FormBox["\"\"", TraditionalForm]}, {2082758400, 
                    FormBox["\"\"", TraditionalForm]}, {2145830400, 
                    FormBox["\"\"", TraditionalForm]}, {
                    NCache[2272060800, 2.2720608*^9], 
                    FormBox["\"\"", TraditionalForm]}, {
                    NCache[2335219200, 2.3352192*^9], 
                    FormBox["\"\"", TraditionalForm]}, {
                    NCache[2398291200, 2.3982912*^9], 
                    FormBox["\"\"", TraditionalForm]}, {
                    NCache[2461449600, 2.4614496*^9], 
                    FormBox["\"\"", TraditionalForm]}, {
                    NCache[2587680000, 2.58768*^9], 
                    FormBox["\"\"", TraditionalForm]}, {
                    NCache[2650752000, 2.650752*^9], 
                    FormBox["\"\"", TraditionalForm]}, {
                    NCache[2713910400, 2.7139104*^9], 
                    FormBox["\"\"", TraditionalForm]}, {
                    NCache[2776982400, 2.7769824*^9], 
                    FormBox["\"\"", TraditionalForm]}, {
                    NCache[2903212800, 2.9032128*^9], 
                    FormBox["\"\"", TraditionalForm]}, {
                    NCache[2966371200, 2.9663712*^9], 
                    FormBox["\"\"", TraditionalForm]}, {
                    NCache[3029443200, 3.0294432*^9], 
                    FormBox["\"\"", TraditionalForm]}, {
                    NCache[3092601600, 3.0926016*^9], 
                    FormBox["\"\"", TraditionalForm]}, {
                    NCache[3218832000, 3.218832*^9], 
                    FormBox["\"\"", TraditionalForm]}, {
                    NCache[3281904000, 3.281904*^9], 
                    FormBox["\"\"", TraditionalForm]}, {
                    NCache[3345062400, 3.3450624*^9], 
                    FormBox["\"\"", TraditionalForm]}, {
                    NCache[3408134400, 3.4081344*^9], 
                    FormBox["\"\"", TraditionalForm]}}, {{1893369600, 
                    FormBox[
                    StyleBox["\"\"", 0, StripOnInput -> False], 
                    TraditionalForm]}, {
                    NCache[2208988800, 2.2089888*^9], 
                    FormBox[
                    StyleBox["\"\"", 0, StripOnInput -> False], 
                    TraditionalForm]}, {
                    NCache[2524521600, 2.5245216*^9], 
                    FormBox[
                    StyleBox["\"\"", 0, StripOnInput -> False], 
                    TraditionalForm]}, {
                    NCache[2840140800, 2.8401408*^9], 
                    FormBox[
                    StyleBox["\"\"", 0, StripOnInput -> False], 
                    TraditionalForm]}, {
                    NCache[3155673600, 3.1556736*^9], 
                    FormBox[
                    StyleBox["\"\"", 0, StripOnInput -> False], 
                    TraditionalForm]}, {
                    NCache[3471292800, 3.4712928*^9], 
                    FormBox[
                    StyleBox["\"\"", 0, StripOnInput -> False], 
                    TraditionalForm]}, {1956528000, 
                    FormBox[
                    StyleBox["\"\"", 0, StripOnInput -> False], 
                    TraditionalForm]}, {2019600000, 
                    FormBox[
                    StyleBox["\"\"", 0, StripOnInput -> False], 
                    TraditionalForm]}, {2082758400, 
                    FormBox[
                    StyleBox["\"\"", 0, StripOnInput -> False], 
                    TraditionalForm]}, {2145830400, 
                    FormBox[
                    StyleBox["\"\"", 0, StripOnInput -> False], 
                    TraditionalForm]}, {
                    NCache[2272060800, 2.2720608*^9], 
                    FormBox[
                    StyleBox["\"\"", 0, StripOnInput -> False], 
                    TraditionalForm]}, {
                    NCache[2335219200, 2.3352192*^9], 
                    FormBox[
                    StyleBox["\"\"", 0, StripOnInput -> False], 
                    TraditionalForm]}, {
                    NCache[2398291200, 2.3982912*^9], 
                    FormBox[
                    StyleBox["\"\"", 0, StripOnInput -> False], 
                    TraditionalForm]}, {
                    NCache[2461449600, 2.4614496*^9], 
                    FormBox[
                    StyleBox["\"\"", 0, StripOnInput -> False], 
                    TraditionalForm]}, {
                    NCache[2587680000, 2.58768*^9], 
                    FormBox[
                    StyleBox["\"\"", 0, StripOnInput -> False], 
                    TraditionalForm]}, {
                    NCache[2650752000, 2.650752*^9], 
                    FormBox[
                    StyleBox["\"\"", 0, StripOnInput -> False], 
                    TraditionalForm]}, {
                    NCache[2713910400, 2.7139104*^9], 
                    FormBox[
                    StyleBox["\"\"", 0, StripOnInput -> False], 
                    TraditionalForm]}, {
                    NCache[2776982400, 2.7769824*^9], 
                    FormBox[
                    StyleBox["\"\"", 0, StripOnInput -> False], 
                    TraditionalForm]}, {
                    NCache[2903212800, 2.9032128*^9], 
                    FormBox[
                    StyleBox["\"\"", 0, StripOnInput -> False], 
                    TraditionalForm]}, {
                    NCache[2966371200, 2.9663712*^9], 
                    FormBox[
                    StyleBox["\"\"", 0, StripOnInput -> False], 
                    TraditionalForm]}, {
                    NCache[3029443200, 3.0294432*^9], 
                    FormBox[
                    StyleBox["\"\"", 0, StripOnInput -> False], 
                    TraditionalForm]}, {
                    NCache[3092601600, 3.0926016*^9], 
                    FormBox[
                    StyleBox["\"\"", 0, StripOnInput -> False], 
                    TraditionalForm]}, {
                    NCache[3218832000, 3.218832*^9], 
                    FormBox[
                    StyleBox["\"\"", 0, StripOnInput -> False], 
                    TraditionalForm]}, {
                    NCache[3281904000, 3.281904*^9], 
                    FormBox[
                    StyleBox["\"\"", 0, StripOnInput -> False], 
                    TraditionalForm]}, {
                    NCache[3345062400, 3.3450624*^9], 
                    FormBox[
                    StyleBox["\"\"", 0, StripOnInput -> False], 
                    TraditionalForm]}, {
                    NCache[3408134400, 3.4081344*^9], 
                    FormBox[
                    StyleBox["\"\"", 0, StripOnInput -> False], 
                    TraditionalForm]}}}}, ImagePadding -> All, GridLines -> 
                NCache[{{
                   1893369600, 2208988800, 2524521600, 2840140800, 3155673600,
                     3471292800}, Automatic}, {{
                   1893369600, 2.2089888*^9, 2.5245216*^9, 2.8401408*^9, 
                    3.1556736*^9, 3.4712928*^9}, Automatic}], 
                PlotRangePadding -> None, AspectRatio -> 
                NCache[GoldenRatio^(-1), 0.6180339887498948], 
                AxesOrigin -> {2.*^9, 0.8}, BaseStyle -> AbsoluteThickness[1],
                 Epilog -> {
                  CapForm[None], {
                   GrayLevel[1], 
                   PolygonBox[{
                    Offset[{-4.6, -4.25}, 
                    Scaled[{0, 0.08}]], 
                    Offset[{-4.6, -0.34999999999999987`}, 
                    Scaled[{0, 0.08}]], 
                    Offset[{4.6, 4.25}, 
                    Scaled[{0, 0.08}]], 
                    Offset[{4.6, 0.34999999999999987`}, 
                    Scaled[{0, 0.08}]]}]}, {
                   AbsoluteThickness[1], 
                   GrayLevel[0], 
                   LineBox[{{
                    Offset[{-4.6, -4.25}, 
                    Scaled[{0, 0.08}]], 
                    Offset[{4.6, 0.34999999999999987`}, 
                    Scaled[{0, 0.08}]]}, {
                    Offset[{-4.6, -0.34999999999999987`}, 
                    Scaled[{0, 0.08}]], 
                    Offset[{4.6, 4.25}, 
                    Scaled[{0, 0.08}]]}}]}}, Frame -> True, FrameTicksStyle -> 
                Directive[FontFamily -> "Times", FontSize -> 10], GridLines -> 
                NCache[{{
                   1893369600, 2208988800, 2524521600, 2840140800, 3155673600,
                     3471292800}, Automatic}, {{
                   1893369600, 2.2089888*^9, 2.5245216*^9, 2.8401408*^9, 
                    3.1556736*^9, 3.4712928*^9}, Automatic}], GridLinesStyle -> 
                GrayLevel[0.9], ImageSize -> 250, 
                LabelStyle -> {FontFamily -> "Verdana", FontSize -> 10}, 
                Method -> {"AxesInFront" -> True}, 
                PlotRange -> {{1.9249920309135673`*^9, 
                 3.4397567690864325`*^9}, {0.7882691990399345, 
                 1.3224611995864302`}}, PlotRangePadding -> None, TicksStyle -> 
                Directive[FontFamily -> "Times", FontSize -> 10]}], 
              TagBox[
               GridBox[{{
                  TagBox[
                   GridBox[{{
                    StyleBox[
                    RowBox[{"\"(\"", "\[NoBreak]", 
                    TemplateBox[{"\"from \"", 
                    FormBox[
                    TagBox[
                    ButtonBox[
                    "\"1961\"", Appearance -> None, 
                    BaseStyle -> {
                    Global`ButtonBoxOptionsButtonFunction :> (FrontEndExecute[{
                    NotebookLocate[#2]}]& )}, ButtonData -> 
                    DynamicDump`hyperlinkData["/input/?i=1961&lk=1"], 
                    ButtonNote -> "/input/?i=1961&lk=1", ImageMargins -> 0, 
                    FrameMargins -> 0, ButtonMargins -> 0], 
                    Annotation[#, "/input/?i=1961&lk=1", "Hyperlink"]& ], 
                    TraditionalForm], "\" to \"", 
                    FormBox[
                    TagBox[
                    ButtonBox[
                    "\"2009\"", Appearance -> None, 
                    BaseStyle -> {
                    Global`ButtonBoxOptionsButtonFunction :> (FrontEndExecute[{
                    NotebookLocate[#2]}]& )}, ButtonData -> 
                    DynamicDump`hyperlinkData["/input/?i=2009&lk=1"], 
                    ButtonNote -> "/input/?i=2009&lk=1", ImageMargins -> 0, 
                    FrameMargins -> 0, ButtonMargins -> 0], 
                    Annotation[#, "/input/?i=2009&lk=1", "Hyperlink"]& ], 
                    TraditionalForm]}, "Row", 
                    DisplayFunction -> (
                    RowBox[{#, "\[InvisibleSpace]", #2, 
                    "\[InvisibleSpace]", #3, "\[InvisibleSpace]", #4}]& ), 
                    InterpretationFunction -> (RowBox[{
                    StyleBox[
                    "Row", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited], "[", 
                    RowBox[{"{", 
                    RowBox[{#, ",", #2, ",", #3, ",", #4}], "}"}], "]"}]& )], 
                    "\[NoBreak]", "\")\""}], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, FontFamily -> "Verdana", 
                    GrayLevel[0.5], FontSize -> 10, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                   "Column"]}, {
                  TagBox[
                   GridBox[{{
                    StyleBox[
                    RowBox[{"\"(\"", "\[NoBreak]", 
                    
                    TemplateBox[{"\"in \"", "\"millions\""}, "Row", 
                    DisplayFunction -> (
                    RowBox[{#, "\[InvisibleSpace]", #2}]& ), 
                    InterpretationFunction -> (RowBox[{
                    StyleBox[
                    "Row", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited], "[", 
                    RowBox[{"{", 
                    RowBox[{#, ",", #2}], "}"}], "]"}]& )], "\[NoBreak]", 
                    "\")\""}], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, FontFamily -> "Verdana", 
                    GrayLevel[0.5], FontSize -> 10, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                   "Column"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
               "Column"]}, "Labeled", DisplayFunction -> (FormBox[
               GridBox[{{
                  TagBox[
                   ItemBox[
                    PaneBox[
                    TagBox[#, "SkipImageSizeLevel"], 
                    Alignment -> {Center, Baseline}, BaselinePosition -> 
                    Baseline], DefaultBaseStyle -> "Labeled"], 
                   "SkipImageSizeLevel"], 
                  ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Center}}, "Rows" -> {{Center}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                BaselinePosition -> {1, 1}], TraditionalForm]& ), 
             InterpretationFunction -> (RowBox[{
                StyleBox[
                "Labeled", FontFamily -> "Bitstream Vera Sans", 
                 FontSize -> -1 + Inherited], "[", 
                RowBox[{#, ",", 
                  RowBox[{"{", #2, "}"}], ",", 
                  RowBox[{"(", "\[NoBreak]", 
                    GridBox[{{
                    StyleBox[
                    "Right", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited], 
                    StyleBox[
                    "Center", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited]}}, RowSpacings -> 1, 
                    ColumnSpacings -> 1, RowAlignments -> Baseline, 
                    ColumnAlignments -> Center], "\[NoBreak]", ")"}]}], 
                "]"}]& )], TraditionalForm]], "Output"]}], 
       XMLElement[
       "dataformats", {}, {
        "computabledata,formatteddata,timeseriesdata"}]}]}], Global`pod4$$ = 
   XMLElement[
   "pod", {"title" -> "Livestock population", "scanner" -> "Data", "id" -> 
     "LivestockPopulationTypes:CountryData", "position" -> "400", "error" -> 
     "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              GridBox[{{
                 TagBox[
                  PaneBox[
                   
                   TemplateBox[{"\"cattle\""}, "Row", 
                    DisplayFunction -> (#& ), 
                    InterpretationFunction -> (RowBox[{
                    StyleBox[
                    "Row", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited], "[", 
                    RowBox[{
                    RowBox[{"{", #, "}"}], ",", "\",\""}], "]"}]& )], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  Global`TagBoxWrapper["Label"]], 
                 TemplateBox[{
                   StyleBox[
                    RowBox[{
                    RowBox[{
                    TagBox["18.6", 
                    Global`TagBoxWrapper["StringBoxes" -> "18.6"]], " ", 
                    TagBox[
                    StyleBox[
                    "\"million\"", ShowStringCharacters -> False, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, FontFamily -> "Helvetica", FontSize -> Smaller, 
                    StripOnInput -> False], 1000000& , AutoDelete -> True]}], 
                    "\[InvisibleSpace]", " ", 
                    StyleBox[
                    "\"\"", LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, FontFamily -> "Helvetica", FontSize -> 
                    Smaller, StripOnInput -> False]}], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False], "\" \"", 
                   StyleBox[
                    RowBox[{"\"(\"", "\[NoBreak]", 
                    
                    TemplateBox[{"2009", "\" estimate\""}, "Row", 
                    DisplayFunction -> (
                    RowBox[{#, "\[InvisibleSpace]", #2}]& ), 
                    InterpretationFunction -> (RowBox[{
                    StyleBox[
                    "Row", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited], "[", 
                    RowBox[{"{", 
                    RowBox[{#, ",", #2}], "}"}], "]"}]& )], "\[NoBreak]", 
                    "\")\""}], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, FontFamily -> "Verdana", 
                    GrayLevel[0.5], FontSize -> 10, StripOnInput -> False]}, 
                  "Row", DisplayFunction -> (
                   RowBox[{#, "\[InvisibleSpace]", #2, 
                    "\[InvisibleSpace]", #3}]& ), 
                  InterpretationFunction -> (RowBox[{
                    StyleBox[
                    "Row", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited], "[", 
                    RowBox[{"{", 
                    RowBox[{#, ",", #2, ",", #3}], "}"}], "]"}]& )]}, {
                 TagBox[
                  PaneBox[
                   
                   TemplateBox[{"\"chickens\""}, "Row", 
                    DisplayFunction -> (#& ), 
                    InterpretationFunction -> (RowBox[{
                    StyleBox[
                    "Row", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited], "[", 
                    RowBox[{
                    RowBox[{"{", #, "}"}], ",", "\",\""}], "]"}]& )], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  Global`TagBoxWrapper["Label"]], 
                 TemplateBox[{
                   StyleBox[
                    RowBox[{
                    RowBox[{
                    TagBox["176", 
                    Global`TagBoxWrapper["StringBoxes" -> "176"]], " ", 
                    TagBox[
                    StyleBox[
                    "\"million\"", ShowStringCharacters -> False, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, FontFamily -> "Helvetica", FontSize -> Smaller, 
                    StripOnInput -> False], 1000000& , AutoDelete -> True]}], 
                    "\[InvisibleSpace]", " ", 
                    StyleBox[
                    "\"\"", LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, FontFamily -> "Helvetica", FontSize -> 
                    Smaller, StripOnInput -> False]}], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False], "\" \"", 
                   StyleBox[
                    RowBox[{"\"(\"", "\[NoBreak]", 
                    
                    TemplateBox[{"2009", "\" estimate\""}, "Row", 
                    DisplayFunction -> (
                    RowBox[{#, "\[InvisibleSpace]", #2}]& ), 
                    InterpretationFunction -> (RowBox[{
                    StyleBox[
                    "Row", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited], "[", 
                    RowBox[{"{", 
                    RowBox[{#, ",", #2}], "}"}], "]"}]& )], "\[NoBreak]", 
                    "\")\""}], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, FontFamily -> "Verdana", 
                    GrayLevel[0.5], FontSize -> 10, StripOnInput -> False]}, 
                  "Row", DisplayFunction -> (
                   RowBox[{#, "\[InvisibleSpace]", #2, 
                    "\[InvisibleSpace]", #3}]& ), 
                  InterpretationFunction -> (RowBox[{
                    StyleBox[
                    "Row", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited], "[", 
                    RowBox[{"{", 
                    RowBox[{#, ",", #2, ",", #3}], "}"}], "]"}]& )]}, {
                 TagBox[
                  PaneBox[
                   
                   TemplateBox[{"\"goats\""}, "Row", DisplayFunction -> (#& ),
                     InterpretationFunction -> (RowBox[{
                    StyleBox[
                    "Row", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited], "[", 
                    RowBox[{
                    RowBox[{"{", #, "}"}], ",", "\",\""}], "]"}]& )], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  Global`TagBoxWrapper["Label"]], 
                 TemplateBox[{
                   StyleBox[
                    RowBox[{
                    RowBox[{
                    TagBox["1.27", 
                    Global`TagBoxWrapper["StringBoxes" -> "1.27"]], " ", 
                    TagBox[
                    StyleBox[
                    "\"million\"", ShowStringCharacters -> False, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, FontFamily -> "Helvetica", FontSize -> Smaller, 
                    StripOnInput -> False], 1000000& , AutoDelete -> True]}], 
                    "\[InvisibleSpace]", " ", 
                    StyleBox[
                    "\"\"", LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, FontFamily -> "Helvetica", FontSize -> 
                    Smaller, StripOnInput -> False]}], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False], "\" \"", 
                   StyleBox[
                    RowBox[{"\"(\"", "\[NoBreak]", 
                    
                    TemplateBox[{"2009", "\" estimate\""}, "Row", 
                    DisplayFunction -> (
                    RowBox[{#, "\[InvisibleSpace]", #2}]& ), 
                    InterpretationFunction -> (RowBox[{
                    StyleBox[
                    "Row", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited], "[", 
                    RowBox[{"{", 
                    RowBox[{#, ",", #2}], "}"}], "]"}]& )], "\[NoBreak]", 
                    "\")\""}], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, FontFamily -> "Verdana", 
                    GrayLevel[0.5], FontSize -> 10, StripOnInput -> False]}, 
                  "Row", DisplayFunction -> (
                   RowBox[{#, "\[InvisibleSpace]", #2, 
                    "\[InvisibleSpace]", #3}]& ), 
                  InterpretationFunction -> (RowBox[{
                    StyleBox[
                    "Row", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited], "[", 
                    RowBox[{"{", 
                    RowBox[{#, ",", #2, ",", #3}], "}"}], "]"}]& )]}, {
                 TagBox[
                  PaneBox[
                   
                   TemplateBox[{"\"pigs\""}, "Row", DisplayFunction -> (#& ), 
                    InterpretationFunction -> (RowBox[{
                    StyleBox[
                    "Row", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited], "[", 
                    RowBox[{
                    RowBox[{"{", #, "}"}], ",", "\",\""}], "]"}]& )], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  Global`TagBoxWrapper["Label"]], 
                 TemplateBox[{
                   StyleBox[
                    RowBox[{
                    RowBox[{
                    TagBox["14.8", 
                    Global`TagBoxWrapper["StringBoxes" -> "14.8"]], " ", 
                    TagBox[
                    StyleBox[
                    "\"million\"", ShowStringCharacters -> False, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, FontFamily -> "Helvetica", FontSize -> Smaller, 
                    StripOnInput -> False], 1000000& , AutoDelete -> True]}], 
                    "\[InvisibleSpace]", " ", 
                    StyleBox[
                    "\"\"", LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, FontFamily -> "Helvetica", FontSize -> 
                    Smaller, StripOnInput -> False]}], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False], "\" \"", 
                   StyleBox[
                    RowBox[{"\"(\"", "\[NoBreak]", 
                    
                    TemplateBox[{"2009", "\" estimate\""}, "Row", 
                    DisplayFunction -> (
                    RowBox[{#, "\[InvisibleSpace]", #2}]& ), 
                    InterpretationFunction -> (RowBox[{
                    StyleBox[
                    "Row", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited], "[", 
                    RowBox[{"{", 
                    RowBox[{#, ",", #2}], "}"}], "]"}]& )], "\[NoBreak]", 
                    "\")\""}], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, FontFamily -> "Verdana", 
                    GrayLevel[0.5], FontSize -> 10, StripOnInput -> False]}, 
                  "Row", DisplayFunction -> (
                   RowBox[{#, "\[InvisibleSpace]", #2, 
                    "\[InvisibleSpace]", #3}]& ), 
                  InterpretationFunction -> (RowBox[{
                    StyleBox[
                    "Row", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited], "[", 
                    RowBox[{"{", 
                    RowBox[{#, ",", #2, ",", #3}], "}"}], "]"}]& )]}, {
                 TagBox[
                  PaneBox[
                   
                   TemplateBox[{"\"sheep\""}, "Row", DisplayFunction -> (#& ),
                     InterpretationFunction -> (RowBox[{
                    StyleBox[
                    "Row", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited], "[", 
                    RowBox[{
                    RowBox[{"{", #, "}"}], ",", "\",\""}], "]"}]& )], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  Global`TagBoxWrapper["Label"]], 
                 TemplateBox[{
                   StyleBox[
                    RowBox[{
                    RowBox[{
                    TagBox["7.72", 
                    Global`TagBoxWrapper["StringBoxes" -> "7.72"]], " ", 
                    TagBox[
                    StyleBox[
                    "\"million\"", ShowStringCharacters -> False, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, FontFamily -> "Helvetica", FontSize -> Smaller, 
                    StripOnInput -> False], 1000000& , AutoDelete -> True]}], 
                    "\[InvisibleSpace]", " ", 
                    StyleBox[
                    "\"\"", LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, FontFamily -> "Helvetica", FontSize -> 
                    Smaller, StripOnInput -> False]}], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False], "\" \"", 
                   StyleBox[
                    RowBox[{"\"(\"", "\[NoBreak]", 
                    
                    TemplateBox[{"2009", "\" estimate\""}, "Row", 
                    DisplayFunction -> (
                    RowBox[{#, "\[InvisibleSpace]", #2}]& ), 
                    InterpretationFunction -> (RowBox[{
                    StyleBox[
                    "Row", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited], "[", 
                    RowBox[{"{", 
                    RowBox[{#, ",", #2}], "}"}], "]"}]& )], "\[NoBreak]", 
                    "\")\""}], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, FontFamily -> "Verdana", 
                    GrayLevel[0.5], FontSize -> 10, StripOnInput -> False]}, 
                  "Row", DisplayFunction -> (
                   RowBox[{#, "\[InvisibleSpace]", #2, 
                    "\[InvisibleSpace]", #3}]& ), 
                  InterpretationFunction -> (RowBox[{
                    StyleBox[
                    "Row", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited], "[", 
                    RowBox[{"{", 
                    RowBox[{#, ",", #2, ",", #3}], "}"}], "]"}]& )]}}, 
               GridBoxAlignment -> {
                "Columns" -> {Left, Left}, "Rows" -> {{Baseline}}}, 
               AutoDelete -> False, 
               GridBoxBackground -> {"Columns" -> {None, None}}, 
               GridBoxFrame -> {"Columns" -> {{True}}, "Rows" -> {{True}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, 
               FrameStyle -> GrayLevel[0.84], BaselinePosition -> Automatic, 
               AllowScriptLevelChange -> False], "Grid"], 
             LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
             False], TraditionalForm]], "Output"]}], 
       XMLElement[
       "dataformats", {}, {
        "computabledata,formatteddata,numberdata,quantitydata"}]}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "More", "input" -> "Livestock population_More"}, {}]}]}], 
   Global`aux1$$ = {True, False, {False}}, Global`aux2$$ = {
   True, False, {False}}, Global`aux3$$ = {True, False, {False}}, 
   Global`aux4$$ = {True, False, {False}}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {
    XMLElement["sources", {"count" -> "1"}, {
      XMLElement[
      "source", {
       "url" -> 
        "http://www.wolframalpha.com/sources/\
CountryDataSourceInformationNotes.html", "text" -> "Country data"}, {}]}]}, 
   Typeset`initdone$$ = True, Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> "false", "numpods" -> "4", "datatypes" -> 
    "Country", "timedout" -> "", "timing" -> "0.769", "parsetiming" -> 
    "0.377", "parsetimedout" -> "false", "recalculate" -> "", "version" -> 
    "1.1"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> -8., 
    "Date" -> {2011, 1, 4, 16, 42, 18.544598`8.020792407610688}, "Line" -> 
    204, "SessionID" -> 22957538211603299932}, Typeset`showpods$$ = {1, 2, 3, 
   4}, Typeset`failedpods$$ = {}, Typeset`chosen$$ = {
   "Result", "Result", 1, 1, "Content"}, Typeset`open$$ = False, 
   Typeset`newq$$ = "How many goats are in France?"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Global`pod1$$, Global`pod2$$, Global`pod3$$, Global`pod4$$}, {
        Global`aux1$$, Global`aux2$$, Global`aux3$$, Global`aux4$$}, 
        Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
        Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{266., {37., 21.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Global`pod1$$, Global`pod2$$, Global`pod3$$, Global`pod4$$}], 
       Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 CellTags->"Cell 9.216"],

Cell[BoxData[
 InterpretationBox[
  FrameBox[
   StyleBox[
    FormBox[
     TemplateBox[{StyleBox[
        RowBox[{
          RowBox[{
            TagBox["1.27", 
             $CellContext`TagBoxWrapper["StringBoxes" -> "1.27"]], " ", 
            TagBox[
             StyleBox[
             "\"million\"", StripOnInput -> False, ShowStringCharacters -> 
              False, LineIndent -> 0, 
              LinebreakAdjustments -> {1, 100, 1, 0, 100}, FontFamily -> 
              "Helvetica", FontSize -> Smaller], 1000000& , AutoDelete -> 
             True]}], "\[InvisibleSpace]", " ", 
          StyleBox[
          "\"\"", StripOnInput -> False, LineIndent -> 0, 
           LinebreakAdjustments -> {1, 100, 1, 0, 100}, FontFamily -> 
           "Helvetica", FontSize -> Smaller]}], ZeroWidthTimes -> False, 
        LineIndent -> 0, LinebreakAdjustments -> {1, 100, 1, 0, 100}],"\" \"",
       StyleBox[
        RowBox[{"\"(\"", "\[NoBreak]", 
          TemplateBox[{
            FormBox[
             TagBox["\"2009\"", Identity], TraditionalForm], "\" estimate\""},
            "Row", DisplayFunction -> (
            RowBox[{#, "\[InvisibleSpace]", #2}]& ), 
           InterpretationFunction -> (RowBox[{
              StyleBox[
              "Row", FontFamily -> "Bitstream Vera Sans", 
               FontSize -> -1 + Inherited], "[", 
              RowBox[{"{", 
                RowBox[{#, ",", #2}], "}"}], "]"}]& )], "\[NoBreak]", 
          "\")\""}], StripOnInput -> False, LineIndent -> 0, 
        LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineColor -> 
        GrayLevel[0.6], FrontFaceColor -> GrayLevel[0.6], BackFaceColor -> 
        GrayLevel[0.6], GraphicsColor -> GrayLevel[0.6], FontFamily -> 
        "Verdana", FontSize -> 10, FontColor -> GrayLevel[0.6]]},
      "Row",
      DisplayFunction->(
       RowBox[{#, "\[InvisibleSpace]", #2, "\[InvisibleSpace]", #3}]& ),
      InterpretationFunction->(RowBox[{
         StyleBox[
         "Row", FontFamily -> "Bitstream Vera Sans", 
          FontSize -> -1 + Inherited], "[", 
         RowBox[{"{", 
           RowBox[{#, ",", #2, ",", #3}], "}"}], "]"}]& )],
     TraditionalForm], "Output",
    ScriptLevel->0,
    FontFamily->"Times",
    FontSize->14,
    Background->None],
   BaseStyle->{Plain},
   FrameMargins->10,
   FrameStyle->GrayLevel[0.85],
   RoundingRadius->5,
   StripOnInput->False],
  WolframAlphaResult[
  "How many goats are in France?", {{"Result", 1}, "Content"}]]], "Output",
 CellChangeTimes->{
  3.503090634481955*^9, 3.503090838185555*^9, 3.503091134624023*^9, 
   3.50317681345476*^9, {3.503176856482229*^9, 3.5031768765195417`*^9}, {
   3.5031769123144503`*^9, 3.503176939578608*^9}},
 CellTags->"Cell 9.216"]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["References", "Subtitle",
 CellTags->"refs"],

Cell[TextData[{
 "Samuel D. Conte and Carl de Boor, ",
 StyleBox["Elementary Numerical Analysis",
  FontSlant->"Italic"],
 ", 3rd ed. (McGraw-Hill, New York, 1980).",
 "\nStephen Wolfram, ",
 StyleBox["The Mathematica Book, ",
  FontSlant->"Italic"],
 "4th ed.  (Cambridge University Press, Cambridge, 1999)."
}], "Text"]
}, Closed]]
}, Open  ]]
},
WindowToolbars->"EditBar",
WindowSize->{1358, 641},
WindowMargins->{{Automatic, 0}, {Automatic, 0}},
WindowFrame->"Normal",
Visible->True,
DockedCells->{},
PrintingCopies->1,
PrintingPageRange->{1, Automatic},
PageHeaders->{{Inherited, Inherited, 
   Cell[
    TextData[{"Chapter 9, Section 9.", 
      CounterBox["Subtitle"]}], "Header"]}, {
   Cell[
    TextData["Dubin"], "Header"], 
   Cell[
    TextData["Numerical and Analytical Methods for Scientists and Engineers"],
     FontWeight -> Bold, FontSlant -> Italic, FontFamily -> Times], 
   Inherited}},
ShowSelection->True,
TaggingRules->{"NextIndexingNumber" -> 140, "IndexEntries" -> {{"i:102", 
     StyleBox["AccuracyGoal", FontWeight -> "Bold"]}, {"i:103", 
     StyleBox["PrecisionGoal", FontWeight -> "Bold"]}, {
    "i:106", "Heaviside step function"}, {"i:11", "Keyboard equivalents"}, {
    "i:111", "Logical statements"}, {"i:112", "Cantilever"}, {
    "i:113", "<<"}, {"i:114", "ExtendGraphics packages"}, {
    "i:115", "( ) (brackets used to determine order in a calulation)"}, {
    "i:116", "Taylor, Brook"}, {"i:117", "radius of convergence"}, {
    "i:118", "Work-kinetic-energy theorem"}, {"i:119", "Lissajous figure"}, {
    "i:12", "Palettes"}, {"i:12", "Special characters"}, {
    "i:120", "Shadowing"}, {"i:121", "* (wildcard)"}, {
    "i:122", "? (determine definition)"}, {"i:123", "Heaviside, Oliver"}, {
    "i:124", "Newton's method"}, {"i:125", "Newtons' method"}, {
    "i:126", "While"}, {"i:127", "splines"}, {"i:128", "Directory"}, {
    "i:129", "SetDirectory"}, {"i:13", {
      StyleBox["Abort", FontWeight -> "Bold"], " ", 
      StyleBox["Evaluation", FontWeight -> "Bold"]}}, {"i:13", 
     StyleBox["Interrupt Evaluation", FontWeight -> "Bold"]}, {
    "i:130", "Get"}, {"i:131", "Import"}, {"i:132", "NonlinearFit"}, {
    "i:133", "arrow"}, {"i:134", "trapezoidal rule"}, {
    "i:135", "Simpson's rule"}, {"i:136", "Bode's rule"}, {
    "i:137", "Gaussian quadrature"}, {"i:138", "Least-squares fit"}, {
    "i:15", 
     StyleBox["Im", FontWeight -> "Bold"]}, {"i:15", 
     StyleBox["Re", FontWeight -> "Bold"]}, {"i:16", "Exact mathematics"}, {
    "i:17", "Approximate mathematics"}, {"i:2", "Magnification"}, {"i:21", 
     StyleBox["Precision", FontWeight -> "Bold"]}, {"i:22", 
     StyleBox["%", FontWeight -> "Bold"]}, {"i:26", "Lists"}, {
    "i:3", "Notebook"}, {"i:34", 
     StyleBox["Inverse", FontWeight -> "Bold"]}, {"i:36", 
     StyleBox["Det", FontWeight -> "Bold"]}, {"i:37", 
     StyleBox["NullSpace", FontWeight -> "Bold"]}, {"i:38", 
     StyleBox["Table", FontWeight -> "Bold"]}, {"i:45", 
     StyleBox["Show", FontWeight -> "Bold"]}, {"i:48", 
     StyleBox["Plot3D", FontWeight -> "Bold"]}, {"i:49", 
     StyleBox["ContourPlot", FontWeight -> "Bold"]}, {
    "i:5", "Machine precision"}, {"i:50", "Parametric Plots"}, {
    "i:52", "Mobius strip"}, {"i:54", 
     StyleBox["RealTime3D", FontWeight -> "Bold"]}, {"i:55", 
     StyleBox["Default3D", FontWeight -> "Bold"]}, {"i:56", "Animations"}, {
    "i:57", "Add-on packages"}, {"i:58", "Fermat's spiral"}, {
    "i:59", "Eccentricity"}, {"i:6", "Arbitrary precision numbers"}, {
    "i:60", "Perihelion"}, {"i:61", "Options for intrinsic functions"}, {
    "i:62", 
     StyleBox["Expand", FontWeight -> "Bold"]}, {"i:63", 
     StyleBox["Factor", FontWeight -> "Bold"]}, {
    "i:64", "Simplifying expressions"}, {"i:64", 
     StyleBox["FullSimplify", FontWeight -> "Bold"]}, {"i:64", 
     StyleBox["Simplify", FontWeight -> "Bold"]}, {
    "i:65", {"Replacing variables (", 
      StyleBox["/.", FontWeight -> "Bold"], ")"}}, {"i:7", 
     StyleBox["InputForm", FontWeight -> "Bold"]}, {"i:70", 
     StyleBox["D", FontWeight -> "Bold"]}, {"i:71", "Power series"}, {
    "i:74", 
     StyleBox["Integrate", FontWeight -> "Bold"]}, {"i:75", 
     StyleBox["NIntegrate", FontWeight -> "Bold"]}, {"i:76", 
     StyleBox["Series", FontWeight -> "Bold"]}, {"i:77", 
     StyleBox["Normal", FontWeight -> "Bold"]}, {
    "i:78", "Logical statements"}, {"i:79", "Logical statements"}, {"i:79", 
     StyleBox["If", FontWeight -> "Bold"]}, {"i:8", "Front End"}, {
    "i:8", "Kernel"}, {"i:80", "Logical statements"}, {"i:81", 
     StyleBox["Solve", FontWeight -> "Bold"]}, {"i:82", 
     StyleBox["NSolve", FontWeight -> "Bold"]}, {"i:84", 
     StyleBox["FindRoot", FontWeight -> "Bold"]}, {
    "i:85", "Underdetermined systems"}, {"i:92", 
     StyleBox["Interpolation", FontWeight -> "Bold"]}, {"i:95", 
     StyleBox["Fit", FontWeight -> "Bold"]}, {"i:96", 
     StyleBox["Random", FontWeight -> "Bold"]}, {"i:97", 
     StyleBox["Random", FontWeight -> "Bold"]}, {
    "i:98", "Vector and Matrix Operations"}, {
    "i:107", "Equilibrium", "of a vertical rod in gravity"}, {
    "i:109", "Equations", "meaning of =, := and =="}, {
    "i:11", "Greek letters", "from keyboard"}, {
    "i:110", "Solution of algebraic equations", {"numerical ", "(", 
      StyleBox["NSolve", FontWeight -> "Bold"], ")"}}, {"i:114", 
     StyleBox["ContourPlot", FontWeight -> "Bold"], 
     "adding labels to contours"}, {
    "i:12", "Greek letters", "from palletes"}, {
    "i:139", "Splines", "cubic"}, {
    "i:15", "Complex arithmetic", {"complex conjugate  (", 
      StyleBox["Conjugate", FontWeight -> "Bold"], ")"}}, {
    "i:15", "Complex arithmetic", {"Imaginary Part ( ", 
      StyleBox["Im", FontWeight -> "Bold"], ")"}}, {
    "i:15", "Complex arithmetic", {"Real Part ( ", 
      StyleBox["Re", FontWeight -> "Bold"], ")"}}, {
    "i:25", "Clearing variables", 
     StyleBox["Clear", FontWeight -> "Bold"]}, {
    "i:27", "Lists", "dimension"}, {
    "i:28", "Lists", {"in vector/matrix notation (", 
      StyleBox["MatrixForm", FontWeight -> "Bold"], ")"}}, {
    "i:29", "Lists", "extracting elements from"}, {
    "i:35", "Vector and Matrix Operations", "eigenvalues and eigenvectors"}, {
    "i:39", "Lists, operations on", 
     StyleBox["Append", FontWeight -> "Bold"]}, {
    "i:40", "Lists, operations on", 
     StyleBox["Join", FontWeight -> "Bold"]}, {"i:41", "Lists, operations on", 
     StyleBox["Flatten", FontWeight -> "Bold"]}, {
    "i:42", "Vector and Matrix Operations", "vector magnitude (length)"}, {
    "i:47", "Data analysis", "plotting"}, {"i:47", "Plotting", {{"data (", 
       StyleBox["see", FontSlant -> Italic], " "}, 
      StyleBox["ListPlot", FontWeight -> "Bold"], ")"}}, {
    "i:48", "Plotting", {{"functions of two variables ( as a surface: ", 
       StyleBox["see", FontSlant -> Italic], " "}, 
      StyleBox["Plot3D", FontWeight -> "Bold"], ")"}}, {
    "i:49", "Plotting", {{
      "functions of two variables ( as a contour plot: ", 
       StyleBox["see", FontSlant -> Italic], " "}, 
      StyleBox["ContourPlot", FontWeight -> "Bold"], ")"}}, {
    "i:50", "Plotting", {"curves in 2D defined by a parameter (", 
      StyleBox["see", FontSlant -> Italic], " Parametric Plots)"}}, {
    "i:72", "Integration", "analytic"}, {
    "i:73", "Integration", "numerical"}, {
    "i:83", "Solution of algebraic equations", {"analytic (", 
      StyleBox["Solve", FontWeight -> "Bold"], ")"}}, {
    "i:84", "Solution of algebraic equations", {"numerical (", 
      StyleBox["FindRoot", FontWeight -> "Bold"], ")"}}, {
    "i:86", "Solution of algebraic equations", "graphical, one variable"}, {
    "i:88", "Equilibrium", "of elastic band in gravity"}, {
    "i:90", "Equilibrium", "of pyramid in gravity"}, {
    "i:92", "Data analysis", "interpolation"}, {"i:93", 
     StyleBox["Interpolation", FontWeight -> "Bold"], "order"}, {
    "i:95", "Data analysis", "fitting"}, {"i:1", "Hyperlinks", "", ""}, {
    "i:10", "Contexts", "", ""}, {"i:100", 
     StyleBox["InterpolatingFunction", FontWeight -> "Bold"], "", ""}, {
    "i:101", "Function(s)", "pure", ""}, {"i:104", {"Unit matrix (", 
      StyleBox["see also", FontSlant -> Italic], 
      " Delta function, Kronecker)"}, "", ""}, {"i:105", {
      StyleBox["Eigenvalues ", FontWeight -> "Bold"], "and ", 
      StyleBox["Eigenvectors", FontWeight -> "Bold"]}, "", ""}, {
    "i:14", "Complex arithmetic", "", ""}, {
    "i:18", "Function(s)", "intrinsic", ""}, {
    "i:19", "Function(s)", "user-defined", ""}, {"i:20", 
     StyleBox["N", FontWeight -> "Bold"], "", ""}, {
    "i:23", "Clearing variables", 
     StyleBox["Remove", FontWeight -> "Bold"], ""}, {
    "i:24", "Clearing variables", "all user-defined variables", ""}, {
    "i:31", {"Dot product (", 
      StyleBox["see also", FontSlant -> Italic], " Inner products)"}, "", 
     ""}, {"i:32", "Matrix multiplication", "", ""}, {"i:33", 
     StyleBox["Transpose", FontWeight -> "Bold"], "", ""}, {
    "i:35", "Eigenvalue problem", "eigenvalues and eigenvectors of a matrix", 
     ""}, {"i:4", "Cell", "", ""}, {
    "i:43", "Plotting", {{"functions of one variable (", 
       StyleBox["see", FontSlant -> Italic], " "}, 
      StyleBox["Plot", FontWeight -> "Bold"], ")"}, ""}, {"i:43", 
     StyleBox["Plot", FontWeight -> "Bold"], "", ""}, {"i:44", 
     StyleBox["Plot", FontWeight -> "Bold"], "options for", ""}, {
    "i:45", "Plotting", {"repeating a previous plot (", 
      StyleBox["Show", FontWeight -> "Bold"], ")"}, ""}, {"i:46", 
     StyleBox["Plot", FontWeight -> "Bold"], "several curves", ""}, {
    "i:51", "Parametric Plots", {"for curves in two dimensions (", 
      StyleBox["ParametricPlot", FontWeight -> "Bold"], ")"}, ""}, {
    "i:52", "Parametric Plots", {"for curves or surfaces in 3 dimensions (", 
      StyleBox["ParametricPlot3D", FontWeight -> "Bold"], ")"}, ""}, {
    "i:52", "Plotting", {{
      "curves or surfaces in 3D defined by parameter(s) (", 
       StyleBox["see", FontSlant -> Italic], " "}, 
      StyleBox["ParametricPlot3D", FontWeight -> "Bold"], ")"}, ""}, {
    "i:53", "Plotting", "changing the viewpoint in 3D plots", ""}, {
    "i:66", "Function(s)", "use of the underscore when defining", ""}, {
    "i:67", "Function(s)", "of several variables", ""}, {
    "i:68", "Function(s)", {"delayed evaluation of (", 
      StyleBox[":=", FontWeight -> "Bold"], ")"}, ""}, {
    "i:69", "Function(s)", {"adding conditions to the definition (", 
      StyleBox["/;", FontWeight -> "Bold"], ")"}, ""}, {
    "i:70", "Derivatives", "", ""}, {
    "i:87", "Solution of algebraic equations", "graphical, two variables", 
     ""}, {"i:89", "Equilibrium", "of horizontal rod in gravity", ""}, {
    "i:99", "Equations", {"algebraic, solution (", 
      StyleBox["see", FontSlant -> Italic], 
      " Solution of algebraic equations)"}, ""}}},
CellLabelAutoDelete->True,
ScriptSizeMultipliers->0.85,
Magnification:>FEPrivate`If[
  FEPrivate`Equal[FEPrivate`$VersionNumber, 6.], 1.25, 1.25 Inherited],
FrontEndVersion->"9.0 for Microsoft Windows (32-bit) (January 25, 2013)",
StyleDefinitions->Notebook[{
   Cell[
    StyleData[StyleDefinitions -> "Core.nb"]], 
   Cell[
    CellGroupData[{
      Cell["Style Definitions", "Subtitle"], 
      Cell[
      "Modify the definitions below to change the default appearance of all \
cells in a given style.  Make modifications to any definition using commands \
in the Format menu.", "Text"], 
      Cell[
       CellGroupData[{
         Cell["Style Environment Names", "Subsection"], 
         Cell[
          StyleData[All, "Working"], 
          CellBracketOptions -> {"Color" -> RGBColor[0, 0.2, 1]}, 
          ScriptMinSize -> 9], 
         Cell[
          StyleData[All, "Printout"], PageWidth -> PaperWidth, 
          PrivateFontOptions -> {"FontType" -> "Outline"}]}, Closed]], 
      Cell[
       CellGroupData[{
         Cell["Notebook Options", "Subsection"], 
         Cell[
         "  The options defined for the style below will be used at the \
Notebook level.  ", "Text"], 
         Cell[
          StyleData["Notebook"], PageHeaders -> {{
             Cell[
              TextData[{
                CounterBox["Page"]}], "PageNumber"], None, 
             Cell[
              TextData[{
                OptionValueBox["FileName"]}], "Header"]}, {
             Cell[
              TextData[{
                OptionValueBox["FileName"]}], "Header"], None, 
             Cell[
              TextData[{
                CounterBox["Page"]}], "PageNumber"]}}, 
          PrintingOptions -> {
           "FacingPages" -> True, "FirstPageHeader" -> False}, 
          CellLabelAutoDelete -> False, CellFrameLabelMargins -> 6, 
          StyleMenuListing -> None]}, Closed]], 
      Cell[
       CellGroupData[{
         Cell["Headings", "Subsection"], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Title"], CellMargins -> {{12, Inherited}, {2, 20}}, 
             CellGroupingRules -> {"TitleGrouping", 0}, PageBreakBelow -> 
             False, InputAutoReplacements -> {"TeX" -> StyleBox[
                 RowBox[{"T", 
                   AdjustmentBox[
                   "E", BoxMargins -> {{-0.075, -0.085}, {0, 0}}, 
                    BoxBaselineShift -> 0.5], "X"}]], "LaTeX" -> StyleBox[
                 RowBox[{"L", 
                   StyleBox[
                    AdjustmentBox[
                    "A", BoxMargins -> {{-0.36, -0.1}, {0, 0}}, 
                    BoxBaselineShift -> -0.2], FontSize -> Smaller], "T", 
                   AdjustmentBox[
                   "E", BoxMargins -> {{-0.075, -0.085}, {0, 0}}, 
                    BoxBaselineShift -> 0.5], "X"}]], "mma" -> "Mathematica", 
               "Mma" -> "Mathematica", "MMA" -> "Mathematica"}, 
             CounterIncrements -> "Title", 
             CounterAssignments -> {{"Section", 0}, {"Equation", 0}, {
               "Figure", 0}, {"Subtitle", 0}, {"Subsubtitle", 0}}, 
             MenuSortingValue -> 1100, MenuCommandKey -> "1", FontFamily -> 
             "Helvetica", FontSize -> 30, FontWeight -> "Bold"], 
            Cell[
             StyleData["Title", "Printout"], 
             CellMargins -> {{2, 10}, {2, 30}}, FontSize -> 24]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Subtitle"], CellMargins -> {{12, Inherited}, {2, 2}}, 
             CellGroupingRules -> {"TitleGrouping", 10}, PageBreakBelow -> 
             False, InputAutoReplacements -> {"TeX" -> StyleBox[
                 RowBox[{"T", 
                   AdjustmentBox[
                   "E", BoxMargins -> {{-0.075, -0.085}, {0, 0}}, 
                    BoxBaselineShift -> 0.5], "X"}]], "LaTeX" -> StyleBox[
                 RowBox[{"L", 
                   StyleBox[
                    AdjustmentBox[
                    "A", BoxMargins -> {{-0.36, -0.1}, {0, 0}}, 
                    BoxBaselineShift -> -0.2], FontSize -> Smaller], "T", 
                   AdjustmentBox[
                   "E", BoxMargins -> {{-0.075, -0.085}, {0, 0}}, 
                    BoxBaselineShift -> 0.5], "X"}]], "mma" -> "Mathematica", 
               "Mma" -> "Mathematica", "MMA" -> "Mathematica"}, 
             CounterIncrements -> "Subtitle", 
             CounterAssignments -> {{"Section", 0}, {"Equation", 0}, {
               "Figure", 0}, {"Subsubtitle", 0}}, MenuSortingValue -> 1150, 
             MenuCommandKey -> "2", FontFamily -> "Helvetica", FontSize -> 24,
              FontColor -> RGBColor[0, 0, 0.6]], 
            Cell[
             StyleData["Subtitle", "Printout"], 
             CellMargins -> {{2, 10}, {2, 4}}, FontSize -> 18, FontColor -> 
             GrayLevel[0]]}, Open]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Subsubtitle"], 
             CellMargins -> {{12, Inherited}, {2, 12}}, 
             CellGroupingRules -> {"TitleGrouping", 20}, PageBreakBelow -> 
             False, InputAutoReplacements -> {"TeX" -> StyleBox[
                 RowBox[{"T", 
                   AdjustmentBox[
                   "E", BoxMargins -> {{-0.075, -0.085}, {0, 0}}, 
                    BoxBaselineShift -> 0.5], "X"}]], "LaTeX" -> StyleBox[
                 RowBox[{"L", 
                   StyleBox[
                    AdjustmentBox[
                    "A", BoxMargins -> {{-0.36, -0.1}, {0, 0}}, 
                    BoxBaselineShift -> -0.2], FontSize -> Smaller], "T", 
                   AdjustmentBox[
                   "E", BoxMargins -> {{-0.075, -0.085}, {0, 0}}, 
                    BoxBaselineShift -> 0.5], "X"}]], "mma" -> "Mathematica", 
               "Mma" -> "Mathematica", "MMA" -> "Mathematica"}, 
             CounterIncrements -> "Subsubtitle", 
             CounterAssignments -> {{"Section", 0}, {"Equation", 0}, {
               "Figure", 0}}, MenuSortingValue -> 1200, MenuCommandKey -> "3",
              FontFamily -> "Helvetica", FontSize -> 14, FontSlant -> 
             "Italic", FontColor -> RGBColor[0, 0, 0.6]], 
            Cell[
             StyleData["Subsubtitle", "Printout"], 
             CellMargins -> {{2, 10}, {2, 8}}, FontSize -> 12, FontColor -> 
             GrayLevel[0]]}, Open]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Section"], CellMargins -> {{10, 4}, {2, 18}}, 
             CellElementSpacings -> {"ClosedGroupTopMargin" -> 12}, 
             CellGroupingRules -> {"SectionGrouping", 30}, PageBreakBelow -> 
             False, InputAutoReplacements -> {"TeX" -> StyleBox[
                 RowBox[{"T", 
                   AdjustmentBox[
                   "E", BoxMargins -> {{-0.075, -0.085}, {0, 0}}, 
                    BoxBaselineShift -> 0.5], "X"}]], "LaTeX" -> StyleBox[
                 RowBox[{"L", 
                   StyleBox[
                    AdjustmentBox[
                    "A", BoxMargins -> {{-0.36, -0.1}, {0, 0}}, 
                    BoxBaselineShift -> -0.2], FontSize -> Smaller], "T", 
                   AdjustmentBox[
                   "E", BoxMargins -> {{-0.075, -0.085}, {0, 0}}, 
                    BoxBaselineShift -> 0.5], "X"}]], "mma" -> "Mathematica", 
               "Mma" -> "Mathematica", "MMA" -> "Mathematica"}, 
             CounterIncrements -> "Section", MenuSortingValue -> 1250, 
             MenuCommandKey -> "4", FontFamily -> "Helvetica", FontWeight -> 
             "Bold"], 
            Cell[
             StyleData["Section", "Printout"], 
             CellMargins -> {{2, 4}, {2, 18}}, FontSize -> 10]}, Open]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Subsection"], CellDingbat -> "\\[FilledSquare]", 
             CellMargins -> {{24, 4}, {2, 18}}, 
             CellElementSpacings -> {"ClosedGroupTopMargin" -> 12}, 
             CellGroupingRules -> {"SectionGrouping", 40}, PageBreakBelow -> 
             False, CellFrameLabelMargins -> 6, 
             InputAutoReplacements -> {"TeX" -> StyleBox[
                 RowBox[{"T", 
                   AdjustmentBox[
                   "E", BoxMargins -> {{-0.075, -0.085}, {0, 0}}, 
                    BoxBaselineShift -> 0.5], "X"}]], "LaTeX" -> StyleBox[
                 RowBox[{"L", 
                   StyleBox[
                    AdjustmentBox[
                    "A", BoxMargins -> {{-0.36, -0.1}, {0, 0}}, 
                    BoxBaselineShift -> -0.2], FontSize -> Smaller], "T", 
                   AdjustmentBox[
                   "E", BoxMargins -> {{-0.075, -0.085}, {0, 0}}, 
                    BoxBaselineShift -> 0.5], "X"}]], "mma" -> "Mathematica", 
               "Mma" -> "Mathematica", "MMA" -> "Mathematica"}, 
             CounterIncrements -> "Subsection", 
             CounterAssignments -> {{"Subsubsection", 0}}, MenuSortingValue -> 
             1300, MenuCommandKey -> "5", FontFamily -> "Helvetica", FontSize -> 
             15, FontWeight -> "Bold"], 
            Cell[
             StyleData["Subsection", "Printout"], 
             CellMargins -> {{2, 4}, {2, 18}}, FontSize -> 12]}, Open]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Subsubsection"], CellMargins -> {{20, 4}, {0, 8}}, 
             CellElementSpacings -> {"ClosedGroupTopMargin" -> 12}, 
             CellGroupingRules -> {"SectionGrouping", 50}, PageBreakBelow -> 
             False, InputAutoReplacements -> {"TeX" -> StyleBox[
                 RowBox[{"T", 
                   AdjustmentBox[
                   "E", BoxMargins -> {{-0.075, -0.085}, {0, 0}}, 
                    BoxBaselineShift -> 0.5], "X"}]], "LaTeX" -> StyleBox[
                 RowBox[{"L", 
                   StyleBox[
                    AdjustmentBox[
                    "A", BoxMargins -> {{-0.36, -0.1}, {0, 0}}, 
                    BoxBaselineShift -> -0.2], FontSize -> Smaller], "T", 
                   AdjustmentBox[
                   "E", BoxMargins -> {{-0.075, -0.085}, {0, 0}}, 
                    BoxBaselineShift -> 0.5], "X"}]], "mma" -> "Mathematica", 
               "Mma" -> "Mathematica", "MMA" -> "Mathematica"}, 
             CounterIncrements -> "Subsubsection", MenuSortingValue -> 1350, 
             MenuCommandKey -> "6", FontWeight -> "Bold"], 
            Cell[
             StyleData["Subsubsection", "Printout"], 
             CellMargins -> {{2, 4}, {2, 18}}, FontSize -> 10], 
            Cell["Text", "Subsection"]}, Open]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Text"], CellMargins -> {{10, 4}, {0, 8}}, 
             InputAutoReplacements -> {"TeX" -> StyleBox[
                 RowBox[{"T", 
                   AdjustmentBox[
                   "E", BoxMargins -> {{-0.075, -0.085}, {0, 0}}, 
                    BoxBaselineShift -> 0.5], "X"}]], "LaTeX" -> StyleBox[
                 RowBox[{"L", 
                   StyleBox[
                    AdjustmentBox[
                    "A", BoxMargins -> {{-0.36, -0.1}, {0, 0}}, 
                    BoxBaselineShift -> -0.2], FontSize -> Smaller], "T", 
                   AdjustmentBox[
                   "E", BoxMargins -> {{-0.075, -0.085}, {0, 0}}, 
                    BoxBaselineShift -> 0.5], "X"}]], "mma" -> "Mathematica", 
               "Mma" -> "Mathematica", "MMA" -> "Mathematica"}, Hyphenation -> 
             True, ParagraphSpacing -> {0, 8}, CounterIncrements -> "Text", 
             MenuSortingValue -> 1400, MenuCommandKey -> "7"], 
            Cell[
             StyleData["Text", "Printout"], CellMargins -> {{2, 4}, {0, 8}}, 
             FontSize -> 10]}, Open]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["MathCaption"], CellFrame -> {{4, 0}, {0, 0}}, 
             CellMargins -> {{47, 62}, {0, 14}}, CellFrameMargins -> 5, 
             CellFrameColor -> RGBColor[0, 0.2, 1], Hyphenation -> True, 
             LineSpacing -> {1, 1}, ParagraphSpacing -> {0, 8}, 
             StyleMenuListing -> "None", FontColor -> RGBColor[0, 0, 0.6]], 
            Cell[
             StyleData["MathCaption", "Printout"], 
             CellMargins -> {{34, 62}, {0, 14}}, CellFrameColor -> 
             GrayLevel[0.700008], FontSize -> 10, FontColor -> GrayLevel[0]]},
            Open]], 
         Cell["Input/Output", "Subsection"], 
         Cell[
         "The cells in this section define styles used for input and output \
to the kernel.  Be careful when modifying, renaming, or removing these \
styles, because the front end associates special meanings with these style \
names.    ", "Text"], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Input"], CellMargins -> {{56, 4}, {3, 9}}, 
             Evaluatable -> True, CellGroupingRules -> "InputGrouping", 
             TextClipboardType -> "InputText", StripStyleOnPaste -> True, 
             PageBreakWithin -> False, GroupPageBreakWithin -> False, 
             CellLabelMargins -> {{21, Inherited}, {Inherited, Inherited}}, 
             DefaultFormatType -> DefaultInputFormatType, ContextMenu -> 
             FEPrivate`FrontEndResource["ContextMenus", "Input"], 
             ShowAutoStyles -> True, "TwoByteSyntaxCharacterAutoReplacement" -> 
             True, HyphenationOptions -> {
              "HyphenationCharacter" -> "\[Continuation]"}, 
             AutoItalicWords -> {}, LanguageCategory -> "Mathematica", 
             FormatType -> InputForm, ShowStringCharacters -> True, 
             NumberMarks -> True, LinebreakAdjustments -> {0.85, 2, 10, 0, 1},
              CounterIncrements -> "Input", MenuSortingValue -> 1500, 
             MenuCommandKey -> "9", FontWeight -> "Bold", Background -> 
             RGBColor[1, 0.96, 1]], 
            Cell[
             StyleData["Input", "Printout"], ShowCellBracket -> False, 
             CellMargins -> {{42, 4}, {3, 8}}, 
             LinebreakAdjustments -> {0.85, 2, 10, 1, 1}, FontSize -> 10, 
             Background -> None]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Output"], CellMargins -> {{57, 4}, {5, 2}}, 
             CellEditDuplicate -> True, CellGroupingRules -> "OutputGrouping",
              PageBreakWithin -> False, GroupPageBreakWithin -> False, 
             GeneratedCell -> True, CellAutoOverwrite -> True, 
             CellLabelMargins -> {{21, Inherited}, {Inherited, Inherited}}, 
             DefaultFormatType -> DefaultOutputFormatType, 
             HyphenationOptions -> {
              "HyphenationCharacter" -> "\[Continuation]"}, 
             AutoItalicWords -> {}, LanguageCategory -> "Formula", FormatType -> 
             StandardForm, CounterIncrements -> "Output", Background -> 
             RGBColor[1, 0.96, 1]], 
            Cell[
             StyleData["Output", "Printout"], ShowCellBracket -> False, 
             CellMargins -> {{42, 4}, {4, 2}}, FontSize -> 10, Background -> 
             None]}, Open]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Message"], CellMargins -> {{56, 4}, {3, 8}}, 
             CellGroupingRules -> "OutputGrouping", PageBreakWithin -> False, 
             GroupPageBreakWithin -> False, GeneratedCell -> True, 
             CellAutoOverwrite -> True, ShowCellLabel -> False, 
             CellLabelMargins -> {{21, Inherited}, {Inherited, Inherited}}, 
             DefaultFormatType -> DefaultOutputFormatType, 
             HyphenationOptions -> {
              "HyphenationCharacter" -> "\[Continuation]"}, 
             AutoItalicWords -> {}, FormatType -> InputForm, 
             CounterIncrements -> "Message", StyleMenuListing -> None, 
             FontColor -> RGBColor[0, 0.2, 1]], 
            Cell[
             StyleData["Message", "Printout"], ShowCellBracket -> False, 
             CellMargins -> {{42, 4}, {4, 2}}, FontSize -> 10, FontColor -> 
             GrayLevel[0]]}, Open]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Print"], CellMargins -> {{56, 4}, {3, 8}}, 
             CellGroupingRules -> "GraphicsGrouping", StripStyleOnPaste -> 
             True, PageBreakWithin -> False, GroupPageBreakWithin -> False, 
             GeneratedCell -> True, CellAutoOverwrite -> True, ShowCellLabel -> 
             False, CellLabelMargins -> {{21, Inherited}, {
               Inherited, Inherited}}, DefaultFormatType -> 
             DefaultOutputFormatType, ContextMenu -> 
             FEPrivate`FrontEndResource["ContextMenus", "Output"], 
             "TwoByteSyntaxCharacterAutoReplacement" -> True, 
             HyphenationOptions -> {
              "HyphenationCharacter" -> "\[Continuation]"}, 
             AutoItalicWords -> {}, FormatType -> InputForm, 
             ShowStringCharacters -> False, CounterIncrements -> "Print", 
             StyleMenuListing -> None], 
            Cell[
             StyleData["Print", "Printout"], ShowCellBracket -> False, 
             CellMargins -> {{42, 4}, {4, 2}}, FontSize -> 10]}, Open]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Graphics"], 
             CellMargins -> {{56, Inherited}, {Inherited, Inherited}}, 
             CellGroupingRules -> "GraphicsGrouping", CellHorizontalScrolling -> 
             True, PageBreakWithin -> False, GeneratedCell -> True, 
             CellAutoOverwrite -> True, ShowCellLabel -> False, 
             DefaultFormatType -> DefaultOutputFormatType, FormatType -> 
             InputForm, CounterIncrements -> "Graphics", StyleMenuListing -> 
             None], 
            Cell[
             StyleData["Graphics", "Printout"], 
             CellMargins -> {{40, 4}, {4, 2}}, ImageSize -> {250, 250}, 
             FontSize -> 9]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["CellLabel"], StyleMenuListing -> None, FontFamily -> 
             "Helvetica", FontSize -> 9, FontColor -> RGBColor[0, 0.2, 1]], 
            Cell[
             StyleData["CellLabel", "Printout"], FontSize -> 7, FontSlant -> 
             "Oblique", FontColor -> GrayLevel[0]]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["NumberedEquation"], 
             CellMargins -> {{72, 10}, {0, 10}}, 
             ConversionRules :> {"TeX" -> {"\\[\n", "\n\\]\n\n"}}, 
             CellFrameLabels -> {{None, 
                Cell[
                 TextData[{"(9.", 
                   CounterBox["Subtitle"], ".", 
                   CounterBox["NumberedEquation"], ")"}]]}, {None, None}}, 
             DefaultFormatType -> DefaultInputFormatType, 
             HyphenationOptions -> {
              "HyphenationCharacter" -> "\[Continuation]"}, CounterIncrements -> 
             "NumberedEquation", MenuSortingValue -> 1600, 
             FormatTypeAutoConvert -> False], 
            Cell[
             StyleData["NumberedEquation", "Printout"], FontSize -> 10]}, 
           Open]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["NE2"], CellMargins -> {{72, 10}, {0, 10}}, 
             ConversionRules :> {"TeX" -> {"\\[\n", "\n\\]\n\n"}}, 
             CellFrameLabels -> {{None, 
                Cell[
                 TextData[{"(9.", 
                   CounterBox["Subtitle"], ".", 
                   CounterBox["NE2"], ")"}]]}, {None, None}}, 
             DefaultFormatType -> DefaultInputFormatType, 
             HyphenationOptions -> {
              "HyphenationCharacter" -> "\[Continuation]"}, CounterIncrements -> 
             "NE2", FormatTypeAutoConvert -> False], 
            Cell[
             StyleData["NE2", "Printout"], FontSize -> 10]}, Open]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["NE3"], CellMargins -> {{72, 10}, {0, 10}}, 
             ConversionRules :> {"TeX" -> {"\\[\n", "\n\\]\n\n"}}, 
             CellFrameLabels -> {{None, 
                Cell[
                 TextData[{"(9.", 
                   CounterBox["Subtitle"], ".", 
                   CounterBox["NE3"], ")"}]]}, {None, None}}, 
             DefaultFormatType -> DefaultInputFormatType, 
             HyphenationOptions -> {
              "HyphenationCharacter" -> "\[Continuation]"}, CounterIncrements -> 
             "NE3", FormatTypeAutoConvert -> False], 
            Cell[
             StyleData["NE3", "Printout"], FontSize -> 10]}, Open]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["NE4"], CellMargins -> {{72, 10}, {0, 10}}, 
             ConversionRules :> {"TeX" -> {"\\[\n", "\n\\]\n\n"}}, 
             CellFrameLabels -> {{None, 
                Cell[
                 TextData[{"(9.", 
                   CounterBox["Subtitle"], ".", 
                   CounterBox["NE4"], ")"}]]}, {None, None}}, 
             DefaultFormatType -> DefaultInputFormatType, 
             HyphenationOptions -> {
              "HyphenationCharacter" -> "\[Continuation]"}, CounterIncrements -> 
             "NE4", FormatTypeAutoConvert -> False], 
            Cell[
             StyleData["NE4", "Printout"], FontSize -> 10]}, Open]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["NE5"], CellMargins -> {{72, 10}, {0, 10}}, 
             ConversionRules :> {"TeX" -> {"\\[\n", "\n\\]\n\n"}}, 
             CellFrameLabels -> {{None, 
                Cell[
                 TextData[{"(9.", 
                   CounterBox["Subtitle"], ".", 
                   CounterBox["NE5"], ")"}]]}, {None, None}}, 
             DefaultFormatType -> DefaultInputFormatType, 
             HyphenationOptions -> {
              "HyphenationCharacter" -> "\[Continuation]"}, CounterIncrements -> 
             "NE5", FormatTypeAutoConvert -> False], 
            Cell[
             StyleData["NE5", "Printout"], FontSize -> 10]}, Open]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["NE6"], CellMargins -> {{72, 10}, {0, 10}}, 
             ConversionRules :> {"TeX" -> {"\\[\n", "\n\\]\n\n"}}, 
             CellFrameLabels -> {{None, 
                Cell[
                 TextData[{"(9.", 
                   CounterBox["Subtitle"], ".", 
                   CounterBox["NE6"], ")"}]]}, {None, None}}, 
             DefaultFormatType -> DefaultInputFormatType, 
             HyphenationOptions -> {
              "HyphenationCharacter" -> "\[Continuation]"}, CounterIncrements -> 
             "NE6", FormatTypeAutoConvert -> False], 
            Cell[
             StyleData["NE6", "Printout"], FontSize -> 10]}, Open]], 
         Cell["Unique Styles", "Subsection"], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["TextTop"], CellFrame -> {{0, 0}, {0, 2}}, 
             CellMargins -> {{10, 4}, {2, 80}}, CellHorizontalScrolling -> 
             True, CellFrameMargins -> 4, ShowSpecialCharacters -> Automatic, 
             ParagraphSpacing -> {0, 8}, CounterIncrements -> "Text"], 
            Cell[
             StyleData["TextTop", "Printout"], 
             CellMargins -> {{2, 4}, {2, 80}}, FontSize -> 10]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["ItemizedText"], CellMargins -> {{20, 4}, {0, 8}}, 
             ShowSpecialCharacters -> Automatic, Hyphenation -> True, 
             ParagraphSpacing -> {0, 8}, ParagraphIndent -> -15, 
             CounterIncrements -> "Text"], 
            Cell[
             StyleData["ItemizedText", "Printout"], FontSize -> 10]}, 
           Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["ItemizedTextNote"], CellMargins -> {{35, 4}, {0, 4}}, 
             ShowSpecialCharacters -> Automatic, Hyphenation -> True, 
             ParagraphSpacing -> {0, 4}, CounterIncrements -> "Text"], 
            Cell[
             StyleData["ItemizedTextNote", "Printout"], FontSize -> 10]}, 
           Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["IndentedText"], CellMargins -> {{20, 4}, {0, 6}}, 
             ShowSpecialCharacters -> Automatic, Hyphenation -> True, 
             ParagraphSpacing -> {0, 8}, CounterIncrements -> "Text"], 
            Cell[
             StyleData["IndentedText", "Printout"], FontSize -> 10]}, 
           Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Note"], CellFrame -> True, 
             CellMargins -> {{10, 4}, {0, 8}}, CellHorizontalScrolling -> 
             True, ShowSpecialCharacters -> Automatic, 
             ParagraphSpacing -> {0, 8}, CounterIncrements -> "Text", 
             FontFamily -> "Helvetica", FontSize -> 10], 
            Cell[
             StyleData["Note", "Printout"], CellMargins -> {{2, 4}, {0, 8}}, 
             FontSize -> 8]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["1ColumnBox"], CellFrame -> True, 
             CellMargins -> {{10, 4}, {0, 8}}, CellHorizontalScrolling -> 
             True, LineIndent -> 0, Background -> GrayLevel[0.8], 
             FrameBoxOptions -> {
              FrameMargins -> {{13.870898437500001`, 13.870898437500001`}, {
                10.48125, 10.48125}}}, 
             GridBoxOptions -> {GridBoxSpacings -> {"Columns" -> {
                   Offset[0.27999999999999997`], {
                    Offset[0.7]}, 
                   Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, 
                 "Rows" -> {
                   Offset[0.2], {
                    Offset[0.4]}, 
                   Offset[0.2]}, "RowsIndexed" -> {}}}], 
            Cell[
             StyleData["1ColumnBox", "Printout"], 
             CellMargins -> {{2, 4}, {0, 8}}, FontSize -> 10, Background -> 
             GrayLevel[0.900008]]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["2ColumnBox"], CellFrame -> True, 
             CellMargins -> {{10, 4}, {0, 8}}, CellHorizontalScrolling -> 
             True, LineIndent -> 0, Background -> GrayLevel[0.8], 
             FrameBoxOptions -> {
              FrameMargins -> {{13.870898437500001`, 13.870898437500001`}, {
                10.48125, 10.48125}}}, 
             GridBoxOptions -> {GridBoxItemSize -> {"Columns" -> {
                   Scaled[0.39], {
                    Scaled[0.59]}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
                 "RowsIndexed" -> {}}}], 
            Cell[
             StyleData["2ColumnBox", "Printout"], 
             CellMargins -> {{2, 4}, {0, 8}}, FontSize -> 10, Background -> 
             GrayLevel[0.900008]]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["2ColumnSmallBox"], CellFrame -> True, 
             CellMargins -> {{10, 4}, {0, 8}}, CellHorizontalScrolling -> 
             True, LineIndent -> 0, Background -> GrayLevel[0.8], 
             FrameBoxOptions -> {
              FrameMargins -> {{13.870898437500001`, 13.870898437500001`}, {
                10.48125, 10.48125}}}, 
             GridBoxOptions -> {
              GridBoxAlignment -> {
                "Columns" -> {Right, {Left}}, "ColumnsIndexed" -> {}, 
                 "Rows" -> {{Baseline}}, "RowsIndexed" -> {}}, 
               GridBoxItemSize -> {"Columns" -> {{
                    Scaled[0.35]}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
                 "RowsIndexed" -> {}}, GridBoxSpacings -> {"Columns" -> {
                   Offset[0.27999999999999997`], {
                    Offset[1.0499999999999998`]}, 
                   Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, 
                 "Rows" -> {
                   Offset[0.2], {
                    Offset[0.4]}, 
                   Offset[0.2]}, "RowsIndexed" -> {}}}], 
            Cell[
             StyleData["2ColumnSmallBox", "Printout"], 
             CellMargins -> {{2, 4}, {0, 8}}, FontSize -> 10, Background -> 
             GrayLevel[0.900008]]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["3ColumnBox"], CellFrame -> True, 
             CellMargins -> {{10, 4}, {0, 8}}, CellHorizontalScrolling -> 
             True, LineIndent -> 0, Background -> GrayLevel[0.8], 
             FrameBoxOptions -> {
              FrameMargins -> {{13.870898437500001`, 13.870898437500001`}, {
                10.48125, 10.48125}}}, 
             GridBoxOptions -> {GridBoxItemSize -> {"Columns" -> {{
                    Scaled[0.325]}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}},
                  "RowsIndexed" -> {}}}], 
            Cell[
             StyleData["3ColumnBox", "Printout"], 
             CellMargins -> {{2, 4}, {0, 8}}, FontSize -> 10, Background -> 
             GrayLevel[0.900008]]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["3ColumnSmallBox"], CellFrame -> True, 
             CellMargins -> {{10, 4}, {0, 8}}, CellHorizontalScrolling -> 
             True, LineIndent -> 0, Background -> GrayLevel[0.8], 
             FrameBoxOptions -> {
              FrameMargins -> {{13.870898437500001`, 13.870898437500001`}, {
                10.48125, 10.48125}}}, 
             GridBoxOptions -> {
              GridBoxAlignment -> {
                "Columns" -> {Right, Center, {Left}}, "ColumnsIndexed" -> {}, 
                 "Rows" -> {{Baseline}}, "RowsIndexed" -> {}}, 
               GridBoxItemSize -> {"Columns" -> {{
                    Scaled[0.23]}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
                 "RowsIndexed" -> {}}, GridBoxSpacings -> {"Columns" -> {
                   Offset[0.27999999999999997`], {
                    Offset[1.0499999999999998`]}, 
                   Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, 
                 "Rows" -> {
                   Offset[0.2], {
                    Offset[0.4]}, 
                   Offset[0.2]}, "RowsIndexed" -> {}}}], 
            Cell[
             StyleData["3ColumnSmallBox", "Printout"], 
             CellMargins -> {{2, 4}, {0, 8}}, FontSize -> 10, Background -> 
             GrayLevel[0.900008]]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["4ColumnBox"], CellFrame -> True, 
             CellMargins -> {{10, 4}, {0, 8}}, CellHorizontalScrolling -> 
             True, LineIndent -> 0, Background -> GrayLevel[0.8], 
             FrameBoxOptions -> {
              FrameMargins -> {{13.870898437500001`, 13.870898437500001`}, {
                10.48125, 10.48125}}}, 
             GridBoxOptions -> {GridBoxItemSize -> {"Columns" -> {
                   Scaled[0.145], 
                   Scaled[0.345], 
                   Scaled[0.145], {
                    Scaled[0.345]}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}},
                  "RowsIndexed" -> {}}}], 
            Cell[
             StyleData["4ColumnBox", "Printout"], 
             CellMargins -> {{2, 4}, {0, 8}}, FontSize -> 10, Background -> 
             GrayLevel[0.900008]]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["5ColumnBox"], CellFrame -> True, 
             CellMargins -> {{10, 4}, {0, 8}}, CellHorizontalScrolling -> 
             True, LineIndent -> 0, Background -> GrayLevel[0.8], 
             FrameBoxOptions -> {
              FrameMargins -> {{13.870898437500001`, 13.870898437500001`}, {
                10.48125, 10.48125}}}, 
             GridBoxOptions -> {GridBoxItemSize -> {"Columns" -> {{
                    Scaled[0.195]}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}},
                  "RowsIndexed" -> {}}}], 
            Cell[
             StyleData["5ColumnBox", "Printout"], 
             CellMargins -> {{2, 4}, {0, 8}}, FontSize -> 10, Background -> 
             GrayLevel[0.900008]]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["6ColumnBox"], CellFrame -> True, 
             CellMargins -> {{10, 4}, {0, 8}}, CellHorizontalScrolling -> 
             True, LineIndent -> 0, Background -> GrayLevel[0.8], 
             FrameBoxOptions -> {
              FrameMargins -> {{13.870898437500001`, 13.870898437500001`}, {
                10.48125, 10.48125}}}, 
             GridBoxOptions -> {GridBoxItemSize -> {"Columns" -> {
                   Scaled[0.13], 
                   Scaled[0.23], 
                   Scaled[0.13], 
                   Scaled[0.13], 
                   Scaled[0.23], {
                    Scaled[0.13]}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
                 "RowsIndexed" -> {}}}], 
            Cell[
             StyleData["6ColumnBox", "Printout"], 
             CellMargins -> {{2, 4}, {0, 8}}, FontSize -> 10, Background -> 
             GrayLevel[0.900008]]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Picture"], CellMargins -> {{10, Inherited}, {0, 8}}, 
             CellHorizontalScrolling -> True], 
            Cell[
             StyleData["Picture", "Printout"], 
             CellMargins -> {{2, Inherited}, {0, 8}}]}, Open]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Caption"], CellMargins -> {{10, 50}, {0, 3}}, 
             PageBreakAbove -> False, Hyphenation -> True, FontFamily -> 
             "Helvetica", FontSize -> 9], 
            Cell[
             StyleData["Caption", "Printout"], 
             CellMargins -> {{2, 50}, {2, 4}}, FontSize -> 7]}, Closed]], 
         Cell["Tables", "Subsection"], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["2ColumnTable"], CellMargins -> {{10, 4}, {0, 8}}, 
             CellHorizontalScrolling -> True, 
             GridBoxOptions -> {
              GridBoxAlignment -> {
                "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
                 "Rows" -> {{Baseline}}, "RowsIndexed" -> {}}, 
               GridBoxItemSize -> {"Columns" -> {
                   Scaled[0.39], {
                    Scaled[0.59]}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
                 "RowsIndexed" -> {}}}], 
            Cell[
             StyleData["2ColumnTable", "Printout"], 
             CellMargins -> {{2, 4}, {0, 8}}, FontSize -> 10]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["3ColumnTable"], CellMargins -> {{10, 4}, {0, 8}}, 
             CellHorizontalScrolling -> True, StyleMenuListing -> None, 
             GridBoxOptions -> {
              GridBoxAlignment -> {
                "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
                 "Rows" -> {{Baseline}}, "RowsIndexed" -> {}}, 
               GridBoxItemSize -> {"Columns" -> {{
                    Scaled[0.325]}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}},
                  "RowsIndexed" -> {}}}], 
            Cell[
             StyleData["3ColumnTable", "Printout"], 
             CellMargins -> {{2, 4}, {0, 8}}, FontSize -> 10]}, Closed]], 
         Cell["Formulas and Programming", "Subsection"], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["ChemicalFormula"], 
             CellMargins -> {{42, Inherited}, {Inherited, Inherited}}, 
             CellHorizontalScrolling -> True, DefaultFormatType -> 
             DefaultInputFormatType, 
             HyphenationOptions -> {
              "HyphenationCharacter" -> "\[Continuation]"}, LanguageCategory -> 
             "Formula", AutoSpacing -> False, 
             ScriptBaselineShifts -> {0.6, Automatic}, ScriptLevel -> 1, 
             SingleLetterItalics -> False, ZeroWidthTimes -> True], 
            Cell[
             StyleData["ChemicalFormula", "Printout"], 
             CellMargins -> {{34, Inherited}, {Inherited, Inherited}}, 
             FontSize -> 10]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["DisplayFormula"], 
             CellMargins -> {{42, Inherited}, {Inherited, Inherited}}, 
             CellHorizontalScrolling -> True, DefaultFormatType -> 
             DefaultInputFormatType, 
             HyphenationOptions -> {
              "HyphenationCharacter" -> "\[Continuation]"}, LanguageCategory -> 
             "Formula", ScriptLevel -> 0, SingleLetterItalics -> True, 
             SpanMaxSize -> Infinity, 
             UnderoverscriptBoxOptions -> {LimitsPositioning -> True}, 
             GridBoxOptions -> {
              GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, 
                 "Rows" -> {{1.}}, "RowsIndexed" -> {}}}], 
            Cell[
             StyleData["DisplayFormula", "Printout"], 
             CellMargins -> {{34, Inherited}, {Inherited, Inherited}}, 
             FontSize -> 10]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Program"], CellMargins -> {{10, 4}, {0, 8}}, 
             CellHorizontalScrolling -> True, LanguageCategory -> "Formula", 
             FontFamily -> "Courier"], 
            Cell[
             StyleData["Program", "Printout"], 
             CellMargins -> {{2, Inherited}, {Inherited, Inherited}}, 
             FontSize -> 9.5]}, Closed]], 
         Cell["Hyperlink Styles", "Subsection"], 
         Cell[
         "The cells below define styles useful for making hypertext \
ButtonBoxes.  The \"Hyperlink\" style is for links within the same Notebook, \
or between Notebooks.", "Text"], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Hyperlink"], StyleMenuListing -> None, 
             ButtonStyleMenuListing -> Automatic, 
             FontVariations -> {"Underline" -> True}, FontColor -> 
             RGBColor[0, 0, 1], 
             ButtonBoxOptions -> {
              Active -> True, ButtonFunction :> (FrontEndExecute[{
                  FrontEnd`NotebookLocate[#2]}]& ), ButtonNote -> 
               ButtonData}], 
            Cell[
             StyleData["Hyperlink", "Printout"], FontSize -> 10, 
             FontVariations -> {"Underline" -> False}, FontColor -> 
             GrayLevel[0]]}, Closed]], 
         Cell[
         "The following styles are for linking automatically to the on-line \
help system.", "Text"], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["MainBookLink"], StyleMenuListing -> None, 
             ButtonStyleMenuListing -> Automatic, 
             FontVariations -> {"Underline" -> True}, FontColor -> 
             RGBColor[0, 0, 1], 
             ButtonBoxOptions -> {
              Active -> True, Appearance -> {Automatic, None}, 
               ButtonFunction :> (FrontEndExecute[{
                  FrontEnd`HelpBrowserLookup["MainBook", #]}]& )}], 
            Cell[
             StyleData["MainBookLink", "Printout"], FontSize -> 10, 
             FontVariations -> {"Underline" -> False}, FontColor -> 
             GrayLevel[0]]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["AddOnsLink"], StyleMenuListing -> None, 
             ButtonStyleMenuListing -> Automatic, FontFamily -> "Courier", 
             FontVariations -> {"Underline" -> True}, FontColor -> 
             RGBColor[0, 0, 1], 
             ButtonBoxOptions -> {
              Active -> True, Appearance -> {Automatic, None}, 
               ButtonFunction :> (FrontEndExecute[{
                  FrontEnd`HelpBrowserLookup["AddOns", #]}]& )}], 
            Cell[
             StyleData["AddOnsLink", "Printout"], FontSize -> 10, 
             FontVariations -> {"Underline" -> False}, FontColor -> 
             GrayLevel[0]]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["RefGuideLink"], StyleMenuListing -> None, 
             ButtonStyleMenuListing -> Automatic, FontFamily -> "Courier", 
             FontVariations -> {"Underline" -> True}, FontColor -> 
             RGBColor[0, 0, 1], 
             ButtonBoxOptions -> {
              Active -> True, Appearance -> {Automatic, None}, 
               ButtonFunction :> (FrontEndExecute[{
                  FrontEnd`HelpBrowserLookup["RefGuide", #]}]& )}], 
            Cell[
             StyleData["RefGuideLink", "Printout"], FontSize -> 10, 
             FontVariations -> {"Underline" -> False}, FontColor -> 
             GrayLevel[0]]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["GettingStartedLink"], StyleMenuListing -> None, 
             ButtonStyleMenuListing -> Automatic, 
             FontVariations -> {"Underline" -> True}, FontColor -> 
             RGBColor[0, 0, 1], 
             ButtonBoxOptions -> {
              Active -> True, Appearance -> {Automatic, None}, 
               ButtonFunction :> (FrontEndExecute[{
                  FrontEnd`HelpBrowserLookup["GettingStarted", #]}]& )}], 
            Cell[
             StyleData["GettingStartedLink", "Printout"], FontSize -> 10, 
             FontVariations -> {"Underline" -> False}, FontColor -> 
             GrayLevel[0]]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["OtherInformationLink"], StyleMenuListing -> None, 
             ButtonStyleMenuListing -> Automatic, 
             FontVariations -> {"Underline" -> True}, FontColor -> 
             RGBColor[0, 0, 1], 
             ButtonBoxOptions -> {
              Active -> True, Appearance -> {Automatic, None}, 
               ButtonFunction :> (FrontEndExecute[{
                  FrontEnd`HelpBrowserLookup["OtherInformation", #]}]& )}], 
            Cell[
             StyleData["OtherInformationLink", "Printout"], FontSize -> 10, 
             FontVariations -> {"Underline" -> False}, FontColor -> 
             GrayLevel[0]]}, Closed]], 
         Cell["Palette Styles", "Subsection"], 
         Cell[
         "The cells below define styles that define standard ButtonFunctions, \
for use in palette buttons.", "Text"], 
         Cell[
          StyleData["Paste"], StyleMenuListing -> None, 
          ButtonStyleMenuListing -> Automatic, 
          ButtonBoxOptions -> {ButtonFunction :> (FrontEndExecute[{
               FrontEnd`NotebookApply[
                FrontEnd`InputNotebook[], #, After]}]& )}], 
         Cell[
          StyleData["Evaluate"], StyleMenuListing -> None, 
          ButtonStyleMenuListing -> Automatic, 
          ButtonBoxOptions -> {ButtonFunction :> (FrontEndExecute[{
               FrontEnd`NotebookApply[
                FrontEnd`InputNotebook[], #, All], 
               SelectionEvaluate[
                FrontEnd`InputNotebook[], All]}]& )}], 
         Cell[
          StyleData["EvaluateCell"], StyleMenuListing -> None, 
          ButtonStyleMenuListing -> Automatic, 
          ButtonBoxOptions -> {ButtonFunction :> (FrontEndExecute[{
               FrontEnd`NotebookApply[
                FrontEnd`InputNotebook[], #, All], 
               FrontEnd`SelectionMove[
                FrontEnd`InputNotebook[], All, Cell, 1], 
               FrontEnd`SelectionEvaluateCreateCell[
                FrontEnd`InputNotebook[], All]}]& )}], 
         Cell[
          StyleData["CopyEvaluate"], StyleMenuListing -> None, 
          ButtonStyleMenuListing -> Automatic, 
          ButtonBoxOptions -> {ButtonFunction :> (FrontEndExecute[{
               FrontEnd`SelectionCreateCell[
                FrontEnd`InputNotebook[], All], 
               FrontEnd`NotebookApply[
                FrontEnd`InputNotebook[], #, All], 
               FrontEnd`SelectionEvaluate[
                FrontEnd`InputNotebook[], All]}]& )}], 
         Cell[
          StyleData["CopyEvaluateCell"], StyleMenuListing -> None, 
          ButtonStyleMenuListing -> Automatic, 
          ButtonBoxOptions -> {ButtonFunction :> (FrontEndExecute[{
               FrontEnd`SelectionCreateCell[
                FrontEnd`InputNotebook[], All], 
               FrontEnd`NotebookApply[
                FrontEnd`InputNotebook[], #, All], 
               FrontEnd`SelectionEvaluateCreateCell[
                FrontEnd`InputNotebook[], All]}]& )}]}, Open]]}, Open]]}, 
  Visible -> False, FrontEndVersion -> 
  "9.0 for Microsoft Windows (32-bit) (January 25, 2013)", StyleDefinitions -> 
  "PrivateStylesheetFormatting.nb"]
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "chapter 1"->{
  Cell[567, 22, 170, 7, 72, "Title",
   CellTags->{"chapter 1", "c:1"}]},
 "c:1"->{
  Cell[567, 22, 170, 7, 72, "Title",
   CellTags->{"chapter 1", "c:1"}]},
 "Sec. 9.1"->{
  Cell[4911, 157, 129, 5, 40, "Subtitle",
   CellTags->{"Sec. 9.1", "c:2"}]},
 "c:2"->{
  Cell[4911, 157, 129, 5, 40, "Subtitle",
   CellTags->{"Sec. 9.1", "c:2"}]},
 "i:3"->{
  Cell[6204, 195, 728, 17, 46, "Text",
   CellTags->"i:3"]},
 "Cell 9.1"->{
  Cell[7839, 239, 93, 3, 69, "Input",
   CellTags->"Cell 9.1"],
  Cell[7935, 244, 95, 2, 45, "Output",
   CellTags->"Cell 9.1"]},
 "i:4"->{
  Cell[10254, 324, 1870, 43, 108, "Text",
   CellTags->"i:4"]},
 "i:2"->{
  Cell[12127, 369, 608, 15, 48, "Text",
   CellTags->"i:2"]},
 "Sec. 9.2"->{
  Cell[13284, 412, 138, 6, 40, "Subtitle",
   CellTags->{"Sec. 9.2", "c:3"}]},
 "c:3"->{
  Cell[13284, 412, 138, 6, 40, "Subtitle",
   CellTags->{"Sec. 9.2", "c:3"}]},
 "c:4"->{
  Cell[13466, 424, 57, 1, 39, "Subsubtitle",
   CellTags->"c:4"]},
 "Cell 9.2"->{
  Cell[13937, 441, 109, 3, 69, "Input",
   CellTags->"Cell 9.2"]},
 "Cell 9.3"->{
  Cell[14180, 454, 98, 3, 69, "Input",
   CellTags->"Cell 9.3"]},
 "Cell 9.4"->{
  Cell[14578, 470, 97, 3, 69, "Input",
   CellTags->"Cell 9.4"]},
 "Cell 9.5"->{
  Cell[14849, 487, 166, 4, 69, "Input",
   CellTags->"Cell 9.5"]},
 "Cell 9.6"->{
  Cell[15224, 503, 93, 3, 69, "Input",
   CellTags->"Cell 9.6"]},
 "Cell 9.7"->{
  Cell[15628, 520, 135, 5, 69, "Input",
   CellTags->"Cell 9.7"]},
 "i:115"->{
  Cell[15810, 530, 665, 23, 65, "Text",
   CellTags->"i:115"]},
 "Table 9.1"->{
  Cell[16478, 555, 2920, 98, 192, "Text",
   CellTags->"Table 9.1"]},
 "c:5"->{
  Cell[19435, 658, 76, 1, 28, "Subsubtitle",
   CellTags->"c:5"]},
 "i:16"->{
  Cell[19514, 661, 292, 9, 27, "Text",
   CellTags->"i:16"]},
 "Cell 9.8"->{
  Cell[19831, 674, 149, 5, 69, "Input",
   CellTags->"Cell 9.8"]},
 "Cell 9.9"->{
  Cell[20209, 693, 95, 3, 69, "Input",
   CellTags->"Cell 9.9"],
  Cell[20307, 698, 116, 2, 45, "Output",
   CellTags->"Cell 9.9"]},
 "Cell 9.10"->{
  Cell[20460, 705, 143, 5, 69, "Input",
   CellTags->"Cell 9.10"],
  Cell[20606, 712, 145, 3, 63, "Output",
   CellTags->"Cell 9.10"]},
 "i:17"->{
  Cell[20766, 718, 505, 16, 28, "Text",
   CellTags->"i:17"]},
 "Cell 9.11"->{
  Cell[21296, 738, 125, 4, 69, "Input",
   CellTags->"Cell 9.11"],
  Cell[21424, 744, 115, 2, 47, "Output",
   CellTags->"Cell 9.11"]},
 "i:5"->{
  Cell[21789, 761, 2063, 52, 122, "Text",
   CellTags->"i:5"]},
 "Cell 9.12"->{
  Cell[24652, 843, 129, 4, 69, "Input",
   CellTags->"Cell 9.12"]},
 "c:6"->{
  Cell[25198, 864, 71, 1, 28, "Subsubtitle",
   CellTags->"c:6"]},
 "i:18"->{
  Cell[25272, 867, 500, 18, 27, "Text",
   CellTags->"i:18"]},
 "i:96"->{
  Cell[25775, 887, 5065, 171, 286, "Text",
   CellTags->{"i:96", "Table 9.2"}]},
 "Table 9.2"->{
  Cell[25775, 887, 5065, 171, 286, "Text",
   CellTags->{"i:96", "Table 9.2"}]},
 "c:7"->{
  Cell[35440, 1231, 62, 1, 28, "Subsubtitle",
   CellTags->"c:7"]},
 "Table 9.3"->{
  Cell[35794, 1245, 2484, 85, 202, "Text",
   CellTags->"Table 9.3"]},
 "Cell 9.13"->{
  Cell[38653, 1347, 130, 4, 69, "Input",
   CellTags->"Cell 9.13"],
  Cell[38786, 1353, 128, 4, 69, "Output",
   CellTags->"Cell 9.13"]},
 "Cell 9.14"->{
  Cell[39474, 1383, 160, 5, 69, "Input",
   CellTags->"Cell 9.14"],
  Cell[39637, 1390, 114, 2, 45, "Output",
   CellTags->"Cell 9.14"]},
 "Cell 9.15"->{
  Cell[39854, 1399, 107, 3, 69, "Input",
   CellTags->"Cell 9.15"],
  Cell[39964, 1404, 207, 4, 45, "Output",
   CellTags->"Cell 9.15"]},
 "c:8"->{
  Cell[40471, 1422, 65, 1, 39, "Subsubtitle",
   CellTags->"c:8"]},
 "i:14"->{
  Cell[40539, 1425, 591, 15, 46, "Text",
   CellTags->"i:14"]},
 "i:15"->{
  Cell[41377, 1451, 4812, 157, 197, "Text",
   CellTags->"i:15"]},
 "Cell 9.16"->{
  Cell[46549, 1626, 263, 10, 69, "Input",
   CellTags->"Cell 9.16"],
  Cell[46815, 1638, 116, 3, 63, "Output",
   CellTags->"Cell 9.16"]},
 "c:9"->{
  Cell[46980, 1647, 426, 16, 42, "Subsubtitle",
   CellTags->"c:9"]},
 "i:20"->{
  Cell[47409, 1665, 808, 31, 48, "Text",
   CellTags->"i:20"]},
 "Cell 9.17"->{
  Cell[48242, 1700, 100, 3, 69, "Input",
   CellTags->"Cell 9.17"]},
 "i:6"->{
  Cell[48405, 1708, 421, 10, 47, "Text",
   CellTags->"i:6"]},
 "Cell 9.18"->{
  Cell[48851, 1722, 124, 4, 69, "Input",
   CellTags->"Cell 9.18"],
  Cell[48978, 1728, 137, 2, 45, "Output",
   CellTags->"Cell 9.18"]},
 "Cell 9.19"->{
  Cell[49500, 1746, 335, 7, 69, "Input",
   CellTags->"Cell 9.19"],
  Cell[49838, 1755, 315, 5, 45, "Output",
   CellTags->"Cell 9.19"]},
 "i:7"->{
  Cell[50168, 1763, 604, 15, 28, "Text",
   CellTags->"i:7"]},
 "Cell 9.20"->{
  Cell[50797, 1782, 458, 10, 69, "Input",
   CellTags->"Cell 9.20"],
  Cell[51258, 1794, 299, 5, 45, "Output",
   CellTags->"Cell 9.20"]},
 "Cell 9.21"->{
  Cell[52948, 1842, 274, 7, 69, "Input",
   CellTags->"Cell 9.21"],
  Cell[53225, 1851, 161, 2, 45, "Output",
   CellTags->"Cell 9.21"]},
 "i:21"->{
  Cell[54013, 1872, 616, 18, 47, "Text",
   CellTags->"i:21"]},
 "Cell 9.22"->{
  Cell[54654, 1894, 286, 9, 69, "Input",
   CellTags->"Cell 9.22"],
  Cell[54943, 1905, 112, 2, 45, "Output",
   CellTags->"Cell 9.22"]},
 "Table 9.5"->{
  Cell[55236, 1918, 4177, 122, 200, "Text",
   CellTags->"Table 9.5"]},
 "c:10"->{
  Cell[59450, 2045, 64, 1, 39, "Subsubtitle",
   CellTags->"c:10"]},
 "Sec. 9.3"->{
  Cell[61693, 2128, 199, 10, 40, "Subtitle",
   CellTags->{"Sec. 9.3", "c:11"}]},
 "c:11"->{
  Cell[61693, 2128, 199, 10, 40, "Subtitle",
   CellTags->{"Sec. 9.3", "c:11"}]},
 "i:8"->{
  Cell[61895, 2140, 1223, 34, 64, "Text",
   CellTags->"i:8"]},
 "i:13"->{
  Cell[63740, 2187, 1573, 48, 66, "Text",
   CellTags->"i:13"]},
 "Sec. 9.4"->{
  Cell[67659, 2285, 79, 1, 40, "Subtitle",
   CellTags->{"Sec. 9.4", "c:12"}]},
 "c:12"->{
  Cell[67659, 2285, 79, 1, 40, "Subtitle",
   CellTags->{"Sec. 9.4", "c:12"}]},
 "c:13"->{
  Cell[67782, 2292, 60, 1, 39, "Subsubtitle",
   CellTags->"c:13"]},
 "i:22"->{
  Cell[67845, 2295, 593, 18, 50, "Text",
   CellTags->"i:22"]},
 "Cell 9.23"->{
  Cell[68463, 2317, 95, 3, 69, "Input",
   CellTags->"Cell 9.23"]},
 "Cell 9.24"->{
  Cell[68753, 2330, 94, 3, 69, "Input",
   CellTags->"Cell 9.24"]},
 "Cell 9.25"->{
  Cell[69198, 2350, 105, 3, 69, "Input",
   CellTags->"Cell 9.25"]},
 "Cell 9.26"->{
  Cell[70054, 2383, 73, 2, 69, "Input",
   CellTags->"Cell 9.26"]},
 "c:14"->{
  Cell[70529, 2403, 57, 1, 28, "Subsubtitle",
   CellTags->"c:14"]},
 "Cell 9.27"->{
  Cell[72371, 2470, 159, 5, 6915190, "Input",
   CellTags->"Cell 9.27"]},
 "Cell 9.28"->{
  Cell[72833, 2492, 94, 3, 6915190, "Input",
   CellTags->"Cell 9.28"]},
 "Cell 9.29"->{
  Cell[73220, 2511, 126, 4, 6915190, "Input",
   CellTags->"Cell 9.29"]},
 "i:23"->{
  Cell[73404, 2521, 280, 9, 2547977, "Text",
   CellTags->"i:23"]},
 "Cell 9.30"->{
  Cell[73687, 2532, 104, 3, 6915190, "Input",
   CellTags->"Cell 9.30"]},
 "Cell 9.31"->{
  Cell[74207, 2558, 72, 2, 6915190, "Input",
   CellTags->"Cell 9.31"]},
 "i:24"->{
  Cell[74325, 2565, 173, 4, 2547977, "Text",
   CellTags->"i:24"]},
 "Cell 9.32"->{
  Cell[74501, 2571, 119, 3, 6915190, "Input",
   CellTags->"Cell 9.32"]},
 "i:10"->{
  Cell[74623, 2576, 1550, 52, 11477393, "Text",
   CellTags->"i:10"]},
 "i:25"->{
  Cell[76980, 2652, 4986, 149, 29753418, "Text",
   CellTags->{"i:25", "Table 9.6"}]},
 "Table 9.6"->{
  Cell[76980, 2652, 4986, 149, 29753418, "Text",
   CellTags->{"i:25", "Table 9.6"}]},
 "c:15"->{
  Cell[84272, 2880, 81, 1, 28, "Subsubtitle",
   CellTags->"c:15"]},
 "i:12"->{
  Cell[84356, 2883, 1073, 29, 10091300, "Text",
   CellTags->"i:12"]},
 "Fig. 9.1"->{
  Cell[149569, 3970, 145, 2, 1402801, "Caption",
   CellTags->"Fig. 9.1"]},
 "Cell 9.33"->{
  Cell[153635, 4132, 94, 3, 6915190, "Input",
   CellTags->"Cell 9.33"],
  Cell[153732, 4137, 92, 2, 4482635, "Output",
   CellTags->"Cell 9.33"]},
 "Cell 9.34"->{
  Cell[154244, 4158, 127, 4, 7132056, "Input",
   CellTags->"Cell 9.34"],
  Cell[154374, 4164, 116, 3, 5156596, "Output",
   CellTags->"Cell 9.34"]},
 "i:11"->{
  Cell[155447, 4206, 785, 22, 8361340, "Text",
   CellTags->"i:11"]},
 "Sec. 9.5"->{
  Cell[156917, 4250, 84, 1, 40, "Subtitle",
   CellTags->{"Sec. 9.5", "c:16"}]},
 "c:16"->{
  Cell[156917, 4250, 84, 1, 40, "Subtitle",
   CellTags->{"Sec. 9.5", "c:16"}]},
 "c:17"->{
  Cell[157045, 4257, 85, 1, 65, "Subsubtitle",
   CellTags->"c:17"]},
 "i:26"->{
  Cell[157133, 4260, 383, 12, 4474590, "Text",
   CellTags->"i:26"]},
 "Cell 9.35"->{
  Cell[157541, 4276, 191, 6, 6915190, "Input",
   CellTags->"Cell 9.35"]},
 "i:27"->{
  Cell[158530, 4315, 398, 13, 4474590, "Text",
   CellTags->"i:27"]},
 "Cell 9.36"->{
  Cell[158953, 4332, 104, 3, 6915190, "Input",
   CellTags->"Cell 9.36"]},
 "Cell 9.37"->{
  Cell[159167, 4344, 253, 8, 6915190, "Input",
   CellTags->"Cell 9.37"]},
 "Cell 9.38"->{
  Cell[159870, 4370, 151, 5, 6915190, "Input",
   CellTags->"Cell 9.38"]},
 "Cell 9.39"->{
  Cell[160553, 4401, 141, 5, 6915190, "Input",
   CellTags->"Cell 9.39"]},
 "i:28"->{
  Cell[161016, 4421, 245, 8, 2547977, "Text",
   CellTags->"i:28"]},
 "Cell 9.40"->{
  Cell[161286, 4433, 108, 3, 6915190, "Input",
   CellTags->"Cell 9.40"]},
 "i:29"->{
  Cell[161683, 4451, 625, 24, 4474590, "Text",
   CellTags->"i:29"]},
 "Cell 9.41"->{
  Cell[162333, 4479, 175, 6, 6915190, "Input",
   CellTags->"Cell 9.41"]},
 "Cell 9.42"->{
  Cell[162929, 4507, 72, 2, 6915190, "Input",
   CellTags->"Cell 9.42"]},
 "Cell 9.43"->{
  Cell[164166, 4563, 146, 5, 6915190, "Input",
   CellTags->"Cell 9.43"]},
 "Cell 9.44"->{
  Cell[166007, 4640, 174, 6, 6915190, "Input",
   CellTags->"Cell 9.44"]},
 "i:98"->{
  Cell[169791, 4758, 86, 1, 43, "Subsubtitle",
   CellTags->{"i:98", "c:18"}]},
 "c:18"->{
  Cell[169791, 4758, 86, 1, 43, "Subsubtitle",
   CellTags->{"i:98", "c:18"}]},
 "c:19"->{
  Cell[169902, 4763, 53, 1, 77, "Section",
   CellTags->"c:19"]},
 "Fig. 9.2"->{
  Cell[185299, 5044, 230, 12, 1402801, "Caption",
   CellTags->"Fig. 9.2"]},
 "Cell 9.45"->{
  Cell[185809, 5069, 505, 17, 9031376, "Input",
   CellTags->"Cell 9.45"],
  Cell[186317, 5088, 163, 4, 4482635, "Output",
   CellTags->"Cell 9.45"]},
 "i:31"->{
  Cell[187201, 5118, 59, 1, 56, "Section",
   CellTags->{"i:31", "c:20"}]},
 "c:20"->{
  Cell[187201, 5118, 59, 1, 56, "Section",
   CellTags->{"i:31", "c:20"}]},
 "(9.5.1)"->{
  Cell[187559, 5136, 1280, 48, 3060147, "NumberedEquation",
   CellTags->"(9.5.1)"]},
 "(9.5.2)"->{
  Cell[189103, 5194, 688, 26, 3882938, "NumberedEquation",
   CellTags->"(9.5.2)"]},
 "Cell 9.46"->{
  Cell[190706, 5261, 94, 3, 6915190, "Input",
   CellTags->"Cell 9.46"]},
 "i:42"->{
  Cell[191005, 5274, 351, 14, 3393437, "Text",
   CellTags->"i:42"]},
 "Cell 9.47"->{
  Cell[191381, 5292, 94, 3, 6915190, "Input",
   CellTags->"Cell 9.47"]},
 "(9.5.3)"->{
  Cell[192522, 5339, 536, 20, 3060147, "NumberedEquation",
   CellTags->"(9.5.3)"]},
 "(9.5.4)"->{
  Cell[193193, 5367, 496, 19, 3060147, "NumberedEquation",
   CellTags->"(9.5.4)"]},
 "i:32"->{
  Cell[194092, 5408, 69, 1, 56, "Section",
   CellTags->{"i:32", "c:21"}]},
 "c:21"->{
  Cell[194092, 5408, 69, 1, 56, "Section",
   CellTags->{"i:32", "c:21"}]},
 "(9.5.5)"->{
  Cell[195078, 5457, 2206, 87, 108, "NumberedEquation",
   CellTags->"(9.5.5)"]},
 "(9.5.6)"->{
  Cell[198099, 5583, 2812, 96, 608, "NumberedEquation",
   CellTags->"(9.5.6)"]},
 "Cell 9.48"->{
  Cell[201109, 5691, 117, 4, 195, "Input",
   CellTags->"Cell 9.48"]},
 "Table 9.8"->{
  Cell[201665, 5715, 1164, 34, 268, "Text",
   CellTags->"Table 9.8"]},
 "c:22"->{
  Cell[202866, 5754, 61, 1, 56, "Section",
   CellTags->"c:22"]},
 "i:33"->{
  Cell[202952, 5759, 78, 2, 47, "Subsubsection",
   CellTags->"i:33"]},
 "Cell 9.49"->{
  Cell[203453, 5779, 144, 4, 6915190, "Input",
   CellTags->"Cell 9.49"]},
 "i:34"->{
  Cell[203934, 5803, 92, 2, 47, "Subsubsection",
   CellTags->"i:34"]},
 "Cell 9.50"->{
  Cell[204255, 5815, 357, 13, 253, "Input",
   CellTags->"Cell 9.50"],
  Cell[204615, 5830, 672, 20, 188, "Output",
   CellTags->"Cell 9.50"]},
 "Cell 9.51"->{
  Cell[205737, 5873, 208, 6, 253, "Input",
   CellTags->"Cell 9.51"],
  Cell[205948, 5881, 800, 24, 268, "Output",
   CellTags->"Cell 9.51"]},
 "i:104"->{
  Cell[206763, 5908, 513, 22, 140, "Text",
   CellTags->"i:104"]},
 "Cell 9.52"->{
  Cell[207301, 5934, 192, 6, 253, "Input",
   CellTags->"Cell 9.52"],
  Cell[207496, 5942, 651, 19, 188, "Output",
   CellTags->"Cell 9.52"]},
 "Cell 9.53"->{
  Cell[208456, 5975, 144, 5, 195, "Input",
   CellTags->"Cell 9.53"],
  Cell[208603, 5982, 165, 4, 127, "Output",
   CellTags->"Cell 9.53"]},
 "(9.5.7)"->{
  Cell[209710, 6022, 390, 15, 78, "NumberedEquation",
   CellTags->"(9.5.7)"]},
 "(9.5.8)"->{
  Cell[210416, 6049, 908, 34, 96, "NumberedEquation",
   CellTags->"(9.5.8)"]},
 "Cell 9.54"->{
  Cell[211953, 6113, 214, 8, 195, "Input",
   CellTags->"Cell 9.54"]},
 "i:35"->{
  Cell[212453, 6138, 96, 2, 47, "Subsubsection",
   CellTags->"i:35"]},
 "(9.5.9)"->{
  Cell[213091, 6162, 389, 14, 97, "NumberedEquation",
   CellTags->"(9.5.9)"]},
 "i:105"->{
  Cell[213483, 6178, 708, 29, 218, "Text",
   CellTags->"i:105"]},
 "Cell 9.55"->{
  Cell[214216, 6211, 110, 3, 243, "Input",
   CellTags->"Cell 9.55"]},
 "Cell 9.56"->{
  Cell[214582, 6228, 109, 3, 243, "Input",
   CellTags->"Cell 9.56"]},
 "Cell 9.57"->{
  Cell[215525, 6264, 334, 13, 243, "Input",
   CellTags->"Cell 9.57"]},
 "i:36"->{
  Cell[215984, 6287, 80, 2, 47, "Subsubsection",
   CellTags->"i:36"]},
 "Cell 9.58"->{
  Cell[216571, 6313, 101, 3, 243, "Input",
   CellTags->"Cell 9.58"]},
 "i:37"->{
  Cell[217221, 6343, 77, 2, 47, "Subsubsection",
   CellTags->"i:37"]},
 "Cell 9.59"->{
  Cell[217709, 6361, 107, 3, 125, "Input",
   CellTags->"Cell 9.59"]},
 "Cell 9.60"->{
  Cell[218625, 6396, 408, 13, 163, "Input",
   CellTags->"Cell 9.60"]},
 "Cell 9.61"->{
  Cell[220318, 6467, 171, 6, 125, "Input",
   CellTags->"Cell 9.61"]},
 "(9.5.10)"->{
  Cell[220765, 6488, 1494, 57, 51, "NumberedEquation",
   CellTags->"(9.5.10)"]},
 "Fig. 9.3"->{
  Cell[231488, 6712, 652, 27, 32, "Caption",
   CellTags->"Fig. 9.3"]},
 "(9.5.11)"->{
  Cell[232971, 6771, 1399, 53, 147, "NumberedEquation",
   CellTags->"(9.5.11)"]},
 "Table 9.9"->{
  Cell[235235, 6857, 2387, 78, 337, "Text",
   CellTags->"Table 9.9"]},
 "c:23"->{
  Cell[237683, 6942, 115, 3, 43, "Subsubtitle",
   CellTags->"c:23"]},
 "i:38"->{
  Cell[237801, 6947, 482, 15, 36722, "Text",
   CellTags->"i:38"]},
 "Cell 9.62"->{
  Cell[238308, 6966, 231, 8, 40822, "Input",
   CellTags->"Cell 9.62"]},
 "Cell 9.63"->{
  Cell[239254, 7004, 247, 8, 40822, "Input",
   CellTags->"Cell 9.63"]},
 "Cell 9.64"->{
  Cell[240342, 7043, 343, 11, 40822, "Input",
   CellTags->"Cell 9.64"]},
 "c:24"->{
  Cell[240930, 7068, 67, 1, 43, "Subsubtitle",
   CellTags->"c:24"]},
 "i:39"->{
  Cell[241978, 7108, 350, 9, 26415, "Text",
   CellTags->"i:39"]},
 "Cell 9.65"->{
  Cell[242331, 7119, 271, 10, 40822, "Input",
   CellTags->"Cell 9.65"]},
 "Cell 9.66"->{
  Cell[242627, 7133, 152, 5, 40822, "Input",
   CellTags->"Cell 9.66"]},
 "Cell 9.67"->{
  Cell[243202, 7159, 153, 5, 40822, "Input",
   CellTags->"Cell 9.67"]},
 "i:40"->{
  Cell[243585, 7176, 582, 22, 26415, "Text",
   CellTags->"i:40"]},
 "Cell 9.68"->{
  Cell[244192, 7202, 258, 9, 53313, "Input",
   CellTags->"Cell 9.68"]},
 "i:41"->{
  Cell[244690, 7222, 618, 23, 31590, "Text",
   CellTags->"i:41"]},
 "Cell 9.69"->{
  Cell[245333, 7249, 105, 3, 40822, "Input",
   CellTags->"Cell 9.69"]},
 "Table 9.10"->{
  Cell[245906, 7274, 6100, 181, 247960, "Text",
   CellTags->"Table 9.10"]},
 "c:25"->{
  Cell[252043, 7460, 64, 1, 43, "Subsubtitle",
   CellTags->"c:25"]},
 "Sec. 9.6"->{
  Cell[257822, 7708, 73, 1, 40, "Subtitle",
   CellTags->{"Sec. 9.6", "c:26"}]},
 "c:26"->{
  Cell[257822, 7708, 73, 1, 40, "Subtitle",
   CellTags->{"Sec. 9.6", "c:26"}]},
 "i:43"->{
  Cell[257939, 7715, 178, 8, 52, "Subsubtitle",
   CellTags->{"i:43", "c:27"}]},
 "c:27"->{
  Cell[257939, 7715, 178, 8, 52, "Subsubtitle",
   CellTags->{"i:43", "c:27"}]},
 "Cell 9.70"->{
  Cell[259306, 7778, 237, 8, 124575, "Input",
   CellTags->"Cell 9.70"],
  Cell[259546, 7788, 9412, 161, 569325, "Output",
   CellTags->"Cell 9.70"]},
 "i:44"->{
  Cell[270021, 7983, 437, 15, 80608, "Text",
   CellTags->"i:44"]},
 "Cell 9.71"->{
  Cell[270483, 8002, 358, 12, 2246, "Input",
   CellTags->"Cell 9.71"],
  Cell[270844, 8016, 9284, 157, 11038, "Output",
   CellTags->"Cell 9.71"]},
 "i:133"->{
  Cell[280143, 8176, 1135, 45, 2020, "Text",
   CellTags->"i:133"]},
 "Cell 9.72"->{
  Cell[284575, 8346, 1546, 38, 4965, "Input",
   CellTags->"Cell 9.72"],
  Cell[286124, 8386, 9998, 176, 11633, "Output",
   CellTags->"Cell 9.72"]},
 "i:ginsp"->{
  Cell[296137, 8565, 980, 23, 2020, "Text",
   CellTags->"i:ginsp"]},
 "i:45"->{
  Cell[297154, 8593, 178, 8, 35, "Subsubtitle",
   CellTags->{"i:45", "c:28"}]},
 "c:28"->{
  Cell[297154, 8593, 178, 8, 35, "Subsubtitle",
   CellTags->{"i:45", "c:28"}]},
 "Cell 9.73"->{
  Cell[297821, 8624, 408, 14, 2246, "Input",
   CellTags->"Cell 9.73"],
  Cell[298232, 8640, 9875, 174, 11831, "Output",
   CellTags->"Cell 9.73"]},
 "i:46"->{
  Cell[308156, 8820, 99, 1, 35, "Subsubtitle",
   CellTags->{"i:46", "c:29"}]},
 "c:29"->{
  Cell[308156, 8820, 99, 1, 35, "Subsubtitle",
   CellTags->{"i:46", "c:29"}]},
 "Cell 9.74"->{
  Cell[309320, 8864, 798, 24, 2932, "Input",
   CellTags->"Cell 9.74"],
  Cell[310121, 8890, 18522, 311, 10428, "Output",
   CellTags->"Cell 9.74"]},
 "directive"->{
  Cell[329385, 9230, 576, 14, 2843, "Text",
   CellTags->"directive"]},
 "Cell 9.75"->{
  Cell[330375, 9264, 136, 4, 2246, "Input",
   CellTags->"Cell 9.75"],
  Cell[330514, 9270, 28003, 473, 11831, "Output",
   CellTags->"Cell 9.75"]},
 "Table 9.11"->{
  Cell[359070, 9769, 3678, 120, 5250, "Text",
   CellTags->"Table 9.11"]},
 "i:47"->{
  Cell[362785, 9894, 183, 8, 35, "Subsubtitle",
   CellTags->{"i:47", "c:30"}]},
 "c:30"->{
  Cell[362785, 9894, 183, 8, 35, "Subsubtitle",
   CellTags->{"i:47", "c:30"}]},
 "Cell 9.76"->{
  Cell[363492, 9924, 327, 11, 124575, "Input",
   CellTags->"Cell 9.76"],
  Cell[363822, 9937, 880, 25, 120501, "Output",
   CellTags->"Cell 9.76"]},
 "Cell 9.77"->{
  Cell[364975, 9979, 211, 6, 124575, "Input",
   CellTags->"Cell 9.77"],
  Cell[365189, 9987, 487, 11, 594012, "Output",
   CellTags->"Cell 9.77"]},
 "Cell 9.78"->{
  Cell[366209, 10021, 311, 9, 124575, "Input",
   CellTags->"Cell 9.78"],
  Cell[366523, 10032, 3328, 87, 622460, "Output",
   CellTags->"Cell 9.78"]},
 "i:50"->{
  Cell[370246, 10138, 74, 1, 35, "Subsubtitle",
   CellTags->{"i:50", "c:31"}]},
 "c:31"->{
  Cell[370246, 10138, 74, 1, 35, "Subsubtitle",
   CellTags->{"i:50", "c:31"}]},
 "i:51"->{
  Cell[370323, 10141, 936, 32, 112063, "Text",
   CellTags->"i:51"]},
 "Cell 9.79"->{
  Cell[373469, 10260, 409, 13, 124575, "Input",
   CellTags->"Cell 9.79"],
  Cell[373881, 10275, 22668, 379, 913438, "Output",
   CellTags->"Cell 9.79"]},
 "i:119"->{
  Cell[396564, 10657, 443, 17, 45902, "Text",
   CellTags->"i:119"]},
 "Cell 9.80"->{
  Cell[398160, 10721, 839, 27, 162696, "Input",
   CellTags->"Cell 9.80"],
  Cell[399002, 10750, 33917, 562, 940078, "Output",
   CellTags->"Cell 9.80"]},
 "Table 9.12"->{
  Cell[433229, 11330, 4106, 137, 286840, "Text",
   CellTags->"Table 9.12"]},
 "c:32"->{
  Cell[437773, 11483, 56, 1, 35, "Subsubtitle",
   CellTags->"c:32"]},
 "i:48"->{
  Cell[437832, 11486, 716, 23, 80608, "Text",
   CellTags->"i:48"]},
 "Cell 9.81"->{
  Cell[438573, 11513, 355, 11, 124575, "Input",
   CellTags->"Cell 9.81"],
  Cell[438931, 11526, 131496, 2151, 756712, "Output",
   CellTags->"Cell 9.81"]},
 "i:53"->{
  Cell[570442, 13680, 592, 19, 112063, "Text",
   CellTags->"i:53"]},
 "Cell 9.82"->{
  Cell[572603, 13753, 876, 25, 162696, "Input",
   CellTags->"Cell 9.82"],
  Cell[573482, 13780, 278631, 4584, 756712, "Output",
   CellTags->"Cell 9.82"]},
 "i:49"->{
  Cell[852128, 18367, 639, 20, 112063, "Text",
   CellTags->"i:49"]},
 "Cell 9.83"->{
  Cell[852792, 18391, 513, 13, 124575, "Input",
   CellTags->"Cell 9.83"],
  Cell[853308, 18406, 290784, 4840, 915556, "Output",
   CellTags->"Cell 9.83"]},
 "i:56"->{
  Cell[1150913, 23461, 68, 1, 35, "Subsubtitle",
   CellTags->{"i:56", "c:33"}]},
 "c:33"->{
  Cell[1150913, 23461, 68, 1, 35, "Subsubtitle",
   CellTags->{"i:56", "c:33"}]},
 "Cell 9.84"->{
  Cell[1151763, 23490, 619, 19, 100, "Input",
   CellTags->"Cell 9.84"],
  Cell[1152385, 23511, 130120, 2188, 1288, "Output",
   CellTags->"Cell 9.84"]},
 "ListAnimate"->{
  Cell[1282520, 25702, 425, 10, 65, "Text",
   CellTags->"ListAnimate"]},
 "Cell 9.85"->{
  Cell[1282970, 25716, 261, 5, 100, "Input",
   CellTags->"Cell 9.85"],
  Cell[1283234, 25723, 135694, 2301, 622, "Output",
   CellTags->"Cell 9.85"]},
 "Animate"->{
  Cell[1420109, 28059, 473, 16, 65, "Text",
   CellTags->"Animate"]},
 "i:manip"->{
  Cell[1420939, 28092, 278, 12, 77, "Text",
   CellTags->"i:manip"],
  Cell[1421220, 28106, 789, 28, 90, "Text",
   CellTags->"i:manip"]},
 "Cell 9.86"->{
  Cell[1422012, 28136, 697, 15, 100, "Input",
   CellTags->"Cell 9.86"]},
 "Cell 9.87"->{
  Cell[1422734, 28155, 568, 17, 131, "Input",
   CellTags->"Cell 9.87"],
  Cell[1423305, 28174, 1867, 39, 622, "Output",
   CellTags->"Cell 9.87"]},
 "i:dyn"->{
  Cell[1428209, 28310, 1019, 31, 90, "Text",
   CellTags->"i:dyn"]},
 "Cell 9.88"->{
  Cell[1429253, 28345, 821, 24, 160, "Input",
   CellTags->"Cell 9.88"],
  Cell[1430077, 28371, 1882, 41, 645, "Output",
   CellTags->"Cell 9.88"]},
 "Cell 9.89"->{
  Cell[1435020, 28493, 444, 14, 100, "Input",
   CellTags->"Cell 9.89"],
  Cell[1435489, 28511, 5786, 101, 456, "Print",
   CellTags->"Cell 9.89"],
  Cell[1441278, 28614, 5879, 102, 445, "Print",
   CellTags->"Cell 9.89"],
  Cell[1447160, 28718, 9324, 159, 453, "Print",
   CellTags->"Cell 9.89"],
  Cell[1456487, 28879, 11459, 194, 453, "Print",
   CellTags->"Cell 9.89"],
  Cell[1467949, 29075, 12057, 204, 453, "Print",
   CellTags->"Cell 9.89"],
  Cell[1480009, 29281, 15037, 252, 453, "Print",
   CellTags->"Cell 9.89"],
  Cell[1495049, 29535, 15367, 258, 453, "Print",
   CellTags->"Cell 9.89"],
  Cell[1510419, 29795, 16961, 284, 453, "Print",
   CellTags->"Cell 9.89"],
  Cell[1527383, 30081, 19124, 319, 453, "Print",
   CellTags->"Cell 9.89"],
  Cell[1546510, 30402, 19259, 322, 453, "Print",
   CellTags->"Cell 9.89"]},
 "asg"->{
  Cell[1565796, 30728, 938, 18, 140, "Text",
   CellTags->"asg"]},
 "i:57"->{
  Cell[1567203, 30768, 166, 2, 52, "Subsubtitle",
   CellTags->{"i:57", "c:34"}]},
 "c:34"->{
  Cell[1567203, 30768, 166, 2, 52, "Subsubtitle",
   CellTags->{"i:57", "c:34"}]},
 "Cell 9.90"->{
  Cell[1569206, 30823, 658, 21, 2746, "Input",
   CellTags->"Cell 9.90"],
  Cell[1569867, 30846, 26490, 451, 4931, "Output",
   CellTags->"Cell 9.90"]},
 "Cell 9.91"->{
  Cell[1598809, 31365, 221, 6, 2316, "Input",
   CellTags->"Cell 9.91"]},
 "Cell 9.92"->{
  Cell[1599198, 31378, 288, 6, 1438, "Input",
   CellTags->"Cell 9.92"],
  Cell[1599489, 31386, 108, 2, 932, "Output",
   CellTags->"Cell 9.92"],
  Cell[2210983, 47504, 1144, 36, 950, "Input",
   CellTags->"Cell 9.92"],
  Cell[2212130, 47542, 14335, 248, 1650, "Output",
   CellTags->"Cell 9.92"]},
 "Cell 9.93"->{
  Cell[1600300, 31413, 168, 4, 1438, "Input",
   CellTags->"Cell 9.93"],
  Cell[1600471, 31419, 703, 13, 1553, "Message",
   CellTags->"Cell 9.93"]},
 "i:120"->{
  Cell[1601189, 31435, 753, 22, 1293, "Text",
   CellTags->"i:120"]},
 "Cell 9.94"->{
  Cell[1601967, 31461, 286, 6, 1438, "Input",
   CellTags->"Cell 9.94"],
  Cell[1602256, 31469, 113, 2, 932, "Output",
   CellTags->"Cell 9.94"]},
 "Cell 9.95"->{
  Cell[1603119, 31496, 209, 4, 1438, "Input",
   CellTags->"Cell 9.95"],
  Cell[1603331, 31502, 94, 2, 932, "Output",
   CellTags->"Cell 9.95"]},
 "Cell 9.96"->{
  Cell[1603874, 31520, 150, 3, 1438, "Input",
   CellTags->"Cell 9.96"],
  Cell[1604027, 31525, 264, 6, 932, "Output",
   CellTags->"Cell 9.96"]},
 "i:114"->{
  Cell[1604702, 31548, 830, 22, 1293, "Text",
   CellTags->"i:114"]},
 "i:compd"->{
  Cell[1605929, 31589, 753, 22, 1293, "Text",
   CellTags->"i:compd"]},
 "Cell 9.97"->{
  Cell[1606707, 31615, 280, 6, 1438, "Input",
   CellTags->"Cell 9.97"],
  Cell[1606990, 31623, 283, 5, 2118, "Output",
   CellTags->"Cell 9.97"],
  Cell[1619104, 32059, 1444, 25, 522, "Print",
   CellTags->{"Cell 9.97", "Info3446487969-5429238"}]},
 "Ex. 9.6"->{
  Cell[1607322, 31634, 77, 1, 35, "Subsubtitle",
   CellTags->{"Ex. 9.6", "c:35"}],
  Cell[1607402, 31637, 559, 20, 89651, "Text",
   CellTags->"Ex. 9.6"]},
 "c:35"->{
  Cell[1607322, 31634, 77, 1, 35, "Subsubtitle",
   CellTags->{"Ex. 9.6", "c:35"}]},
 "i:59"->{
  Cell[1608859, 31688, 1151, 42, 146863, "Text",
   CellTags->"i:59"]},
 "i:60"->{
  Cell[1610361, 31747, 363, 14, 45902, "Text",
   CellTags->"i:60"]},
 "i:58"->{
  Cell[1612623, 31833, 1427, 51, 120501, "Text",
   CellTags->"i:58"]},
 "i:52"->{
  Cell[1614053, 31886, 1990, 70, 142596, "Text",
   CellTags->"i:52"]},
 "Sec. 9.7"->{
  Cell[1617285, 32002, 141, 6, 40, "Subtitle",
   CellTags->{"Sec. 9.7", "c:36"}]},
 "c:36"->{
  Cell[1617285, 32002, 141, 6, 40, "Subtitle",
   CellTags->{"Sec. 9.7", "c:36"}]},
 "i:122"->{
  Cell[1618600, 32037, 377, 13, 196, "Text",
   CellTags->"i:122"]},
 "Cell 9.98"->{
  Cell[1619002, 32054, 99, 3, 303, "Input",
   CellTags->"Cell 9.98"]},
 "Info3446487969-5429238"->{
  Cell[1619104, 32059, 1444, 25, 522, "Print",
   CellTags->{"Cell 9.97", "Info3446487969-5429238"}]},
 "Cell 9.99"->{
  Cell[1620760, 32093, 208, 7, 303, "Input",
   CellTags->"Cell 9.99"],
  Cell[1621161, 32113, 133, 2, 245, "Print",
   CellTags->{"Cell 9.99", "Info3446488069-9932704"}],
  Cell[1621297, 32117, 861, 24, 127, "Print",
   CellTags->{"Cell 9.99", "Info3446488069-9932704"}]},
 "Cell 9.100"->{
  Cell[1621046, 32106, 90, 3, 303, "Input",
   CellTags->"Cell 9.100"],
  Cell[1622534, 32159, 1059, 31, 321, "Print",
   CellTags->"Cell 9.100"]},
 "Info3446488069-9932704"->{
  Cell[1621161, 32113, 133, 2, 245, "Print",
   CellTags->{"Cell 9.99", "Info3446488069-9932704"}],
  Cell[1621297, 32117, 861, 24, 127, "Print",
   CellTags->{"Cell 9.99", "Info3446488069-9932704"}]},
 "i:121"->{
  Cell[1622185, 32145, 224, 5, 196, "Text",
   CellTags->"i:121"]},
 "Cell 9.101"->{
  Cell[1622434, 32154, 97, 3, 303, "Input",
   CellTags->"Cell 9.101"],
  Cell[1626128, 32268, 568, 10, 135, "Message",
   CellTags->"Cell 9.101"],
  Cell[1626699, 32280, 134, 4, 266, "Output",
   CellTags->"Cell 9.101"]},
 "i:61"->{
  Cell[1624016, 32207, 654, 21, 196, "Text",
   CellTags->"i:61"]},
 "Cell 9.102"->{
  Cell[1625980, 32261, 145, 5, 303, "Input",
   CellTags->"Cell 9.102"],
  Cell[1812712, 35914, 139, 3, 197, "Output",
   CellTags->"Cell 9.102"]},
 "i:wlfa"->{
  Cell[1627270, 32303, 2413, 46, 425, "Text",
   CellTags->"i:wlfa"]},
 "Cell 9.103"->{
  Cell[1629708, 32353, 25365, 443, 538, "WolframAlphaShortInput",
   CellTags->"Cell 9.103"],
  Cell[1655076, 32798, 18769, 314, 1453, "Output",
   CellTags->"Cell 9.103"],
  Cell[1813508, 35950, 436, 13, 262, "Output",
   CellTags->"Cell 9.103"]},
 "Cell 9.104"->{
  Cell[1674106, 33123, 55640, 1189, 432, "WolframAlphaShortInput",
   CellTags->"Cell 9.104"],
  Cell[1814089, 35973, 222, 6, 228, "Output",
   CellTags->"Cell 9.104"]},
 "Cell 9.105"->{
  Cell[1730992, 34363, 76746, 1414, 432, "WolframAlphaShortInput",
   CellTags->"Cell 9.105"],
  Cell[1814885, 36004, 287, 9, 262, "Output",
   CellTags->"Cell 9.105"]},
 "Sec. 9.8"->{
  Cell[1812129, 35888, 73, 1, 40, "Subtitle",
   CellTags->{"Sec. 9.8", "c:37"}]},
 "c:37"->{
  Cell[1812129, 35888, 73, 1, 40, "Subtitle",
   CellTags->{"Sec. 9.8", "c:37"}]},
 "c:38"->{
  Cell[1812246, 35895, 72, 1, 65, "Subsubtitle",
   CellTags->"c:38"]},
 "Cell 9.106"->{
  Cell[1812557, 35907, 152, 5, 303, "Input",
   CellTags->"Cell 9.106"],
  Cell[1815699, 36036, 277, 9, 401, "Output",
   CellTags->"Cell 9.106"]},
 "i:62"->{
  Cell[1812866, 35920, 285, 12, 112, "Text",
   CellTags->"i:62"]},
 "Cell 9.107"->{
  Cell[1813176, 35936, 329, 12, 303, "Input",
   CellTags->"Cell 9.107"],
  Cell[1816290, 36063, 391, 13, 370, "Output",
   CellTags->"Cell 9.107"]},
 "Cell 9.108"->{
  Cell[1813981, 35968, 105, 3, 303, "Input",
   CellTags->"Cell 9.108"],
  Cell[1817288, 36103, 199, 5, 228, "Output",
   CellTags->"Cell 9.108"],
  Cell[1817490, 36110, 281, 9, 262, "Output",
   CellTags->"Cell 9.108"]},
 "i:63"->{
  Cell[1814326, 35982, 426, 13, 196, "Text",
   CellTags->"i:63"]},
 "Cell 9.109"->{
  Cell[1814777, 35999, 105, 3, 303, "Input",
   CellTags->"Cell 9.109"],
  Cell[1818847, 36159, 146, 3, 197, "Output",
   CellTags->"Cell 9.109"]},
 "Cell 9.110"->{
  Cell[1815411, 36024, 285, 10, 303, "Input",
   CellTags->"Cell 9.110"],
  Cell[1823290, 36304, 97, 2, 197, "Output",
   CellTags->"Cell 9.110"]},
 "Cell 9.111"->{
  Cell[1816180, 36058, 107, 3, 303, "Input",
   CellTags->"Cell 9.111"],
  Cell[1824597, 36356, 108, 3, 228, "Output",
   CellTags->"Cell 9.111"]},
 "Cell 9.112"->{
  Cell[1817004, 36094, 281, 7, 487, "Input",
   CellTags->"Cell 9.112"],
  Cell[1829205, 36529, 174, 5, 228, "Output",
   CellTags->"Cell 9.112"]},
 "i:64"->{
  Cell[1817786, 36122, 723, 21, 272, "Text",
   CellTags->"i:64"]},
 "Cell 9.113"->{
  Cell[1818534, 36147, 310, 10, 303, "Input",
   CellTags->"Cell 9.113"],
  Cell[1829661, 36551, 96, 2, 197, "Output",
   CellTags->"Cell 9.113"]},
 "Table 9.14"->{
  Cell[1819413, 36176, 2934, 87, 1018, "Text",
   CellTags->"Table 9.14"]},
 "c:39"->{
  Cell[1822384, 36268, 59, 1, 43, "Subsubtitle",
   CellTags->"c:39"]},
 "i:65"->{
  Cell[1822446, 36271, 663, 22, 218, "Text",
   CellTags->"i:65"]},
 "Cell 9.114"->{
  Cell[1823134, 36297, 153, 5, 303, "Input",
   CellTags->"Cell 9.114"],
  Cell[1830970, 36603, 118, 3, 228, "Output",
   CellTags->"Cell 9.114"]},
 "Cell 9.115"->{
  Cell[1824293, 36344, 301, 10, 303, "Input",
   CellTags->"Cell 9.115"],
  Cell[1831389, 36623, 122, 3, 197, "Output",
   CellTags->"Cell 9.115"]},
 "Table 9.15"->{
  Cell[1824883, 36370, 2835, 95, 418, "Text",
   CellTags->"Table 9.15"]},
 "i:19"->{
  Cell[1827755, 36470, 76, 1, 43, "Subsubtitle",
   CellTags->{"i:19", "c:40"}]},
 "c:40"->{
  Cell[1827755, 36470, 76, 1, 43, "Subsubtitle",
   CellTags->{"i:19", "c:40"}]},
 "c:41"->{
  Cell[1827856, 36475, 63, 1, 187, "Section",
   CellTags->"c:41"]},
 "Cell 9.116"->{
  Cell[1828992, 36520, 210, 7, 303, "Input",
   CellTags->"Cell 9.116"]},
 "Cell 9.117"->{
  Cell[1829558, 36546, 100, 3, 303, "Input",
   CellTags->"Cell 9.117"],
  Cell[1834803, 36764, 93, 2, 197, "Output",
   CellTags->"Cell 9.117"]},
 "i:66"->{
  Cell[1829772, 36556, 1014, 36, 272, "Text",
   CellTags->"i:66"]},
 "Cell 9.118"->{
  Cell[1830811, 36596, 156, 5, 303, "Input",
   CellTags->"Cell 9.118"],
  Cell[1835207, 36784, 95, 2, 197, "Output",
   CellTags->"Cell 9.118"]},
 "Cell 9.119"->{
  Cell[1831286, 36618, 100, 3, 303, "Input",
   CellTags->"Cell 9.119"]},
 "Cell 9.120"->{
  Cell[1834109, 36735, 393, 12, 487, "Input",
   CellTags->"Cell 9.120"]},
 "Cell 9.121"->{
  Cell[1834700, 36759, 100, 3, 303, "Input",
   CellTags->"Cell 9.121"]},
 "Cell 9.122"->{
  Cell[1835104, 36779, 100, 3, 303, "Input",
   CellTags->"Cell 9.122"],
  Cell[1845194, 37160, 752, 13, 135, "Message",
   CellTags->"Cell 9.122"],
  Cell[1845949, 37175, 259, 8, 197, "Output",
   CellTags->"Cell 9.122"]},
 "c:42"->{
  Cell[1835351, 36792, 75, 1, 135, "Section",
   CellTags->"c:42"]},
 "Cell 9.123"->{
  Cell[1835908, 36814, 90, 3, 303, "Input",
   CellTags->"Cell 9.123"]},
 "i:67"->{
  Cell[1837879, 36894, 78, 1, 135, "Section",
   CellTags->{"i:67", "c:43"}]},
 "c:43"->{
  Cell[1837879, 36894, 78, 1, 135, "Section",
   CellTags->{"i:67", "c:43"}]},
 "Cell 9.124"->{
  Cell[1838353, 36911, 370, 12, 395, "Input",
   CellTags->"Cell 9.124"],
  Cell[1848628, 37271, 13991, 236, 1456, "Output",
   CellTags->"Cell 9.124"]},
 "c:44"->{
  Cell[1841138, 37006, 66, 1, 43, "Subsubtitle",
   CellTags->"c:44"]},
 "i:68"->{
  Cell[1844241, 37128, 89, 1, 43, "Subsubtitle",
   CellTags->{"i:68", "c:45"}]},
 "c:45"->{
  Cell[1844241, 37128, 89, 1, 43, "Subsubtitle",
   CellTags->{"i:68", "c:45"}]},
 "Cell 9.125"->{
  Cell[1845096, 37156, 95, 2, 303, "Input",
   CellTags->"Cell 9.125"]},
 "Cell 9.126"->{
  Cell[1847629, 37233, 305, 10, 303, "Input",
   CellTags->"Cell 9.126"]},
 "Cell 9.127"->{
  Cell[1848525, 37266, 100, 3, 303, "Input",
   CellTags->"Cell 9.127"],
  Cell[1869967, 37784, 73, 2, 126, "Output",
   CellTags->"Cell 9.127"],
  Cell[1871025, 37824, 1500, 31, 618, "Output",
   CellTags->"Cell 9.127"]},
 "Table 9.17"->{
  Cell[1863057, 37528, 3745, 128, 418, "Text",
   CellTags->"Table 9.17"]},
 "i:69"->{
  Cell[1866839, 37661, 100, 1, 43, "Subsubtitle",
   CellTags->{"i:69", "c:46"}]},
 "c:46"->{
  Cell[1866839, 37661, 100, 1, 43, "Subsubtitle",
   CellTags->{"i:69", "c:46"}]},
 "i:123"->{
  Cell[1866942, 37664, 333, 10, 47, "Text",
   CellTags->"i:123"]},
 "(9.8.1)"->{
  Cell[1867278, 37676, 558, 26, 93, "NE2",
   CellTags->{"(9.8.1)", "i:106"}]},
 "i:106"->{
  Cell[1867278, 37676, 558, 26, 93, "NE2",
   CellTags->{"(9.8.1)", "i:106"}]},
 "Cell 9.128"->{
  Cell[1868136, 37715, 370, 11, 163, "Input",
   CellTags->"Cell 9.128"],
  Cell[1880172, 38110, 98, 2, 82, "Output",
   CellTags->"Cell 9.128"]},
 "Cell 9.129"->{
  Cell[1869808, 37777, 156, 5, 125, "Input",
   CellTags->"Cell 9.129"],
  Cell[1883219, 38212, 1710, 51, 222, "Output",
   CellTags->"Cell 9.129"]},
 "Cell 9.130"->{
  Cell[1870653, 37811, 369, 11, 125, "Input",
   CellTags->"Cell 9.130"]},
 "i:111"->{
  Cell[1872731, 37866, 6417, 197, 578, "Text",
   CellTags->{"i:111", "Table 9.18"}]},
 "Table 9.18"->{
  Cell[1872731, 37866, 6417, 197, 578, "Text",
   CellTags->{"i:111", "Table 9.18"}]},
 "i:80"->{
  Cell[1879151, 38065, 800, 33, 81, "Text",
   CellTags->"i:80"]},
 "Cell 9.131"->{
  Cell[1879976, 38102, 193, 6, 163, "Input",
   CellTags->"Cell 9.131"],
  Cell[1895401, 38727, 234, 6, 275, "Output",
   CellTags->"Cell 9.131"]},
 "i:Piecewise"->{
  Cell[1880524, 38122, 2015, 64, 190, "Text",
   CellTags->"i:Piecewise"]},
 "Cell 9.132"->{
  Cell[1882564, 38190, 652, 20, 163, "Input",
   CellTags->"Cell 9.132"],
  Cell[1896176, 38761, 210, 6, 275, "Output",
   CellTags->"Cell 9.132"]},
 "Ex. 9.8"->{
  Cell[1884978, 38269, 77, 1, 43, "Subsubtitle",
   CellTags->{"Ex. 9.8", "c:47"}]},
 "c:47"->{
  Cell[1884978, 38269, 77, 1, 43, "Subsubtitle",
   CellTags->{"Ex. 9.8", "c:47"}]},
 "Sec. 9.9"->{
  Cell[1893577, 38653, 65, 1, 40, "Subtitle",
   CellTags->{"Sec. 9.9", "c:48"}]},
 "c:48"->{
  Cell[1893577, 38653, 65, 1, 40, "Subtitle",
   CellTags->{"Sec. 9.9", "c:48"}]},
 "i:70"->{
  Cell[1893686, 38660, 69, 1, 65, "Subsubtitle",
   CellTags->{"i:70", "c:49"}]},
 "c:49"->{
  Cell[1893686, 38660, 69, 1, 65, "Subsubtitle",
   CellTags->{"i:70", "c:49"}]},
 "Cell 9.133"->{
  Cell[1895012, 38714, 386, 11, 395, "Input",
   CellTags->"Cell 9.133"],
  Cell[1896620, 38780, 435, 14, 275, "Output",
   CellTags->"Cell 9.133"]},
 "Cell 9.134"->{
  Cell[1896055, 38755, 118, 4, 303, "Input",
   CellTags->"Cell 9.134"],
  Cell[1898074, 38841, 1178, 37, 453, "Output",
   CellTags->"Cell 9.134"]},
 "Cell 9.135"->{
  Cell[1896498, 38774, 119, 4, 303, "Input",
   CellTags->"Cell 9.135"],
  Cell[1900454, 38922, 536, 19, 383, "Output",
   CellTags->"Cell 9.135"]},
 "Cell 9.136"->{
  Cell[1897828, 38831, 243, 8, 303, "Input",
   CellTags->"Cell 9.136"],
  Cell[1901298, 38956, 344, 12, 363, "Output",
   CellTags->"Cell 9.136"]},
 "Cell 9.137"->{
  Cell[1900191, 38911, 260, 9, 303, "Input",
   CellTags->"Cell 9.137"]},
 "Cell 9.138"->{
  Cell[1901190, 38951, 105, 3, 303, "Input",
   CellTags->"Cell 9.138"],
  Cell[1907844, 39218, 680, 23, 332, "Output",
   CellTags->"Cell 9.138"],
  Cell[1910669, 39328, 807, 28, 332, "Output",
   CellTags->"Cell 9.138"]},
 "i:71"->{
  Cell[1902782, 39026, 70, 1, 43, "Subsubtitle",
   CellTags->{"i:71", "c:50"}]},
 "c:50"->{
  Cell[1902782, 39026, 70, 1, 43, "Subsubtitle",
   CellTags->{"i:71", "c:50"}]},
 "(9.9.1)"->{
  Cell[1903301, 39045, 1114, 39, 197, "NE3",
   CellTags->"(9.9.1)"]},
 "i:116"->{
  Cell[1904418, 39086, 1115, 38, 272, "Text",
   CellTags->"i:116"]},
 "i:76"->{
  Cell[1906748, 39173, 796, 30, 428, "Text",
   CellTags->"i:76"]},
 "Cell 9.139"->{
  Cell[1907569, 39207, 272, 9, 303, "Input",
   CellTags->"Cell 9.139"],
  Cell[1911927, 39379, 524, 10, 135, "Message",
   CellTags->"Cell 9.139"],
  Cell[1912454, 39391, 131, 2, 197, "Output",
   CellTags->"Cell 9.139"]},
 "Cell 9.140"->{
  Cell[1910489, 39320, 177, 6, 303, "Input",
   CellTags->"Cell 9.140"],
  Cell[1913080, 39417, 292, 10, 332, "Output",
   CellTags->"Cell 9.140"]},
 "Cell 9.141"->{
  Cell[1911799, 39373, 125, 4, 303, "Input",
   CellTags->"Cell 9.141"],
  Cell[1914711, 39480, 8225, 142, 1547, "Output",
   CellTags->"Cell 9.141"]},
 "i:77"->{
  Cell[1912600, 39396, 347, 12, 196, "Text",
   CellTags->"i:77"]},
 "Cell 9.142"->{
  Cell[1912972, 39412, 105, 3, 303, "Input",
   CellTags->"Cell 9.142"],
  Cell[1925358, 39714, 1008, 34, 343, "Output",
   CellTags->"Cell 9.142"]},
 "Cell 9.143"->{
  Cell[1913829, 39450, 879, 28, 395, "Input",
   CellTags->"Cell 9.143"],
  Cell[1927390, 39791, 155, 4, 82, "Output",
   CellTags->"Cell 9.143"]},
 "i:117"->{
  Cell[1922951, 39625, 1345, 44, 462, "Text",
   CellTags->"i:117"]},
 "Cell 9.144"->{
  Cell[1925029, 39701, 326, 11, 343, "Input",
   CellTags->"Cell 9.144"],
  Cell[1927844, 39809, 125, 3, 82, "Output",
   CellTags->"Cell 9.144"]},
 "i:72"->{
  Cell[1926415, 39754, 69, 1, 43, "Subsubtitle",
   CellTags->{"i:72", "c:51"}]},
 "c:51"->{
  Cell[1926415, 39754, 69, 1, 43, "Subsubtitle",
   CellTags->{"i:72", "c:51"}]},
 "i:74"->{
  Cell[1926487, 39757, 712, 23, 126, "Text",
   CellTags->"i:74"]},
 "Cell 9.145"->{
  Cell[1927224, 39784, 163, 5, 125, "Input",
   CellTags->"Cell 9.145"],
  Cell[1928838, 39850, 98, 2, 82, "Output",
   CellTags->"Cell 9.145"]},
 "Cell 9.146"->{
  Cell[1927718, 39803, 123, 4, 125, "Input",
   CellTags->"Cell 9.146"]},
 "Cell 9.147"->{
  Cell[1928562, 39839, 273, 9, 125, "Input",
   CellTags->"Cell 9.147"],
  Cell[1930148, 39899, 424, 11, 150, "Output",
   CellTags->"Cell 9.147"]},
 "Cell 9.148"->{
  Cell[1929836, 39887, 309, 10, 125, "Input",
   CellTags->"Cell 9.148"],
  Cell[1932554, 39973, 152, 3, 82, "Output",
   CellTags->"Cell 9.148"],
  Cell[1932709, 39978, 257, 7, 126, "Output",
   CellTags->"Cell 9.148"]},
 "Cell 9.149"->{
  Cell[1932220, 39962, 331, 9, 200, "Input",
   CellTags->"Cell 9.149"],
  Cell[1934344, 40028, 344, 10, 135, "Output",
   CellTags->"Cell 9.149"]},
 "Cell 9.150"->{
  Cell[1934033, 40016, 308, 10, 125, "Input",
   CellTags->"Cell 9.150"]},
 "Ex. 9.9"->{
  Cell[1939304, 40193, 77, 1, 43, "Subsubtitle",
   CellTags->{"Ex. 9.9", "c:52"}]},
 "c:52"->{
  Cell[1939304, 40193, 77, 1, 43, "Subsubtitle",
   CellTags->{"Ex. 9.9", "c:52"}]},
 "i:118"->{
  Cell[1947380, 40532, 86, 1, 112, "Text",
   CellTags->"i:118"]},
 "Sec. 9.10"->{
  Cell[1947515, 40539, 107, 1, 40, "Subtitle",
   CellTags->{"Sec. 9.10", "i:99", "c:53"}]},
 "i:99"->{
  Cell[1947515, 40539, 107, 1, 40, "Subtitle",
   CellTags->{"Sec. 9.10", "i:99", "c:53"}]},
 "c:53"->{
  Cell[1947515, 40539, 107, 1, 40, "Subtitle",
   CellTags->{"Sec. 9.10", "i:99", "c:53"}]},
 "i:83"->{
  Cell[1947666, 40546, 263, 12, 126, "Subsubtitle",
   CellTags->{"i:83", "c:54"}]},
 "c:54"->{
  Cell[1947666, 40546, 263, 12, 126, "Subsubtitle",
   CellTags->{"i:83", "c:54"}]},
 "c:55"->{
  Cell[1947954, 40562, 71, 1, 150, "Section",
   CellTags->"c:55"]},
 "i:81"->{
  Cell[1948575, 40586, 629, 30, 112, "Text",
   CellTags->"i:81"]},
 "i:78"->{
  Cell[1949520, 40628, 1601, 57, 425, "Text",
   CellTags->"i:78"]},
 "Cell 9.151"->{
  Cell[1952215, 40723, 312, 10, 303, "Input",
   CellTags->"Cell 9.151"]},
 "Cell 9.152"->{
  Cell[1953192, 40759, 250, 8, 303, "Input",
   CellTags->"Cell 9.152"],
  Cell[1954159, 40796, 1399, 49, 577, "Output",
   CellTags->"Cell 9.152"]},
 "Cell 9.153"->{
  Cell[1953882, 40785, 274, 9, 303, "Input",
   CellTags->"Cell 9.153"]},
 "Cell 9.154"->{
  Cell[1956386, 40877, 100, 3, 303, "Input",
   CellTags->"Cell 9.154"]},
 "i:82"->{
  Cell[1957408, 40909, 464, 13, 196, "Text",
   CellTags->"i:82"]},
 "Cell 9.155"->{
  Cell[1957897, 40926, 275, 9, 303, "Input",
   CellTags->"Cell 9.155"]},
 "c:56"->{
  Cell[1959128, 40967, 76, 1, 108, "Section",
   CellTags->"c:56"]},
 "(9.10.1)"->{
  Cell[1960078, 41015, 512, 22, 220, "NE4",
   CellTags->"(9.10.1)"]},
 "Cell 9.156"->{
  Cell[1960661, 41043, 468, 15, 243, "Input",
   CellTags->"Cell 9.156"]},
 "i:107"->{
  Cell[1963478, 41156, 810, 22, 277, "Text",
   CellTags->"i:107"]},
 "Cell 9.157"->{
  Cell[1966181, 41254, 206, 7, 316, "Input",
   CellTags->"Cell 9.157"]},
 "Cell 9.158"->{
  Cell[1966658, 41273, 688, 22, 243, "Input",
   CellTags->"Cell 9.158"]},
 "Cell 9.159"->{
  Cell[1967542, 41301, 529, 17, 243, "Input",
   CellTags->"Cell 9.159"]},
 "Cell 9.160"->{
  Cell[1968208, 41325, 413, 13, 316, "Input",
   CellTags->"Cell 9.160"],
  Cell[1970567, 41404, 671, 15, 1243, "Output",
   CellTags->"Cell 9.160"]},
 "Cell 9.161"->{
  Cell[1969619, 41374, 945, 28, 462, "Input",
   CellTags->"Cell 9.161"]},
 "c:57"->{
  Cell[1972063, 41448, 83, 1, 108, "Section",
   CellTags->"c:57"]},
 "Cell 9.162"->{
  Cell[1974164, 41525, 661, 22, 316, "Input",
   CellTags->"Cell 9.162"]},
 "i:85"->{
  Cell[1974888, 41553, 342, 10, 157, "Text",
   CellTags->"i:85"]},
 "Cell 9.163"->{
  Cell[1975255, 41567, 366, 12, 243, "Input",
   CellTags->"Cell 9.163"]},
 "c:58"->{
  Cell[1976476, 41620, 57, 1, 108, "Section",
   CellTags->"c:58"]},
 "i:110"->{
  Cell[1976536, 41623, 812, 32, 218, "Text",
   CellTags->"i:110"]},
 "Cell 9.164"->{
  Cell[1977888, 41682, 490, 14, 316, "Input",
   CellTags->"Cell 9.164"],
  Cell[1978381, 41698, 466, 9, 108, "Message",
   CellTags->"Cell 9.164"],
  Cell[1978850, 41709, 276, 7, 187, "Output",
   CellTags->"Cell 9.164"],
  Cell[1979129, 41718, 470, 10, 108, "Message",
   CellTags->"Cell 9.164"],
  Cell[1979602, 41730, 279, 7, 187, "Output",
   CellTags->"Cell 9.164"]},
 "i:109"->{
  Cell[1980022, 41745, 4133, 147, 413, "Text",
   CellTags->"i:109"]},
 "Ex. 9.10"->{
  Cell[1987120, 41987, 79, 1, 82, "Subsubtitle",
   CellTags->{"Ex. 9.10", "c:59"}]},
 "c:59"->{
  Cell[1987120, 41987, 79, 1, 82, "Subsubtitle",
   CellTags->{"Ex. 9.10", "c:59"}]},
 "Fig. 9.4"->{
  Cell[1996138, 42154, 50, 1, 63, "Caption",
   CellTags->"Fig. 9.4"]},
 "Fig. 9.5"->{
  Cell[2012843, 42446, 50, 1, 63, "Caption",
   CellTags->"Fig. 9.5"]},
 "i:88"->{
  Cell[2014575, 42530, 1895, 70, 346, "Text",
   CellTags->"i:88"]},
 "i:89"->{
  Cell[2021007, 42779, 2700, 99, 550, "Text",
   CellTags->"i:89"]},
 "Cell 9.165"->{
  Cell[2023710, 42880, 233, 7, 303, "Input",
   CellTags->"Cell 9.165"]},
 "Cell 9.166"->{
  Cell[2023968, 42891, 1454, 49, 577, "Input",
   CellTags->"Cell 9.166"],
  Cell[2025425, 42942, 622, 16, 491, "Output",
   CellTags->"Cell 9.166"]},
 "Cell 9.167"->{
  Cell[2027705, 43022, 522, 19, 363, "Input",
   CellTags->"Cell 9.167"]},
 "Cell 9.168"->{
  Cell[2031334, 43158, 983, 30, 395, "Input",
   CellTags->"Cell 9.168"]},
 "Cell 9.169"->{
  Cell[2034403, 43268, 810, 24, 395, "Input",
   CellTags->"Cell 9.169"]},
 "Cell 9.170"->{
  Cell[2035285, 43296, 700, 20, 395, "Input",
   CellTags->"Cell 9.170"]},
 "i:112"->{
  Cell[2040228, 43480, 648, 14, 346, "Text",
   CellTags->"i:112"]},
 "i:90"->{
  Cell[2041954, 43534, 2095, 83, 408, "Text",
   CellTags->"i:90"]},
 "Cell 9.171"->{
  Cell[2044074, 43621, 1425, 46, 577, "Input",
   CellTags->"Cell 9.171"],
  Cell[2045502, 43669, 611, 15, 2270, "Output",
   CellTags->"Cell 9.171"]},
 "Fig. 9.6"->{
  Cell[2053096, 44026, 70, 1, 63, "Caption",
   CellTags->"Fig. 9.6"]},
 "Sec. 9.11"->{
  Cell[2053631, 44052, 77, 1, 40, "Subtitle",
   CellTags->{"Sec. 9.11", "c:60"}]},
 "c:60"->{
  Cell[2053631, 44052, 77, 1, 40, "Subtitle",
   CellTags->{"Sec. 9.11", "c:60"}]},
 "c:61"->{
  Cell[2054508, 44074, 90, 1, 126, "Subsubtitle",
   CellTags->"c:61"]},
 "i:86"->{
  Cell[2054601, 44077, 828, 27, 206, "Text",
   CellTags->"i:86"]},
 "Cell 9.172"->{
  Cell[2055454, 44108, 608, 18, 303, "Input",
   CellTags->"Cell 9.172"],
  Cell[2056065, 44128, 8256, 141, 1456, "Output",
   CellTags->"Cell 9.172"]},
 "i:84"->{
  Cell[2064336, 44272, 2493, 94, 616, "Text",
   CellTags->"i:84"]},
 "Cell 9.173"->{
  Cell[2066854, 44370, 446, 13, 303, "Input",
   CellTags->"Cell 9.173"],
  Cell[2067303, 44385, 304, 7, 197, "Output",
   CellTags->"Cell 9.173"]},
 "i:125"->{
  Cell[2067622, 44395, 741, 22, 272, "Text",
   CellTags->"i:125"]},
 "Cell 9.174"->{
  Cell[2068388, 44421, 290, 8, 303, "Input",
   CellTags->"Cell 9.174"],
  Cell[2068681, 44431, 237, 4, 228, "Output",
   CellTags->"Cell 9.174"]},
 "i:102"->{
  Cell[2068933, 44438, 2150, 62, 657, "Text",
   CellTags->"i:102"]},
 "Cell 9.175"->{
  Cell[2071108, 44504, 965, 21, 303, "Input",
   CellTags->"Cell 9.175"],
  Cell[2072076, 44527, 886, 16, 383, "Output",
   CellTags->"Cell 9.175"]},
 "Cell 9.176"->{
  Cell[2073193, 44552, 373, 9, 303, "Input",
   CellTags->"Cell 9.176"],
  Cell[2073569, 44563, 654, 11, 228, "Output",
   CellTags->"Cell 9.176"]},
 "Cell 9.177"->{
  Cell[2075537, 44610, 288, 10, 303, "Input",
   CellTags->"Cell 9.177"]},
 "Cell 9.178"->{
  Cell[2076207, 44638, 340, 11, 378, "Input",
   CellTags->"Cell 9.178"],
  Cell[2076550, 44651, 269, 7, 246, "Output",
   CellTags->"Cell 9.178"]},
 "Cell 9.179"->{
  Cell[2078038, 44712, 280, 10, 378, "Input",
   CellTags->"Cell 9.179"],
  Cell[2078321, 44724, 1056, 18, 168, "Message",
   CellTags->"Cell 9.179"],
  Cell[2079380, 44744, 303, 9, 246, "Output",
   CellTags->"Cell 9.179"]},
 "(9.11.1)"->{
  Cell[2079926, 44765, 433, 19, 293, "NE5",
   CellTags->"(9.11.1)"]},
 "Cell 9.180"->{
  Cell[2080431, 44790, 636, 21, 378, "Input",
   CellTags->"Cell 9.180"],
  Cell[2081070, 44813, 278, 8, 246, "Output",
   CellTags->"Cell 9.180"]},
 "i:87"->{
  Cell[2081363, 44824, 728, 17, 432, "Text",
   CellTags->"i:87"]},
 "Cell 9.181"->{
  Cell[2083005, 44881, 727, 21, 493, "Input",
   CellTags->"Cell 9.181"],
  Cell[2083735, 44904, 36073, 604, 2822, "Output",
   CellTags->"Cell 9.181"]},
 "Cell 9.182"->{
  Cell[2120802, 45540, 836, 23, 493, "Input",
   CellTags->"Cell 9.182"],
  Cell[2121641, 45565, 6277, 113, 2822, "Output",
   CellTags->"Cell 9.182"]},
 "Cell 9.183"->{
  Cell[2128558, 45702, 169, 5, 378, "Input",
   CellTags->"Cell 9.183"],
  Cell[2128730, 45709, 42165, 708, 2822, "Output",
   CellTags->"Cell 9.183"]},
 "Cell 9.184"->{
  Cell[2171495, 46439, 636, 21, 378, "Input",
   CellTags->"Cell 9.184"],
  Cell[2172134, 46462, 254, 7, 246, "Output",
   CellTags->"Cell 9.184"]},
 "Table 9.22"->{
  Cell[2173085, 46493, 5866, 187, 868, "Text",
   CellTags->"Table 9.22"]},
 "i:73"->{
  Cell[2178988, 46685, 80, 1, 82, "Subsubtitle",
   CellTags->{"i:73", "c:62"}]},
 "c:62"->{
  Cell[2178988, 46685, 80, 1, 82, "Subsubtitle",
   CellTags->{"i:73", "c:62"}]},
 "i:75"->{
  Cell[2179071, 46688, 828, 27, 356, "Text",
   CellTags->"i:75"]},
 "Cell 9.185"->{
  Cell[2179924, 46719, 309, 10, 303, "Input",
   CellTags->"Cell 9.185"],
  Cell[2180236, 46731, 114, 2, 197, "Output",
   CellTags->"Cell 9.185"]},
 "Cell 9.186"->{
  Cell[2180734, 46750, 400, 12, 303, "Input",
   CellTags->"Cell 9.186"],
  Cell[2181137, 46764, 119, 2, 228, "Output",
   CellTags->"Cell 9.186"]},
 "i:103"->{
  Cell[2181271, 46769, 552, 14, 272, "Text",
   CellTags->"i:103"]},
 "Cell 9.187"->{
  Cell[2181848, 46787, 587, 17, 395, "Input",
   CellTags->"Cell 9.187"],
  Cell[2182438, 46806, 2740, 95, 566, "Output",
   CellTags->"Cell 9.187"]},
 "i:92"->{
  Cell[2187174, 46972, 72, 1, 82, "Subsubtitle",
   CellTags->{"i:92", "c:63"}]},
 "c:63"->{
  Cell[2187174, 46972, 72, 1, 82, "Subsubtitle",
   CellTags->{"i:92", "c:63"}]},
 "Cell 9.188"->{
  Cell[2188680, 47029, 435, 15, 395, "Input",
   CellTags->"Cell 9.188"],
  Cell[2189118, 47046, 281, 11, 197, "Output",
   CellTags->"Cell 9.188"]},
 "i:100"->{
  Cell[2189414, 47060, 940, 28, 346, "Text",
   CellTags->"i:100"]},
 "i:101"->{
  Cell[2190357, 47090, 915, 29, 272, "Text",
   CellTags->"i:101"]},
 "Cell 9.189"->{
  Cell[2191297, 47123, 179, 5, 395, "Input",
   CellTags->"Cell 9.189"],
  Cell[2191479, 47130, 72, 1, 197, "Output",
   CellTags->"Cell 9.189"],
  Cell[2191554, 47133, 91, 2, 197, "Output",
   CellTags->"Cell 9.189"]},
 "Cell 9.190"->{
  Cell[2192143, 47157, 279, 9, 303, "Input",
   CellTags->"Cell 9.190"],
  Cell[2192425, 47168, 16687, 280, 1807, "Output",
   CellTags->"Cell 9.190"]},
 "Cell 9.191"->{
  Cell[2209149, 47453, 120, 4, 378, "Input",
   CellTags->"Cell 9.191"]},
 "Cell 9.192"->{
  Cell[2209272, 47459, 117, 2, 246, "Output",
   CellTags->"Cell 9.192"]},
 "i:127"->{
  Cell[2209404, 47464, 1554, 36, 916, "Text",
   CellTags->"i:127"]},
 "Cell 9.193"->{
  Cell[2226798, 47805, 412, 12, 378, "Input",
   CellTags->"Cell 9.193"],
  Cell[2227213, 47819, 8691, 149, 1868, "Output",
   CellTags->"Cell 9.193"]},
 "i:93"->{
  Cell[2235919, 47971, 1076, 38, 340, "Text",
   CellTags->"i:93"]},
 "Cell 9.194"->{
  Cell[2237020, 48013, 470, 15, 493, "Input",
   CellTags->"Cell 9.194"],
  Cell[2237493, 48030, 6168, 108, 1868, "Output",
   CellTags->"Cell 9.194"]},
 "i:95"->{
  Cell[2243710, 48144, 66, 1, 82, "Subsubtitle",
   CellTags->{"i:95", "c:64"}]},
 "c:64"->{
  Cell[2243710, 48144, 66, 1, 82, "Subsubtitle",
   CellTags->{"i:95", "c:64"}]},
 "Cell 9.195"->{
  Cell[2246639, 48251, 331, 10, 243, "Input",
   CellTags->"Cell 9.195"],
  Cell[2246973, 48263, 498, 13, 183, "Output",
   CellTags->"Cell 9.195"]},
 "i:132"->{
  Cell[2247897, 48294, 380, 9, 157, "Text",
   CellTags->"i:132"]},
 "c:82"->{
  Cell[2252078, 48424, 70, 1, 150, "Section",
   CellTags->"c:82"]},
 "i:128"->{
  Cell[2252151, 48427, 570, 15, 218, "Text",
   CellTags->"i:128"]},
 "Cell 9.196"->{
  Cell[2252746, 48446, 103, 3, 243, "Input",
   CellTags->"Cell 9.196"],
  Cell[2252852, 48451, 114, 2, 158, "Output",
   CellTags->"Cell 9.196"]},
 "i:129"->{
  Cell[2252981, 48456, 557, 17, 218, "Text",
   CellTags->"i:129"]},
 "Cell 9.197"->{
  Cell[2253563, 48477, 143, 4, 243, "Input",
   CellTags->"Cell 9.197"],
  Cell[2253709, 48483, 124, 2, 158, "Output",
   CellTags->"Cell 9.197"]},
 "Cell 9.198"->{
  Cell[2254316, 48504, 121, 3, 243, "Input",
   CellTags->"Cell 9.198"]},
 "i:130"->{
  Cell[2254440, 48509, 212, 7, 90, "Text",
   CellTags->"i:130"]},
 "Cell 9.199"->{
  Cell[2254677, 48520, 76, 2, 243, "Input",
   CellTags->"Cell 9.199"]},
 "i:131"->{
  Cell[2255407, 48548, 537, 18, 218, "Text",
   CellTags->"i:131"]},
 "Cell 9.200"->{
  Cell[2256589, 48590, 165, 5, 243, "Input",
   CellTags->"Cell 9.200"]},
 "Ex. 9.11"->{
  Cell[2257787, 48633, 79, 1, 82, "Subsubtitle",
   CellTags->{"Ex. 9.11", "c:65"}]},
 "c:65"->{
  Cell[2257787, 48633, 79, 1, 82, "Subsubtitle",
   CellTags->{"Ex. 9.11", "c:65"}]},
 "Cell 9.201"->{
  Cell[2260947, 48755, 325, 11, 303, "Input",
   CellTags->"Cell 9.201"]},
 "Cell 9.202"->{
  Cell[2262259, 48808, 721, 26, 303, "Input",
   CellTags->"Cell 9.202"]},
 "i:97"->{
  Cell[2262983, 48836, 840, 30, 272, "Text",
   CellTags->"i:97"]},
 "i:124"->{
  Cell[2263826, 48868, 1329, 47, 346, "Text",
   CellTags->"i:124"]},
 "(9.11.2)"->{
  Cell[2265830, 48945, 369, 14, 168, "NE5",
   CellTags->"(9.11.2)"]},
 "Fig. 9.7"->{
  Cell[2274089, 49095, 84, 1, 78, "Caption",
   CellTags->"Fig. 9.7"]},
 "i:126"->{
  Cell[2277123, 49198, 1062, 35, 382, "Text",
   CellTags->"i:126"]},
 "Cell 9.203"->{
  Cell[2280868, 49342, 409, 14, 378, "Input",
   CellTags->"Cell 9.203"]},
 "(9.11.3)"->{
  Cell[2282502, 49408, 724, 24, 218, "NE5",
   CellTags->"(9.11.3)"]},
 "i:138"->{
  Cell[2283229, 49434, 633, 19, 340, "Text",
   CellTags->"i:138"]},
 "Cell 9.204"->{
  Cell[2284340, 49475, 719, 23, 378, "Input",
   CellTags->"Cell 9.204"]},
 "(9.11.4)"->{
  Cell[2287109, 49580, 641, 23, 218, "NE5",
   CellTags->"(9.11.4)"]},
 "(9.11.5)"->{
  Cell[2290202, 49695, 742, 26, 235, "NE5",
   CellTags->{"(9.11.5)", "i:134"}]},
 "i:134"->{
  Cell[2290202, 49695, 742, 26, 235, "NE5",
   CellTags->{"(9.11.5)", "i:134"}]},
 "(9.11.6)"->{
  Cell[2293798, 49838, 805, 30, 453, "NE5",
   CellTags->"(9.11.6)"]},
 "Cell 9.205"->{
  Cell[2295430, 49897, 882, 27, 493, "Input",
   CellTags->"Cell 9.205"]},
 "Cell 9.206"->{
  Cell[2298252, 49988, 226, 7, 378, "Input",
   CellTags->"Cell 9.206"]},
 "i:135"->{
  Cell[2299018, 50015, 1118, 40, 235, "NE5",
   CellTags->"i:135"]},
 "Cell 9.207"->{
  Cell[2300711, 50080, 884, 27, 493, "Input",
   CellTags->"Cell 9.207"]},
 "i:136"->{
  Cell[2303213, 50170, 243, 8, 140, "Text",
   CellTags->"i:136"]},
 "i:137"->{
  Cell[2305958, 50273, 1309, 38, 627, "Text",
   CellTags->"i:137"]},
 "i:139"->{
  Cell[2307716, 50330, 1991, 66, 737, "Text",
   CellTags->"i:139"]},
 "Cell 9.208"->{
  Cell[2313942, 50561, 1095, 33, 721, "Input",
   CellTags->"Cell 9.208"]},
 "i:79"->{
  Cell[2315040, 50596, 3577, 111, 988, "Text",
   CellTags->"i:79"]},
 "c:67"->{
  Cell[2318666, 50713, 139, 6, 40, "Subtitle",
   CellTags->"c:67"]},
 "c:68"->{
  Cell[2319435, 50745, 69, 1, 596, "Subsubtitle",
   CellTags->"c:68"]},
 "c:69"->{
  Cell[2339070, 51384, 116, 3, 383, "Subsubtitle",
   CellTags->"c:69"]},
 "c:70"->{
  Cell[2356540, 51963, 82, 1, 383, "Subsubtitle",
   CellTags->"c:70"]},
 "c:72"->{
  Cell[2371183, 52468, 57, 1, 383, "Subsubtitle",
   CellTags->"c:72"]},
 "c:73"->{
  Cell[2371265, 52473, 52, 1, 10257, "Section",
   CellTags->"c:73"]},
 "c:74"->{
  Cell[2384969, 52919, 63, 1, 10257, "Section",
   CellTags->"c:74"]},
 "Cell 9.209"->{
  Cell[2391745, 53130, 1211, 34, 21838, "Input",
   CellTags->"Cell 9.209"],
  Cell[2392959, 53166, 39913, 701, 118797, "Output",
   CellTags->"Cell 9.209"],
  Cell[2488129, 55629, 428, 14, 2035, "Input",
   CellTags->"Cell 9.209"],
  Cell[2488560, 55645, 882, 32, 1816, "Output",
   CellTags->"Cell 9.209"]},
 "c:75"->{
  Cell[2432921, 53873, 85, 3, 10257, "Section",
   CellTags->"c:75"]},
 "c:76"->{
  Cell[2434607, 53929, 60, 1, 10257, "Section",
   CellTags->"c:76"]},
 "Cell 9.210"->{
  Cell[2441368, 54142, 273, 10, 16722, "Input",
   CellTags->"Cell 9.210"],
  Cell[2492216, 55770, 366, 12, 1797, "Input",
   CellTags->"Cell 9.210"]},
 "9.210"->{
  Cell[2441644, 54154, 188, 5, 10840, "Output",
   CellTags->"9.210"]},
 "Cell 9.211"->{
  Cell[2442157, 54173, 790, 25, 21838, "Input",
   CellTags->"Cell 9.211"],
  Cell[2493056, 55804, 558, 18, 1797, "Input",
   CellTags->"Cell 9.211"]},
 "9.211"->{
  Cell[2442950, 54200, 1502, 44, 83546, "Output",
   CellTags->"9.211"]},
 "c:77"->{
  Cell[2444501, 54250, 54, 1, 10257, "Section",
   CellTags->"c:77"]},
 "c:78"->{
  Cell[2451583, 54475, 54, 1, 10257, "Section",
   CellTags->"c:78"]},
 "Cell 9.212"->{
  Cell[2469451, 55022, 592, 15, 1797, "Input",
   CellTags->"Cell 9.212"],
  Cell[2495691, 55892, 770, 25, 2746, "Input",
   CellTags->"Cell 9.212"],
  Cell[2496464, 55919, 459, 16, 1165, "Output",
   CellTags->"Cell 9.212"]},
 "9.212"->{
  Cell[2470046, 55039, 488, 11, 1628, "Output",
   CellTags->"9.212"]},
 "Cell 9.213"->{
  Cell[2470780, 55061, 154, 4, 1797, "Input",
   CellTags->"Cell 9.213"],
  Cell[2496960, 55940, 176, 6, 1797, "Input",
   CellTags->"Cell 9.213"],
  Cell[2497139, 55948, 321, 12, 1165, "Output",
   CellTags->"Cell 9.213"]},
 "9.213"->{
  Cell[2470937, 55067, 131, 2, 1453, "Print",
   CellTags->{"9.213", "Info3460639382-8506922"}]},
 "Info3460639382-8506922"->{
  Cell[2470937, 55067, 131, 2, 1453, "Print",
   CellTags->{"9.213", "Info3460639382-8506922"}]},
 "c:79"->{
  Cell[2471117, 55075, 110, 2, 383, "Subsubtitle",
   CellTags->"c:79"],
  Cell[2529202, 56503, 153, 3, 383, "Subsubtitle",
   CellTags->"c:79"]},
 "c:80"->{
  Cell[2481279, 55407, 58, 1, 796, "Section",
   CellTags->"c:80"]},
 "c:81"->{
  Cell[2489491, 55683, 61, 1, 796, "Section",
   CellTags->"c:81"]},
 "Cell 9.214"->{
  Cell[2497497, 55965, 250, 8, 1797, "Input",
   CellTags->"Cell 9.214"],
  Cell[2497750, 55975, 31391, 521, 8635, "Output",
   CellTags->"Cell 9.214"]},
 "Cell 9.215"->{
  Cell[2531596, 56567, 263, 7, 1151, "Input",
   CellTags->"Cell 9.215"],
  Cell[2531862, 56576, 19463, 407, 14453, "Output",
   CellTags->"Cell 9.215"]},
 "Cell 9.216"->{
  Cell[2551362, 56988, 83257, 1523, 1391, "WolframAlphaShortInput",
   CellTags->"Cell 9.216"],
  Cell[2634622, 58513, 2723, 65, 1340, "Output",
   CellTags->"Cell 9.216"]},
 "refs"->{
  Cell[2637406, 58585, 49, 1, 40, "Subtitle",
   CellTags->"refs"]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"chapter 1", 2692940, 59717},
 {"c:1", 2693024, 59720},
 {"Sec. 9.1", 2693113, 59723},
 {"c:2", 2693201, 59726},
 {"i:3", 2693289, 59729},
 {"Cell 9.1", 2693365, 59732},
 {"i:4", 2693505, 59737},
 {"i:2", 2693579, 59740},
 {"Sec. 9.2", 2693656, 59743},
 {"c:3", 2693745, 59746},
 {"c:4", 2693834, 59749},
 {"Cell 9.2", 2693916, 59752},
 {"Cell 9.3", 2693998, 59755},
 {"Cell 9.4", 2694079, 59758},
 {"Cell 9.5", 2694160, 59761},
 {"Cell 9.6", 2694242, 59764},
 {"Cell 9.7", 2694323, 59767},
 {"i:115", 2694402, 59770},
 {"Table 9.1", 2694482, 59773},
 {"c:5", 2694562, 59776},
 {"i:16", 2694640, 59779},
 {"Cell 9.8", 2694717, 59782},
 {"Cell 9.9", 2694799, 59785},
 {"Cell 9.10", 2694948, 59790},
 {"i:17", 2695095, 59795},
 {"Cell 9.11", 2695174, 59798},
 {"i:5", 2695320, 59803},
 {"Cell 9.12", 2695400, 59806},
 {"c:6", 2695478, 59809},
 {"i:18", 2695556, 59812},
 {"i:96", 2695630, 59815},
 {"Table 9.2", 2695727, 59818},
 {"c:7", 2695818, 59821},
 {"Table 9.3", 2695902, 59824},
 {"Cell 9.13", 2695989, 59827},
 {"Cell 9.14", 2696143, 59832},
 {"Cell 9.15", 2696297, 59837},
 {"c:8", 2696445, 59842},
 {"i:14", 2696524, 59845},
 {"i:15", 2696599, 59848},
 {"Cell 9.16", 2696682, 59851},
 {"c:9", 2696831, 59856},
 {"i:20", 2696912, 59859},
 {"Cell 9.17", 2696992, 59862},
 {"i:6", 2697071, 59865},
 {"Cell 9.18", 2697150, 59868},
 {"Cell 9.19", 2697304, 59873},
 {"i:7", 2697452, 59878},
 {"Cell 9.20", 2697531, 59881},
 {"Cell 9.21", 2697686, 59886},
 {"i:21", 2697835, 59891},
 {"Cell 9.22", 2697915, 59894},
 {"Table 9.5", 2698069, 59899},
 {"c:10", 2698152, 59902},
 {"Sec. 9.3", 2698236, 59905},
 {"c:11", 2698329, 59908},
 {"i:8", 2698421, 59911},
 {"i:13", 2698496, 59914},
 {"Sec. 9.4", 2698576, 59917},
 {"c:12", 2698667, 59920},
 {"c:13", 2698758, 59923},
 {"i:22", 2698838, 59926},
 {"Cell 9.23", 2698918, 59929},
 {"Cell 9.24", 2699002, 59932},
 {"Cell 9.25", 2699086, 59935},
 {"Cell 9.26", 2699171, 59938},
 {"c:14", 2699250, 59941},
 {"Cell 9.27", 2699335, 59944},
 {"Cell 9.28", 2699425, 59947},
 {"Cell 9.29", 2699514, 59950},
 {"i:23", 2699599, 59953},
 {"Cell 9.30", 2699683, 59956},
 {"Cell 9.31", 2699773, 59959},
 {"i:24", 2699857, 59962},
 {"Cell 9.32", 2699941, 59965},
 {"i:10", 2700026, 59968},
 {"i:25", 2700108, 59971},
 {"Table 9.6", 2700211, 59974},
 {"c:15", 2700309, 59977},
 {"i:12", 2700389, 59980},
 {"Fig. 9.1", 2700475, 59983},
 {"Cell 9.33", 2700567, 59986},
 {"Cell 9.34", 2700731, 59991},
 {"i:11", 2700892, 59996},
 {"Sec. 9.5", 2700977, 59999},
 {"c:16", 2701069, 60002},
 {"c:17", 2701161, 60005},
 {"i:26", 2701242, 60008},
 {"Cell 9.35", 2701328, 60011},
 {"i:27", 2701414, 60014},
 {"Cell 9.36", 2701500, 60017},
 {"Cell 9.37", 2701591, 60020},
 {"Cell 9.38", 2701682, 60023},
 {"Cell 9.39", 2701773, 60026},
 {"i:28", 2701859, 60029},
 {"Cell 9.40", 2701944, 60032},
 {"i:29", 2702030, 60035},
 {"Cell 9.41", 2702116, 60038},
 {"Cell 9.42", 2702207, 60041},
 {"Cell 9.43", 2702297, 60044},
 {"Cell 9.44", 2702388, 60047},
 {"i:98", 2702474, 60050},
 {"c:18", 2702565, 60053},
 {"c:19", 2702656, 60056},
 {"Fig. 9.2", 2702737, 60059},
 {"Cell 9.45", 2702830, 60062},
 {"i:31", 2702992, 60067},
 {"c:20", 2703079, 60070},
 {"(9.5.1)", 2703169, 60073},
 {"(9.5.2)", 2703269, 60076},
 {"Cell 9.46", 2703370, 60079},
 {"i:42", 2703455, 60082},
 {"Cell 9.47", 2703541, 60085},
 {"(9.5.3)", 2703629, 60088},
 {"(9.5.4)", 2703728, 60091},
 {"i:32", 2703824, 60094},
 {"c:21", 2703911, 60097},
 {"(9.5.5)", 2704001, 60100},
 {"(9.5.6)", 2704097, 60103},
 {"Cell 9.48", 2704195, 60106},
 {"Table 9.8", 2704282, 60109},
 {"c:22", 2704365, 60112},
 {"i:33", 2704442, 60115},
 {"Cell 9.49", 2704530, 60118},
 {"i:34", 2704616, 60121},
 {"Cell 9.50", 2704704, 60124},
 {"Cell 9.51", 2704864, 60129},
 {"i:104", 2705019, 60134},
 {"Cell 9.52", 2705102, 60137},
 {"Cell 9.53", 2705261, 60142},
 {"(9.5.7)", 2705417, 60147},
 {"(9.5.8)", 2705511, 60150},
 {"Cell 9.54", 2705607, 60153},
 {"i:35", 2705689, 60156},
 {"(9.5.9)", 2705775, 60159},
 {"i:105", 2705867, 60162},
 {"Cell 9.55", 2705950, 60165},
 {"Cell 9.56", 2706037, 60168},
 {"Cell 9.57", 2706124, 60171},
 {"i:36", 2706207, 60174},
 {"Cell 9.58", 2706295, 60177},
 {"i:37", 2706377, 60180},
 {"Cell 9.59", 2706465, 60183},
 {"Cell 9.60", 2706552, 60186},
 {"Cell 9.61", 2706640, 60189},
 {"(9.5.10)", 2706726, 60192},
 {"Fig. 9.3", 2706823, 60195},
 {"(9.5.11)", 2706910, 60198},
 {"Table 9.9", 2707009, 60201},
 {"c:23", 2707092, 60204},
 {"i:38", 2707174, 60207},
 {"Cell 9.62", 2707258, 60210},
 {"Cell 9.63", 2707347, 60213},
 {"Cell 9.64", 2707436, 60216},
 {"c:24", 2707521, 60219},
 {"i:39", 2707602, 60222},
 {"Cell 9.65", 2707685, 60225},
 {"Cell 9.66", 2707775, 60228},
 {"Cell 9.67", 2707864, 60231},
 {"i:40", 2707948, 60234},
 {"Cell 9.68", 2708032, 60237},
 {"i:41", 2708116, 60240},
 {"Cell 9.69", 2708200, 60243},
 {"Table 9.10", 2708290, 60246},
 {"c:25", 2708378, 60249},
 {"Sec. 9.6", 2708463, 60252},
 {"c:26", 2708555, 60255},
 {"i:43", 2708647, 60258},
 {"c:27", 2708739, 60261},
 {"Cell 9.70", 2708836, 60264},
 {"i:44", 2708998, 60269},
 {"Cell 9.71", 2709082, 60272},
 {"i:133", 2709243, 60277},
 {"Cell 9.72", 2709328, 60280},
 {"i:ginsp", 2709492, 60285},
 {"i:45", 2709573, 60288},
 {"c:28", 2709665, 60291},
 {"Cell 9.73", 2709762, 60294},
 {"i:46", 2709922, 60299},
 {"c:29", 2710013, 60302},
 {"Cell 9.74", 2710109, 60305},
 {"directive", 2710275, 60310},
 {"Cell 9.75", 2710363, 60313},
 {"Table 9.11", 2710529, 60318},
 {"i:47", 2710615, 60321},
 {"c:30", 2710707, 60324},
 {"Cell 9.76", 2710804, 60327},
 {"Cell 9.77", 2710970, 60332},
 {"Cell 9.78", 2711135, 60337},
 {"i:50", 2711298, 60342},
 {"c:31", 2711390, 60345},
 {"i:51", 2711482, 60348},
 {"Cell 9.79", 2711568, 60351},
 {"i:119", 2711735, 60356},
 {"Cell 9.80", 2711821, 60359},
 {"Table 9.12", 2711993, 60364},
 {"c:32", 2712082, 60367},
 {"i:48", 2712164, 60370},
 {"Cell 9.81", 2712249, 60373},
 {"i:53", 2712417, 60378},
 {"Cell 9.82", 2712503, 60381},
 {"i:49", 2712671, 60386},
 {"Cell 9.83", 2712757, 60389},
 {"i:56", 2712925, 60394},
 {"c:33", 2713018, 60397},
 {"Cell 9.84", 2713116, 60400},
 {"ListAnimate", 2713288, 60405},
 {"Cell 9.85", 2713378, 60408},
 {"Animate", 2713544, 60413},
 {"i:manip", 2713628, 60416},
 {"Cell 9.86", 2713783, 60421},
 {"Cell 9.87", 2713873, 60424},
 {"i:dyn", 2714034, 60429},
 {"Cell 9.88", 2714119, 60432},
 {"Cell 9.89", 2714284, 60437},
 {"asg", 2715125, 60460},
 {"i:57", 2715203, 60463},
 {"c:34", 2715297, 60466},
 {"Cell 9.90", 2715396, 60469},
 {"Cell 9.91", 2715565, 60474},
 {"Cell 9.92", 2715655, 60477},
 {"Cell 9.93", 2715970, 60486},
 {"i:120", 2716132, 60491},
 {"Cell 9.94", 2716218, 60494},
 {"Cell 9.95", 2716381, 60499},
 {"Cell 9.96", 2716543, 60504},
 {"i:114", 2716702, 60509},
 {"i:compd", 2716786, 60512},
 {"Cell 9.97", 2716874, 60515},
 {"Ex. 9.6", 2717138, 60522},
 {"c:35", 2717306, 60527},
 {"i:59", 2717402, 60530},
 {"i:60", 2717485, 60533},
 {"i:58", 2717566, 60536},
 {"i:52", 2717649, 60539},
 {"Sec. 9.7", 2717736, 60542},
 {"c:36", 2717831, 60545},
 {"i:122", 2717927, 60548},
 {"Cell 9.98", 2718012, 60551},
 {"Info3446487969-5429238", 2718113, 60554},
 {"Cell 9.99", 2718232, 60557},
 {"Cell 9.100", 2718523, 60564},
 {"Info3446488069-9932704", 2718700, 60569},
 {"i:121", 2718914, 60574},
 {"Cell 9.101", 2718999, 60577},
 {"i:61", 2719233, 60584},
 {"Cell 9.102", 2719318, 60587},
 {"i:wlfa", 2719479, 60592},
 {"Cell 9.103", 2719567, 60595},
 {"Cell 9.104", 2719833, 60602},
 {"Cell 9.105", 2720020, 60607},
 {"Sec. 9.8", 2720205, 60612},
 {"c:37", 2720299, 60615},
 {"c:38", 2720393, 60618},
 {"Cell 9.106", 2720482, 60621},
 {"i:62", 2720641, 60626},
 {"Cell 9.107", 2720726, 60629},
 {"Cell 9.108", 2720893, 60634},
 {"i:63", 2721126, 60641},
 {"Cell 9.109", 2721211, 60644},
 {"Cell 9.110", 2721376, 60649},
 {"Cell 9.111", 2721541, 60654},
 {"Cell 9.112", 2721706, 60659},
 {"i:64", 2721865, 60664},
 {"Cell 9.113", 2721950, 60667},
 {"Table 9.14", 2722115, 60672},
 {"c:39", 2722202, 60675},
 {"i:65", 2722285, 60678},
 {"Cell 9.114", 2722370, 60681},
 {"Cell 9.115", 2722535, 60686},
 {"Table 9.15", 2722701, 60691},
 {"i:19", 2722787, 60694},
 {"c:40", 2722880, 60697},
 {"c:41", 2722973, 60700},
 {"Cell 9.116", 2723059, 60703},
 {"Cell 9.117", 2723150, 60706},
 {"i:66", 2723308, 60711},
 {"Cell 9.118", 2723394, 60714},
 {"Cell 9.119", 2723558, 60719},
 {"Cell 9.120", 2723649, 60722},
 {"Cell 9.121", 2723741, 60725},
 {"Cell 9.122", 2723832, 60728},
 {"c:42", 2724067, 60735},
 {"Cell 9.123", 2724153, 60738},
 {"i:67", 2724237, 60741},
 {"c:43", 2724327, 60744},
 {"Cell 9.124", 2724423, 60747},
 {"c:44", 2724588, 60752},
 {"i:68", 2724671, 60755},
 {"c:45", 2724764, 60758},
 {"Cell 9.125", 2724863, 60761},
 {"Cell 9.126", 2724953, 60764},
 {"Cell 9.127", 2725045, 60767},
 {"Table 9.17", 2725285, 60774},
 {"i:69", 2725372, 60777},
 {"c:46", 2725466, 60780},
 {"i:123", 2725561, 60783},
 {"(9.8.1)", 2725643, 60786},
 {"i:106", 2725735, 60789},
 {"Cell 9.128", 2725832, 60792},
 {"Cell 9.129", 2725996, 60797},
 {"Cell 9.130", 2726163, 60802},
 {"i:111", 2726250, 60805},
 {"Table 9.18", 2726354, 60808},
 {"i:80", 2726452, 60811},
 {"Cell 9.131", 2726536, 60814},
 {"i:Piecewise", 2726702, 60819},
 {"Cell 9.132", 2726795, 60822},
 {"Ex. 9.8", 2726958, 60827},
 {"c:47", 2727054, 60830},
 {"Sec. 9.9", 2727154, 60833},
 {"c:48", 2727248, 60836},
 {"i:70", 2727342, 60839},
 {"c:49", 2727435, 60842},
 {"Cell 9.133", 2727534, 60845},
 {"Cell 9.134", 2727701, 60850},
 {"Cell 9.135", 2727868, 60855},
 {"Cell 9.136", 2728034, 60860},
 {"Cell 9.137", 2728200, 60865},
 {"Cell 9.138", 2728291, 60868},
 {"i:71", 2728526, 60875},
 {"c:50", 2728619, 60878},
 {"(9.9.1)", 2728715, 60881},
 {"i:116", 2728798, 60884},
 {"i:76", 2728879, 60887},
 {"Cell 9.139", 2728964, 60890},
 {"Cell 9.140", 2729205, 60897},
 {"Cell 9.141", 2729371, 60902},
 {"i:77", 2729534, 60907},
 {"Cell 9.142", 2729619, 60910},
 {"Cell 9.143", 2729786, 60915},
 {"i:117", 2729946, 60920},
 {"Cell 9.144", 2730033, 60923},
 {"i:72", 2730192, 60928},
 {"c:51", 2730285, 60931},
 {"i:74", 2730378, 60934},
 {"Cell 9.145", 2730463, 60937},
 {"Cell 9.146", 2730626, 60942},
 {"Cell 9.147", 2730717, 60945},
 {"Cell 9.148", 2730883, 60950},
 {"Cell 9.149", 2731122, 60957},
 {"Cell 9.150", 2731288, 60962},
 {"Ex. 9.9", 2731377, 60965},
 {"c:52", 2731473, 60968},
 {"i:118", 2731570, 60971},
 {"Sec. 9.10", 2731653, 60974},
 {"i:99", 2731757, 60977},
 {"c:53", 2731861, 60980},
 {"i:83", 2731965, 60983},
 {"c:54", 2732061, 60986},
 {"c:55", 2732157, 60989},
 {"i:81", 2732237, 60992},
 {"i:78", 2732316, 60995},
 {"Cell 9.151", 2732402, 60998},
 {"Cell 9.152", 2732494, 61001},
 {"Cell 9.153", 2732661, 61006},
 {"Cell 9.154", 2732752, 61009},
 {"i:82", 2732837, 61012},
 {"Cell 9.155", 2732922, 61015},
 {"c:56", 2733007, 61018},
 {"(9.10.1)", 2733091, 61021},
 {"Cell 9.156", 2733179, 61024},
 {"i:107", 2733266, 61027},
 {"Cell 9.157", 2733352, 61030},
 {"Cell 9.158", 2733443, 61033},
 {"Cell 9.159", 2733535, 61036},
 {"Cell 9.160", 2733627, 61039},
 {"Cell 9.161", 2733795, 61044},
 {"c:57", 2733881, 61047},
 {"Cell 9.162", 2733967, 61050},
 {"i:85", 2734053, 61053},
 {"Cell 9.163", 2734138, 61056},
 {"c:58", 2734224, 61059},
 {"i:110", 2734305, 61062},
 {"Cell 9.164", 2734391, 61065},
 {"i:109", 2734777, 61076},
 {"Ex. 9.10", 2734863, 61079},
 {"c:59", 2734960, 61082},
 {"Fig. 9.4", 2735061, 61085},
 {"Fig. 9.5", 2735148, 61088},
 {"i:88", 2735231, 61091},
 {"i:89", 2735311, 61094},
 {"Cell 9.165", 2735397, 61097},
 {"Cell 9.166", 2735488, 61100},
 {"Cell 9.167", 2735656, 61105},
 {"Cell 9.168", 2735748, 61108},
 {"Cell 9.169", 2735840, 61111},
 {"Cell 9.170", 2735932, 61114},
 {"i:112", 2736019, 61117},
 {"i:90", 2736099, 61120},
 {"Cell 9.171", 2736185, 61123},
 {"Fig. 9.6", 2736352, 61128},
 {"Sec. 9.11", 2736440, 61131},
 {"c:60", 2736535, 61134},
 {"c:61", 2736630, 61137},
 {"i:86", 2736714, 61140},
 {"Cell 9.172", 2736799, 61143},
 {"i:84", 2736963, 61148},
 {"Cell 9.173", 2737049, 61151},
 {"i:125", 2737210, 61156},
 {"Cell 9.174", 2737296, 61159},
 {"i:102", 2737456, 61164},
 {"Cell 9.175", 2737543, 61167},
 {"Cell 9.176", 2737710, 61172},
 {"Cell 9.177", 2737876, 61177},
 {"Cell 9.178", 2737968, 61180},
 {"Cell 9.179", 2738134, 61185},
 {"(9.11.1)", 2738375, 61192},
 {"Cell 9.180", 2738463, 61195},
 {"i:87", 2738623, 61200},
 {"Cell 9.181", 2738708, 61203},
 {"Cell 9.182", 2738879, 61208},
 {"Cell 9.183", 2739049, 61213},
 {"Cell 9.184", 2739219, 61218},
 {"Table 9.22", 2739385, 61223},
 {"i:73", 2739472, 61226},
 {"c:62", 2739565, 61229},
 {"i:75", 2739658, 61232},
 {"Cell 9.185", 2739743, 61235},
 {"Cell 9.186", 2739909, 61240},
 {"i:103", 2740070, 61245},
 {"Cell 9.187", 2740156, 61248},
 {"i:92", 2740318, 61253},
 {"c:63", 2740411, 61256},
 {"Cell 9.188", 2740510, 61259},
 {"i:100", 2740672, 61264},
 {"i:101", 2740753, 61267},
 {"Cell 9.189", 2740839, 61270},
 {"Cell 9.190", 2741076, 61277},
 {"Cell 9.191", 2741246, 61282},
 {"Cell 9.192", 2741337, 61285},
 {"i:127", 2741424, 61288},
 {"Cell 9.193", 2741511, 61291},
 {"i:93", 2741675, 61296},
 {"Cell 9.194", 2741761, 61299},
 {"i:95", 2741925, 61304},
 {"c:64", 2742018, 61307},
 {"Cell 9.195", 2742117, 61310},
 {"i:132", 2742279, 61315},
 {"c:82", 2742358, 61318},
 {"i:128", 2742439, 61321},
 {"Cell 9.196", 2742525, 61324},
 {"i:129", 2742685, 61329},
 {"Cell 9.197", 2742771, 61332},
 {"Cell 9.198", 2742936, 61337},
 {"i:130", 2743022, 61340},
 {"Cell 9.199", 2743106, 61343},
 {"i:131", 2743191, 61346},
 {"Cell 9.200", 2743277, 61349},
 {"Ex. 9.11", 2743366, 61352},
 {"c:65", 2743463, 61355},
 {"Cell 9.201", 2743566, 61358},
 {"Cell 9.202", 2743658, 61361},
 {"i:97", 2743744, 61364},
 {"i:124", 2743824, 61367},
 {"(9.11.2)", 2743909, 61370},
 {"Fig. 9.7", 2743995, 61373},
 {"i:126", 2744079, 61376},
 {"Cell 9.203", 2744166, 61379},
 {"(9.11.3)", 2744256, 61382},
 {"i:138", 2744339, 61385},
 {"Cell 9.204", 2744425, 61388},
 {"(9.11.4)", 2744515, 61391},
 {"(9.11.5)", 2744601, 61394},
 {"i:134", 2744695, 61397},
 {"(9.11.6)", 2744792, 61400},
 {"Cell 9.205", 2744880, 61403},
 {"Cell 9.206", 2744972, 61406},
 {"i:135", 2745058, 61409},
 {"Cell 9.207", 2745144, 61412},
 {"i:136", 2745231, 61415},
 {"i:137", 2745311, 61418},
 {"i:139", 2745393, 61421},
 {"Cell 9.208", 2745480, 61424},
 {"i:79", 2745567, 61427},
 {"c:67", 2745648, 61430},
 {"c:68", 2745729, 61433},
 {"c:69", 2745813, 61436},
 {"c:70", 2745898, 61439},
 {"c:72", 2745982, 61442},
 {"c:73", 2746066, 61445},
 {"c:74", 2746148, 61448},
 {"Cell 9.209", 2746236, 61451},
 {"c:75", 2746557, 61460},
 {"c:76", 2746639, 61463},
 {"Cell 9.210", 2746727, 61466},
 {"9.210", 2746891, 61471},
 {"Cell 9.211", 2746980, 61474},
 {"9.211", 2747144, 61479},
 {"c:77", 2747229, 61482},
 {"c:78", 2747311, 61485},
 {"Cell 9.212", 2747399, 61488},
 {"9.212", 2747638, 61495},
 {"Cell 9.213", 2747727, 61498},
 {"9.213", 2747964, 61505},
 {"Info3460639382-8506922", 2748091, 61508},
 {"c:79", 2748200, 61511},
 {"c:80", 2748358, 61516},
 {"c:81", 2748438, 61519},
 {"Cell 9.214", 2748524, 61522},
 {"Cell 9.215", 2748695, 61527},
 {"Cell 9.216", 2748867, 61532},
 {"refs", 2749052, 61537}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[567, 22, 170, 7, 72, "Title",
 CellTags->{"chapter 1", "c:1"}],
Cell[740, 31, 216, 6, 27, "Text"],
Cell[959, 39, 1713, 48, 100, "Text"],
Cell[2675, 89, 474, 13, 46, "Text"],
Cell[3152, 104, 644, 17, 46, "Text"],
Cell[3799, 123, 574, 12, 64, "Text"],
Cell[4376, 137, 244, 7, 47, "Text"],
Cell[4623, 146, 263, 7, 28, "Text"],
Cell[CellGroupData[{
Cell[4911, 157, 129, 5, 40, "Subtitle",
 CellTags->{"Sec. 9.1", "c:2"}],
Cell[5043, 164, 898, 21, 82, "Text"],
Cell[5944, 187, 257, 6, 27, "Text"],
Cell[6204, 195, 728, 17, 46, "Text",
 CellTags->"i:3"],
Cell[6935, 214, 879, 21, 65, "Text"],
Cell[CellGroupData[{
Cell[7839, 239, 93, 3, 69, "Input",
 CellTags->"Cell 9.1"],
Cell[7935, 244, 95, 2, 45, "Output",
 CellTags->"Cell 9.1"]
}, Open  ]],
Cell[8045, 249, 1069, 35, 67, "Text"],
Cell[9117, 286, 1134, 36, 48, "Text"],
Cell[10254, 324, 1870, 43, 108, "Text",
 CellTags->"i:4"],
Cell[12127, 369, 608, 15, 48, "Text",
 CellTags->"i:2"],
Cell[12738, 386, 509, 21, 28, "Text"]
}, Closed]],
Cell[CellGroupData[{
Cell[13284, 412, 138, 6, 40, "Subtitle",
 CellTags->{"Sec. 9.2", "c:3"}],
Cell[13425, 420, 16, 0, 27, "Text"],
Cell[CellGroupData[{
Cell[13466, 424, 57, 1, 39, "Subsubtitle",
 CellTags->"c:4"],
Cell[13526, 427, 343, 8, 46, "Text"],
Cell[13872, 437, 40, 0, 27, "Text"],
Cell[CellGroupData[{
Cell[13937, 441, 109, 3, 69, "Input",
 CellTags->"Cell 9.2"],
Cell[14049, 446, 63, 1, 45, "Output"]
}, Open  ]],
Cell[14127, 450, 28, 0, 27, "Text"],
Cell[CellGroupData[{
Cell[14180, 454, 98, 3, 69, "Input",
 CellTags->"Cell 9.3"],
Cell[14281, 459, 45, 0, 45, "Output"]
}, Open  ]],
Cell[14341, 462, 175, 2, 46, "Text"],
Cell[14519, 466, 34, 0, 27, "Text"],
Cell[CellGroupData[{
Cell[14578, 470, 97, 3, 69, "Input",
 CellTags->"Cell 9.4"],
Cell[14678, 475, 33, 0, 45, "Output"]
}, Open  ]],
Cell[14726, 478, 98, 5, 77, "Text"],
Cell[CellGroupData[{
Cell[14849, 487, 166, 4, 69, "Input",
 CellTags->"Cell 9.5"],
Cell[15018, 493, 33, 0, 45, "Output"]
}, Open  ]],
Cell[15066, 496, 104, 1, 27, "Text"],
Cell[15173, 499, 26, 0, 27, "Text"],
Cell[CellGroupData[{
Cell[15224, 503, 93, 3, 69, "Input",
 CellTags->"Cell 9.6"],
Cell[15320, 508, 29, 0, 45, "Output"]
}, Open  ]],
Cell[15364, 511, 206, 3, 27, "Text"],
Cell[15573, 516, 30, 0, 27, "Text"],
Cell[CellGroupData[{
Cell[15628, 520, 135, 5, 69, "Input",
 CellTags->"Cell 9.7"],
Cell[15766, 527, 29, 0, 45, "Output"]
}, Open  ]],
Cell[15810, 530, 665, 23, 65, "Text",
 CellTags->"i:115"],
Cell[16478, 555, 2920, 98, 192, "Text",
 CellTags->"Table 9.1"]
}, Closed]],
Cell[CellGroupData[{
Cell[19435, 658, 76, 1, 28, "Subsubtitle",
 CellTags->"c:5"],
Cell[19514, 661, 292, 9, 27, "Text",
 CellTags->"i:16"],
Cell[CellGroupData[{
Cell[19831, 674, 149, 5, 69, "Input",
 CellTags->"Cell 9.8"],
Cell[19983, 681, 50, 1, 63, "Output"]
}, Open  ]],
Cell[20048, 685, 136, 4, 27, "Text"],
Cell[CellGroupData[{
Cell[20209, 693, 95, 3, 69, "Input",
 CellTags->"Cell 9.9"],
Cell[20307, 698, 116, 2, 45, "Output",
 CellTags->"Cell 9.9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[20460, 705, 143, 5, 69, "Input",
 CellTags->"Cell 9.10"],
Cell[20606, 712, 145, 3, 63, "Output",
 CellTags->"Cell 9.10"]
}, Open  ]],
Cell[20766, 718, 505, 16, 28, "Text",
 CellTags->"i:17"],
Cell[CellGroupData[{
Cell[21296, 738, 125, 4, 69, "Input",
 CellTags->"Cell 9.11"],
Cell[21424, 744, 115, 2, 47, "Output",
 CellTags->"Cell 9.11"]
}, Open  ]],
Cell[21554, 749, 232, 10, 28, "Text"],
Cell[21789, 761, 2063, 52, 122, "Text",
 CellTags->"i:5"],
Cell[23855, 815, 772, 24, 47, "Text"],
Cell[CellGroupData[{
Cell[24652, 843, 129, 4, 69, "Input",
 CellTags->"Cell 9.12"],
Cell[24784, 849, 46, 0, 45, "Output"]
}, Open  ]],
Cell[24845, 852, 316, 7, 27, "Text"]
}, Closed]],
Cell[CellGroupData[{
Cell[25198, 864, 71, 1, 28, "Subsubtitle",
 CellTags->"c:6"],
Cell[25272, 867, 500, 18, 27, "Text",
 CellTags->"i:18"],
Cell[25775, 887, 5065, 171, 286, "Text",
 CellTags->{"i:96", "Table 9.2"}],
Cell[30843, 1060, 895, 37, 71, "Text"],
Cell[31741, 1099, 207, 3, 28, "Text"],
Cell[31951, 1104, 3452, 122, 112, "Text"]
}, Closed]],
Cell[CellGroupData[{
Cell[35440, 1231, 62, 1, 28, "Subsubtitle",
 CellTags->"c:7"],
Cell[35505, 1234, 286, 9, 27, "Text"],
Cell[35794, 1245, 2484, 85, 202, "Text",
 CellTags->"Table 9.3"],
Cell[38281, 1332, 103, 3, 27, "Text"],
Cell[38387, 1337, 241, 6, 54, "Text"],
Cell[CellGroupData[{
Cell[38653, 1347, 130, 4, 69, "Input",
 CellTags->"Cell 9.13"],
Cell[38786, 1353, 128, 4, 69, "Output",
 CellTags->"Cell 9.13"]
}, Open  ]],
Cell[38929, 1360, 520, 19, 29, "Text"],
Cell[CellGroupData[{
Cell[39474, 1383, 160, 5, 69, "Input",
 CellTags->"Cell 9.14"],
Cell[39637, 1390, 114, 2, 45, "Output",
 CellTags->"Cell 9.14"]
}, Open  ]],
Cell[39766, 1395, 63, 0, 27, "Text"],
Cell[CellGroupData[{
Cell[39854, 1399, 107, 3, 69, "Input",
 CellTags->"Cell 9.15"],
Cell[39964, 1404, 207, 4, 45, "Output",
 CellTags->"Cell 9.15"]
}, Open  ]],
Cell[40186, 1411, 248, 6, 27, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[40471, 1422, 65, 1, 39, "Subsubtitle",
 CellTags->"c:8"],
Cell[40539, 1425, 591, 15, 46, "Text",
 CellTags->"i:14"],
Cell[41133, 1442, 241, 7, 27, "Text"],
Cell[41377, 1451, 4812, 157, 197, "Text",
 CellTags->"i:15"],
Cell[46192, 1610, 332, 12, 27, "Text"],
Cell[CellGroupData[{
Cell[46549, 1626, 263, 10, 69, "Input",
 CellTags->"Cell 9.16"],
Cell[46815, 1638, 116, 3, 63, "Output",
 CellTags->"Cell 9.16"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[46980, 1647, 426, 16, 42, "Subsubtitle",
 CellTags->"c:9"],
Cell[47409, 1665, 808, 31, 48, "Text",
 CellTags->"i:20"],
Cell[CellGroupData[{
Cell[48242, 1700, 100, 3, 69, "Input",
 CellTags->"Cell 9.17"],
Cell[48345, 1705, 45, 0, 45, "Output"]
}, Open  ]],
Cell[48405, 1708, 421, 10, 47, "Text",
 CellTags->"i:6"],
Cell[CellGroupData[{
Cell[48851, 1722, 124, 4, 69, "Input",
 CellTags->"Cell 9.18"],
Cell[48978, 1728, 137, 2, 45, "Output",
 CellTags->"Cell 9.18"]
}, Open  ]],
Cell[49130, 1733, 345, 9, 28, "Text"],
Cell[CellGroupData[{
Cell[49500, 1746, 335, 7, 69, "Input",
 CellTags->"Cell 9.19"],
Cell[49838, 1755, 315, 5, 45, "Output",
 CellTags->"Cell 9.19"]
}, Open  ]],
Cell[50168, 1763, 604, 15, 28, "Text",
 CellTags->"i:7"],
Cell[CellGroupData[{
Cell[50797, 1782, 458, 10, 69, "Input",
 CellTags->"Cell 9.20"],
Cell[51258, 1794, 299, 5, 45, "Output",
 CellTags->"Cell 9.20"]
}, Open  ]],
Cell[51572, 1802, 1351, 36, 69, "Text"],
Cell[CellGroupData[{
Cell[52948, 1842, 274, 7, 69, "Input",
 CellTags->"Cell 9.21"],
Cell[53225, 1851, 161, 2, 45, "Output",
 CellTags->"Cell 9.21"]
}, Open  ]],
Cell[53401, 1856, 609, 14, 66, "Text"],
Cell[54013, 1872, 616, 18, 47, "Text",
 CellTags->"i:21"],
Cell[CellGroupData[{
Cell[54654, 1894, 286, 9, 69, "Input",
 CellTags->"Cell 9.22"],
Cell[54943, 1905, 112, 2, 45, "Output",
 CellTags->"Cell 9.22"]
}, Open  ]],
Cell[55070, 1910, 163, 6, 27, "Text"],
Cell[55236, 1918, 4177, 122, 200, "Text",
 CellTags->"Table 9.5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[59450, 2045, 64, 1, 39, "Subsubtitle",
 CellTags->"c:10"],
Cell[59517, 2048, 378, 12, 28, "Text"],
Cell[59898, 2062, 382, 11, 28, "Text"],
Cell[60283, 2075, 406, 15, 30, "Text"],
Cell[60692, 2092, 354, 12, 28, "Text"],
Cell[61049, 2106, 595, 16, 49, "Text"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[61693, 2128, 199, 10, 40, "Subtitle",
 CellTags->{"Sec. 9.3", "c:11"}],
Cell[61895, 2140, 1223, 34, 64, "Text",
 CellTags->"i:8"],
Cell[63121, 2176, 616, 9, 64, "Text"],
Cell[63740, 2187, 1573, 48, 66, "Text",
 CellTags->"i:13"],
Cell[65316, 2237, 953, 18, 65, "Text"],
Cell[66272, 2257, 1350, 23, 109, "Text"]
}, Closed]],
Cell[CellGroupData[{
Cell[67659, 2285, 79, 1, 40, "Subtitle",
 CellTags->{"Sec. 9.4", "c:12"}],
Cell[67741, 2288, 16, 0, 27, "Text"],
Cell[CellGroupData[{
Cell[67782, 2292, 60, 1, 39, "Subsubtitle",
 CellTags->"c:13"],
Cell[67845, 2295, 593, 18, 50, "Text",
 CellTags->"i:22"],
Cell[CellGroupData[{
Cell[68463, 2317, 95, 3, 69, "Input",
 CellTags->"Cell 9.23"],
Cell[68561, 2322, 31, 0, 45, "Output"]
}, Open  ]],
Cell[68607, 2325, 121, 1, 27, "Text"],
Cell[CellGroupData[{
Cell[68753, 2330, 94, 3, 69, "Input",
 CellTags->"Cell 9.24"],
Cell[68850, 2335, 31, 0, 45, "Output"]
}, Open  ]],
Cell[68896, 2338, 277, 8, 28, "Text"],
Cell[CellGroupData[{
Cell[69198, 2350, 105, 3, 69, "Input",
 CellTags->"Cell 9.25"],
Cell[69306, 2355, 28, 0, 45, "Output"]
}, Open  ]],
Cell[69349, 2358, 680, 21, 47, "Text"],
Cell[CellGroupData[{
Cell[70054, 2383, 73, 2, 69, "Input",
 CellTags->"Cell 9.26"],
Cell[70130, 2387, 31, 0, 45, "Output"]
}, Open  ]],
Cell[70176, 2390, 316, 8, 27, "Text"]
}, Closed]],
Cell[CellGroupData[{
Cell[70529, 2403, 57, 1, 28, "Subsubtitle",
 CellTags->"c:14"],
Cell[70589, 2406, 1757, 60, 15922720, "Text"],
Cell[CellGroupData[{
Cell[72371, 2470, 159, 5, 6915190, "Input",
 CellTags->"Cell 9.27"],
Cell[72533, 2477, 39, 1, 5217558, "Output"]
}, Open  ]],
Cell[72587, 2481, 221, 7, 2547977, "Text"],
Cell[CellGroupData[{
Cell[72833, 2492, 94, 3, 6915190, "Input",
 CellTags->"Cell 9.28"],
Cell[72930, 2497, 28, 0, 4482635, "Output"]
}, Open  ]],
Cell[72973, 2500, 222, 7, 2547977, "Text"],
Cell[CellGroupData[{
Cell[73220, 2511, 126, 4, 6915190, "Input",
 CellTags->"Cell 9.29"],
Cell[73349, 2517, 40, 1, 5217558, "Output"]
}, Open  ]],
Cell[73404, 2521, 280, 9, 2547977, "Text",
 CellTags->"i:23"],
Cell[73687, 2532, 104, 3, 6915190, "Input",
 CellTags->"Cell 9.30"],
Cell[73794, 2537, 388, 17, 2547977, "Text"],
Cell[CellGroupData[{
Cell[74207, 2558, 72, 2, 6915190, "Input",
 CellTags->"Cell 9.31"],
Cell[74282, 2562, 28, 0, 4482635, "Output"]
}, Open  ]],
Cell[74325, 2565, 173, 4, 2547977, "Text",
 CellTags->"i:24"],
Cell[74501, 2571, 119, 3, 6915190, "Input",
 CellTags->"Cell 9.32"],
Cell[74623, 2576, 1550, 52, 11477393, "Text",
 CellTags->"i:10"],
Cell[76176, 2630, 343, 8, 4474590, "Text"],
Cell[76522, 2640, 455, 10, 7004116, "Text"],
Cell[76980, 2652, 4986, 149, 29753418, "Text",
 CellTags->{"i:25", "Table 9.6"}],
Cell[81969, 2803, 50, 1, 2191876, "Text"],
Cell[82022, 2806, 2213, 69, 17069202, "Text"]
}, Closed]],
Cell[CellGroupData[{
Cell[84272, 2880, 81, 1, 28, "Subsubtitle",
 CellTags->"c:15"],
Cell[84356, 2883, 1073, 29, 10091300, "Text",
 CellTags->"i:12"],
Cell[85432, 2914, 64134, 1054, 53350253, "Picture"],
Cell[149569, 3970, 145, 2, 1402801, "Caption",
 CellTags->"Fig. 9.1"],
Cell[149717, 3974, 490, 19, 5302245, "Text"],
Cell[150210, 3995, 1039, 39, 6915190, "Text"],
Cell[151252, 4036, 1701, 67, 6991546, "Text"],
Cell[152956, 4105, 654, 23, 2547977, "Text"],
Cell[CellGroupData[{
Cell[153635, 4132, 94, 3, 6915190, "Input",
 CellTags->"Cell 9.33"],
Cell[153732, 4137, 92, 2, 4482635, "Output",
 CellTags->"Cell 9.33"]
}, Open  ]],
Cell[153839, 4142, 380, 12, 2868887, "Text"],
Cell[CellGroupData[{
Cell[154244, 4158, 127, 4, 7132056, "Input",
 CellTags->"Cell 9.34"],
Cell[154374, 4164, 116, 3, 5156596, "Output",
 CellTags->"Cell 9.34"]
}, Open  ]],
Cell[154505, 4170, 939, 34, 4781478, "Text"],
Cell[155447, 4206, 785, 22, 8361340, "Text",
 CellTags->"i:11"],
Cell[156235, 4230, 438, 8, 8755145, "Text"],
Cell[156676, 4240, 192, 4, 4474590, "Text"]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[156917, 4250, 84, 1, 40, "Subtitle",
 CellTags->{"Sec. 9.5", "c:16"}],
Cell[157004, 4253, 16, 0, 47, "Text"],
Cell[CellGroupData[{
Cell[157045, 4257, 85, 1, 65, "Subsubtitle",
 CellTags->"c:17"],
Cell[157133, 4260, 383, 12, 4474590, "Text",
 CellTags->"i:26"],
Cell[CellGroupData[{
Cell[157541, 4276, 191, 6, 6915190, "Input",
 CellTags->"Cell 9.35"],
Cell[157735, 4284, 112, 3, 4482635, "Output"]
}, Open  ]],
Cell[157862, 4290, 156, 3, 2547977, "Text"],
Cell[158021, 4295, 506, 18, 6220645, "Text"],
Cell[158530, 4315, 398, 13, 4474590, "Text",
 CellTags->"i:27"],
Cell[CellGroupData[{
Cell[158953, 4332, 104, 3, 6915190, "Input",
 CellTags->"Cell 9.36"],
Cell[159060, 4337, 28, 0, 4482635, "Output"]
}, Open  ]],
Cell[159103, 4340, 39, 0, 2547977, "Text"],
Cell[CellGroupData[{
Cell[159167, 4344, 253, 8, 6915190, "Input",
 CellTags->"Cell 9.37"],
Cell[159423, 4354, 159, 5, 5593237, "Output"]
}, Open  ]],
Cell[159597, 4362, 248, 4, 4474590, "Text"],
Cell[CellGroupData[{
Cell[159870, 4370, 151, 5, 6915190, "Input",
 CellTags->"Cell 9.38"],
Cell[160024, 4377, 166, 6, 4482635, "Output"]
}, Open  ]],
Cell[160205, 4386, 323, 11, 4474590, "Text"],
Cell[CellGroupData[{
Cell[160553, 4401, 141, 5, 6915190, "Input",
 CellTags->"Cell 9.39"],
Cell[160697, 4408, 304, 10, 5593237, "Output"]
}, Open  ]],
Cell[161016, 4421, 245, 8, 2547977, "Text",
 CellTags->"i:28"],
Cell[CellGroupData[{
Cell[161286, 4433, 108, 3, 6915190, "Input",
 CellTags->"Cell 9.40"],
Cell[161397, 4438, 271, 10, 7132056, "Output"]
}, Open  ]],
Cell[161683, 4451, 625, 24, 4474590, "Text",
 CellTags->"i:29"],
Cell[CellGroupData[{
Cell[162333, 4479, 175, 6, 6915190, "Input",
 CellTags->"Cell 9.41"],
Cell[162511, 4487, 46, 1, 4482635, "Output"]
}, Open  ]],
Cell[162572, 4491, 332, 12, 2547977, "Text"],
Cell[CellGroupData[{
Cell[162929, 4507, 72, 2, 6915190, "Input",
 CellTags->"Cell 9.42"],
Cell[163004, 4511, 179, 6, 5593237, "Output"]
}, Open  ]],
Cell[163198, 4520, 606, 26, 4695985, "Text"],
Cell[163807, 4548, 334, 11, 4474590, "Text"],
Cell[CellGroupData[{
Cell[164166, 4563, 146, 5, 6915190, "Input",
 CellTags->"Cell 9.43"],
Cell[164315, 4570, 28, 0, 4482635, "Output"]
}, Open  ]],
Cell[164358, 4573, 1048, 41, 6220645, "Text"],
Cell[165409, 4616, 573, 20, 4474590, "Text"],
Cell[CellGroupData[{
Cell[166007, 4640, 174, 6, 6915190, "Input",
 CellTags->"Cell 9.44"],
Cell[166184, 4648, 28, 0, 4482635, "Output"]
}, Open  ]],
Cell[166227, 4651, 3527, 102, 27090321, "Text"]
}, Closed]],
Cell[CellGroupData[{
Cell[169791, 4758, 86, 1, 43, "Subsubtitle",
 CellTags->{"i:98", "c:18"}],
Cell[CellGroupData[{
Cell[169902, 4763, 53, 1, 77, "Section",
 CellTags->"c:19"],
Cell[169958, 4766, 1091, 38, 7915595, "Text"],
Cell[171052, 4806, 14244, 236, 40862658, "Picture"],
Cell[185299, 5044, 230, 12, 1402801, "Caption",
 CellTags->"Fig. 9.2"],
Cell[185532, 5058, 252, 7, 4474590, "Text"],
Cell[CellGroupData[{
Cell[185809, 5069, 505, 17, 9031376, "Input",
 CellTags->"Cell 9.45"],
Cell[186317, 5088, 163, 4, 4482635, "Output",
 CellTags->"Cell 9.45"]
}, Open  ]],
Cell[186495, 5095, 529, 13, 6220645, "Text"],
Cell[187027, 5110, 137, 3, 2547977, "Text"]
}, Closed]],
Cell[CellGroupData[{
Cell[187201, 5118, 59, 1, 56, "Section",
 CellTags->{"i:31", "c:20"}],
Cell[187263, 5121, 293, 13, 2547977, "Text"],
Cell[187559, 5136, 1280, 48, 3060147, "NumberedEquation",
 CellTags->"(9.5.1)"],
Cell[188842, 5186, 258, 6, 4853672, "Text"],
Cell[189103, 5194, 688, 26, 3882938, "NumberedEquation",
 CellTags->"(9.5.2)"],
Cell[189794, 5222, 325, 14, 2547977, "Text"],
Cell[190122, 5238, 559, 19, 4474590, "Text"],
Cell[CellGroupData[{
Cell[190706, 5261, 94, 3, 6915190, "Input",
 CellTags->"Cell 9.46"],
Cell[190803, 5266, 187, 5, 4482635, "Output"]
}, Open  ]],
Cell[191005, 5274, 351, 14, 3393437, "Text",
 CellTags->"i:42"],
Cell[CellGroupData[{
Cell[191381, 5292, 94, 3, 6915190, "Input",
 CellTags->"Cell 9.47"],
Cell[191478, 5297, 29, 0, 4482635, "Output"]
}, Open  ]],
Cell[191522, 5300, 508, 19, 5217558, "Text"],
Cell[192033, 5321, 486, 16, 7004116, "Text"],
Cell[192522, 5339, 536, 20, 3060147, "NumberedEquation",
 CellTags->"(9.5.3)"],
Cell[193061, 5361, 129, 4, 5302245, "Text"],
Cell[193193, 5367, 496, 19, 3060147, "NumberedEquation",
 CellTags->"(9.5.4)"],
Cell[193692, 5388, 363, 15, 3060147, "Text"]
}, Closed]],
Cell[CellGroupData[{
Cell[194092, 5408, 69, 1, 56, "Section",
 CellTags->{"i:32", "c:21"}],
Cell[194164, 5411, 911, 44, 175, "Text"],
Cell[195078, 5457, 2206, 87, 108, "NumberedEquation",
 CellTags->"(9.5.5)"],
Cell[197287, 5546, 464, 19, 72, "Text"],
Cell[197754, 5567, 342, 14, 126, "Text"],
Cell[198099, 5583, 2812, 96, 608, "NumberedEquation",
 CellTags->"(9.5.6)"],
Cell[200914, 5681, 170, 6, 72, "Text"],
Cell[CellGroupData[{
Cell[201109, 5691, 117, 4, 195, "Input",
 CellTags->"Cell 9.48"],
Cell[201229, 5697, 252, 7, 127, "Output"]
}, Open  ]],
Cell[201496, 5707, 166, 6, 72, "Text"],
Cell[201665, 5715, 1164, 34, 268, "Text",
 CellTags->"Table 9.8"]
}, Closed]],
Cell[CellGroupData[{
Cell[202866, 5754, 61, 1, 56, "Section",
 CellTags->"c:22"],
Cell[CellGroupData[{
Cell[202952, 5759, 78, 2, 47, "Subsubsection",
 CellTags->"i:33"],
Cell[203033, 5763, 395, 12, 4474590, "Text"],
Cell[CellGroupData[{
Cell[203453, 5779, 144, 4, 6915190, "Input",
 CellTags->"Cell 9.49"],
Cell[203600, 5785, 285, 12, 11289220, "Output"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[203934, 5803, 92, 2, 47, "Subsubsection",
 CellTags->"i:34"],
Cell[204029, 5807, 201, 4, 126, "Text"],
Cell[CellGroupData[{
Cell[204255, 5815, 357, 13, 253, "Input",
 CellTags->"Cell 9.50"],
Cell[204615, 5830, 672, 20, 188, "Output",
 CellTags->"Cell 9.50"]
}, Open  ]],
Cell[205302, 5853, 410, 16, 88, "Text"],
Cell[CellGroupData[{
Cell[205737, 5873, 208, 6, 253, "Input",
 CellTags->"Cell 9.51"],
Cell[205948, 5881, 800, 24, 268, "Output",
 CellTags->"Cell 9.51"]
}, Open  ]],
Cell[206763, 5908, 513, 22, 140, "Text",
 CellTags->"i:104"],
Cell[CellGroupData[{
Cell[207301, 5934, 192, 6, 253, "Input",
 CellTags->"Cell 9.52"],
Cell[207496, 5942, 651, 19, 188, "Output",
 CellTags->"Cell 9.52"]
}, Open  ]],
Cell[208162, 5964, 269, 7, 126, "Text"],
Cell[CellGroupData[{
Cell[208456, 5975, 144, 5, 195, "Input",
 CellTags->"Cell 9.53"],
Cell[208603, 5982, 165, 4, 127, "Output",
 CellTags->"Cell 9.53"]
}, Open  ]],
Cell[208783, 5989, 924, 31, 175, "Text"],
Cell[209710, 6022, 390, 15, 78, "NumberedEquation",
 CellTags->"(9.5.7)"],
Cell[210103, 6039, 310, 8, 72, "Text"],
Cell[210416, 6049, 908, 34, 96, "NumberedEquation",
 CellTags->"(9.5.8)"],
Cell[211327, 6085, 601, 24, 126, "Text"],
Cell[CellGroupData[{
Cell[211953, 6113, 214, 8, 195, "Input",
 CellTags->"Cell 9.54"],
Cell[212170, 6123, 234, 9, 187, "Output"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[212453, 6138, 96, 2, 47, "Subsubsection",
 CellTags->"i:35"],
Cell[212552, 6142, 536, 18, 233, "Text"],
Cell[213091, 6162, 389, 14, 97, "NumberedEquation",
 CellTags->"(9.5.9)"],
Cell[213483, 6178, 708, 29, 218, "Text",
 CellTags->"i:105"],
Cell[CellGroupData[{
Cell[214216, 6211, 110, 3, 243, "Input",
 CellTags->"Cell 9.55"],
Cell[214329, 6216, 216, 7, 158, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[214582, 6228, 109, 3, 243, "Input",
 CellTags->"Cell 9.56"],
Cell[214694, 6233, 145, 4, 158, "Output"]
}, Open  ]],
Cell[214854, 6240, 646, 20, 218, "Text"],
Cell[CellGroupData[{
Cell[215525, 6264, 334, 13, 243, "Input",
 CellTags->"Cell 9.57"],
Cell[215862, 6279, 73, 2, 158, "Output"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[215984, 6287, 80, 2, 47, "Subsubsection",
 CellTags->"i:36"],
Cell[216067, 6291, 479, 18, 157, "Text"],
Cell[CellGroupData[{
Cell[216571, 6313, 101, 3, 243, "Input",
 CellTags->"Cell 9.58"],
Cell[216675, 6318, 28, 0, 158, "Output"]
}, Open  ]],
Cell[216718, 6321, 99, 2, 90, "Text"],
Cell[216820, 6325, 364, 13, 90, "Text"]
}, Closed]],
Cell[CellGroupData[{
Cell[217221, 6343, 77, 2, 47, "Subsubsection",
 CellTags->"i:37"],
Cell[217301, 6347, 383, 10, 81, "Text"],
Cell[CellGroupData[{
Cell[217709, 6361, 107, 3, 125, "Input",
 CellTags->"Cell 9.59"],
Cell[217819, 6366, 45, 1, 82, "Output"]
}, Open  ]],
Cell[217879, 6370, 721, 22, 165, "Text"],
Cell[CellGroupData[{
Cell[218625, 6396, 408, 13, 163, "Input",
 CellTags->"Cell 9.60"],
Cell[219036, 6411, 233, 8, 82, "Output"]
}, Open  ]],
Cell[219284, 6422, 1009, 41, 81, "Text"],
Cell[CellGroupData[{
Cell[220318, 6467, 171, 6, 125, "Input",
 CellTags->"Cell 9.61"],
Cell[220492, 6475, 83, 2, 82, "Output"]
}, Open  ]],
Cell[220590, 6480, 172, 6, 47, "Text"],
Cell[220765, 6488, 1494, 57, 51, "NumberedEquation",
 CellTags->"(9.5.10)"],
Cell[222262, 6547, 505, 16, 112, "Text"],
Cell[222770, 6565, 8715, 145, 501, "Picture"],
Cell[231488, 6712, 652, 27, 32, "Caption",
 CellTags->"Fig. 9.3"],
Cell[232143, 6741, 825, 28, 121, "Text"],
Cell[232971, 6771, 1399, 53, 147, "NumberedEquation",
 CellTags->"(9.5.11)"],
Cell[234373, 6826, 170, 5, 47, "Text"],
Cell[234546, 6833, 530, 14, 112, "Text"],
Cell[235079, 6849, 153, 6, 47, "Text"],
Cell[235235, 6857, 2387, 78, 337, "Text",
 CellTags->"Table 9.9"]
}, Closed]]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[237683, 6942, 115, 3, 43, "Subsubtitle",
 CellTags->"c:23"],
Cell[237801, 6947, 482, 15, 36722, "Text",
 CellTags->"i:38"],
Cell[CellGroupData[{
Cell[238308, 6966, 231, 8, 40822, "Input",
 CellTags->"Cell 9.62"],
Cell[238542, 6976, 132, 4, 26463, "Output"]
}, Open  ]],
Cell[238689, 6983, 403, 12, 26415, "Text"],
Cell[239095, 6997, 134, 3, 15043, "Text"],
Cell[CellGroupData[{
Cell[239254, 7004, 247, 8, 40822, "Input",
 CellTags->"Cell 9.63"],
Cell[239504, 7014, 359, 7, 39487, "Output"]
}, Open  ]],
Cell[239878, 7024, 159, 6, 15043, "Text"],
Cell[240040, 7032, 277, 7, 26415, "Text"],
Cell[CellGroupData[{
Cell[240342, 7043, 343, 11, 40822, "Input",
 CellTags->"Cell 9.64"],
Cell[240688, 7056, 193, 6, 26463, "Output"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[240930, 7068, 67, 1, 43, "Subsubtitle",
 CellTags->"c:24"],
Cell[241000, 7071, 975, 35, 42102, "Text"],
Cell[241978, 7108, 350, 9, 26415, "Text",
 CellTags->"i:39"],
Cell[242331, 7119, 271, 10, 40822, "Input",
 CellTags->"Cell 9.65"],
Cell[CellGroupData[{
Cell[242627, 7133, 152, 5, 40822, "Input",
 CellTags->"Cell 9.66"],
Cell[242782, 7140, 209, 6, 39125, "Output"]
}, Open  ]],
Cell[243006, 7149, 171, 6, 15043, "Text"],
Cell[CellGroupData[{
Cell[243202, 7159, 153, 5, 40822, "Input",
 CellTags->"Cell 9.67"],
Cell[243358, 7166, 212, 7, 39125, "Output"]
}, Open  ]],
Cell[243585, 7176, 582, 22, 26415, "Text",
 CellTags->"i:40"],
Cell[CellGroupData[{
Cell[244192, 7202, 258, 9, 53313, "Input",
 CellTags->"Cell 9.68"],
Cell[244453, 7213, 222, 6, 35283, "Output"]
}, Open  ]],
Cell[244690, 7222, 618, 23, 31590, "Text",
 CellTags->"i:41"],
Cell[CellGroupData[{
Cell[245333, 7249, 105, 3, 40822, "Input",
 CellTags->"Cell 9.69"],
Cell[245441, 7254, 135, 4, 35283, "Output"]
}, Open  ]],
Cell[245591, 7261, 145, 3, 15043, "Text"],
Cell[245739, 7266, 164, 6, 15043, "Text"],
Cell[245906, 7274, 6100, 181, 247960, "Text",
 CellTags->"Table 9.10"]
}, Closed]],
Cell[CellGroupData[{
Cell[252043, 7460, 64, 1, 43, "Subsubtitle",
 CellTags->"c:25"],
Cell[252110, 7463, 305, 12, 47, "Text"],
Cell[252418, 7477, 207, 5, 81, "Text"],
Cell[252628, 7484, 421, 11, 112, "Text"],
Cell[253052, 7497, 393, 16, 137, "Text"],
Cell[253448, 7515, 403, 16, 176, "Text"],
Cell[253854, 7533, 537, 21, 171, "Text"],
Cell[254394, 7556, 451, 16, 132, "Text"],
Cell[254848, 7574, 115, 3, 47, "Text"],
Cell[254966, 7579, 489, 21, 47, "Text"],
Cell[255458, 7602, 691, 29, 88, "Text"],
Cell[256152, 7633, 557, 23, 127, "Text"],
Cell[256712, 7658, 1061, 44, 90, "Text"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[257822, 7708, 73, 1, 40, "Subtitle",
 CellTags->{"Sec. 9.6", "c:26"}],
Cell[257898, 7711, 16, 0, 38, "Text"],
Cell[CellGroupData[{
Cell[257939, 7715, 178, 8, 52, "Subsubtitle",
 CellTags->{"i:43", "c:27"}],
Cell[258120, 7725, 215, 6, 45902, "Text"],
Cell[258338, 7733, 230, 11, 45902, "Text"],
Cell[258571, 7746, 710, 28, 80608, "Text"],
Cell[CellGroupData[{
Cell[259306, 7778, 237, 8, 124575, "Input",
 CellTags->"Cell 9.70"],
Cell[259546, 7788, 9412, 161, 569325, "Output",
 CellTags->"Cell 9.70"]
}, Open  ]],
Cell[268973, 7952, 512, 17, 80608, "Text"],
Cell[269488, 7971, 157, 3, 45902, "Text"],
Cell[269648, 7976, 370, 5, 112063, "Text"],
Cell[270021, 7983, 437, 15, 80608, "Text",
 CellTags->"i:44"],
Cell[CellGroupData[{
Cell[270483, 8002, 358, 12, 2246, "Input",
 CellTags->"Cell 9.71"],
Cell[270844, 8016, 9284, 157, 11038, "Output",
 CellTags->"Cell 9.71"]
}, Open  ]],
Cell[280143, 8176, 1135, 45, 2020, "Text",
 CellTags->"i:133"],
Cell[281281, 8223, 237, 6, 1453, "Text"],
Cell[281521, 8231, 133, 5, 828, "Text"],
Cell[281657, 8238, 135, 5, 828, "Text"],
Cell[281795, 8245, 1913, 66, 3726, "Text"],
Cell[283711, 8313, 301, 12, 828, "Text"],
Cell[284015, 8327, 535, 15, 1453, "Text"],
Cell[CellGroupData[{
Cell[284575, 8346, 1546, 38, 4965, "Input",
 CellTags->"Cell 9.72"],
Cell[286124, 8386, 9998, 176, 11633, "Output",
 CellTags->"Cell 9.72"]
}, Open  ]],
Cell[296137, 8565, 980, 23, 2020, "Text",
 CellTags->"i:ginsp"]
}, Closed]],
Cell[CellGroupData[{
Cell[297154, 8593, 178, 8, 35, "Subsubtitle",
 CellTags->{"i:45", "c:28"}],
Cell[297335, 8603, 461, 17, 1453, "Text"],
Cell[CellGroupData[{
Cell[297821, 8624, 408, 14, 2246, "Input",
 CellTags->"Cell 9.73"],
Cell[298232, 8640, 9875, 174, 11831, "Output",
 CellTags->"Cell 9.73"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[308156, 8820, 99, 1, 35, "Subsubtitle",
 CellTags->{"i:46", "c:29"}],
Cell[308258, 8823, 1037, 37, 2843, "Text"],
Cell[CellGroupData[{
Cell[309320, 8864, 798, 24, 2932, "Input",
 CellTags->"Cell 9.74"],
Cell[310121, 8890, 18522, 311, 10428, "Output",
 CellTags->"Cell 9.74"]
}, Open  ]],
Cell[328658, 9204, 724, 24, 1453, "Text"],
Cell[329385, 9230, 576, 14, 2843, "Text",
 CellTags->"directive"],
Cell[329964, 9246, 386, 14, 1453, "Text"],
Cell[CellGroupData[{
Cell[330375, 9264, 136, 4, 2246, "Input",
 CellTags->"Cell 9.75"],
Cell[330514, 9270, 28003, 473, 11831, "Output",
 CellTags->"Cell 9.75"]
}, Open  ]],
Cell[358532, 9746, 535, 21, 2275, "Text"],
Cell[359070, 9769, 3678, 120, 5250, "Text",
 CellTags->"Table 9.11"]
}, Closed]],
Cell[CellGroupData[{
Cell[362785, 9894, 183, 8, 35, "Subsubtitle",
 CellTags->{"i:47", "c:30"}],
Cell[362971, 9904, 496, 16, 80608, "Text"],
Cell[CellGroupData[{
Cell[363492, 9924, 327, 11, 124575, "Input",
 CellTags->"Cell 9.76"],
Cell[363822, 9937, 880, 25, 120501, "Output",
 CellTags->"Cell 9.76"]
}, Open  ]],
Cell[364717, 9965, 233, 10, 45902, "Text"],
Cell[CellGroupData[{
Cell[364975, 9979, 211, 6, 124575, "Input",
 CellTags->"Cell 9.77"],
Cell[365189, 9987, 487, 11, 594012, "Output",
 CellTags->"Cell 9.77"]
}, Open  ]],
Cell[365691, 10001, 493, 16, 95518, "Text"],
Cell[CellGroupData[{
Cell[366209, 10021, 311, 9, 124575, "Input",
 CellTags->"Cell 9.78"],
Cell[366523, 10032, 3328, 87, 622460, "Output",
 CellTags->"Cell 9.78"]
}, Open  ]],
Cell[369866, 10122, 343, 11, 80608, "Text"]
}, Closed]],
Cell[CellGroupData[{
Cell[370246, 10138, 74, 1, 35, "Subsubtitle",
 CellTags->{"i:50", "c:31"}],
Cell[370323, 10141, 936, 32, 112063, "Text",
 CellTags->"i:51"],
Cell[371262, 10175, 2182, 81, 162696, "Text"],
Cell[CellGroupData[{
Cell[373469, 10260, 409, 13, 124575, "Input",
 CellTags->"Cell 9.79"],
Cell[373881, 10275, 22668, 379, 913438, "Output",
 CellTags->"Cell 9.79"]
}, Open  ]],
Cell[396564, 10657, 443, 17, 45902, "Text",
 CellTags->"i:119"],
Cell[397010, 10676, 1125, 41, 87437, "Text"],
Cell[CellGroupData[{
Cell[398160, 10721, 839, 27, 162696, "Input",
 CellTags->"Cell 9.80"],
Cell[399002, 10750, 33917, 562, 940078, "Output",
 CellTags->"Cell 9.80"]
}, Open  ]],
Cell[432934, 11315, 292, 13, 45902, "Text"],
Cell[433229, 11330, 4106, 137, 286840, "Text",
 CellTags->"Table 9.12"],
Cell[437338, 11469, 398, 9, 80608, "Text"]
}, Closed]],
Cell[CellGroupData[{
Cell[437773, 11483, 56, 1, 35, "Subsubtitle",
 CellTags->"c:32"],
Cell[437832, 11486, 716, 23, 80608, "Text",
 CellTags->"i:48"],
Cell[CellGroupData[{
Cell[438573, 11513, 355, 11, 124575, "Input",
 CellTags->"Cell 9.81"],
Cell[438931, 11526, 131496, 2151, 756712, "Output",
 CellTags->"Cell 9.81"]
}, Open  ]],
Cell[570442, 13680, 592, 19, 112063, "Text",
 CellTags->"i:53"],
Cell[571037, 13701, 148, 5, 45902, "Text"],
Cell[571188, 13708, 611, 20, 80608, "Text"],
Cell[571802, 13730, 776, 19, 142596, "Text"],
Cell[CellGroupData[{
Cell[572603, 13753, 876, 25, 162696, "Input",
 CellTags->"Cell 9.82"],
Cell[573482, 13780, 278631, 4584, 756712, "Output",
 CellTags->"Cell 9.82"]
}, Open  ]],
Cell[852128, 18367, 639, 20, 112063, "Text",
 CellTags->"i:49"],
Cell[CellGroupData[{
Cell[852792, 18391, 513, 13, 124575, "Input",
 CellTags->"Cell 9.83"],
Cell[853308, 18406, 290784, 4840, 915556, "Output",
 CellTags->"Cell 9.83"]
}, Open  ]],
Cell[1144107, 23249, 536, 16, 112063, "Text"],
Cell[1144646, 23267, 1401, 42, 142596, "Text"],
Cell[1146050, 23311, 1039, 23, 142596, "Text"],
Cell[1147092, 23336, 3784, 120, 286840, "Text"]
}, Closed]],
Cell[CellGroupData[{
Cell[1150913, 23461, 68, 1, 35, "Subsubtitle",
 CellTags->{"i:56", "c:33"}],
Cell[1150984, 23464, 754, 22, 65, "Text"],
Cell[CellGroupData[{
Cell[1151763, 23490, 619, 19, 100, "Input",
 CellTags->"Cell 9.84"],
Cell[1152385, 23511, 130120, 2188, 1288, "Output",
 CellTags->"Cell 9.84"]
}, Open  ]],
Cell[1282520, 25702, 425, 10, 65, "Text",
 CellTags->"ListAnimate"],
Cell[CellGroupData[{
Cell[1282970, 25716, 261, 5, 100, "Input",
 CellTags->"Cell 9.85"],
Cell[1283234, 25723, 135694, 2301, 622, "Output",
 CellTags->"Cell 9.85"]
}, Open  ]],
Cell[1418943, 28027, 817, 20, 90, "Text"],
Cell[1419763, 28049, 343, 8, 65, "Text"],
Cell[1420109, 28059, 473, 16, 65, "Text",
 CellTags->"Animate"],
Cell[1420585, 28077, 351, 13, 38, "Text"],
Cell[1420939, 28092, 278, 12, 77, "Text",
 CellTags->"i:manip"],
Cell[1421220, 28106, 789, 28, 90, "Text",
 CellTags->"i:manip"],
Cell[1422012, 28136, 697, 15, 100, "Input",
 CellTags->"Cell 9.86"],
Cell[CellGroupData[{
Cell[1422734, 28155, 568, 17, 131, "Input",
 CellTags->"Cell 9.87"],
Cell[1423305, 28174, 1867, 39, 622, "Output",
 CellTags->"Cell 9.87"]
}, Open  ]],
Cell[1425187, 28216, 3019, 92, 293, "Text"],
Cell[1428209, 28310, 1019, 31, 90, "Text",
 CellTags->"i:dyn"],
Cell[CellGroupData[{
Cell[1429253, 28345, 821, 24, 160, "Input",
 CellTags->"Cell 9.88"],
Cell[1430077, 28371, 1882, 41, 645, "Output",
 CellTags->"Cell 9.88"]
}, Open  ]],
Cell[1431974, 28415, 253, 7, 65, "Text"],
Cell[1432230, 28424, 1843, 39, 166, "Text"],
Cell[1434076, 28465, 919, 24, 115, "Text"],
Cell[CellGroupData[{
Cell[1435020, 28493, 444, 14, 100, "Input",
 CellTags->"Cell 9.89"],
Cell[CellGroupData[{
Cell[1435489, 28511, 5786, 101, 456, "Print",
 CellTags->"Cell 9.89"],
Cell[1441278, 28614, 5879, 102, 445, "Print",
 CellTags->"Cell 9.89"],
Cell[1447160, 28718, 9324, 159, 453, "Print",
 CellTags->"Cell 9.89"],
Cell[1456487, 28879, 11459, 194, 453, "Print",
 CellTags->"Cell 9.89"],
Cell[1467949, 29075, 12057, 204, 453, "Print",
 CellTags->"Cell 9.89"],
Cell[1480009, 29281, 15037, 252, 453, "Print",
 CellTags->"Cell 9.89"],
Cell[1495049, 29535, 15367, 258, 453, "Print",
 CellTags->"Cell 9.89"],
Cell[1510419, 29795, 16961, 284, 453, "Print",
 CellTags->"Cell 9.89"],
Cell[1527383, 30081, 19124, 319, 453, "Print",
 CellTags->"Cell 9.89"],
Cell[1546510, 30402, 19259, 322, 453, "Print",
 CellTags->"Cell 9.89"]
}, Closed]]
}, Open  ]],
Cell[1565796, 30728, 938, 18, 140, "Text",
 CellTags->"asg"],
Cell[1566737, 30748, 429, 15, 65, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1567203, 30768, 166, 2, 52, "Subsubtitle",
 CellTags->{"i:57", "c:34"}],
Cell[1567372, 30772, 1809, 47, 6816, "Text"],
Cell[CellGroupData[{
Cell[1569206, 30823, 658, 21, 2746, "Input",
 CellTags->"Cell 9.90"],
Cell[1569867, 30846, 26490, 451, 4931, "Output",
 CellTags->"Cell 9.90"]
}, Open  ]],
Cell[1596372, 31300, 1043, 27, 1293, "Text"],
Cell[1597418, 31329, 1388, 34, 1645, "Text"],
Cell[1598809, 31365, 221, 6, 2316, "Input",
 CellTags->"Cell 9.91"],
Cell[1599033, 31373, 140, 1, 531, "Text"],
Cell[CellGroupData[{
Cell[1599198, 31378, 288, 6, 1438, "Input",
 CellTags->"Cell 9.92"],
Cell[1599489, 31386, 108, 2, 932, "Output",
 CellTags->"Cell 9.92"]
}, Open  ]],
Cell[1599612, 31391, 663, 18, 931, "Text"],
Cell[CellGroupData[{
Cell[1600300, 31413, 168, 4, 1438, "Input",
 CellTags->"Cell 9.93"],
Cell[1600471, 31419, 703, 13, 1553, "Message",
 CellTags->"Cell 9.93"]
}, Open  ]],
Cell[1601189, 31435, 753, 22, 1293, "Text",
 CellTags->"i:120"],
Cell[CellGroupData[{
Cell[1601967, 31461, 286, 6, 1438, "Input",
 CellTags->"Cell 9.94"],
Cell[1602256, 31469, 113, 2, 932, "Output",
 CellTags->"Cell 9.94"]
}, Open  ]],
Cell[1602384, 31474, 710, 18, 931, "Text"],
Cell[CellGroupData[{
Cell[1603119, 31496, 209, 4, 1438, "Input",
 CellTags->"Cell 9.95"],
Cell[1603331, 31502, 94, 2, 932, "Output",
 CellTags->"Cell 9.95"]
}, Open  ]],
Cell[1603440, 31507, 409, 9, 931, "Text"],
Cell[CellGroupData[{
Cell[1603874, 31520, 150, 3, 1438, "Input",
 CellTags->"Cell 9.96"],
Cell[1604027, 31525, 264, 6, 932, "Output",
 CellTags->"Cell 9.96"]
}, Open  ]],
Cell[1604306, 31534, 393, 12, 531, "Text"],
Cell[1604702, 31548, 830, 22, 1293, "Text",
 CellTags->"i:114"],
Cell[1605535, 31572, 391, 15, 531, "Text"],
Cell[1605929, 31589, 753, 22, 1293, "Text",
 CellTags->"i:compd"],
Cell[CellGroupData[{
Cell[1606707, 31615, 280, 6, 1438, "Input",
 CellTags->"Cell 9.97"],
Cell[1606990, 31623, 283, 5, 2118, "Output",
 CellTags->"Cell 9.97"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[1607322, 31634, 77, 1, 35, "Subsubtitle",
 CellTags->{"Ex. 9.6", "c:35"}],
Cell[1607402, 31637, 559, 20, 89651, "Text",
 CellTags->"Ex. 9.6"],
Cell[1607964, 31659, 892, 27, 132182, "Text"],
Cell[1608859, 31688, 1151, 42, 146863, "Text",
 CellTags->"i:59"],
Cell[1610013, 31732, 345, 13, 45902, "Text"],
Cell[1610361, 31747, 363, 14, 45902, "Text",
 CellTags->"i:60"],
Cell[1610727, 31763, 1893, 68, 245995, "Text"],
Cell[1612623, 31833, 1427, 51, 120501, "Text",
 CellTags->"i:58"],
Cell[1614053, 31886, 1990, 70, 142596, "Text",
 CellTags->"i:52"],
Cell[1616046, 31958, 1190, 38, 120501, "Text"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[1617285, 32002, 141, 6, 40, "Subtitle",
 CellTags->{"Sec. 9.7", "c:36"}],
Cell[1617429, 32010, 869, 18, 425, "Text"],
Cell[1618301, 32030, 296, 5, 196, "Text"],
Cell[1618600, 32037, 377, 13, 196, "Text",
 CellTags->"i:122"],
Cell[CellGroupData[{
Cell[1619002, 32054, 99, 3, 303, "Input",
 CellTags->"Cell 9.98"],
Cell[1619104, 32059, 1444, 25, 522, "Print",
 CellTags->{"Cell 9.97", "Info3446487969-5429238"}]
}, Open  ]],
Cell[1620563, 32087, 194, 4, 112, "Text"],
Cell[1620760, 32093, 208, 7, 303, "Input",
 CellTags->"Cell 9.99"],
Cell[1620971, 32102, 50, 0, 112, "Text"],
Cell[CellGroupData[{
Cell[1621046, 32106, 90, 3, 303, "Input",
 CellTags->"Cell 9.100"],
Cell[CellGroupData[{
Cell[1621161, 32113, 133, 2, 245, "Print",
 CellTags->{"Cell 9.99", "Info3446488069-9932704"}],
Cell[1621297, 32117, 861, 24, 127, "Print",
 CellTags->{"Cell 9.99", "Info3446488069-9932704"}]
}, Open  ]]
}, Open  ]],
Cell[1622185, 32145, 224, 5, 196, "Text",
 CellTags->"i:121"],
Cell[CellGroupData[{
Cell[1622434, 32154, 97, 3, 303, "Input",
 CellTags->"Cell 9.101"],
Cell[1622534, 32159, 1059, 31, 321, "Print",
 CellTags->"Cell 9.100"]
}, Open  ]],
Cell[1623608, 32193, 405, 12, 196, "Text"],
Cell[1624016, 32207, 654, 21, 196, "Text",
 CellTags->"i:61"],
Cell[1624673, 32230, 1282, 27, 657, "Text"],
Cell[CellGroupData[{
Cell[1625980, 32261, 145, 5, 303, "Input",
 CellTags->"Cell 9.102"],
Cell[1626128, 32268, 568, 10, 135, "Message",
 CellTags->"Cell 9.101"],
Cell[1626699, 32280, 134, 4, 266, "Output",
 CellTags->"Cell 9.101"]
}, Open  ]],
Cell[1626848, 32287, 419, 14, 196, "Text"],
Cell[1627270, 32303, 2413, 46, 425, "Text",
 CellTags->"i:wlfa"],
Cell[CellGroupData[{
Cell[1629708, 32353, 25365, 443, 538, "WolframAlphaShortInput",
 CellTags->"Cell 9.103"],
Cell[1655076, 32798, 18769, 314, 1453, "Output",
 CellTags->"Cell 9.103"]
}, Open  ]],
Cell[1673860, 33115, 221, 4, 112, "Text"],
Cell[CellGroupData[{
Cell[1674106, 33123, 55640, 1189, 432, "WolframAlphaShortInput",
 CellTags->"Cell 9.104"],
Cell[1729749, 34314, 1110, 38, 370, "Output"]
}, Open  ]],
Cell[1730874, 34355, 93, 4, 233, "Text"],
Cell[CellGroupData[{
Cell[1730992, 34363, 76746, 1414, 432, "WolframAlphaShortInput",
 CellTags->"Cell 9.105"],
Cell[1807741, 35779, 2654, 64, 352, "Output"]
}, Open  ]],
Cell[1810410, 35846, 210, 4, 112, "Text"],
Cell[1810623, 35852, 939, 18, 272, "Text"],
Cell[1811565, 35872, 527, 11, 272, "Text"]
}, Closed]],
Cell[CellGroupData[{
Cell[1812129, 35888, 73, 1, 40, "Subtitle",
 CellTags->{"Sec. 9.8", "c:37"}],
Cell[1812205, 35891, 16, 0, 47, "Text"],
Cell[CellGroupData[{
Cell[1812246, 35895, 72, 1, 65, "Subsubtitle",
 CellTags->"c:38"],
Cell[1812321, 35898, 211, 5, 196, "Text"],
Cell[CellGroupData[{
Cell[1812557, 35907, 152, 5, 303, "Input",
 CellTags->"Cell 9.106"],
Cell[1812712, 35914, 139, 3, 197, "Output",
 CellTags->"Cell 9.102"]
}, Open  ]],
Cell[1812866, 35920, 285, 12, 112, "Text",
 CellTags->"i:62"],
Cell[CellGroupData[{
Cell[1813176, 35936, 329, 12, 303, "Input",
 CellTags->"Cell 9.107"],
Cell[1813508, 35950, 436, 13, 262, "Output",
 CellTags->"Cell 9.103"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1813981, 35968, 105, 3, 303, "Input",
 CellTags->"Cell 9.108"],
Cell[1814089, 35973, 222, 6, 228, "Output",
 CellTags->"Cell 9.104"]
}, Open  ]],
Cell[1814326, 35982, 426, 13, 196, "Text",
 CellTags->"i:63"],
Cell[CellGroupData[{
Cell[1814777, 35999, 105, 3, 303, "Input",
 CellTags->"Cell 9.109"],
Cell[1814885, 36004, 287, 9, 262, "Output",
 CellTags->"Cell 9.105"]
}, Open  ]],
Cell[1815187, 36016, 199, 4, 196, "Text"],
Cell[CellGroupData[{
Cell[1815411, 36024, 285, 10, 303, "Input",
 CellTags->"Cell 9.110"],
Cell[1815699, 36036, 277, 9, 401, "Output",
 CellTags->"Cell 9.106"]
}, Open  ]],
Cell[1815991, 36048, 164, 6, 112, "Text"],
Cell[CellGroupData[{
Cell[1816180, 36058, 107, 3, 303, "Input",
 CellTags->"Cell 9.111"],
Cell[1816290, 36063, 391, 13, 370, "Output",
 CellTags->"Cell 9.107"]
}, Open  ]],
Cell[1816696, 36079, 283, 11, 112, "Text"],
Cell[CellGroupData[{
Cell[1817004, 36094, 281, 7, 487, "Input",
 CellTags->"Cell 9.112"],
Cell[1817288, 36103, 199, 5, 228, "Output",
 CellTags->"Cell 9.108"],
Cell[1817490, 36110, 281, 9, 262, "Output",
 CellTags->"Cell 9.108"]
}, Open  ]],
Cell[1817786, 36122, 723, 21, 272, "Text",
 CellTags->"i:64"],
Cell[CellGroupData[{
Cell[1818534, 36147, 310, 10, 303, "Input",
 CellTags->"Cell 9.113"],
Cell[1818847, 36159, 146, 3, 197, "Output",
 CellTags->"Cell 9.109"]
}, Open  ]],
Cell[1819008, 36165, 402, 9, 196, "Text"],
Cell[1819413, 36176, 2934, 87, 1018, "Text",
 CellTags->"Table 9.14"]
}, Closed]],
Cell[CellGroupData[{
Cell[1822384, 36268, 59, 1, 43, "Subsubtitle",
 CellTags->"c:39"],
Cell[1822446, 36271, 663, 22, 218, "Text",
 CellTags->"i:65"],
Cell[CellGroupData[{
Cell[1823134, 36297, 153, 5, 303, "Input",
 CellTags->"Cell 9.114"],
Cell[1823290, 36304, 97, 2, 197, "Output",
 CellTags->"Cell 9.110"]
}, Open  ]],
Cell[1823402, 36309, 866, 31, 272, "Text"],
Cell[CellGroupData[{
Cell[1824293, 36344, 301, 10, 303, "Input",
 CellTags->"Cell 9.115"],
Cell[1824597, 36356, 108, 3, 228, "Output",
 CellTags->"Cell 9.111"]
}, Open  ]],
Cell[1824720, 36362, 160, 6, 112, "Text"],
Cell[1824883, 36370, 2835, 95, 418, "Text",
 CellTags->"Table 9.15"]
}, Closed]],
Cell[CellGroupData[{
Cell[1827755, 36470, 76, 1, 43, "Subsubtitle",
 CellTags->{"i:19", "c:40"}],
Cell[CellGroupData[{
Cell[1827856, 36475, 63, 1, 187, "Section",
 CellTags->"c:41"],
Cell[1827922, 36478, 1045, 38, 321, "Text"],
Cell[CellGroupData[{
Cell[1828992, 36520, 210, 7, 303, "Input",
 CellTags->"Cell 9.116"],
Cell[1829205, 36529, 174, 5, 228, "Output",
 CellTags->"Cell 9.112"]
}, Open  ]],
Cell[1829394, 36537, 139, 5, 112, "Text"],
Cell[CellGroupData[{
Cell[1829558, 36546, 100, 3, 303, "Input",
 CellTags->"Cell 9.117"],
Cell[1829661, 36551, 96, 2, 197, "Output",
 CellTags->"Cell 9.113"]
}, Open  ]],
Cell[1829772, 36556, 1014, 36, 272, "Text",
 CellTags->"i:66"],
Cell[CellGroupData[{
Cell[1830811, 36596, 156, 5, 303, "Input",
 CellTags->"Cell 9.118"],
Cell[1830970, 36603, 118, 3, 228, "Output",
 CellTags->"Cell 9.114"]
}, Open  ]],
Cell[1831103, 36609, 158, 5, 112, "Text"],
Cell[CellGroupData[{
Cell[1831286, 36618, 100, 3, 303, "Input",
 CellTags->"Cell 9.119"],
Cell[1831389, 36623, 122, 3, 197, "Output",
 CellTags->"Cell 9.115"]
}, Open  ]],
Cell[1831526, 36629, 1521, 61, 272, "Text"],
Cell[1833050, 36692, 1056, 41, 218, "Text"],
Cell[1834109, 36735, 393, 12, 487, "Input",
 CellTags->"Cell 9.120"],
Cell[1834505, 36749, 170, 6, 112, "Text"],
Cell[CellGroupData[{
Cell[1834700, 36759, 100, 3, 303, "Input",
 CellTags->"Cell 9.121"],
Cell[1834803, 36764, 93, 2, 197, "Output",
 CellTags->"Cell 9.117"]
}, Open  ]],
Cell[1834911, 36769, 168, 6, 112, "Text"],
Cell[CellGroupData[{
Cell[1835104, 36779, 100, 3, 303, "Input",
 CellTags->"Cell 9.122"],
Cell[1835207, 36784, 95, 2, 197, "Output",
 CellTags->"Cell 9.118"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[1835351, 36792, 75, 1, 135, "Section",
 CellTags->"c:42"],
Cell[1835429, 36795, 454, 15, 196, "Text"],
Cell[CellGroupData[{
Cell[1835908, 36814, 90, 3, 303, "Input",
 CellTags->"Cell 9.123"],
Cell[CellGroupData[{
Cell[1836023, 36821, 42, 0, 127, "Print"],
Cell[1836068, 36823, 809, 25, 340, "Print"]
}, Open  ]]
}, Open  ]],
Cell[1836904, 36852, 938, 37, 196, "Text"]
}, Closed]],
Cell[CellGroupData[{
Cell[1837879, 36894, 78, 1, 135, "Section",
 CellTags->{"i:67", "c:43"}],
Cell[1837960, 36897, 368, 10, 196, "Text"],
Cell[CellGroupData[{
Cell[1838353, 36911, 370, 12, 395, "Input",
 CellTags->"Cell 9.124"],
Cell[1838726, 36925, 39, 1, 228, "Output"]
}, Open  ]],
Cell[1838780, 36929, 2309, 71, 516, "Text"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[1841138, 37006, 66, 1, 43, "Subsubtitle",
 CellTags->"c:44"],
Cell[1841207, 37009, 389, 11, 112, "Text"],
Cell[1841599, 37022, 432, 21, 307, "Text"],
Cell[1842034, 37045, 1192, 42, 346, "Text"],
Cell[1843229, 37089, 975, 34, 272, "Text"]
}, Closed]],
Cell[CellGroupData[{
Cell[1844241, 37128, 89, 1, 43, "Subsubtitle",
 CellTags->{"i:68", "c:45"}],
Cell[1844333, 37131, 738, 21, 272, "Text"],
Cell[CellGroupData[{
Cell[1845096, 37156, 95, 2, 303, "Input",
 CellTags->"Cell 9.125"],
Cell[1845194, 37160, 752, 13, 135, "Message",
 CellTags->"Cell 9.122"],
Cell[1845949, 37175, 259, 8, 197, "Output",
 CellTags->"Cell 9.122"]
}, Open  ]],
Cell[1846223, 37186, 650, 21, 272, "Text"],
Cell[1846876, 37209, 490, 12, 272, "Text"],
Cell[1847369, 37223, 257, 8, 112, "Text"],
Cell[1847629, 37233, 305, 10, 303, "Input",
 CellTags->"Cell 9.126"],
Cell[1847937, 37245, 563, 17, 196, "Text"],
Cell[CellGroupData[{
Cell[1848525, 37266, 100, 3, 303, "Input",
 CellTags->"Cell 9.127"],
Cell[1848628, 37271, 13991, 236, 1456, "Output",
 CellTags->"Cell 9.124"]
}, Open  ]],
Cell[1862634, 37510, 420, 16, 112, "Text"],
Cell[1863057, 37528, 3745, 128, 418, "Text",
 CellTags->"Table 9.17"]
}, Closed]],
Cell[CellGroupData[{
Cell[1866839, 37661, 100, 1, 43, "Subsubtitle",
 CellTags->{"i:69", "c:46"}],
Cell[1866942, 37664, 333, 10, 47, "Text",
 CellTags->"i:123"],
Cell[1867278, 37676, 558, 26, 93, "NE2",
 CellTags->{"(9.8.1)", "i:106"}],
Cell[1867839, 37704, 294, 9, 47, "Text"],
Cell[1868136, 37715, 370, 11, 163, "Input",
 CellTags->"Cell 9.128"],
Cell[1868509, 37728, 493, 16, 112, "Text"],
Cell[1869005, 37746, 778, 27, 81, "Text"],
Cell[CellGroupData[{
Cell[1869808, 37777, 156, 5, 125, "Input",
 CellTags->"Cell 9.129"],
Cell[1869967, 37784, 73, 2, 126, "Output",
 CellTags->"Cell 9.127"]
}, Open  ]],
Cell[1870055, 37789, 573, 18, 81, "Text"],
Cell[CellGroupData[{
Cell[1870653, 37811, 369, 11, 125, "Input",
 CellTags->"Cell 9.130"],
Cell[1871025, 37824, 1500, 31, 618, "Output",
 CellTags->"Cell 9.127"]
}, Open  ]],
Cell[1872540, 37858, 188, 6, 47, "Text"],
Cell[1872731, 37866, 6417, 197, 578, "Text",
 CellTags->{"i:111", "Table 9.18"}],
Cell[1879151, 38065, 800, 33, 81, "Text",
 CellTags->"i:80"],
Cell[CellGroupData[{
Cell[1879976, 38102, 193, 6, 163, "Input",
 CellTags->"Cell 9.131"],
Cell[1880172, 38110, 98, 2, 82, "Output",
 CellTags->"Cell 9.128"]
}, Open  ]],
Cell[1880285, 38115, 236, 5, 47, "Text"],
Cell[1880524, 38122, 2015, 64, 190, "Text",
 CellTags->"i:Piecewise"],
Cell[CellGroupData[{
Cell[1882564, 38190, 652, 20, 163, "Input",
 CellTags->"Cell 9.132"],
Cell[1883219, 38212, 1710, 51, 222, "Output",
 CellTags->"Cell 9.129"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[1884978, 38269, 77, 1, 43, "Subsubtitle",
 CellTags->{"Ex. 9.8", "c:47"}],
Cell[1885058, 38272, 227, 10, 112, "Text"],
Cell[1885288, 38284, 454, 18, 137, "Text"],
Cell[1885745, 38304, 595, 22, 188, "Text"],
Cell[1886343, 38328, 474, 19, 187, "Text"],
Cell[1886820, 38349, 105, 4, 112, "Text"],
Cell[1886928, 38355, 240, 11, 137, "Text"],
Cell[1887171, 38368, 401, 16, 137, "Text"],
Cell[1887575, 38386, 469, 18, 137, "Text"],
Cell[1888047, 38406, 232, 7, 112, "Text"],
Cell[1888282, 38415, 607, 24, 188, "Text"],
Cell[1888892, 38441, 178, 5, 112, "Text"],
Cell[1889073, 38448, 612, 24, 112, "Text"],
Cell[1889688, 38474, 429, 18, 137, "Text"],
Cell[1890120, 38494, 424, 18, 137, "Text"],
Cell[1890547, 38514, 162, 5, 112, "Text"],
Cell[1890712, 38521, 401, 18, 171, "Text"],
Cell[1891116, 38541, 633, 26, 206, "Text"],
Cell[1891752, 38569, 848, 38, 112, "Text"],
Cell[1892603, 38609, 925, 38, 378, "Text"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[1893577, 38653, 65, 1, 40, "Subtitle",
 CellTags->{"Sec. 9.9", "c:48"}],
Cell[1893645, 38656, 16, 0, 47, "Text"],
Cell[CellGroupData[{
Cell[1893686, 38660, 69, 1, 65, "Subsubtitle",
 CellTags->{"i:70", "c:49"}],
Cell[1893758, 38663, 749, 29, 196, "Text"],
Cell[1894510, 38694, 477, 16, 233, "Text"],
Cell[CellGroupData[{
Cell[1895012, 38714, 386, 11, 395, "Input",
 CellTags->"Cell 9.133"],
Cell[1895401, 38727, 234, 6, 275, "Output",
 CellTags->"Cell 9.131"]
}, Open  ]],
Cell[1895650, 38736, 380, 15, 112, "Text"],
Cell[CellGroupData[{
Cell[1896055, 38755, 118, 4, 303, "Input",
 CellTags->"Cell 9.134"],
Cell[1896176, 38761, 210, 6, 275, "Output",
 CellTags->"Cell 9.132"]
}, Open  ]],
Cell[1896401, 38770, 72, 0, 112, "Text"],
Cell[CellGroupData[{
Cell[1896498, 38774, 119, 4, 303, "Input",
 CellTags->"Cell 9.135"],
Cell[1896620, 38780, 435, 14, 275, "Output",
 CellTags->"Cell 9.133"]
}, Open  ]],
Cell[1897070, 38797, 733, 30, 112, "Text"],
Cell[CellGroupData[{
Cell[1897828, 38831, 243, 8, 303, "Input",
 CellTags->"Cell 9.136"],
Cell[1898074, 38841, 1178, 37, 453, "Output",
 CellTags->"Cell 9.134"]
}, Open  ]],
Cell[1899267, 38881, 899, 26, 307, "Text"],
Cell[CellGroupData[{
Cell[1900191, 38911, 260, 9, 303, "Input",
 CellTags->"Cell 9.137"],
Cell[1900454, 38922, 536, 19, 383, "Output",
 CellTags->"Cell 9.135"]
}, Open  ]],
Cell[1901005, 38944, 160, 3, 112, "Text"],
Cell[CellGroupData[{
Cell[1901190, 38951, 105, 3, 303, "Input",
 CellTags->"Cell 9.138"],
Cell[1901298, 38956, 344, 12, 363, "Output",
 CellTags->"Cell 9.136"]
}, Open  ]],
Cell[1901657, 38971, 239, 10, 112, "Text"],
Cell[1901899, 38983, 283, 9, 196, "Text"],
Cell[1902185, 38994, 309, 14, 127, "Text"],
Cell[1902497, 39010, 248, 11, 112, "Text"]
}, Closed]],
Cell[CellGroupData[{
Cell[1902782, 39026, 70, 1, 43, "Subsubtitle",
 CellTags->{"i:71", "c:50"}],
Cell[1902855, 39029, 443, 14, 196, "Text"],
Cell[1903301, 39045, 1114, 39, 197, "NE3",
 CellTags->"(9.9.1)"],
Cell[1904418, 39086, 1115, 38, 272, "Text",
 CellTags->"i:116"],
Cell[1905536, 39126, 424, 15, 218, "Text"],
Cell[1905963, 39143, 421, 15, 181, "Text"],
Cell[1906387, 39160, 358, 11, 218, "Text"],
Cell[1906748, 39173, 796, 30, 428, "Text",
 CellTags->"i:76"],
Cell[CellGroupData[{
Cell[1907569, 39207, 272, 9, 303, "Input",
 CellTags->"Cell 9.139"],
Cell[1907844, 39218, 680, 23, 332, "Output",
 CellTags->"Cell 9.138"]
}, Open  ]],
Cell[1908539, 39244, 1212, 45, 453, "Text"],
Cell[1909754, 39291, 710, 25, 226, "Text"],
Cell[CellGroupData[{
Cell[1910489, 39320, 177, 6, 303, "Input",
 CellTags->"Cell 9.140"],
Cell[1910669, 39328, 807, 28, 332, "Output",
 CellTags->"Cell 9.138"]
}, Open  ]],
Cell[1911491, 39359, 283, 10, 112, "Text"],
Cell[CellGroupData[{
Cell[1911799, 39373, 125, 4, 303, "Input",
 CellTags->"Cell 9.141"],
Cell[1911927, 39379, 524, 10, 135, "Message",
 CellTags->"Cell 9.139"],
Cell[1912454, 39391, 131, 2, 197, "Output",
 CellTags->"Cell 9.139"]
}, Open  ]],
Cell[1912600, 39396, 347, 12, 196, "Text",
 CellTags->"i:77"],
Cell[CellGroupData[{
Cell[1912972, 39412, 105, 3, 303, "Input",
 CellTags->"Cell 9.142"],
Cell[1913080, 39417, 292, 10, 332, "Output",
 CellTags->"Cell 9.140"]
}, Open  ]],
Cell[1913387, 39430, 417, 16, 250, "Text"],
Cell[CellGroupData[{
Cell[1913829, 39450, 879, 28, 395, "Input",
 CellTags->"Cell 9.143"],
Cell[1914711, 39480, 8225, 142, 1547, "Output",
 CellTags->"Cell 9.141"]
}, Open  ]],
Cell[1922951, 39625, 1345, 44, 462, "Text",
 CellTags->"i:117"],
Cell[1924299, 39671, 705, 26, 428, "Text"],
Cell[CellGroupData[{
Cell[1925029, 39701, 326, 11, 343, "Input",
 CellTags->"Cell 9.144"],
Cell[1925358, 39714, 1008, 34, 343, "Output",
 CellTags->"Cell 9.142"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[1926415, 39754, 69, 1, 43, "Subsubtitle",
 CellTags->{"i:72", "c:51"}],
Cell[1926487, 39757, 712, 23, 126, "Text",
 CellTags->"i:74"],
Cell[CellGroupData[{
Cell[1927224, 39784, 163, 5, 125, "Input",
 CellTags->"Cell 9.145"],
Cell[1927390, 39791, 155, 4, 82, "Output",
 CellTags->"Cell 9.143"]
}, Open  ]],
Cell[1927560, 39798, 133, 1, 47, "Text"],
Cell[CellGroupData[{
Cell[1927718, 39803, 123, 4, 125, "Input",
 CellTags->"Cell 9.146"],
Cell[1927844, 39809, 125, 3, 82, "Output",
 CellTags->"Cell 9.144"]
}, Open  ]],
Cell[1927984, 39815, 553, 20, 93, "Text"],
Cell[CellGroupData[{
Cell[1928562, 39839, 273, 9, 125, "Input",
 CellTags->"Cell 9.147"],
Cell[1928838, 39850, 98, 2, 82, "Output",
 CellTags->"Cell 9.145"]
}, Open  ]],
Cell[1928951, 39855, 860, 28, 140, "Text"],
Cell[CellGroupData[{
Cell[1929836, 39887, 309, 10, 125, "Input",
 CellTags->"Cell 9.148"],
Cell[1930148, 39899, 424, 11, 150, "Output",
 CellTags->"Cell 9.147"]
}, Open  ]],
Cell[1930587, 39913, 1608, 45, 143, "Text"],
Cell[CellGroupData[{
Cell[1932220, 39962, 331, 9, 200, "Input",
 CellTags->"Cell 9.149"],
Cell[1932554, 39973, 152, 3, 82, "Output",
 CellTags->"Cell 9.148"],
Cell[1932709, 39978, 257, 7, 126, "Output",
 CellTags->"Cell 9.148"]
}, Open  ]],
Cell[1932981, 39988, 858, 19, 81, "Text"],
Cell[1933842, 40009, 166, 3, 81, "Text"],
Cell[CellGroupData[{
Cell[1934033, 40016, 308, 10, 125, "Input",
 CellTags->"Cell 9.150"],
Cell[1934344, 40028, 344, 10, 135, "Output",
 CellTags->"Cell 9.149"]
}, Open  ]],
Cell[1934703, 40041, 247, 9, 47, "Text"],
Cell[1934953, 40052, 4314, 136, 337, "Text"]
}, Closed]],
Cell[CellGroupData[{
Cell[1939304, 40193, 77, 1, 43, "Subsubtitle",
 CellTags->{"Ex. 9.9", "c:52"}],
Cell[1939384, 40196, 355, 13, 137, "Text"],
Cell[1939742, 40211, 664, 25, 233, "Text"],
Cell[1940409, 40238, 126, 3, 112, "Text"],
Cell[1940538, 40243, 483, 11, 272, "Text"],
Cell[1941024, 40256, 329, 14, 213, "Text"],
Cell[1941356, 40272, 330, 14, 151, "Text"],
Cell[1941689, 40288, 306, 13, 213, "Text"],
Cell[1941998, 40303, 114, 4, 112, "Text"],
Cell[1942115, 40309, 579, 24, 187, "Text"],
Cell[1942697, 40335, 441, 18, 158, "Text"],
Cell[1943141, 40355, 379, 15, 175, "Text"],
Cell[1943523, 40372, 806, 29, 272, "Text"],
Cell[1944332, 40403, 505, 18, 218, "Text"],
Cell[1944840, 40423, 514, 21, 112, "Text"],
Cell[1945357, 40446, 190, 8, 112, "Text"],
Cell[1945550, 40456, 436, 16, 112, "Text"],
Cell[1945989, 40474, 454, 16, 151, "Text"],
Cell[1946446, 40492, 654, 24, 181, "Text"],
Cell[1947103, 40518, 274, 12, 135, "Text"],
Cell[1947380, 40532, 86, 1, 112, "Text",
 CellTags->"i:118"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[1947515, 40539, 107, 1, 40, "Subtitle",
 CellTags->{"Sec. 9.10", "i:99", "c:53"}],
Cell[1947625, 40542, 16, 0, 90, "Text"],
Cell[CellGroupData[{
Cell[1947666, 40546, 263, 12, 126, "Subsubtitle",
 CellTags->{"i:83", "c:54"}],
Cell[CellGroupData[{
Cell[1947954, 40562, 71, 1, 150, "Section",
 CellTags->"c:55"],
Cell[1948028, 40565, 544, 19, 196, "Text"],
Cell[1948575, 40586, 629, 30, 112, "Text",
 CellTags->"i:81"],
Cell[1949207, 40618, 310, 8, 112, "Text"],
Cell[1949520, 40628, 1601, 57, 425, "Text",
 CellTags->"i:78"],
Cell[1951124, 40687, 524, 14, 196, "Text"],
Cell[1951651, 40703, 539, 16, 218, "Text"],
Cell[CellGroupData[{
Cell[1952215, 40723, 312, 10, 303, "Input",
 CellTags->"Cell 9.151"],
Cell[1952530, 40735, 290, 10, 197, "Output"]
}, Open  ]],
Cell[1952835, 40748, 332, 7, 196, "Text"],
Cell[CellGroupData[{
Cell[1953192, 40759, 250, 8, 303, "Input",
 CellTags->"Cell 9.152"],
Cell[1953445, 40769, 83, 2, 197, "Output"]
}, Open  ]],
Cell[1953543, 40774, 314, 7, 196, "Text"],
Cell[CellGroupData[{
Cell[1953882, 40785, 274, 9, 303, "Input",
 CellTags->"Cell 9.153"],
Cell[1954159, 40796, 1399, 49, 577, "Output",
 CellTags->"Cell 9.152"]
}, Open  ]],
Cell[1955573, 40848, 788, 25, 272, "Text"],
Cell[CellGroupData[{
Cell[1956386, 40877, 100, 3, 303, "Input",
 CellTags->"Cell 9.154"],
Cell[1956489, 40882, 904, 24, 293, "Output"]
}, Open  ]],
Cell[1957408, 40909, 464, 13, 196, "Text",
 CellTags->"i:82"],
Cell[CellGroupData[{
Cell[1957897, 40926, 275, 9, 303, "Input",
 CellTags->"Cell 9.155"],
Cell[1958175, 40937, 904, 24, 293, "Output"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[1959128, 40967, 76, 1, 108, "Section",
 CellTags->"c:56"],
Cell[1959207, 40970, 263, 11, 90, "Text"],
Cell[1959473, 40983, 337, 19, 90, "Text"],
Cell[1959813, 41004, 262, 9, 157, "Text"],
Cell[1960078, 41015, 512, 22, 220, "NE4",
 CellTags->"(9.10.1)"],
Cell[1960593, 41039, 43, 0, 90, "Text"],
Cell[CellGroupData[{
Cell[1960661, 41043, 468, 15, 243, "Input",
 CellTags->"Cell 9.156"],
Cell[1961132, 41060, 242, 8, 158, "Output"]
}, Open  ]],
Cell[1961389, 41071, 2086, 83, 415, "Text"],
Cell[1963478, 41156, 810, 22, 277, "Text",
 CellTags->"i:107"],
Cell[1964291, 41180, 634, 23, 90, "Text"],
Cell[1964928, 41205, 195, 4, 90, "Text"],
Cell[1965126, 41211, 351, 14, 90, "Text"],
Cell[1965480, 41227, 191, 7, 90, "Text"],
Cell[1965674, 41236, 504, 16, 157, "Text"],
Cell[1966181, 41254, 206, 7, 316, "Input",
 CellTags->"Cell 9.157"],
Cell[1966390, 41263, 265, 8, 90, "Text"],
Cell[1966658, 41273, 688, 22, 243, "Input",
 CellTags->"Cell 9.158"],
Cell[1967349, 41297, 190, 2, 90, "Text"],
Cell[1967542, 41301, 529, 17, 243, "Input",
 CellTags->"Cell 9.159"],
Cell[1968074, 41320, 131, 3, 90, "Text"],
Cell[1968208, 41325, 413, 13, 316, "Input",
 CellTags->"Cell 9.160"],
Cell[1968624, 41340, 459, 9, 218, "Text"],
Cell[1969086, 41351, 508, 19, 90, "Text"],
Cell[CellGroupData[{
Cell[1969619, 41374, 945, 28, 462, "Input",
 CellTags->"Cell 9.161"],
Cell[1970567, 41404, 671, 15, 1243, "Output",
 CellTags->"Cell 9.160"]
}, Open  ]],
Cell[1971253, 41422, 208, 4, 157, "Text"],
Cell[1971464, 41428, 562, 15, 218, "Text"]
}, Closed]],
Cell[CellGroupData[{
Cell[1972063, 41448, 83, 1, 108, "Section",
 CellTags->"c:57"],
Cell[1972149, 41451, 194, 6, 90, "Text"],
Cell[1972346, 41459, 483, 19, 90, "Text"],
Cell[1972832, 41480, 1307, 41, 432, "Text"],
Cell[CellGroupData[{
Cell[1974164, 41525, 661, 22, 316, "Input",
 CellTags->"Cell 9.162"],
Cell[1974828, 41549, 45, 1, 158, "Output"]
}, Open  ]],
Cell[1974888, 41553, 342, 10, 157, "Text",
 CellTags->"i:85"],
Cell[CellGroupData[{
Cell[1975255, 41567, 366, 12, 243, "Input",
 CellTags->"Cell 9.163"],
Cell[1975624, 41581, 173, 4, 96, "Message"],
Cell[1975800, 41587, 190, 6, 158, "Output"]
}, Open  ]],
Cell[1976005, 41596, 434, 19, 157, "Text"]
}, Closed]],
Cell[CellGroupData[{
Cell[1976476, 41620, 57, 1, 108, "Section",
 CellTags->"c:58"],
Cell[1976536, 41623, 812, 32, 218, "Text",
 CellTags->"i:110"],
Cell[1977351, 41657, 200, 8, 97, "Text"],
Cell[1977554, 41667, 309, 11, 90, "Text"],
Cell[CellGroupData[{
Cell[1977888, 41682, 490, 14, 316, "Input",
 CellTags->"Cell 9.164"],
Cell[1978381, 41698, 466, 9, 108, "Message",
 CellTags->"Cell 9.164"],
Cell[1978850, 41709, 276, 7, 187, "Output",
 CellTags->"Cell 9.164"],
Cell[1979129, 41718, 470, 10, 108, "Message",
 CellTags->"Cell 9.164"],
Cell[1979602, 41730, 279, 7, 187, "Output",
 CellTags->"Cell 9.164"]
}, Open  ]],
Cell[1979896, 41740, 123, 3, 90, "Text"],
Cell[1980022, 41745, 4133, 147, 413, "Text",
 CellTags->"i:109"],
Cell[1984158, 41894, 50, 1, 78, "Text"],
Cell[1984211, 41897, 2860, 84, 707, "Text"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[1987120, 41987, 79, 1, 82, "Subsubtitle",
 CellTags->{"Ex. 9.10", "c:59"}],
Cell[1987202, 41990, 892, 26, 346, "Text"],
Cell[1988097, 42018, 8038, 134, 891, "Picture"],
Cell[1996138, 42154, 50, 1, 63, "Caption",
 CellTags->"Fig. 9.4"],
Cell[1996191, 42157, 373, 16, 112, "Text"],
Cell[1996567, 42175, 16273, 269, 1268, "Picture"],
Cell[2012843, 42446, 50, 1, 63, "Caption",
 CellTags->"Fig. 9.5"],
Cell[2012896, 42449, 1218, 56, 250, "Text"],
Cell[2014117, 42507, 208, 9, 137, "Text"],
Cell[2014328, 42518, 185, 8, 137, "Text"],
Cell[2014516, 42528, 56, 0, 112, "Text"],
Cell[2014575, 42530, 1895, 70, 346, "Text",
 CellTags->"i:88"],
Cell[2016473, 42602, 1046, 39, 112, "Text"],
Cell[2017522, 42643, 3482, 134, 425, "Text"],
Cell[2021007, 42779, 2700, 99, 550, "Text",
 CellTags->"i:89"],
Cell[2023710, 42880, 233, 7, 303, "Input",
 CellTags->"Cell 9.165"],
Cell[CellGroupData[{
Cell[2023968, 42891, 1454, 49, 577, "Input",
 CellTags->"Cell 9.166"],
Cell[2025425, 42942, 622, 16, 491, "Output",
 CellTags->"Cell 9.166"]
}, Open  ]],
Cell[2026062, 42961, 1640, 59, 307, "Text"],
Cell[2027705, 43022, 522, 19, 363, "Input",
 CellTags->"Cell 9.167"],
Cell[2028230, 43043, 3101, 113, 587, "Text"],
Cell[2031334, 43158, 983, 30, 395, "Input",
 CellTags->"Cell 9.168"],
Cell[2032320, 43190, 502, 16, 196, "Text"],
Cell[2032825, 43208, 1575, 58, 112, "Text"],
Cell[2034403, 43268, 810, 24, 395, "Input",
 CellTags->"Cell 9.169"],
Cell[2035216, 43294, 66, 0, 112, "Text"],
Cell[2035285, 43296, 700, 20, 395, "Input",
 CellTags->"Cell 9.170"],
Cell[2035988, 43318, 1713, 59, 425, "Text"],
Cell[2037704, 43379, 684, 24, 150, "Text"],
Cell[2038391, 43405, 1023, 40, 228, "Text"],
Cell[2039417, 43447, 198, 5, 112, "Text"],
Cell[2039618, 43454, 317, 11, 127, "Text"],
Cell[2039938, 43467, 287, 11, 127, "Text"],
Cell[2040228, 43480, 648, 14, 346, "Text",
 CellTags->"i:112"],
Cell[2040879, 43496, 1072, 36, 293, "Text"],
Cell[2041954, 43534, 2095, 83, 408, "Text",
 CellTags->"i:90"],
Cell[CellGroupData[{
Cell[2044074, 43621, 1425, 46, 577, "Input",
 CellTags->"Cell 9.171"],
Cell[2045502, 43669, 611, 15, 2270, "Output",
 CellTags->"Cell 9.171"]
}, Open  ]],
Cell[2046128, 43687, 787, 25, 272, "Text"],
Cell[2046918, 43714, 6175, 310, 1407, 3617, 266, "GraphicsData", \
"PostScript", "Picture"],
Cell[2053096, 44026, 70, 1, 63, "Caption",
 CellTags->"Fig. 9.6"],
Cell[2053169, 44029, 413, 17, 112, "Text"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[2053631, 44052, 77, 1, 40, "Subtitle",
 CellTags->{"Sec. 9.11", "c:60"}],
Cell[2053711, 44055, 772, 15, 340, "Text"],
Cell[CellGroupData[{
Cell[2054508, 44074, 90, 1, 126, "Subsubtitle",
 CellTags->"c:61"],
Cell[2054601, 44077, 828, 27, 206, "Text",
 CellTags->"i:86"],
Cell[CellGroupData[{
Cell[2055454, 44108, 608, 18, 303, "Input",
 CellTags->"Cell 9.172"],
Cell[2056065, 44128, 8256, 141, 1456, "Output",
 CellTags->"Cell 9.172"]
}, Open  ]],
Cell[2064336, 44272, 2493, 94, 616, "Text",
 CellTags->"i:84"],
Cell[CellGroupData[{
Cell[2066854, 44370, 446, 13, 303, "Input",
 CellTags->"Cell 9.173"],
Cell[2067303, 44385, 304, 7, 197, "Output",
 CellTags->"Cell 9.173"]
}, Open  ]],
Cell[2067622, 44395, 741, 22, 272, "Text",
 CellTags->"i:125"],
Cell[CellGroupData[{
Cell[2068388, 44421, 290, 8, 303, "Input",
 CellTags->"Cell 9.174"],
Cell[2068681, 44431, 237, 4, 228, "Output",
 CellTags->"Cell 9.174"]
}, Open  ]],
Cell[2068933, 44438, 2150, 62, 657, "Text",
 CellTags->"i:102"],
Cell[CellGroupData[{
Cell[2071108, 44504, 965, 21, 303, "Input",
 CellTags->"Cell 9.175"],
Cell[2072076, 44527, 886, 16, 383, "Output",
 CellTags->"Cell 9.175"]
}, Open  ]],
Cell[2072977, 44546, 191, 2, 112, "Text"],
Cell[CellGroupData[{
Cell[2073193, 44552, 373, 9, 303, "Input",
 CellTags->"Cell 9.176"],
Cell[2073569, 44563, 654, 11, 228, "Output",
 CellTags->"Cell 9.176"]
}, Open  ]],
Cell[2074238, 44577, 1006, 20, 272, "Text"],
Cell[2075247, 44599, 265, 7, 112, "Text"],
Cell[CellGroupData[{
Cell[2075537, 44610, 288, 10, 303, "Input",
 CellTags->"Cell 9.177"],
Cell[2075828, 44622, 116, 3, 197, "Output"]
}, Open  ]],
Cell[2075959, 44628, 223, 6, 140, "Text"],
Cell[CellGroupData[{
Cell[2076207, 44638, 340, 11, 378, "Input",
 CellTags->"Cell 9.178"],
Cell[2076550, 44651, 269, 7, 246, "Output",
 CellTags->"Cell 9.178"]
}, Open  ]],
Cell[2076834, 44661, 547, 20, 245, "Text"],
Cell[2077384, 44683, 629, 25, 245, "Text"],
Cell[CellGroupData[{
Cell[2078038, 44712, 280, 10, 378, "Input",
 CellTags->"Cell 9.179"],
Cell[2078321, 44724, 1056, 18, 168, "Message",
 CellTags->"Cell 9.179"],
Cell[2079380, 44744, 303, 9, 246, "Output",
 CellTags->"Cell 9.179"]
}, Open  ]],
Cell[2079698, 44756, 225, 7, 140, "Text"],
Cell[2079926, 44765, 433, 19, 293, "NE5",
 CellTags->"(9.11.1)"],
Cell[2080362, 44786, 44, 0, 140, "Text"],
Cell[CellGroupData[{
Cell[2080431, 44790, 636, 21, 378, "Input",
 CellTags->"Cell 9.180"],
Cell[2081070, 44813, 278, 8, 246, "Output",
 CellTags->"Cell 9.180"]
}, Open  ]],
Cell[2081363, 44824, 728, 17, 432, "Text",
 CellTags->"i:87"],
Cell[2082094, 44843, 886, 34, 266, "Text"],
Cell[CellGroupData[{
Cell[2083005, 44881, 727, 21, 493, "Input",
 CellTags->"Cell 9.181"],
Cell[2083735, 44904, 36073, 604, 2822, "Output",
 CellTags->"Cell 9.181"]
}, Open  ]],
Cell[2119823, 45511, 242, 4, 140, "Text"],
Cell[2120068, 45517, 709, 19, 272, "Text"],
Cell[CellGroupData[{
Cell[2120802, 45540, 836, 23, 493, "Input",
 CellTags->"Cell 9.182"],
Cell[2121641, 45565, 6277, 113, 2822, "Output",
 CellTags->"Cell 9.182"]
}, Open  ]],
Cell[2127933, 45681, 600, 17, 245, "Text"],
Cell[CellGroupData[{
Cell[2128558, 45702, 169, 5, 378, "Input",
 CellTags->"Cell 9.183"],
Cell[2128730, 45709, 42165, 708, 2822, "Output",
 CellTags->"Cell 9.183"]
}, Open  ]],
Cell[2170910, 46420, 560, 15, 340, "Text"],
Cell[CellGroupData[{
Cell[2171495, 46439, 636, 21, 378, "Input",
 CellTags->"Cell 9.184"],
Cell[2172134, 46462, 254, 7, 246, "Output",
 CellTags->"Cell 9.184"]
}, Open  ]],
Cell[2172403, 46472, 441, 7, 432, "Text"],
Cell[2172847, 46481, 235, 10, 140, "Text"],
Cell[2173085, 46493, 5866, 187, 868, "Text",
 CellTags->"Table 9.22"]
}, Closed]],
Cell[CellGroupData[{
Cell[2178988, 46685, 80, 1, 82, "Subsubtitle",
 CellTags->{"i:73", "c:62"}],
Cell[2179071, 46688, 828, 27, 356, "Text",
 CellTags->"i:75"],
Cell[CellGroupData[{
Cell[2179924, 46719, 309, 10, 303, "Input",
 CellTags->"Cell 9.185"],
Cell[2180236, 46731, 114, 2, 197, "Output",
 CellTags->"Cell 9.185"]
}, Open  ]],
Cell[2180365, 46736, 344, 10, 112, "Text"],
Cell[CellGroupData[{
Cell[2180734, 46750, 400, 12, 303, "Input",
 CellTags->"Cell 9.186"],
Cell[2181137, 46764, 119, 2, 228, "Output",
 CellTags->"Cell 9.186"]
}, Open  ]],
Cell[2181271, 46769, 552, 14, 272, "Text",
 CellTags->"i:103"],
Cell[CellGroupData[{
Cell[2181848, 46787, 587, 17, 395, "Input",
 CellTags->"Cell 9.187"],
Cell[2182438, 46806, 2740, 95, 566, "Output",
 CellTags->"Cell 9.187"]
}, Open  ]],
Cell[2185193, 46904, 1944, 63, 722, "Text"]
}, Closed]],
Cell[CellGroupData[{
Cell[2187174, 46972, 72, 1, 82, "Subsubtitle",
 CellTags->{"i:92", "c:63"}],
Cell[2187249, 46975, 707, 23, 272, "Text"],
Cell[2187959, 47000, 696, 25, 218, "Text"],
Cell[CellGroupData[{
Cell[2188680, 47029, 435, 15, 395, "Input",
 CellTags->"Cell 9.188"],
Cell[2189118, 47046, 281, 11, 197, "Output",
 CellTags->"Cell 9.188"]
}, Open  ]],
Cell[2189414, 47060, 940, 28, 346, "Text",
 CellTags->"i:100"],
Cell[2190357, 47090, 915, 29, 272, "Text",
 CellTags->"i:101"],
Cell[CellGroupData[{
Cell[2191297, 47123, 179, 5, 395, "Input",
 CellTags->"Cell 9.189"],
Cell[2191479, 47130, 72, 1, 197, "Output",
 CellTags->"Cell 9.189"],
Cell[2191554, 47133, 91, 2, 197, "Output",
 CellTags->"Cell 9.189"]
}, Open  ]],
Cell[2191660, 47138, 458, 15, 112, "Text"],
Cell[CellGroupData[{
Cell[2192143, 47157, 279, 9, 303, "Input",
 CellTags->"Cell 9.190"],
Cell[2192425, 47168, 16687, 280, 1807, "Output",
 CellTags->"Cell 9.190"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2209149, 47453, 120, 4, 378, "Input",
 CellTags->"Cell 9.191"],
Cell[2209272, 47459, 117, 2, 246, "Output",
 CellTags->"Cell 9.192"]
}, Open  ]],
Cell[2209404, 47464, 1554, 36, 916, "Text",
 CellTags->"i:127"],
Cell[CellGroupData[{
Cell[2210983, 47504, 1144, 36, 950, "Input",
 CellTags->"Cell 9.92"],
Cell[2212130, 47542, 14335, 248, 1650, "Output",
 CellTags->"Cell 9.92"]
}, Open  ]],
Cell[2226480, 47793, 293, 8, 140, "Text"],
Cell[CellGroupData[{
Cell[2226798, 47805, 412, 12, 378, "Input",
 CellTags->"Cell 9.193"],
Cell[2227213, 47819, 8691, 149, 1868, "Output",
 CellTags->"Cell 9.193"]
}, Open  ]],
Cell[2235919, 47971, 1076, 38, 340, "Text",
 CellTags->"i:93"],
Cell[CellGroupData[{
Cell[2237020, 48013, 470, 15, 493, "Input",
 CellTags->"Cell 9.194"],
Cell[2237493, 48030, 6168, 108, 1868, "Output",
 CellTags->"Cell 9.194"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[2243710, 48144, 66, 1, 82, "Subsubtitle",
 CellTags->{"i:95", "c:64"}],
Cell[2243779, 48147, 2835, 100, 470, "Text"],
Cell[CellGroupData[{
Cell[2246639, 48251, 331, 10, 243, "Input",
 CellTags->"Cell 9.195"],
Cell[2246973, 48263, 498, 13, 183, "Output",
 CellTags->"Cell 9.195"]
}, Open  ]],
Cell[2247486, 48279, 408, 13, 175, "Text"],
Cell[2247897, 48294, 380, 9, 157, "Text",
 CellTags->"i:132"],
Cell[2248280, 48305, 3773, 115, 853, "Text"],
Cell[CellGroupData[{
Cell[2252078, 48424, 70, 1, 150, "Section",
 CellTags->"c:82"],
Cell[2252151, 48427, 570, 15, 218, "Text",
 CellTags->"i:128"],
Cell[CellGroupData[{
Cell[2252746, 48446, 103, 3, 243, "Input",
 CellTags->"Cell 9.196"],
Cell[2252852, 48451, 114, 2, 158, "Output",
 CellTags->"Cell 9.196"]
}, Open  ]],
Cell[2252981, 48456, 557, 17, 218, "Text",
 CellTags->"i:129"],
Cell[CellGroupData[{
Cell[2253563, 48477, 143, 4, 243, "Input",
 CellTags->"Cell 9.197"],
Cell[2253709, 48483, 124, 2, 158, "Output",
 CellTags->"Cell 9.197"]
}, Open  ]],
Cell[2253848, 48488, 465, 14, 218, "Text"],
Cell[2254316, 48504, 121, 3, 243, "Input",
 CellTags->"Cell 9.198"],
Cell[2254440, 48509, 212, 7, 90, "Text",
 CellTags->"i:130"],
Cell[CellGroupData[{
Cell[2254677, 48520, 76, 2, 243, "Input",
 CellTags->"Cell 9.199"],
Cell[2254756, 48524, 636, 21, 210, "Output"]
}, Open  ]],
Cell[2255407, 48548, 537, 18, 218, "Text",
 CellTags->"i:131"],
Cell[2255947, 48568, 617, 18, 526, "Text"],
Cell[CellGroupData[{
Cell[2256589, 48590, 165, 5, 243, "Input",
 CellTags->"Cell 9.200"],
Cell[2256757, 48597, 351, 11, 210, "Output"]
}, Open  ]],
Cell[2257123, 48611, 615, 16, 218, "Text"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[2257787, 48633, 79, 1, 82, "Subsubtitle",
 CellTags->{"Ex. 9.11", "c:65"}],
Cell[2257869, 48636, 354, 12, 218, "Text"],
Cell[2258226, 48650, 932, 33, 293, "Text"],
Cell[2259161, 48685, 226, 6, 112, "Text"],
Cell[2259390, 48693, 480, 17, 158, "Text"],
Cell[2259873, 48712, 487, 17, 233, "Text"],
Cell[2260363, 48731, 467, 16, 158, "Text"],
Cell[2260833, 48749, 111, 4, 112, "Text"],
Cell[2260947, 48755, 325, 11, 303, "Input",
 CellTags->"Cell 9.201"],
Cell[2261275, 48768, 506, 19, 196, "Text"],
Cell[2261784, 48789, 341, 11, 112, "Text"],
Cell[2262128, 48802, 128, 4, 112, "Text"],
Cell[2262259, 48808, 721, 26, 303, "Input",
 CellTags->"Cell 9.202"],
Cell[2262983, 48836, 840, 30, 272, "Text",
 CellTags->"i:97"],
Cell[2263826, 48868, 1329, 47, 346, "Text",
 CellTags->"i:124"],
Cell[2265158, 48917, 457, 17, 151, "Text"],
Cell[2265618, 48936, 209, 7, 140, "Text"],
Cell[2265830, 48945, 369, 14, 168, "NE5",
 CellTags->"(9.11.2)"],
Cell[2266202, 48961, 7884, 132, 977, "Picture",
 Evaluatable->False],
Cell[2274089, 49095, 84, 1, 78, "Caption",
 CellTags->"Fig. 9.7"],
Cell[2274176, 49098, 1709, 55, 675, "Text"],
Cell[2275888, 49155, 1232, 41, 445, "Text"],
Cell[2277123, 49198, 1062, 35, 382, "Text",
 CellTags->"i:126"],
Cell[2278188, 49235, 1257, 44, 383, "Text"],
Cell[2279448, 49281, 496, 20, 245, "Text"],
Cell[2279947, 49303, 458, 17, 188, "Text"],
Cell[2280408, 49322, 457, 18, 171, "Text"],
Cell[2280868, 49342, 409, 14, 378, "Input",
 CellTags->"Cell 9.203"],
Cell[2281280, 49358, 146, 6, 140, "Text"],
Cell[2281429, 49366, 422, 13, 245, "Text"],
Cell[2281854, 49381, 389, 15, 213, "Text"],
Cell[2282246, 49398, 253, 8, 140, "Text"],
Cell[2282502, 49408, 724, 24, 218, "NE5",
 CellTags->"(9.11.3)"],
Cell[2283229, 49434, 633, 19, 340, "Text",
 CellTags->"i:138"],
Cell[2283865, 49455, 472, 18, 171, "Text"],
Cell[2284340, 49475, 719, 23, 378, "Input",
 CellTags->"Cell 9.204"],
Cell[2285062, 49500, 272, 10, 140, "Text"],
Cell[2285337, 49512, 1769, 66, 401, "Text"],
Cell[2287109, 49580, 641, 23, 218, "NE5",
 CellTags->"(9.11.4)"],
Cell[2287753, 49605, 253, 7, 140, "Text"],
Cell[2288009, 49614, 850, 31, 210, "Text"],
Cell[2288862, 49647, 623, 16, 340, "Text"],
Cell[2289488, 49665, 601, 23, 210, "Text"],
Cell[2290092, 49690, 107, 3, 140, "Text"],
Cell[2290202, 49695, 742, 26, 235, "NE5",
 CellTags->{"(9.11.5)", "i:134"}],
Cell[2290947, 49723, 284, 9, 140, "Text"],
Cell[2291234, 49734, 774, 28, 383, "Text"],
Cell[2292011, 49764, 263, 11, 188, "Text"],
Cell[2292277, 49777, 354, 14, 218, "Text"],
Cell[2292634, 49793, 268, 11, 197, "Text"],
Cell[2292905, 49806, 445, 15, 291, "Text"],
Cell[2293353, 49823, 442, 13, 245, "Text"],
Cell[2293798, 49838, 805, 30, 453, "NE5",
 CellTags->"(9.11.6)"],
Cell[2294606, 49870, 799, 23, 432, "Text"],
Cell[CellGroupData[{
Cell[2295430, 49897, 882, 27, 493, "Input",
 CellTags->"Cell 9.205"],
Cell[2296315, 49926, 1335, 41, 518, "Output"]
}, Open  ]],
Cell[2297665, 49970, 562, 14, 340, "Text"],
Cell[CellGroupData[{
Cell[2298252, 49988, 226, 7, 378, "Input",
 CellTags->"Cell 9.206"],
Cell[2298481, 49997, 402, 8, 246, "Output"]
}, Open  ]],
Cell[2298898, 50008, 117, 5, 140, "Text"],
Cell[2299018, 50015, 1118, 40, 235, "NE5",
 CellTags->"i:135"],
Cell[2300139, 50057, 547, 19, 272, "Text"],
Cell[CellGroupData[{
Cell[2300711, 50080, 884, 27, 493, "Input",
 CellTags->"Cell 9.207"],
Cell[2301598, 50109, 582, 18, 383, "Output"]
}, Open  ]],
Cell[2302195, 50130, 444, 14, 245, "Text"],
Cell[2302642, 50146, 568, 22, 245, "Text"],
Cell[2303213, 50170, 243, 8, 140, "Text",
 CellTags->"i:136"],
Cell[2303459, 50180, 1414, 48, 235, "NE5"],
Cell[2304876, 50230, 315, 10, 245, "Text"],
Cell[2305194, 50242, 761, 29, 197, "Text"],
Cell[2305958, 50273, 1309, 38, 627, "Text",
 CellTags->"i:137"],
Cell[2307270, 50313, 443, 15, 245, "Text"],
Cell[2307716, 50330, 1991, 66, 737, "Text",
 CellTags->"i:139"],
Cell[2309710, 50398, 1616, 53, 668, "NE5"],
Cell[2311329, 50453, 768, 28, 245, "Text"],
Cell[2312100, 50483, 376, 14, 168, "NE5"],
Cell[2312479, 50499, 426, 17, 140, "Text"],
Cell[2312908, 50518, 1031, 41, 363, "Text"],
Cell[2313942, 50561, 1095, 33, 721, "Input",
 CellTags->"Cell 9.208"],
Cell[2315040, 50596, 3577, 111, 988, "Text",
 CellTags->"i:79"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[2318666, 50713, 139, 6, 40, "Subtitle",
 CellTags->"c:67"],
Cell[2318808, 50721, 16, 0, 425, "Text"],
Cell[2318827, 50723, 201, 4, 745, "Text"],
Cell[2319031, 50729, 379, 12, 745, "Text"],
Cell[CellGroupData[{
Cell[2319435, 50745, 69, 1, 596, "Subsubtitle",
 CellTags->"c:68"],
Cell[2319507, 50748, 16, 0, 663, "Text"],
Cell[2319526, 50750, 723, 23, 3945, "Text"],
Cell[2320252, 50775, 40, 0, 366, "Caption"],
Cell[2320295, 50777, 326, 11, 1941, "Text"],
Cell[2320624, 50790, 55, 0, 366, "Caption"],
Cell[2320682, 50792, 6208, 198, 9178, "Text"],
Cell[2326893, 50992, 59, 0, 366, "Caption"],
Cell[2326955, 50994, 1500, 48, 4015, "Text"],
Cell[2328458, 51044, 55, 0, 366, "Caption"],
Cell[2328516, 51046, 1742, 54, 2152, "Text"],
Cell[2330261, 51102, 49, 0, 366, "Caption"],
Cell[2330313, 51104, 5852, 180, 4765, "Text"],
Cell[2336168, 51286, 46, 0, 366, "Caption"],
Cell[2336217, 51288, 2762, 89, 4765, "Text"],
Cell[2338982, 51379, 51, 0, 366, "Caption"]
}, Closed]],
Cell[CellGroupData[{
Cell[2339070, 51384, 116, 3, 383, "Subsubtitle",
 CellTags->"c:69"],
Cell[2339189, 51389, 16, 0, 6163, "Text"],
Cell[2339208, 51391, 1776, 57, 31300, "Text"],
Cell[2340987, 51450, 96, 2, 3393, "Caption"],
Cell[2341086, 51454, 4553, 143, 48125, "Text"],
Cell[2345642, 51599, 62, 0, 3393, "Caption"],
Cell[2345707, 51601, 700, 35, 24400, "Text"],
Cell[2346410, 51638, 118, 4, 3393, "Caption"],
Cell[2346531, 51644, 2403, 77, 20218, "Text"],
Cell[2348937, 51723, 57, 0, 3393, "Caption"],
Cell[2348997, 51725, 5565, 171, 103481, "Text"],
Cell[2354565, 51898, 74, 0, 3393, "Caption"],
Cell[2354642, 51900, 1785, 56, 25272, "Text"],
Cell[2356430, 51958, 73, 0, 3393, "Caption"]
}, Closed]],
Cell[CellGroupData[{
Cell[2356540, 51963, 82, 1, 383, "Subsubtitle",
 CellTags->"c:70"],
Cell[2356625, 51966, 2186, 72, 26415, "Text"],
Cell[2358814, 52040, 48, 0, 3393, "Caption"],
Cell[2358865, 52042, 4394, 155, 36985, "Text"],
Cell[2363262, 52199, 40, 0, 3393, "Caption"],
Cell[2363305, 52201, 988, 29, 14671, "Text"],
Cell[2364296, 52232, 66, 0, 3393, "Caption"],
Cell[2364365, 52234, 962, 29, 26127, "Text"],
Cell[2365330, 52265, 72, 0, 3393, "Caption"],
Cell[2365405, 52267, 3362, 115, 53313, "Text"],
Cell[2368770, 52384, 73, 0, 3393, "Caption"],
Cell[2368846, 52386, 2179, 70, 31300, "Text"],
Cell[2371028, 52458, 118, 5, 3393, "Caption"]
}, Closed]],
Cell[CellGroupData[{
Cell[2371183, 52468, 57, 1, 383, "Subsubtitle",
 CellTags->"c:72"],
Cell[CellGroupData[{
Cell[2371265, 52473, 52, 1, 10257, "Section",
 CellTags->"c:73"],
Cell[2371320, 52476, 3122, 94, 30800, "Text"],
Cell[2374445, 52572, 45, 0, 3393, "Caption"],
Cell[2374493, 52574, 2499, 83, 26127, "Text"],
Cell[2376995, 52659, 36, 0, 3393, "Caption"],
Cell[2377034, 52661, 7657, 241, 121385, "Text"],
Cell[2384694, 52904, 238, 10, 3393, "Caption"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2384969, 52919, 63, 1, 10257, "Section",
 CellTags->"c:74"],
Cell[2385035, 52922, 2321, 71, 30441, "Text"],
Cell[2387359, 52995, 46, 0, 3393, "Caption"],
Cell[2387408, 52997, 4017, 118, 93993, "Text"],
Cell[2391428, 53117, 156, 6, 3393, "Caption"],
Cell[2391587, 53125, 133, 1, 6163, "Text"],
Cell[CellGroupData[{
Cell[2391745, 53130, 1211, 34, 21838, "Input",
 CellTags->"Cell 9.209"],
Cell[2392959, 53166, 39913, 701, 118797, "Output",
 CellTags->"Cell 9.209"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[2432921, 53873, 85, 3, 10257, "Section",
 CellTags->"c:75"],
Cell[2433009, 53878, 1511, 44, 14671, "Text"],
Cell[2434523, 53924, 47, 0, 3393, "Caption"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2434607, 53929, 60, 1, 10257, "Section",
 CellTags->"c:76"],
Cell[2434670, 53932, 16, 0, 6163, "Text"],
Cell[2434689, 53934, 6402, 198, 57788, "Text"],
Cell[2441094, 54134, 57, 0, 3393, "Caption"],
Cell[2441154, 54136, 189, 2, 6163, "Text"],
Cell[CellGroupData[{
Cell[2441368, 54142, 273, 10, 16722, "Input",
 CellTags->"Cell 9.210"],
Cell[2441644, 54154, 188, 5, 10840, "Output",
 CellTags->"9.210"]
}, Open  ]],
Cell[2441847, 54162, 285, 7, 6163, "Text"],
Cell[CellGroupData[{
Cell[2442157, 54173, 790, 25, 21838, "Input",
 CellTags->"Cell 9.211"],
Cell[2442950, 54200, 1502, 44, 83546, "Output",
 CellTags->"9.211"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[2444501, 54250, 54, 1, 10257, "Section",
 CellTags->"c:77"],
Cell[2444558, 54253, 18, 0, 6163, "Text"],
Cell[2444579, 54255, 3217, 100, 43315, "Text"],
Cell[2447799, 54357, 62, 0, 3393, "Caption"],
Cell[2447864, 54359, 3608, 107, 49720, "Text"],
Cell[2451475, 54468, 71, 2, 3393, "Caption"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2451583, 54475, 54, 1, 10257, "Section",
 CellTags->"c:78"],
Cell[2451640, 54478, 11492, 356, 99845, "Text"],
Cell[2463135, 54836, 134, 4, 3393, "Caption"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[2463318, 54846, 111, 1, 383, "Subsubtitle"],
Cell[2463432, 54849, 5865, 166, 7266, "Text"],
Cell[2469300, 55017, 126, 1, 663, "Text"],
Cell[CellGroupData[{
Cell[2469451, 55022, 592, 15, 1797, "Input",
 CellTags->"Cell 9.212"],
Cell[2470046, 55039, 488, 11, 1628, "Output",
 CellTags->"9.212"]
}, Open  ]],
Cell[2470549, 55053, 206, 4, 663, "Text"],
Cell[CellGroupData[{
Cell[2470780, 55061, 154, 4, 1797, "Input",
 CellTags->"Cell 9.213"],
Cell[2470937, 55067, 131, 2, 1453, "Print",
 CellTags->{"9.213", "Info3460639382-8506922"}]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[2471117, 55075, 110, 2, 383, "Subsubtitle",
 CellTags->"c:79"],
Cell[CellGroupData[{
Cell[2471252, 55081, 38, 0, 1103, "Section"],
Cell[2471293, 55083, 2192, 67, 3878, "Text"],
Cell[2473488, 55152, 39, 0, 366, "Caption"],
Cell[2473530, 55154, 1883, 59, 2152, "Text"],
Cell[2475416, 55215, 57, 0, 366, "Caption"],
Cell[2475476, 55217, 5705, 183, 5897, "Text"],
Cell[2481184, 55402, 58, 0, 366, "Caption"]
}, Closed]],
Cell[CellGroupData[{
Cell[2481279, 55407, 58, 1, 796, "Section",
 CellTags->"c:80"],
Cell[2481340, 55410, 1222, 36, 2746, "Text"],
Cell[2482565, 55448, 45, 0, 366, "Caption"],
Cell[2482613, 55450, 3318, 107, 6347, "Text"],
Cell[2485934, 55559, 38, 0, 366, "Caption"],
Cell[2485975, 55561, 2065, 62, 2746, "Text"],
Cell[2488043, 55625, 61, 0, 366, "Caption"],
Cell[CellGroupData[{
Cell[2488129, 55629, 428, 14, 2035, "Input",
 CellTags->"Cell 9.209"],
Cell[2488560, 55645, 882, 32, 1816, "Output",
 CellTags->"Cell 9.209"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[2489491, 55683, 61, 1, 796, "Section",
 CellTags->"c:81"],
Cell[2489555, 55686, 1050, 32, 1553, "Text"],
Cell[2490608, 55720, 1507, 44, 1553, "Text"],
Cell[2492118, 55766, 73, 0, 366, "Caption"],
Cell[CellGroupData[{
Cell[2492216, 55770, 366, 12, 1797, "Input",
 CellTags->"Cell 9.210"],
Cell[2492585, 55784, 434, 15, 1453, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2493056, 55804, 558, 18, 1797, "Input",
 CellTags->"Cell 9.211"],
Cell[2493617, 55824, 235, 8, 1453, "Output"]
}, Open  ]],
Cell[2493867, 55835, 1705, 49, 2093, "Text"],
Cell[2495575, 55886, 91, 2, 366, "Caption"],
Cell[CellGroupData[{
Cell[2495691, 55892, 770, 25, 2746, "Input",
 CellTags->"Cell 9.212"],
Cell[2496464, 55919, 459, 16, 1165, "Output",
 CellTags->"Cell 9.212"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2496960, 55940, 176, 6, 1797, "Input",
 CellTags->"Cell 9.213"],
Cell[2497139, 55948, 321, 12, 1165, "Output",
 CellTags->"Cell 9.213"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2497497, 55965, 250, 8, 1797, "Input",
 CellTags->"Cell 9.214"],
Cell[2497750, 55975, 31391, 521, 8635, "Output",
 CellTags->"Cell 9.214"]
}, Open  ]]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[2529202, 56503, 153, 3, 383, "Subsubtitle",
 CellTags->"c:79"],
Cell[2529358, 56508, 2068, 52, 1678, "Text"],
Cell[2531429, 56562, 142, 1, 235, "Caption"],
Cell[CellGroupData[{
Cell[2531596, 56567, 263, 7, 1151, "Input",
 CellTags->"Cell 9.215"],
Cell[2531862, 56576, 19463, 407, 14453, "Output",
 CellTags->"Cell 9.215"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2551362, 56988, 83257, 1523, 1391, "WolframAlphaShortInput",
 CellTags->"Cell 9.216"],
Cell[2634622, 58513, 2723, 65, 1340, "Output",
 CellTags->"Cell 9.216"]
}, Open  ]]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[2637406, 58585, 49, 1, 40, "Subtitle",
 CellTags->"refs"],
Cell[2637458, 58588, 321, 9, 5302245, "Text"]
}, Closed]]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
